@use "sass:math";

/*
 * Turf Block
 */
@mixin turf_block($turf_width, $turf_height) {

  $turf_margin: 20px;
  $connector_height: $turf_height / 10;
  $connector_width: $turf_margin * 2;

  --turf-block-width: 135px;
  --turf-block-height: 125px;



  transition: filter 0.1s;
  cursor: pointer;

  &:hover {
    filter: brightness(0.8);
    opacity: 0.9;
  }


  width: var(--turf-block-width);
  height: var(--turf-block-height);
  background-color: var(--blades-grey-bright);
  position: relative;
  margin: $turf_margin;
  flex-grow: initial;

  &.turf-selected {
    background-color: var(--blades-grey);
    .connector {
      background-color: var(--blades-grey);
      z-index: 1;
    }
  }

  .connector {

    position: absolute;
    display: block;
    background-color: var(--blades-grey-bright);

    &.right,
    &.left {
      width: $turf_margin * 2;
      height: calc(var(--turf-block-height) / 5);
      top: calc(var(--turf-block-height) / 2 - var(--turf-block-height) / 10);
    }
    &.left {
      left: -$turf_margin * 2;
    }
    &.right {
      left: var(--turf-block-width);
    }

    &.top,
    &.bottom {
      height: $turf_margin * 2;
      width: calc(var(--turf-block-height) / 5);
      left: calc(var(--turf-block-width) / 2 - var(--turf-block-height)  / 10);
    }
    &.top {
      top: -$turf_margin * 2;
    }
    &.bottom {
      top: var(--turf-block-height);
    }
  }

  .turf-name {
    border: none;
    border-radius: 0px;
    text-align: center;
    font-weight: bold;
    box-shadow: none;
    top: -10px;
    position: relative;
    margin: 0;
    z-index: 3;
    height: 18px;
  }

  .turf-description {
    border: none;
    background: none;
    resize: none;
    width: var(--turf-block-width);
    text-align: center;
    min-height: auto;
    font-size: 12px;
    height: calc(100% - 18px);
  }

  input[type="checkbox"] {
    transform: scale(1);
  }

  .turf-control {
    &.turf-select {
      position: absolute;
      top: -7px;
      left: -15px;
    }
  }
}
@mixin generate-clock-clip($val, $max) {
  $angle: 360deg / $max;

  &[data-value='#{$val}'][data-max='#{$max}'] > *:not(.clock-frame) {
    // Begin clip path at center, move up to "noon".
    $clip-path: "polygon(50% 50%, 50% 0%";

    @if $val >= 1 * ($max / 8) {
      // If $val as reached the top right corner (1/8th of the clock), add that corner.
      $clip-path: $clip-path + ", 100% 0%";
    }

    @if $val > 3 * ($max / 8) {
      // If $val is farther along than the bottom right corner (3/8th of the clock), add that corner.
      $clip-path: $clip-path + ", 100% 100%";
    }

    @if $val > 5 * ($max / 8) {
      // If $val is farther along than the bottom left corner (5/8th of the clock), add that corner.
      $clip-path: $clip-path + ", 0% 100%";
    }

    @if $val > 7 * ($max / 8) {
      // If $val is farther along than the top left corner (7/8th of the clock), add that corner.
      $clip-path: $clip-path + ", 0% 0%";
    }

    // Determine the position on the square perimeter that corresponds to the desired angle.
    @if $val * $angle <= 90deg {
      $clip-path: $clip-path + ", calc(50% + 50% * tan(#{$val * $angle})) 0%";
    } @else if $val * $angle <= 180deg {
      $clip-path: $clip-path + ", 100% calc(50% + 50% * tan(#{$val * $angle - 90deg}))";
    } @else if $val * $angle <= 270deg {
      $clip-path: $clip-path + ", calc(50% - 50% * tan(#{$val * $angle - 180deg})) 100%";
    } @else {
      $clip-path: $clip-path + ", 0% calc(50% - 50% * tan(#{$val * $angle - 270deg}))";
    }

    // Complete the polygon by returning to the center.
    $clip-path: $clip-path + ", 50% 50%)";
    clip-path: unquote($clip-path);
  }
}