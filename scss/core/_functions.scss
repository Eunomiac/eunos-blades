@use "sass:math";
@use "sass:color";
$remPerPixel: 0.0625rem;

@function toRem($pixelSize) {
  @if not unitless($pixelSize) {
    $pixelSize: math.div($pixelSize, 1px);
  }
  @return $pixelSize * $remPerPixel;
}

@function zLevel($delta: 0) {
  $z-index-base: 2;
  @return $z-index-base + $delta;
}

@function getYIQScaledColor($main-color, $target-y: 0.6) {
  // Extract RGB values from $main-color
  $r: red($main-color);
  $g: green($main-color);
  $b: blue($main-color);

  // Calculate yiq values
  $y: $target-y;
  $i: math.div((0.596 * $r) + (-0.275 * $g) + (-0.321 * $b), 255);
  $q: math.div((0.212 * $r) + (-0.523 * $g) + ( 0.311 * $b), 255);

  // Convert back to RGB with new target yiq
  $r: ($y + ( 0.956 * $i) + ( 0.621 * $q)) * 255;
  $g: ($y + (-0.272 * $i) + (-0.647 * $q)) * 255;
  $b: ($y + (-1.105 * $i) + ( 1.702 * $q)) * 255;

  // bounds-checking
  @if ($r < 0){ $r: 0; } @else if ($r > 255){ $r: 255}
  @if ($g < 0){ $g: 0; } @else if ($g > 255){ $g: 255}
  @if ($b < 0){ $b: 0; } @else if ($b > 255){ $b: 255}

  @return rgb($r, $g, $b);
}

// @function getYIQScaledColor($main-color, $target-yiq: 0.6) {
//   // Extract RGB values from $main-color
//   $r: red($main-color);
//   $g: green($main-color);
//   $b: blue($main-color);
//    // Calculate the current Y component in the YIQ color space
//   $current-y: (0.299 * $r + 0.587 * $g + 0.114 * $b);
//    // Calculate the scaling factor to reach the target Y
//   $scale: $target-yiq / $current-y;
//    // Scale the RGB values of the original color by this factor
//   $r: $r * $scale;
//   $g: $g * $scale;
//   $b: $b * $scale;
//    // Adjust the RGB values to ensure they are within [0, 255]
//   $max-value: max($r, $g, $b);
//   $min-value: min($r, $g, $b);
//   $adjustment: $max-value - 255;
//   $r: if($adjustment > 0, $r - $adjustment, $r);
//   $g: if($adjustment > 0, $g - $adjustment, $g);
//   $b: if($adjustment > 0, $b - $adjustment, $b);
//    // Calculate the new Y component after adjustments
//   $new-y: (0.299 * $r + 0.587 * $g + 0.114 * $b);
//    // Log the main color, resulting color, and Y-value of the resulting color
//   @debug "Color: #{$main-color} | Result: #{rgb($r, $g, $b)} | Y-value: #{$new-y}";
//    // Return the resulting color
//   @return rgb($r, $g, $b);
// }

@function calculate-sum($list) {
  $sum: 0;
  @each $value in $list {
    $sum: $sum + $value;
  }
  @return $sum;
}