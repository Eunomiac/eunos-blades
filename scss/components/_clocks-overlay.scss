$key-sizes: (
  1: (height: 455px, width: 202px),
  2: (height: 624.438px, width: 202px),
  3: (height: 915px, width: 280px),
  4: (height: 1140px, width: 376px),
  5: (height: 1140px, width: 376px),
  6: (height: 1150px, width: 376px)
);
$clock-positions: (
  1: (
    1: (x: 101px, y: 99px)
  ),
  2: (
    1: (x: 101px, y: 99px),
    2: (x: 101px, y: 279px)
  ),
  3: (
    1: (x: 140px, y: 99px),
    2: (x: 74px, y: 211px),
    3: (x: 206px, y: 211px)
  ),
  4: (
    1: (x: 188px, y: 99px),
    2: (x: 101px, y: 185px),
    3: (x: 275px, y: 185px),
    4: (x: 188px, y: 273px)
  ),
  5: (
    1: (x: 188px, y: 99px),
    2: (x: 101px, y: 185px),
    3: (x: 275px, y: 185px),
    4: (x: 188px, y: 273px),
    5: (x: 188px, y: 452px)
  ),
  6: (
    1: (x: 188px, y: 99px),
    2: (x: 101px, y: 185px),
    3: (x: 275px, y: 185px),
    4: (x: 188px, y: 273px),
    5: (x: 188px, y: 452px),
    6: (x: 188px, y: 683px)
  )
);

& {
  --top-shift: 50px;
  --left-shift: 75px;
  --key-scale: 0.33;
  --alternating-top-shift: 120px;
  --clock-frame-size: 108px;
  --clock-glow-size: calc(var(--clock-frame-size) * 3);
  --clock-glow-correction: -37px;

  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-start;
  align-items: flex-start;

  transform-origin: 0 0;
  transform: scale(var(--key-scale));

  position: absolute !important;
  width: calc((100% / var(--key-scale)) - var(--left-shift));
  height: calc((100% / var(--key-scale)) - var(--top-shift));
  top: var(--top-shift);
  left: var(--left-shift);
  pointer-events: none;
  z-index: 50;

  svg, svg defs {
    * { transform-origin: 50% 50% }

    .segmented {
      --rotation-step-size: calc(360deg / var(--rotation-steps));
      --segment-scale: 1;
    }
    clipPath.segmented { --segment-scale: 2 }

    @each $clockSize in (1, 2, 3, 4, 5, 6, 8, 10, 12) {
      .segmented[data-size="#{$clockSize}"] { --rotation-steps: #{$clockSize} }
    }

    .segmented > use {
      transform: scale(var(--segment-scale)) rotate(var(--segment-rotation));

      @for $i from 1 through 12 {
        &:nth-child(#{$i}) { --segment-rotation: calc(#{$i - 1} * var(--rotation-step-size)) }
      }
    }
  }

  svg, .clock, img { position: absolute }

  .clock-key {
    position: relative;
    margin: 0 20px;
    height: var(--key-height);
    width: var(--key-width);

    & > * { position: absolute }

    .key-label { display: none }

    .clock-label-container {
      display: none;
    }

    .clock-image-container {
      height: var(--key-height);
      width: var(--key-width);

      .key-image {
        height: var(--key-height);
        width: var(--key-width);
        z-index: 1;
        overflow: visible;
        filter:
          drop-shadow(0px 0px 10px var(--blades-white-bright))
          drop-shadow(30px 30px 10px var(--blades-black-dark))
          brightness(0.5);


        .key-bg {
          fill: var(--blades-black);
        }

        .metallic-overlay {
          height: var(--key-height);
          width: var(--key-width);
          filter: url(#metallicFilter) blur(1px);
          fill: var(--blades-grey-dark);
        }
      }
      @import "./clocks";
    }

    @each $key, $clocks in $clock-positions {
      &[data-size="#{$key}"] {
        --key-height: #{map-get(map-get($key-sizes, $key), "height")};
        --key-width: #{map-get(map-get($key-sizes, $key), "width")};
        @each $clock, $pos in $clocks {
          .clock:nth-of-type(#{$clock}) {
            left: map-get($pos, "x");
            top: map-get($pos, "y");
          }
        }
      }
    }

    &:nth-child(2n+1) { top: var(--alternating-top-shift) }
  }
}