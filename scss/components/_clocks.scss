@use "sass:math";

@function calculate-angle($val, $max) {
  // Calculate the angle-size of each segment
  $segment-size: 360 / $max;
  // Calculate the total angle between the origin line pointing upwards, including $val segments
  $angle: $val * $segment-size;
  @debug "caclulate-angle(#{$val}, #{$max}) = #{$angle}.";
  @return $angle;
}

@function calculate-intersection($angle) {
  // Square properties
  $size: 100%;
  $radius: 0.5 * $size;

  // Convert angle to radians
  $angle-rad: $angle * 3.1415 / 180;

  // Initialize x and y
  $x: 0;
  $y: 0;

  // Calculate intersection point

  @if $angle > 315 or $angle <= 45 {
    // Top side
    $x: $radius + $radius * math.sin($angle-rad);
    $y: 0;
  } @else if $angle > 45 and $angle <= 135 {
    // Right side
    $x: $size;
    $y: 100% - ($radius + $radius * math.cos($angle-rad));
  } @else if $angle > 135 and $angle <= 225 {
    // Bottom side
    $x: 100% - ($radius - $radius * math.sin($angle-rad));
    // $x: $radius - $radius * math.cos($angle-rad);
    $y: $size;
  } @else if $angle > 225 and $angle <= 315 {
    // Left side
    $x: 0;
    $y: $radius - $radius * math.cos($angle-rad);
  }

  @debug "For a square of $size: #{$size}, the intersection of $angle:#{$angle} is {x:#{$x}, y:#{$y}}.";

  // Return the intersection point
  @return ($x $y);
}

@function calculate-polygon($val, $max) {
  $size: 100%;
  // Define the square's center
  $center: 50%;

  // Define the initial polygon points
  $polygon: ($center $center), ($center 0);

  // Get the angle of intersection
  $angle: calculate-angle($val, $max);

  // Corner Check 1: The polygon includes the top-right corner
  @if $angle >= 45 {
    $polygon: append($polygon, ($size 0));
  }
  // Corner Check 2: The polygon includes the bottom-right corner
  @if $angle >= 135 {
    $polygon: append($polygon, ($size $size));
  }
  // Corner Check 3: The polygon includes the bottom-left corner
  @if $angle >= 225 {
    $polygon: append($polygon, (0 $size));
  }
  // Corner Check 4: The polygon includes the top-left corner
  @if $angle >= 315 {
    $polygon: append($polygon, (0 0));
  }

  // Add the intersection point
  $polygon: append($polygon, calculate-intersection($angle));

  // Return to the center
  $polygon: append($polygon, ($center $center));

  // Return the polygon points
  @return $polygon;
}

@mixin generate-clock-clip($val, $max, $size) {
  &[data-value="#{$val}"][data-max="#{$max}"] .clock-glow,
  &[data-value="#{$val}"][data-max="#{$max}"] .clock-fill {
    clip-path: polygon(#{calculate-polygon($val, $max)});
    // Begin clip path at center, move up to "noon".
    // $clip-path: "polygon(50% 50%, 50% 0%";

    // @if $val >= 1 * math.div($max, 8) {
    //   // If $val as reached the top right corner (1/8th of the clock), add that corner.
    //   $clip-path: $clip-path + ", 100% 0%";
    // }

    // @if $val > 3 * math.div($max, 8) {
    //   // If $val is farther along than the bottom right corner (3/8th of the clock), add that corner.
    //   $clip-path: $clip-path + ", 100% 100%";
    // }

    // @if $val > 5 * math.div($max, 8) {
    //   // If $val is farther along than the bottom left corner (5/8th of the clock), add that corner.
    //   $clip-path: $clip-path + ", 0% 100%";
    // }

    // @if $val > 7 * math.div($max, 8) {
    //   // If $val is farther along than the top left corner (7/8th of the clock), add that corner.
    //   $clip-path: $clip-path + ", 0% 0%";
    // }

    // // Determine the position on the square perimeter that corresponds to the desired angle.
    // @if $val * $angle <= 90deg {
    //   $clip-path: $clip-path + ", calc(50% + 50% * tan(#{$val * $angle})) 0%";
    // } @else if $val * $angle <= 180deg {
    //   $clip-path: $clip-path + ", 100% calc(50% + 50% * tan(#{$val * $angle - 90deg}))";
    // } @else if $val * $angle <= 270deg {
    //   $clip-path: $clip-path + ", calc(50% - 50% * tan(#{$val * $angle - 180deg})) 100%";
    // } @else {
    //   $clip-path: $clip-path + ", 0% calc(50% - 50% * tan(#{$val * $angle - 270deg}))";
    // }

    // // Complete the polygon by returning to the center.
    // $clip-path: $clip-path + ", 50% 50%)";
    // clip-path: unquote($clip-path);
  }
}

& {

  $key-sizes: (
    1: (height: 455px, width: 202px, clocksCenterX: 101px, clocksCenterY: 99px, labelTop: 0px, inactiveKeyTop: -350px, inactiveLabelLeft: -40px, inactiveLabelBottom: 50px),
    2: (height: 624.438px, width: 202px, clocksCenterX: 101px, clocksCenterY: 189px, labelTop: 100px, inactiveKeyTop: -520px, inactiveLabelLeft: -40px, inactiveLabelBottom: 50px),
    3: (height: 915px, width: 280px, clocksCenterX: 140px, clocksCenterY: 169px, labelTop: 0px, inactiveKeyTop: -815px, inactiveLabelLeft: -10px, inactiveLabelBottom: 50px),
    4: (height: 1140px, width: 376px, clocksCenterX: 188px, clocksCenterY: 185px, labelTop: -100px, inactiveKeyTop: -925px, inactiveLabelLeft: 40px, inactiveLabelBottom: 150px),
    5: (height: 1140px, width: 376px, clocksCenterX: 188px, clocksCenterY: 185px, labelTop: 0px, inactiveKeyTop: -1025px, inactiveLabelLeft: 40px, inactiveLabelBottom: 50px),
    6: (height: 1150px, width: 376px, clocksCenterX: 188px, clocksCenterY: 185px, labelTop: 250px, inactiveKeyTop: -1025px, inactiveLabelLeft: 40px, inactiveLabelBottom: 50px)
  );
  $clock-positions: (
    1: (
      0: (x: 101px, y: 99px)
    ),
    2: (
      0: (x: 101px, y: 99px),
      1: (x: 101px, y: 279px)
    ),
    3: (
      0: (x: 140px, y: 99px),
      1: (x: 74px, y: 211px),
      2: (x: 206px, y: 211px)
    ),
    4: (
      0: (x: 188px, y: 99px),
      1: (x: 101px, y: 185px),
      2: (x: 275px, y: 185px),
      3: (x: 188px, y: 273px)
    ),
    5: (
      0: (x: 188px, y: 99px),
      1: (x: 101px, y: 185px),
      2: (x: 275px, y: 185px),
      3: (x: 188px, y: 273px),
      4: (x: 188px, y: 452px)
    ),
    6: (
      0: (x: 188px, y: 99px),
      1: (x: 101px, y: 185px),
      2: (x: 275px, y: 185px),
      3: (x: 188px, y: 273px),
      4: (x: 188px, y: 452px),
      5: (x: 188px, y: 683px)
    )
  );

  $label-positions: (
    1: (
      0: (x: 0, y: 0px, align: center, width: 100%),
    ),
    2: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: 0, y: 325px, align: center, width: 100%),
    ),
    3: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -20px, y: 110px, align: right, width: 50%),
      2: (x: 220px, y: 265px, align: left, width: 50%),
    ),
    4: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%)
    ),
    5: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%),
      4: (x: 0, y: 500px, align: center, width: 100%),
    ),
    6: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%),
      4: (x: 0, y: 500px, align: center, width: 100%),
      5: (x: 0, y: 730px, align: center, width: 100%),
    )
  );

  .clock-key-container {
    position: relative;
    perspective: 1000px;
    transform-style: preserve-3d;

    * { perspective: 1000px; transform-style: preserve-3d; }

    // background: rgba(255, 0, 255, 0.25);
    // outline: 2px dotted rgb(255, 0, 255);

    @each $key, $clocks in $clock-positions {
      &[data-size="#{$key}"] {
        --key-height: #{map-get(map-get($key-sizes, $key), "height")};
        --key-width: #{map-get(map-get($key-sizes, $key), "width")};

        .clock-key {

          .key-label {
            top: map-get(map-get($key-sizes, $key), "labelTop");
          }

          .key-image-container {
            @each $clock, $pos in $clocks {
              .clock-container:nth-of-type(#{$clock + 1}) {
                left: map-get($pos, "x");
                top: map-get($pos, "y");
              }
            }
          }
        }
      }
    }

    .clock-key {
      visibility: hidden;

      position: absolute;
      display: block;
      height: 100px;
      width: 100px;

      transform: translate(-50%, -50%);
      top: 50%;
      left: 50%;

      // background: rgba(0, 255, 255, 0.25);
      // outline: 2px dotted rgb(0, 255, 255);

      & > * { position: absolute }

      .key-label {
        font-family: var(--font-decorative);
        font-size: toRem(64px);
        top: unset;
        z-index: 20;
        width: 100%;
        pointer-events: all;
        color: var(--blades-white-bright);
        text-shadow:
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark);
        // white-space: nowrap;
        // rotate: -30deg;
        left: 0;
        position: absolute;

        &:hover {
          color: var(--blades-gold-bright) !important;
        }
      }

      .key-image-container {
        height: var(--key-height);
        width: var(--key-width);

        .key-image {
          height: var(--key-height);
          width: var(--key-width);
          z-index: 1;
          overflow: visible;
          filter:
            drop-shadow(0px 0px 10px var(--blades-white-bright))
            drop-shadow(30px 30px 10px var(--blades-black-dark))
            brightness(0.5);


          .key-bg {
            fill: var(--blades-black);
          }

          .metallic-overlay {
            height: var(--key-height);
            width: var(--key-width);
            filter: url(#metallicFilter) blur(1px);
            fill: var(--blades-grey-dark);
          }
        }
      }
    }
  }

  /* CLOCKS */
  .clock-container {
    position: absolute;
    top: 0px;
    left: 0px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: visible;
    height: var(--clock-size, 110px);
    width: var(--clock-size, 110px);
    transform: translate(-50%, -50%) !important;

    .clock {
      position: relative;
      overflow: visible;
      pointer-events: all !important;

      &,
      & * {
        height: var(--clock-size, 110px);
        width: var(--clock-size, 110px);
        pointer-events: none;
      }

      .clock-frame,
      .clock-fill,
      .clock-glow {
        position: absolute;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
      }

      .clock-label {
        position: absolute;
        transform: translate(-50%, -50%);
        top: 50%;
        left: 50%;
        z-index: 5;
        font-size: 24px;
        font-family: var(--font-emphasis-narrow);
        font-weight: bold;
        color: var(--blades-white-bright);
        text-shadow: var(--text-shadow-dark-strong);
        text-align: center;
        white-space: nowrap;

      }

      .clock-frame { z-index: 3; }
      .clock-fill { z-index: 2; }
      .clock-glow { z-index: 4; }

      .clock-glow {
        transform-origin: 50% 50%;
        scale: var(--clock-glow-mult, 3);
        // top: ;
        // top: var(--clock-glow-shift);
        // translate: 0 var(--clock-glow-correction);

        // background: url("systems/eunos-blades/assets/animations/clock-flare.webp");
        background-repeat: no-repeat;
        background-position: center calc(50% - var(--clock-glow-shift, 7%));
        background-size: cover;

        &.clock-glow-white {
          background-image: url("../assets/animations/clock-flare-white.webp");
        }
        &.clock-glow-red {
          background-image: url("../assets/animations/clock-flare-red.webp");
        }
        &.clock-glow-yellow {
          background-image: url("../assets/animations/clock-flare-yellow.webp");
        }
        &.clock-glow-blue {
          background-image: url("../assets/animations/clock-flare-blue.webp");
        }
      }

      // Generate clip-paths for all possible combinations of val and max
      @for $max from 2 through 12 {
        @for $val from 1 through $max {
          @include generate-clock-clip($val, $max, 400px);
        }
      }

    }
  }

  /* CONTROLS */
  .clock-key-controls,
  .clock-controls {
    --row-height: 25px;
    --row-gap: 2px;
    position: absolute;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    gap: var(--row-gap);
    z-index: 50;
    border-radius: 5px;
    height: calc(var(--row-height) * 3 + var(--row-gap) * 2);
    width: 100%;
    transform: translate(-50%, -50%);
    top: 50%;
    left: 50%;

    &.clock-key-controls {
      position: absolute;
      top: 80%;
      left: 50%;
      width: 80%;
      transform: translate(-50%, 0%);
      height: calc(var(--row-height) * 3 + var(--row-gap) * 2);
    }

    .clock-button { pointer-events: all;}

    i {
      opacity: 1;
      // color: var(--blades-gold-bright);
      text-shadow: var(--text-shadow-dark-strong);
      pointer-events: none;
    }

    select, input {
      pointer-events: all;
    }

    select {
      width: auto;
      flex-basis: auto;
      max-width: 75%;
      flex-grow: 1;
      flex-shrink: 1;
      line-height: var(--row-height);
      appearance: none; /* Remove default select dropdown arrow */
      -webkit-appearance: none; /* Remove default select dropdown arrow for Chrome and Safari */
      -moz-appearance: none; /* Remove default select dropdown arrow for Firefox */
      background: transparent; /* Make the select element transparent to hide the arrow */
    }

    &:not(.controls-hidden) {
      background: var(--blades-black-fade);
    }

    .clock-controls-row, .clock-key-controls-row {
      display: flex;
      flex-direction: row;
      justify-content: space-evenly;
      align-items: center;
      height: var(--row-height);
      max-height: var(--row-height);
      width: 100%;

      * {
        // pointer-events: all !important;
        height: var(--row-height);
        max-height: var(--row-height);
        width: unset;
        position: static;
      }

      &.toggle-controls-row {
        position: absolute;
        top: calc(-1 * var(--row-height));

        &.clock-key-controls-row {
          bottom: calc(-2 * var(--row-height));
          top: unset;
        }
      }

      &.name-row {
        width: 100%;

        > .clock-controls-name {
          height: var(--row-height);
          max-height: var(--row-height);
          width: 100%;
          pointer-events: all !important;
        }
      }

      &.select-row {
        justify-content: stretch;
      }

      &.button-row {
        .toggle-icon {
          // width: auto;

          i { width: var(--row-height); }

          .tooltip { position: absolute; }
        }
      }
    }
  }

}
