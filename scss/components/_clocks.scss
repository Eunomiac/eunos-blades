@use "sass:math";

@function calculate-angle($val, $max) {
  // Calculate the angle-size of each segment
  $segment-size: math.div(360, $max);
  // Calculate the total angle between the origin line pointing upwards, including $val segments
  $angle: $val * $segment-size;
  // @debug "caclulate-angle(#{$val}, #{$max}) = #{$angle}.";
  @return $angle;
}


@function calculate-intersection($angle) {
  // Square properties
  $size: 100%;

  // Calculate relative angle in terms of single side, 45deg - 135deg
  $angle-rel: (($angle - 45) % 90) + 45;

  // Convert angle to radians and subtract from 90 degrees
  $angle-rad: math.div((90 - $angle-rel) * 3.1415, 180);

  // Determine percentage along that side
  $side-percent: 0.5 * (1 - math.tan($angle-rad));

  // Initialize x and y
  $x: 0;
  $y: 0;

  // Depending on side of square, apply $side-percent to $x and $y coords.
  @if $angle >= 45 and $angle < 135 {
    $x: $size;
    $y: $size * $side-percent;
  } @else if $angle >= 135 and $angle < 225 {
    $x: $size * (1 - $side-percent);
    $y: $size;
  } @else if $angle >= 225 and $angle < 315 {
    $x: 0;
    $y: $size * (1 - $side-percent);
  } @else {
    $x: $size * $side-percent;
    $y: 0;
  }

  // @debug "At #{math.round($angle)}deg: {x: #{math.round($x)}, y: #{math.round($y)}}.";

  // Return the intersection point
  @return ($x $y);
}

@function calculate-polygon($val, $max) {
  $size: 100%;
  // Define the square's center
  $center: 50%;

  // Define the initial polygon points
  $polygon: ($center $center), ($center 0);

  // Get the angle of intersection
  $angle: calculate-angle($val, $max);

  // Corner Check 1: The polygon includes the top-right corner
  @if $angle > 45 {
    $polygon: append($polygon, ($size 0));
  }
  // Corner Check 2: The polygon includes the bottom-right corner
  @if $angle > 135 {
    $polygon: append($polygon, ($size $size));
  }
  // Corner Check 3: The polygon includes the bottom-left corner
  @if $angle > 225 {
    $polygon: append($polygon, (0 $size));
  }
  // Corner Check 4: The polygon includes the top-left corner
  @if $angle > 315 {
    $polygon: append($polygon, (0 0));
  }

  // Add the intersection point
  $polygon: append($polygon, calculate-intersection($angle));

  // Return to the center
  $polygon: append($polygon, ($center $center));

  // Return the polygon points
  @return $polygon;
}

@mixin generate-clock-clip($val, $max, $size) {
  &[data-value="#{$val}"][data-max="#{$max}"] .clock-glow,
  &[data-value="#{$val}"][data-max="#{$max}"] .clock-fill {
    clip-path: polygon(#{calculate-polygon($val, $max)});
  }
}

@mixin generate-one-segment($max, $size) {
  &[data-max="#{$max}"] .clock-one-segment {
    clip-path: polygon(#{calculate-polygon(1, $max)});
    visibility: hidden;
  }
}

& {

  $key-sizes: (
    1: (height: 836px, width: 230px, labelTop: 0px, clockSize: 169px),
    2: (height: 625.438px, width: 197.009px, labelTop: 100px, clockSize: 108px),
    3: (height: 915.936px, width: 277.634px, labelTop: 0px, clockSize: 108px),
    4: (height: 1041px, width: 368.697px, labelTop: -100px, clockSize: 108px),
    5: (height: 1148.657px, width: 368.698px, labelTop: 0px, clockSize: 108px),
    6: (height: 1148.98px, width: 370.141px, labelTop: 250px, clockSize: 108px)
  );
  $clock-positions: (
    1: (
      0: (x: 111.011px, y: 108.5px)
    ),
    2: (
      0: (x: 98.579px, y: 280px),
      1: (x: 98.579px, y: 100px)
    ),
    3: (
      0: (x: 138.892px, y: 100px),
      1: (x: 72.892px, y: 212px),
      2: (x: 204.892px, y: 212px)
    ),
    4: (
      0: (x: 184.245px, y: 100px),
      1: (x: 97.245px, y: 186px),
      2: (x: 271.245px, y: 186px),
      3: (x: 184.245px, y: 274px)
    ),
    5: (
      0: (x: 184.245px, y: 100px),
      1: (x: 97.245px, y: 186px),
      2: (x: 271.245px, y: 186px),
      3: (x: 184.245px, y: 274px),
      4: (x: 184.245px, y: 453px)
    ),
    6: (
      0: (x: 185.128px, y: 100px),
      1: (x: 98.128px, y: 186px),
      2: (x: 272.128px, y: 186px),
      3: (x: 185.128px, y: 274px),
      4: (x: 185.128px, y: 453px),
      5: (x: 185.128px, y: 684px)
    )
  );

  $label-positions: (
    1: (
      0: (x: 0, y: 0px, align: center, width: 100%),
    ),
    2: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: 0, y: 325px, align: center, width: 100%),
    ),
    3: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -20px, y: 110px, align: right, width: 50%),
      2: (x: 220px, y: 265px, align: left, width: 50%),
    ),
    4: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%)
    ),
    5: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%),
      4: (x: 0, y: 500px, align: center, width: 100%),
    ),
    6: (
      0: (x: 0, y: 0px, align: center, width: 100%),
      1: (x: -60px, y: 80px, align: right, width: 50%),
      2: (x: 340px, y: 230px, align: left, width: 50%),
      3: (x: 0, y: 320px, align: center, width: 100%),
      4: (x: 0, y: 500px, align: center, width: 100%),
      5: (x: 0, y: 730px, align: center, width: 100%),
    )
  );

  /* VISIBILITY HIDDEN FOR ANIMATED COMPONENTS */
  .clock-key-container,
  .key-label,
  .clock-frame,
  .clock-glow,
  .clock-label,
  .clock-glow { visibility: hidden; }

  /* KEYS */
  .clock-key-container {

    height: var(--key-height);
    width: var(--key-width);

    .toggle-icon { display: none !important; }
    position: absolute;
    perspective: 500px;
    transform-style: preserve-3d;

    * { perspective: 500px; transform-style: preserve-3d; }

    // background: rgba(255, 0, 255, 0.25);
    // outline: 2px dotted rgb(255, 0, 255);

    @each $key, $clocks in $clock-positions {
      &[data-size="#{$key}"] {
        --key-height: #{map-get(map-get($key-sizes, $key), "height")};
        --key-width: #{map-get(map-get($key-sizes, $key), "width")};
        --clock-size: #{map-get(map-get($key-sizes, $key), "clockSize")};
        --label-top: #{map-get(map-get($key-sizes, $key), "labelTop")};

        .clock-key {
          .key-image-container {
            @each $clock, $pos in $clocks {
              .clock-container:nth-of-type(#{$clock + 1}) {
                left: map-get($pos, "x");
                top: map-get($pos, "y");
              }
            }
          }
        }
      }
    }

    .clock-key {

      position: absolute;
      display: block;
      height: 100px;
      width: 100px;

      transform: translate(-50%, -50%);
      top: 50%;
      left: 50%;

      & > * { position: absolute }

      .key-label {
        font-family: var(--font-emphasis);
        font-size: toRem(48px);
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 1px;
        top: var(--label-top);
        z-index: 20;
        width: 200%;
        pointer-events: all;
        color: var(--blades-white-bright);
        text-shadow:
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark),
          0 0 15px var(--blades-black-dark);
        white-space: nowrap;
        // rotate: -30deg;
        left: -50%;
        position: absolute;
      }

      .key-image-container {
        height: var(--key-height);
        width: var(--key-width);

        .key-image {
          height: var(--key-height);
          width: var(--key-width);
          z-index: 1;
          overflow: visible;
          filter:
            drop-shadow(0px 0px 10px var(--blades-white-bright))
            drop-shadow(30px 30px 10px var(--blades-black-dark))
            brightness(0.5);


          .key-bg {
            fill: var(--blades-black);
          }

          .metallic-overlay {
            height: var(--key-height);
            width: var(--key-width);
            filter: url(#metallicFilter) blur(1px);
            fill: var(--blades-grey-dark);
          }
        }
      }
    }
  }

  /* CLOCKS */
  .clock-container {
    position: absolute;
    top: 0px;
    left: 0px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: visible;
    height: var(--clock-size);
    width: var(--clock-size);
    transform: translate(-50%, -50%) !important;

    .clock {
      position: relative;
      overflow: visible;

      &,
      & * {
        height: var(--clock-size);
        width: var(--clock-size);
        pointer-events: none;
      }

      .clock-frame,
      .clock-fill,
      .clock-glow,
      .clock-one-segment {
        position: absolute;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
      }

      .clock-label {
        position: absolute;
        transform: translate(-50%, -50%);
        top: 50%;
        left: 50%;
        z-index: 5;
        font-size: 24px;
        font-family: var(--font-emphasis-narrow);
        font-weight: bold;
        color: var(--blades-white-bright);
        text-shadow: var(--text-shadow-dark-strong);
        text-align: center;
        white-space: nowrap;
      }

      .clock-frame { z-index: 3; }
      .clock-fill { z-index: 2; }
      .clock-glow { z-index: 4; }
      .clock-one-segment { z-index: 6; }

      .clock-glow {
        transform-origin: 50% 50%;
        scale: 3;

        background-repeat: no-repeat;
        background-position: center;
        background-size: cover;

        &.clock-glow-white {
          background-image: url("../assets/animations/clock-flare-white.webp");
        }
        &.clock-glow-red {
          background-image: url("../assets/animations/clock-flare-red.webp");
        }
        &.clock-glow-yellow {
          background-image: url("../assets/animations/clock-flare-yellow.webp");
        }
        &.clock-glow-blue {
          background-image: url("../assets/animations/clock-flare-blue.webp");
        }
      }

      // Generate clip-paths for all possible combinations of val and max
      @for $max from 2 through 12 {
        @include generate-one-segment($max, 400px);
        @for $val from 1 through $max {
          @include generate-clock-clip($val, $max, 400px);
        }
      }

    }
  }
}
