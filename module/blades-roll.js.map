{"version":3,"sources":["../../ts/blades-roll.ts"],"names":[],"mappings":"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","file":"blades-roll.js","sourcesContent":["import U from \"./core/utilities.js\";\r\nimport {Attribute, Position, Effect, Action} from \"./core/constants.js\";\r\n// import type {Attribute} from \"./blades-actor.js\";\r\n/**\r\n * Roll Dice.\r\n * @param {int} dice_amount\r\n * @param {string} attribute_name\r\n * @param {string} position\r\n * @param {string} effect\r\n */\r\n\r\n/* Convert this to a FormApplication that is rendered to both the rolling player and GM\r\nsimultaneously. Both can make simultaneous edits to the roll; a checkbox for the GM toggles\r\nthe \"Roll\" button for the player */\r\n\r\nexport async function bladesRoll(\r\n  dice_amount: number,\r\n  attribute_name: Action|Attribute|\"\" = \"\",\r\n  position: Position|\"\" = Position.risky,\r\n  effect: Effect|\"\" = Effect.standard,\r\n  note = \"\"\r\n) {\r\n\r\n  // ChatMessage.getSpeaker(controlledToken)\r\n  let zeromode = false;\r\n\r\n  if ( dice_amount < 0 ) { dice_amount = 0 }\r\n  if ( dice_amount === 0 ) { zeromode = true; dice_amount = 2 }\r\n\r\n  const r = new Roll( `${dice_amount}d6`, {} );\r\n\r\n  // show 3d Dice so Nice if enabled\r\n  r.evaluate({async:true});\r\n  await showChatRollMessage(r, zeromode, attribute_name, position, effect, note);\r\n}\r\n\r\n/**\r\n * Shows Chat message.\r\n *\r\n * @param {Roll} r\r\n * @param {Boolean} zeromode\r\n * @param {String} attribute_name\r\n * @param {string} position\r\n * @param {string} effect\r\n */\r\nasync function showChatRollMessage(\r\n  r: Roll,\r\n  zeromode: boolean,\r\n  attribute_name?: Attribute|Action|\"\",\r\n  position: Position|\"\" = Position.risky,\r\n  effect: Effect|\"\" = Effect.standard,\r\n  note = \"\"\r\n) {\r\n  const speaker = ChatMessage.getSpeaker();\r\n\r\n  const rolls = (r.terms as DiceTerm[])[0].results;\r\n\r\n  // Retrieve Roll status.\r\n  const roll_status = getBladesRollStatus(rolls, zeromode);\r\n\r\n  let result;\r\n  if (attribute_name && attribute_name in Action) {\r\n    let position_localize = \"\";\r\n    switch (position) {\r\n      case Position.controlled:\r\n        position_localize = \"BITD.PositionControlled\";\r\n        break;\r\n      case Position.desperate:\r\n        position_localize = \"BITD.PositionDesperate\";\r\n        break;\r\n      case Position.risky:\r\n      default:\r\n        position_localize = \"BITD.PositionRisky\";\r\n    }\r\n\r\n    let effect_localize = \"\";\r\n    switch (effect) {\r\n      case Effect.limited:\r\n        effect_localize = \"BITD.EffectLimited\";\r\n        break;\r\n      case Effect.great:\r\n        effect_localize = \"BITD.EffectGreat\";\r\n        break;\r\n      case Effect.zero:\r\n        effect_localize = \"Zero Effect\";\r\n        break;\r\n      case Effect.extreme:\r\n        effect_localize = \"Extreme Effect\";\r\n        break;\r\n      case Effect.standard:\r\n      default:\r\n        effect_localize = \"BITD.EffectStandard\";\r\n    }\r\n\r\n    result = await renderTemplate(\"systems/eunos-blades/templates/chat/action-roll.hbs\", {rolls: rolls, roll_status: roll_status, attribute_label: U.tCase(attribute_name), position: position, position_localize: position_localize, effect: effect, effect_localize: effect_localize, note: note});\r\n  } else {\r\n    const stress = getBladesRollStress(rolls, zeromode);\r\n\r\n    result = await renderTemplate(\"systems/eunos-blades/templates/chat/resistance-roll.hbs\", {rolls: rolls, roll_status: roll_status, attribute_label: U.tCase(attribute_name), stress: stress, note: note});\r\n  }\r\n\r\n  const messageData = {\r\n    speaker: speaker,\r\n    content: result,\r\n    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\r\n    roll: r\r\n  };\r\n\r\n  CONFIG.ChatMessage.documentClass.create(messageData, {});\r\n}\r\n\r\n/**\r\n * Get status of the Roll.\r\n *  - failure\r\n *  - partial-success\r\n *  - success\r\n *  - critical-success\r\n * @param {Array} rolls\r\n * @param {Boolean} zeromode\r\n */\r\nexport function getBladesRollStatus(rolls: DiceTerm.Result[], zeromode = false) {\r\n\r\n  // Sort roll values from lowest to highest.\r\n  const sorted_rolls = rolls.map(i => i.result).sort();\r\n\r\n  let roll_status = \"failure\";\r\n\r\n  if (sorted_rolls[0] === 6 && zeromode) {\r\n    roll_status = \"critical-success\";\r\n  } else {\r\n    let use_die: number, prev_use_die: number|boolean = false;\r\n\r\n    if (zeromode) {\r\n      [use_die] = sorted_rolls;\r\n    } else {\r\n      use_die = sorted_rolls[sorted_rolls.length - 1];\r\n\r\n      if (sorted_rolls.length - 2 >= 0) {\r\n        prev_use_die = sorted_rolls[sorted_rolls.length - 2];\r\n      }\r\n    }\r\n\r\n    // 1,2,3 = failure\r\n    if (use_die <= 3) {\r\n      roll_status = \"failure\";\r\n    } else if (use_die === 6) { // if 6 - check the prev highest one.\r\n      // 6,6 - critical success\r\n      if (prev_use_die && prev_use_die === 6) {\r\n        roll_status = \"critical-success\";\r\n      } else { // 6 - success\r\n        roll_status = \"success\";\r\n      }\r\n    } else { // else (4,5) = partial success\r\n      roll_status = \"partial-success\";\r\n    }\r\n\r\n  }\r\n\r\n  return roll_status;\r\n\r\n}\r\n/**\r\n * Get stress of the Roll.\r\n * @param {Array} rolls\r\n * @param {Boolean} zeromode\r\n */\r\nexport function getBladesRollStress(rolls: DiceTerm.Result[], zeromode = false) {\r\n\r\n  let stress = 6;\r\n\r\n  // Sort roll values from lowest to highest.\r\n  const sorted_rolls = rolls.map(i => i.result).sort();\r\n\r\n  const roll_status = \"failure\";\r\n\r\n  if (sorted_rolls[0] === 6 && zeromode) {\r\n    stress = -1;\r\n  } else {\r\n    let use_die: number, prev_use_die: number|boolean = false;\r\n\r\n    if (zeromode) {\r\n      [use_die] = sorted_rolls;\r\n    } else {\r\n      use_die = sorted_rolls[sorted_rolls.length - 1];\r\n\r\n      if (sorted_rolls.length - 2 >= 0) {\r\n        prev_use_die = sorted_rolls[sorted_rolls.length - 2];\r\n      }\r\n    }\r\n\r\n    if (use_die === 6 && prev_use_die && prev_use_die === 6) {\r\n      stress = -1;\r\n    } else {\r\n      stress = 6 - use_die;\r\n    }\r\n\r\n  }\r\n\r\n  return stress;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Call a Roll popup.\r\n */\r\nexport async function simpleRollPopup() {\r\n\r\n  new Dialog({\r\n    \"title\": \"Simple Roll\",\r\n    \"content\": `\r\n      <h2>${game.i18n.localize(\"BITD.RollSomeDice\")}</h2>\r\n      <p>${game.i18n.localize(\"BITD.RollTokenDescription\")}</p>\r\n      <form>\r\n        <div class=\"form-group\">\r\n          <label>${game.i18n.localize(\"BITD.RollNumberOfDice\")}:</label>\r\n          <select id=\"qty\" name=\"qty\">\r\n            ${[...new Array(11)].map((item, i) => `<option value=\"${i}\">${i}d</option>`).join(\"\")}\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>${game.i18n.localize(\"BITD.Notes\")}:</label>\r\n          <input id=\"note\" name=\"note\" type=\"text\" value=\"\">\r\n        </div><br/>\r\n      </form>\r\n    `,\r\n    \"buttons\": {\r\n      yes: {\r\n        icon: \"<i class='fas fa-check'></i>\",\r\n        label: \"Roll\",\r\n        callback: async (html) => {\r\n          // @ts-expect-error MIGRATION PAINS\r\n          const diceQty = html.find('[name=\"qty\"]')[0].value;\r\n          // @ts-expect-error MIGRATION PAINS\r\n          const note = html.find('[name=\"note\"]')[0].value;\r\n          await bladesRoll(diceQty,\"\",\"\",\"\",note);\r\n        }\r\n      },\r\n      no: {\r\n        icon: \"<i class='fas fa-times'></i>\",\r\n        label: game.i18n.localize(\"Cancel\")\r\n      }\r\n    },\r\n    \"default\": \"yes\"\r\n  }).render(true);\r\n}\r\n"]}