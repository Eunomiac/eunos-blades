/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./ts/BladesActor.ts":
/*!***************************!*\
  !*** ./ts/BladesActor.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* harmony import */ var _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./classes/BladesDirector */ \"./ts/classes/BladesDirector.ts\");\n/* harmony import */ var _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./classes/BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region Imports ~\n\n\n\n\n\n\n\n// #endregion\n// Blades Theme Song: \"Bangkok\" from The Gray Man soundtrack: https://www.youtube.com/watch?v=cjjImvMqYlo&list=OLAK5uy_k9cZDd1Fbpd25jfDtte5A6HyauD2-cwgk&index=2\n// Also check out Discord thread: https://discord.com/channels/325094888133885952/1152316839163068527\nvar BladesActorUniqueTags;\n(function (BladesActorUniqueTags) {\n    BladesActorUniqueTags[BladesActorUniqueTags[\"CharacterCrew\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.PC.CharacterCrew] = \"CharacterCrew\";\n    BladesActorUniqueTags[BladesActorUniqueTags[\"VicePurveyor\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.NPC.VicePurveyor] = \"VicePurveyor\";\n})(BladesActorUniqueTags || (BladesActorUniqueTags = {}));\nvar BladesItemUniqueTypes;\n(function (BladesItemUniqueTypes) {\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"background\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.background] = \"background\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"vice\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.vice] = \"vice\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"crew_playbook\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_playbook] = \"crew_playbook\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"crew_reputation\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_reputation] = \"crew_reputation\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"heritage\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.heritage] = \"heritage\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"playbook\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.playbook] = \"playbook\";\n    BladesItemUniqueTypes[BladesItemUniqueTypes[\"preferred_op\"] = _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.preferred_op] = \"preferred_op\";\n})(BladesItemUniqueTypes || (BladesItemUniqueTypes = {}));\nclass BladesActor extends Actor {\n    // #region Static Overrides: Create ~\n    static async create(data, options = {}) {\n        data.token = data.token || {};\n        data.system = data.system ?? {};\n        // ~ Create world_name\n        data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\n        return await super.create(data, options);\n    }\n    // #endregion\n    // #region BladesDocument Implementation ~\n    static get All() { return game.actors; }\n    static Get(actorRef) {\n        if (actorRef instanceof BladesActor) {\n            return actorRef;\n        }\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(actorRef)) {\n            return BladesActor.All.get(actorRef);\n        }\n        return BladesActor.All.find((a) => a.system.world_name === actorRef)\n            || BladesActor.All.find((a) => a.name === actorRef);\n    }\n    static GetTypeWithTags(docType, ...tags) {\n        return BladesActor.All.filter((actor) => actor.type === docType)\n            .filter((actor) => actor.hasTag(...tags));\n    }\n    static IsType(doc, ...types) {\n        const typeSet = new Set(types);\n        return doc instanceof BladesActor && typeSet.has(doc.type);\n    }\n    get tags() { return this.system.tags ?? []; }\n    hasTag(...tags) {\n        return tags.every((tag) => this.tags.includes(tag));\n    }\n    async addTag(...tags) {\n        const curTags = this.tags;\n        tags.forEach((tag) => {\n            if (curTags.includes(tag)) {\n                return;\n            }\n            curTags.push(tag);\n        });\n        eLog.checkLog2(\"actor\", \"BladesActor.addTag(...tags)\", { tags, curTags });\n        await this.update({ \"system.tags\": curTags });\n    }\n    async remTag(...tags) {\n        const curTags = this.tags.filter((tag) => !tags.includes(tag));\n        eLog.checkLog2(\"actor\", \"BladesActor.remTag(...tags)\", { tags, curTags });\n        await this.update({ \"system.tags\": curTags });\n    }\n    get tooltip() {\n        const tooltipText = [this.system.concept, this.system.subtitle]\n            .filter(Boolean)\n            .join(\"<br><br>\");\n        return tooltipText ? (new Handlebars.SafeString(tooltipText)).toString() : undefined;\n    }\n    get dialogCSSClasses() { return \"\"; }\n    getFactorTotal(factor) {\n        switch (factor) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier: {\n                if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n                    return this.system.tier.value + (this.crew?.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier) ?? 0);\n                }\n                return this.system.tier.value;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality: return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier);\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale: {\n                if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc)) {\n                    return this.system.scale;\n                }\n                return 0;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude: {\n                if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc)) {\n                    return this.system.magnitude;\n                }\n                return 0;\n            }\n            default: return 0;\n        }\n    }\n    // #endregion\n    // #region SubActorControl Implementation ~\n    get subActors() {\n        return Object.keys(this.system.subactors)\n            .map((id) => this.getSubActor(id))\n            .filter((subActor) => Boolean(subActor));\n    }\n    get activeSubActors() {\n        return this.subActors.filter((subActor) => !subActor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived));\n    }\n    get archivedSubActors() {\n        return this.subActors.filter((subActor) => subActor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived));\n    }\n    checkActorPrereqs(actor) {\n        /* Implement any prerequisite checks for embedding actors */\n        return Boolean(actor);\n    }\n    processEmbeddedActorMatches(globalActors) {\n        return globalActors\n            // Step 1: Filter out globals that fail prereqs.\n            .filter(this.checkActorPrereqs)\n            // Step 2: Filter out actors that are already active subActors\n            .filter((gActor) => !this.activeSubActors.some((aActor) => aActor.id === gActor.id))\n            // Step 3: Merge subactor data onto matching global actors\n            .map((gActor) => this.getSubActor(gActor) || gActor)\n            // Step 4: Sort by name\n            .sort((a, b) => {\n            if (a.name === b.name) {\n                return 0;\n            }\n            if (a.name === null) {\n                return 1;\n            }\n            if (b.name === null) {\n                return -1;\n            }\n            if (a.name > b.name) {\n                return 1;\n            }\n            if (a.name < b.name) {\n                return -1;\n            }\n            return 0;\n        });\n    }\n    getDialogActors(category) {\n        /* **** NEED TO FILTER OUT ACTORS PLAYER DOESN'T HAVE PERMISSION TO SEE **** */\n        const dialogData = {};\n        switch (category) {\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.Contact:\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.Rival:\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.Friend:\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.Acquaintance: {\n                if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)\n                    || this.playbookName === null) {\n                    return false;\n                }\n                dialogData.Main = this.processEmbeddedActorMatches(BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc, this.playbookName));\n                return dialogData;\n            }\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.VicePurveyor: {\n                if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc) || !this.vice?.name) {\n                    return false;\n                }\n                dialogData.Main = this.processEmbeddedActorMatches(BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc, this.vice.name));\n                return dialogData;\n            }\n            case _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__.SelectionCategory.Crew: {\n                dialogData.Main = BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew);\n                return dialogData;\n            }\n            default: return false;\n        }\n    }\n    async addSubActor(actorRef, tags) {\n        let focusSubActor;\n        // Does an embedded subActor of this Actor already exist on the character?\n        if (this.hasSubActorOf(actorRef)) {\n            const subActor = this.getSubActor(actorRef);\n            if (!subActor) {\n                return;\n            }\n            // Is it an archived Item?\n            if (subActor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)) {\n                // Unarchive it\n                await subActor.remTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived);\n            }\n            // Make it the focus item.\n            focusSubActor = subActor;\n        }\n        else {\n            // Is it not embedded at all? Create new entry in system.subactors from global actor\n            const actor = BladesActor.Get(actorRef);\n            if (!actor) {\n                return;\n            }\n            const subActorData = {};\n            if (tags) {\n                subActorData.tags = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique([\n                    ...actor.tags,\n                    ...tags\n                ]);\n            }\n            // Await the update, then make the retrieved subactor the focus\n            await this.update({ [`system.subactors.${actor.id}`]: subActorData });\n            focusSubActor = this.getSubActor(actor.id);\n        }\n        if (!focusSubActor) {\n            return;\n        }\n        // Does this Actor contain any tags limiting it to one per actor?\n        const uniqueTags = focusSubActor.tags.filter((tag) => tag in BladesActorUniqueTags);\n        if (uniqueTags.length > 0) {\n            // ... then archive all other versions.\n            uniqueTags.forEach((uTag) => this.activeSubActors\n                .filter((subActor) => Boolean(focusSubActor?.id\n                && subActor.id !== focusSubActor.id\n                && subActor.hasTag(uTag)))\n                .map((subActor) => this.remSubActor(subActor.id)));\n        }\n    }\n    getSubActor(actorRef) {\n        const actor = BladesActor.Get(actorRef);\n        if (!actor?.id) {\n            return undefined;\n        }\n        if (!BladesActor.IsType(actor, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.faction)) {\n            return actor;\n        }\n        const subActorData = (this.system.subactors[actor.id] ?? {});\n        Object.assign(actor.system, subActorData);\n        actor.parentActor = this;\n        return actor;\n    }\n    hasSubActorOf(actorRef) {\n        const actor = BladesActor.Get(actorRef);\n        if (!actor) {\n            return false;\n        }\n        return actor?.id ? actor.id in this.system.subactors : false;\n    }\n    async updateSubActor(actorRef, upData) {\n        const updateData = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objExpand(upData);\n        if (!updateData.system) {\n            return undefined;\n        }\n        const actor = BladesActor.Get(actorRef);\n        if (!actor) {\n            return undefined;\n        }\n        // DiffObject new update data against actor data.\n        const diffUpdateSystem = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objDiff(actor.system, updateData.system);\n        // Merge new update data onto current subactor data.\n        const mergedSubActorSystem = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMerge(this.system.subactors[actor.id] ?? {}, diffUpdateSystem, { isReplacingArrays: true, isConcatenatingArrays: false });\n        // Confirm this update changes data:\n        if (JSON.stringify(this.system.subactors[actor.id]) === JSON.stringify(mergedSubActorSystem)) {\n            return undefined;\n        }\n        // Update actor with new subactor data.\n        return this.update({ [`system.subactors.${actor.id}`]: null }, undefined, true)\n            .then(() => this.update({ [`system.subactors.${actor.id}`]: mergedSubActorSystem }, undefined, true))\n            .then(() => actor.sheet?.render());\n    }\n    async remSubActor(actorRef) {\n        const subActor = this.getSubActor(actorRef);\n        if (!subActor) {\n            return;\n        }\n        await this.update({ \"system.subactors\": mergeObject(this.system.subactors, { [`-=${subActor.id}`]: null }) }, undefined, true);\n    }\n    async clearSubActors(isReRendering = true) {\n        this.subActors.forEach((subActor) => {\n            if (subActor.parentActor?.id === this.id) {\n                subActor.clearParentActor(isReRendering);\n            }\n        });\n        await this.sheet?.render();\n    }\n    async clearParentActor(isReRendering = true) {\n        const { parentActor } = this;\n        if (!parentActor) {\n            return;\n        }\n        this.parentActor = undefined;\n        this.system = this._source.system;\n        this.ownership = this._source.ownership;\n        this.prepareData();\n        if (isReRendering) {\n            await this.sheet?.render();\n        }\n    }\n    // #endregion\n    // #region SubItemControl Implementation ~\n    get subItems() { return Array.from(this.items); }\n    getSubItemsOfType(itemType) {\n        return this.items.filter((item) => item.type === itemType);\n    }\n    get activeSubItems() { return this.items.filter((item) => !item.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)); }\n    get archivedSubItems() { return this.items.filter((item) => item.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)); }\n    _checkItemPrereqs(item) {\n        if (!item.system.prereqs) {\n            return true;\n        }\n        for (const [pType, pReqs] of Object.entries(item.system.prereqs)) {\n            const pReqArray = Array.isArray(pReqs) ? pReqs : [pReqs.toString()];\n            const hitRecord = {};\n            if (!this._processPrereqArray(pReqArray, pType, hitRecord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _processPrereqArray(pReqArray, pType, hitRecord) {\n        while (pReqArray.length) {\n            const pString = pReqArray.pop();\n            hitRecord[pType] ??= [];\n            if (!this._processPrereqType(pType, pString, hitRecord)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    _processPrereqType(pType, pString, hitRecord) {\n        switch (pType) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.PrereqType.HasActiveItem: {\n                return this._processActiveItemPrereq(pString, hitRecord, pType);\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.PrereqType.HasActiveItemsByTag: {\n                return this._processActiveItemsByTagPrereq(pString, hitRecord, pType);\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.PrereqType.AdvancedPlaybook: {\n                return this._processAdvancedPlaybookPrereq();\n            }\n            default: return true;\n        }\n    }\n    _processActiveItemPrereq(pString, hitRecord, pType) {\n        const thisItem = this.activeSubItems\n            .filter((i) => !hitRecord[pType]?.includes(i.id))\n            .find((i) => i.system.world_name === pString);\n        if (thisItem) {\n            hitRecord[pType]?.push(thisItem.id);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    _processActiveItemsByTagPrereq(pString, hitRecord, pType) {\n        const thisItem = this.activeSubItems\n            .filter((i) => !hitRecord[pType]?.includes(i.id))\n            .find((i) => i.hasTag(pString));\n        if (thisItem) {\n            hitRecord[pType]?.push(thisItem.id);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    _processAdvancedPlaybookPrereq() {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n            return false;\n        }\n        if (!this.playbookName || ![_core_constants__WEBPACK_IMPORTED_MODULE_1__.Playbook.Ghost, _core_constants__WEBPACK_IMPORTED_MODULE_1__.Playbook.Hull, _core_constants__WEBPACK_IMPORTED_MODULE_1__.Playbook.Vampire].includes(this.playbookName)) {\n            return false;\n        }\n        return true;\n    }\n    _processEmbeddedItemMatches(globalItems) {\n        return globalItems\n            // Step 1: Filter out globals that fail prereqs.\n            .filter((item) => this._checkItemPrereqs(item))\n            // Step 2: Filter out already-active items based on max_per_score (unless MultiplesOk)\n            .filter((gItem) => gItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.MultiplesOK)\n            || (gItem.system.max_per_score ?? 1)\n                > this.activeSubItems.filter((sItem) => sItem.system.world_name === gItem.system.world_name).length)\n            // Step 3: Replace with matching Archived, Embedded subItems\n            .map((gItem) => {\n            const matchingSubItems = this.archivedSubItems.filter((sItem) => sItem.system.world_name === gItem.system.world_name);\n            if (matchingSubItems.length > 0) {\n                return matchingSubItems;\n            }\n            else {\n                return gItem;\n            }\n        })\n            .flat()\n            // Step 4: Apply CSS classes\n            .map((sItem) => {\n            sItem.dialogCSSClasses = \"\";\n            const cssClasses = [];\n            if (sItem.isEmbedded) {\n                cssClasses.push(\"embedded\");\n            }\n            if (sItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear.Fine)) {\n                cssClasses.push(\"fine-quality\");\n            }\n            if (sItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Featured)) {\n                cssClasses.push(\"featured-item\");\n            }\n            if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.ability, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_ability].includes(sItem.type)) {\n                if (this.getAvailableAdvancements(\"Ability\") === 0) {\n                    cssClasses.push(\"locked\");\n                }\n                else if ((sItem.system.price ?? 1) > this.getAvailableAdvancements(\"Ability\")) {\n                    cssClasses.push(\"locked\", \"unaffordable\");\n                }\n                else if ((sItem.system.price ?? 1) > 1) {\n                    cssClasses.push(\"expensive\");\n                }\n            }\n            if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_upgrade].includes(sItem.type)) {\n                if (this.getAvailableAdvancements(\"Upgrade\") === 0) {\n                    cssClasses.push(\"locked\");\n                }\n                else if ((sItem.system.price ?? 1) > this.getAvailableAdvancements(\"Upgrade\")) {\n                    cssClasses.push(\"locked\", \"unaffordable\");\n                }\n                else if ((sItem.system.price ?? 1) > 1) {\n                    cssClasses.push(\"expensive\");\n                }\n            }\n            if (cssClasses.length > 0) {\n                sItem.dialogCSSClasses = cssClasses.join(\" \");\n            }\n            return sItem;\n        })\n            // Step 5: Sort by featured, then by fine, then by world_name, then embedded first sorted by name\n            .sort((a, b) => {\n            if (a.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Featured) && !b.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Featured)) {\n                return -1;\n            }\n            if (!a.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Featured) && b.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Featured)) {\n                return 1;\n            }\n            if (a.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear.Fine) && !b.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear.Fine)) {\n                return -1;\n            }\n            if (!a.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear.Fine) && b.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear.Fine)) {\n                return 1;\n            }\n            if (a.system.world_name > b.system.world_name) {\n                return 1;\n            }\n            if (a.system.world_name < b.system.world_name) {\n                return -1;\n            }\n            if (a.isEmbedded && !b.isEmbedded) {\n                return -1;\n            }\n            if (!a.isEmbedded && b.isEmbedded) {\n                return 1;\n            }\n            if (a.name === b.name) {\n                return 0;\n            }\n            if (a.name === null) {\n                return 1;\n            }\n            if (b.name === null) {\n                return -1;\n            }\n            if (a.name > b.name) {\n                return 1;\n            }\n            if (a.name < b.name) {\n                return -1;\n            }\n            return 0;\n        });\n    }\n    getSubItem(itemRef, activeOnly = false) {\n        const activeCheck = (i) => !activeOnly || !i.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived);\n        if (typeof itemRef === \"string\" && this.items.get(itemRef)) {\n            const returnItem = this.items.get(itemRef);\n            if (returnItem && activeCheck(returnItem)) {\n                return returnItem;\n            }\n            else {\n                return undefined;\n            }\n        }\n        else {\n            const globalItem = _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.Get(itemRef);\n            if (!globalItem) {\n                return undefined;\n            }\n            return this.items.find((item) => item.name === globalItem.name && activeCheck(item))\n                ?? this.items.find((item) => item.system.world_name === globalItem.system.world_name && activeCheck(item));\n        }\n    }\n    hasSubItemOf(itemRef) {\n        const item = _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.Get(itemRef);\n        if (!item) {\n            return false;\n        }\n        return Boolean(this.items.find((i) => i.system.world_name === item.system.world_name));\n    }\n    hasActiveSubItemOf(itemRef) {\n        const item = _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.Get(itemRef);\n        if (!item) {\n            return false;\n        }\n        return Boolean(this.items.find((i) => !i.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)\n            && i.system.world_name === item.system.world_name));\n    }\n    async addSubItem(itemRef) {\n        /**\n         * Determines whether a submitted BladesItemType is a type that should appear only once\n         * on any given Actor.\n         * @param {BladesItemType} type\n         * @returns {boolean} True if the type is a BladesItemUniqueTypes\n         **/\n        function isBladesItemUniqueTypes(type) {\n            return Object.values(BladesItemUniqueTypes).includes(type);\n        }\n        eLog.checkLog3(\"subitems\", \"[addSubItem] itemRef\", itemRef);\n        let focusItem;\n        // Does an embedded copy of this item already exist on the character?\n        const embeddedItem = this.getSubItem(itemRef);\n        if (embeddedItem) {\n            // Is it an archived Item?\n            if (embeddedItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)) {\n                // Unarchive it & make it the focus item.\n                await embeddedItem.remTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived);\n                focusItem = embeddedItem;\n                eLog.checkLog3(\"subitems\", `[addSubItem] IS ARCHIVED EMBEDDED > Removing 'Archived' Tag, '${focusItem.id}':`, focusItem);\n            }\n            else { // Otherwise...\n                // Duplicate the item, and make the newly-created item the focus.\n                focusItem = await _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.create([embeddedItem], { parent: this });\n                eLog.checkLog3(\"subitems\", `[addSubItem] IS ACTIVE EMBEDDED > Duplicating, focusItem '${focusItem.id}':`, focusItem);\n            }\n        }\n        else {\n            // Is it not embedded at all? Embed from global instance.\n            const globalItem = _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.Get(itemRef);\n            eLog.checkLog3(\"subitems\", `[addSubItem] IS NOT EMBEDDED > Fetching Global, globalItem '${globalItem?.id}':`, globalItem);\n            if (!globalItem) {\n                return;\n            }\n            focusItem = await _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.create([globalItem], { parent: this });\n            focusItem = this.items.getName(globalItem.name);\n        }\n        // Is this item type limited to one per actor?\n        if (focusItem && isBladesItemUniqueTypes(focusItem.type)) {\n            // ... then archive all other versions.\n            await Promise.all(this.activeSubItems\n                .filter((subItem) => subItem.type === focusItem?.type\n                && subItem.system.world_name !== focusItem?.system.world_name\n                && !subItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived))\n                .map(this.remSubItem.bind(this)));\n        }\n    }\n    async remSubItem(itemRef) {\n        const subItem = this.getSubItem(itemRef);\n        if (!subItem) {\n            return;\n        }\n        if (subItem.type !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gear) {\n            this.purgeSubItem(itemRef);\n            return;\n        }\n        eLog.checkLog(\"actorTrigger\", `Removing SubItem ${subItem.name}`, subItem);\n        if (subItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)) {\n            return;\n        }\n        await subItem.addTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived);\n    }\n    async purgeSubItem(itemRef) {\n        const subItem = this.getSubItem(itemRef);\n        if (!subItem || subItem.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System.Archived)) {\n            return;\n        }\n        await subItem.delete();\n    }\n    // #endregion\n    // #region Advancement Implementation ~\n    // get totalAbilityPoints(): number {\n    //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\n    //   if (!this.playbook) { return 0 }\n    //   switch (this.type) {\n    //     case BladesActorType.pc: return this.system.advancement.ability ?? 0;\n    //     case BladesActorType.crew: return Math.floor(0.5 * (this.system.advancement.general ?? 0))\n    //      + (this.system.advancement.ability ?? 0);\n    //     default: return 0;\n    //   }\n    // }\n    // get spentAbilityPoints(): number {\n    //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\n    //   if (!this.playbook) { return 0 }\n    //   return this.abilities.reduce((total, ability) => total + (ability.system.price ?? 1), 0);\n    // }\n    // get getAvailableAdvancements(\"Ability\")(): number {\n    //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\n    //   if (!this.playbook) { return 0 }\n    //   return this.totalAbilityPoints - this.spentAbilityPoints;\n    // }\n    /* Need simple getters for total ability & upgrade points that check for PRICES of items\n          (upgrade.system.price ?? 1) */\n    async grantAdvancementPoints(allowedTypes, amount = 1) {\n        const aPtKey = Array.isArray(allowedTypes)\n            ? [...allowedTypes].sort((a, b) => a.localeCompare(b)).join(\"_\")\n            : allowedTypes;\n        await this.update({ [`system.advancement_points.${aPtKey}`]: (this.system.advancement_points?.[aPtKey] ?? 0) + amount });\n    }\n    async removeAdvancementPoints(allowedTypes, amount = 1) {\n        const aPtKey = Array.isArray(allowedTypes)\n            ? [...allowedTypes].sort((a, b) => a.localeCompare(b)).join(\"_\")\n            : allowedTypes;\n        const newCount = this.system.advancement_points?.[aPtKey] ?? 0 - amount;\n        if (newCount <= 0 && aPtKey in (this.system.advancement_points ?? [])) {\n            await this.update({ [`system.advancement_points.-=${aPtKey}`]: null });\n        }\n        else {\n            await this.update({ [`system.advancement_points.${aPtKey}`]: newCount });\n        }\n    }\n    getAvailableAdvancements(trait) {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)) {\n            return 0;\n        }\n        if (trait in _core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait) {\n            return 1;\n        }\n        if (trait === \"Cohort\") {\n            const pointsCohort = this.system.advancement_points?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.Cohort] ?? 0;\n            const spentCohort = this.cohorts.length;\n            return Math.max(0, pointsCohort - spentCohort);\n        }\n        const pointsAbility = this.system.advancement_points?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.Ability] ?? 0;\n        const pointsCohortType = this.system.advancement_points?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.CohortType] ?? 0;\n        const pointsUpgrade = this.system.advancement_points?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.Upgrade] ?? 0;\n        const pointsUpgradeOrAbility = this.system.advancement_points?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.UpgradeOrAbility] ?? 0;\n        const spentAbility = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sum(this.items\n            .filter((item) => _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.ability, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_ability))\n            .map((abil) => abil.system.price ?? 1));\n        const spentCohortType = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sum(this.cohorts\n            .map((cohort) => Math.max(0, _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique(Object.values(cohort.system.subtypes)).length - 1)));\n        const spentUpgrade = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sum(this.items\n            .filter((item) => _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_upgrade))\n            .map((upgrade) => upgrade.system.price ?? 1));\n        const excessUpgrade = Math.max(0, spentUpgrade - pointsUpgrade);\n        const excessCohortType = Math.max(0, spentCohortType - pointsCohortType);\n        const excessAbility = Math.max(0, spentAbility - pointsAbility);\n        const remainingAbility = Math.max(0, pointsAbility - spentAbility);\n        const remainingCohortType = Math.max(0, pointsCohortType - spentCohortType);\n        const remainingUpgrade = Math.max(0, pointsUpgrade - spentUpgrade);\n        const remainingUpgradeOrAbility = Math.max(0, pointsUpgradeOrAbility - excessUpgrade - (2 * excessAbility) - (2 * excessCohortType));\n        if (trait === \"Ability\") {\n            return remainingAbility + Math.floor(0.5 * remainingUpgradeOrAbility);\n        }\n        if (trait === \"Upgrade\") {\n            return remainingUpgrade + remainingUpgradeOrAbility;\n        }\n        if (trait === \"CohortType\") {\n            return remainingCohortType + remainingUpgradeOrAbility;\n        }\n        return 0;\n    }\n    get availableAbilityPoints() { return this.getAvailableAdvancements(\"Ability\"); }\n    get availableUpgradePoints() { return this.getAvailableAdvancements(\"Upgrade\"); }\n    get availableCohortPoints() { return this.getAvailableAdvancements(\"Cohort\"); }\n    get availableCohortTypePoints() { return this.getAvailableAdvancements(\"CohortType\"); }\n    get canPurchaseAbility() { return this.availableAbilityPoints > 0; }\n    get canPurchaseUpgrade() { return this.availableUpgradePoints > 0; }\n    get canPurchaseCohort() { return this.availableCohortPoints > 0; }\n    get canPurchaseCohortType() { return this.availableCohortTypePoints > 0; }\n    async advancePlaybook() {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew) || !this.playbook) {\n            return;\n        }\n        await this.update({ \"system.experience.playbook.value\": 0 });\n        if (this instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC) {\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: `${this.name} Advances their Playbook!`,\n                body: `${this.name}, select a new Ability on your Character Sheet.`,\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesNoticeType.push,\n                cssClasses: \"advancement-alert\"\n            });\n            this.grantAdvancementPoints(_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.Ability);\n            return;\n        }\n        if (this instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew) {\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: \"You Advance your Crew Playbook!\",\n                body: \"Select new Upgrades and/or Abilities on your Crew Sheet.\",\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesNoticeType.push,\n                cssClasses: \"advancement-alert crew-advancement-alert\"\n            });\n            const coinGained = this.system.tier.value + 2;\n            this.members.forEach((member) => {\n                if (member.primaryUser?.id) {\n                    _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInstance().pushNotice_SocketCall(member.primaryUser?.id, {\n                        title: \"Your Stash Increases! <em>(Crew Advancement)</em>\",\n                        type: _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesNoticeType.push,\n                        body: `You gain ${coinGained} Stash from Crew Advancement.`,\n                        cssClasses: \"stash-alert\"\n                    });\n                    member.addStash(coinGained);\n                }\n            });\n            this.grantAdvancementPoints(_core_constants__WEBPACK_IMPORTED_MODULE_1__.AdvancementPoint.UpgradeOrAbility, 2);\n        }\n    }\n    async advanceAttribute(attribute) {\n        if (!(this instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC)) {\n            return;\n        }\n        if (!this.primaryUser?.id) {\n            return;\n        }\n        await this.update({ [`system.experience.${attribute}.value`]: 0 });\n        const actions = _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Action[attribute].map((action) => `<strong>${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(action)}</strong>`);\n        _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInstance().pushNotice_SocketCall(this.primaryUser.id, {\n            title: `${this.name} Advances their ${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uCase(attribute)}!`,\n            body: `${this.name}, add a dot to one of ${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].oxfordize(actions, true, \"or\")}.`,\n            type: _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesNoticeType.push,\n            cssClasses: \"advancement-alert\"\n        });\n    }\n    get isAtWar() {\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesNPC.IsType(this)) {\n            return false;\n        }\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this)) {\n            return this.crew?.isAtWar ?? false;\n        }\n        return Object.values(this.system.at_war_with ?? {})\n            .filter((val) => val === true)\n            .length > 0;\n    }\n    // #endregion\n    // #region BladesSubActor Implementation ~\n    parentActor;\n    get isSubActor() { return this.parentActor !== undefined; }\n    // #endregion\n    // #region BladesRoll Implementation ~\n    get rollPrimaryModsSchemaSet() {\n        return _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_4__.BladesRollMod.ParseDocModsToSchemaSet(this);\n    }\n    get rollFactors() {\n        const factorData = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: {\n                name: _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier,\n                display: \"Tier\",\n                value: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier),\n                max: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier),\n                baseVal: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier),\n                isActive: true,\n                isPrimary: true,\n                isDominant: false,\n                highFavorsPC: true\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: {\n                name: _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality,\n                display: \"Quality\",\n                value: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality),\n                max: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality),\n                baseVal: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality),\n                isActive: false,\n                isPrimary: false,\n                isDominant: false,\n                highFavorsPC: true\n            }\n        };\n        return factorData;\n    }\n    // #region BladesRoll.PrimaryDoc Implementation\n    get rollPrimaryID() { return this.id; }\n    get rollPrimaryDoc() { return this; }\n    get rollPrimaryName() { return this.name; }\n    get rollPrimaryType() {\n        if (![_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew].includes(this.type)) {\n            throw new Error(`BladesActor of type '${this.type}' (\"${this.name}\") cannot be RollPrimary.`);\n        }\n        return this.type;\n    }\n    get rollPrimaryImg() { return this.img; }\n    // #endregion\n    // #endregion\n    // #region BladesCrew Implementation ~\n    // #endregion\n    // #region PREPARING DERIVED DATA ~\n    prepareDerivedData() {\n        if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n            this._preparePCData(this.system);\n        }\n        if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)) {\n            this._prepareCrewData(this.system);\n        }\n    }\n    _preparePCData(system) {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n            return;\n        }\n        // Extract experience clues from playbook item, if any\n        if (this.playbook) {\n            system.experience.clues = [\n                ...system.experience.clues,\n                ...Object.values(this.playbook.system.experience_clues)\n                    .filter((clue) => Boolean(clue.trim()))\n            ];\n        }\n        // Extract gather information questions from playbook item, if any\n        if (this.playbook) {\n            system.gather_info = [\n                ...system.gather_info,\n                ...Object.values(this.playbook.system.gather_info_questions)\n                    .filter((question) => Boolean(question.trim()))\n            ];\n        }\n    }\n    _prepareCrewData(system) {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)) {\n            return;\n        }\n        // Extract experience clues and turfs from playbook item, if any\n        if (this.playbook) {\n            system.experience.clues = [\n                ...system.experience.clues,\n                ...Object.values(this.playbook.system.experience_clues)\n                    .filter((clue) => Boolean(clue.trim()))\n            ];\n            system.turfs = this.playbook.system.turfs;\n        }\n    }\n    // #endregion\n    // #region OVERRIDES: _onCreateDescendantDocuments, update ~\n    // @ts-expect-error New method not defined in @league VTT types.\n    async _onCreateDescendantDocuments(parent, collection, docs, data, options, userId) {\n        await Promise.all(docs.map(async (doc) => {\n            if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.playbook, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_playbook)) {\n                await Promise.all(this.activeSubItems\n                    .filter((aItem) => aItem.type === doc.type && aItem.system.world_name !== doc.system.world_name)\n                    .map((aItem) => this.remSubItem(aItem)));\n            }\n        }));\n        // @ts-expect-error New method not defined in @league VTT types.\n        await super._onCreateDescendantDocuments(parent, collection, docs, data, options, userId);\n        eLog.checkLog(\"actorTrigger\", \"_onCreateDescendantDocuments\", { parent, collection, docs, data, options, userId });\n        docs.forEach((doc) => {\n            if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.vice) && BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n                this.activeSubActors\n                    .filter((subActor) => subActor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.NPC.VicePurveyor) && !subActor.hasTag(doc.name))\n                    .forEach((subActor) => { this.remSubActor(subActor); });\n            }\n        });\n    }\n    async update(updateData, context, isSkippingSubActorCheck = false) {\n        if (!updateData) {\n            return super.update(updateData);\n        }\n        if (BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)) {\n            if (!this.playbook) {\n                return undefined;\n            }\n            eLog.checkLog(\"actorTrigger\", \"Updating Crew\", { updateData });\n            const playbookUpdateData = Object.fromEntries(Object.entries(flattenObject(updateData))\n                .filter(([key, _]) => key.startsWith(\"system.turfs.\")));\n            updateData = Object.fromEntries(Object.entries(flattenObject(updateData))\n                .filter(([key, _]) => !key.startsWith(\"system.turfs.\")));\n            eLog.checkLog(\"actorTrigger\", \"Updating Crew\", { crewUpdateData: updateData, playbookUpdateData });\n            const diffPlaybookData = diffObject(flattenObject(this.playbook), playbookUpdateData);\n            delete diffPlaybookData._id;\n            if (!_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEmpty(diffPlaybookData)) {\n                await this.playbook.update(playbookUpdateData, context)\n                    .then(() => this.sheet?.render(false));\n            }\n        }\n        else if ((BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc)\n            || BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.faction))\n            && this.parentActor\n            && !isSkippingSubActorCheck) {\n            // This is an embedded Actor: Update it as a subActor of parentActor.\n            return this.parentActor.updateSubActor(this.id, updateData)\n                .then(() => this);\n        }\n        return super.update(updateData, context);\n    }\n    // #endregion\n    // #region Rolling Dice ~\n    /**\n     * Creates <options> modifiers for dice roll.\n     *\n     * @param {int} rs\n     *  Min die modifier\n     * @param {int} re\n     *  Max die modifier\n     * @param {int} s\n     *  Selected die\n     */\n    createListOfDiceMods(rs, re, s) {\n        let text = \"\";\n        if (s === \"\") {\n            s = 0;\n        }\n        for (let i = rs; i <= re; i++) {\n            let plus = \"\";\n            if (i >= 0) {\n                plus = \"+\";\n            }\n            text += `<option value=\"${i}\"`;\n            if (i === s) {\n                text += \" selected\";\n            }\n            text += `>${plus}${i}d</option>`;\n        }\n        return text;\n    }\n    // #endregion Rolling Dice\n    // #region NPC Randomizers ~\n    updateRandomizers() {\n        if (!BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc)) {\n            return;\n        }\n        const titleChance = 0.05;\n        const suffixChance = 0.01;\n        const { persona, secret, random } = this.system;\n        /**\n         * Returns a random element from an array, optionally excluding all values\n         * passed as subsequent parameters.\n         * @param {string[]} arr The array to randomly select from.\n         * @param {...string} curVals The values to exclude from the sample.\n         */\n        function sampleArray(arr, ...curVals) {\n            arr = arr.filter((elem) => !curVals.includes(elem));\n            if (!arr.length) {\n                return \"\";\n            }\n            return arr[Math.floor(Math.random() * arr.length)];\n        }\n        const randomGen = {\n            name: (gen) => {\n                return [\n                    Math.random() <= titleChance\n                        ? sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_title)\n                        : \"\",\n                    sampleArray([\n                        ...((gen ?? \"\").charAt(0).toLowerCase() !== \"m\" ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_first.female : []),\n                        ...((gen ?? \"\").charAt(0).toLowerCase() !== \"f\" ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_first.male : [])\n                    ]),\n                    `\"${sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_alias)}\"`,\n                    sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_surname),\n                    Math.random() <= suffixChance\n                        ? sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.name_suffix)\n                        : \"\"\n                ].filter((val) => Boolean(val)).join(\" \");\n            },\n            background: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.background, random.background.value),\n            heritage: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.heritage, random.heritage.value),\n            profession: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.profession, random.profession.value),\n            gender: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.gender, persona.gender.value),\n            appearance: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.appearance, persona.appearance.value),\n            goal: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.goal, persona.goal.value, secret.goal.value),\n            method: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.method, persona.method.value, secret.method.value),\n            trait: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.trait, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value),\n            interests: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.interests, persona.interests.value, secret.interests.value),\n            quirk: () => sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.quirk, persona.quirk.value),\n            style: (gen = \"\") => sampleArray([\n                ...(gen.charAt(0).toLowerCase() !== \"m\" ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.style.female : []),\n                ...(gen.charAt(0).toLowerCase() !== \"f\" ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.style.male : [])\n            ], persona.style.value)\n        };\n        const gender = persona.gender.isLocked ? persona.gender.value : randomGen.gender();\n        const updateKeys = [\n            ...Object.keys(persona).filter((key) => !persona[key]?.isLocked),\n            ...Object.keys(random).filter((key) => !random[key]?.isLocked),\n            ...Object.keys(secret).filter((key) => !secret[key]?.isLocked)\n                .map((secretKey) => `secret-${secretKey}`)\n        ];\n        eLog.checkLog(\"Update Keys\", { updateKeys });\n        const updateData = {};\n        updateKeys.forEach((key) => {\n            switch (key) {\n                case \"name\":\n                case \"heritage\":\n                case \"background\":\n                case \"profession\": {\n                    const randomVal = randomGen[key]();\n                    updateData[`system.random.${key}`] = {\n                        isLocked: false,\n                        value: randomVal || random[key].value\n                    };\n                    break;\n                }\n                case \"secret-goal\":\n                case \"secret-interests\":\n                case \"secret-method\": {\n                    key = key.replace(/^secret-/, \"\");\n                    const randomVal = randomGen[key]();\n                    updateData[`system.secret.${key}`] = {\n                        isLocked: false,\n                        value: randomVal || secret[key].value\n                    };\n                    break;\n                }\n                case \"gender\": {\n                    updateData[`system.persona.${key}`] = {\n                        isLocked: persona.gender.isLocked,\n                        value: gender\n                    };\n                    break;\n                }\n                case \"trait1\":\n                case \"trait2\":\n                case \"trait3\":\n                case \"secret-trait\": {\n                    const trait1 = persona.trait1.isLocked\n                        ? persona.trait1.value\n                        : sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.trait, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\n                    const trait2 = persona.trait2.isLocked\n                        ? persona.trait2.value\n                        : sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.trait, trait1, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\n                    const trait3 = persona.trait3.isLocked\n                        ? persona.trait3.value\n                        : sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.trait, trait1, trait2, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\n                    const secretTrait = secret.trait.isLocked\n                        ? secret.trait.value\n                        : sampleArray(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.NPC.trait, trait1, trait2, trait3, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\n                    if (!persona.trait1.isLocked) {\n                        updateData[\"system.persona.trait1\"] = {\n                            isLocked: false,\n                            value: trait1\n                        };\n                    }\n                    if (!persona.trait2.isLocked) {\n                        updateData[\"system.persona.trait2\"] = {\n                            isLocked: false,\n                            value: trait2\n                        };\n                    }\n                    if (!persona.trait3.isLocked) {\n                        updateData[\"system.persona.trait3\"] = {\n                            isLocked: false,\n                            value: trait3\n                        };\n                    }\n                    if (!secret.trait.isLocked) {\n                        updateData[\"system.secret.trait\"] = {\n                            isLocked: false,\n                            value: secretTrait\n                        };\n                    }\n                    break;\n                }\n                default: {\n                    const randomVal = randomGen[key]();\n                    updateData[`system.persona.${key}`] = {\n                        isLocked: false,\n                        value: randomVal || persona[key].value\n                    };\n                    break;\n                }\n            }\n        });\n        this.update(updateData);\n    }\n    // #endregion NPC Randomizers\n    // Unlock lower-level update method for subclasses\n    async callOnUpdate(...args) {\n        await this._onUpdate(...args);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesActor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/BladesActor.ts\n");

/***/ }),

/***/ "./ts/BladesItem.ts":
/*!**************************!*\
  !*** ./ts/BladesItem.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./classes/BladesDirector */ \"./ts/classes/BladesDirector.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\nclass BladesItem extends Item {\n    // #region Static Overrides: Create ~\n    static async create(data, options = {}) {\n        if (Array.isArray(data)) {\n            data = data[0];\n        }\n        data.system = data.system ?? {};\n        eLog.checkLog2(\"item\", \"BladesItem.create(data,options)\", { data, options });\n        // ~ Create world_name\n        data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\n        return super.create(data, options);\n    }\n    // #endregion\n    // #region BladesDocument Implementation\n    static get All() { return game.items; }\n    static Get(itemRef) {\n        if (itemRef instanceof BladesItem) {\n            return itemRef;\n        }\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isDocID(itemRef)) {\n            return BladesItem.All.get(itemRef);\n        }\n        return BladesItem.All.find((a) => a.system.world_name === itemRef)\n            || BladesItem.All.find((a) => a.name === itemRef);\n    }\n    static GetTypeWithTags(docType, ...tags) {\n        if (Array.isArray(docType)) {\n            return docType\n                .map((dType) => BladesItem.All.filter((item) => item.type === dType))\n                .flat();\n        }\n        return BladesItem.All.filter((item) => item.type === docType)\n            .filter((item) => item.hasTag(...tags));\n    }\n    static IsType(doc, ...types) {\n        const typeSet = new Set(types);\n        return doc instanceof BladesItem && typeSet.has(doc.type);\n    }\n    get tags() { return this.system.tags ?? []; }\n    hasTag(...tags) {\n        return tags.every((tag) => this.tags.includes(tag));\n    }\n    async addTag(...tags) {\n        const curTags = this.tags;\n        tags.forEach((tag) => {\n            if (curTags.includes(tag)) {\n                return;\n            }\n            curTags.push(tag);\n        });\n        await this.update({ \"system.tags\": curTags });\n    }\n    async remTag(...tags) {\n        const curTags = this.tags.filter((tag) => !tags.includes(tag));\n        await this.update({ \"system.tags\": curTags });\n    }\n    get tooltip() {\n        const tooltipText = [\n            this.system.concept,\n            this.system.rules,\n            this.system.notes\n        ].filter(Boolean).join(\"\");\n        if (tooltipText) {\n            return (new Handlebars.SafeString(tooltipText)).toString();\n        }\n        return undefined;\n    }\n    dialogCSSClasses = \"\";\n    getFactorTotal(factor) {\n        switch (factor) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier: {\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n                    return this.system.tier.value + (this.parent?.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) ?? 0);\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n                    return this.system.tier.value + (this.parent?.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) ?? 0);\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)) {\n                    return this.system.tier.value + (this.parent?.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) ?? 0);\n                }\n                return this.system.tier.value;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality: {\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n                    return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) + (this.system.quality_bonus ?? 0);\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n                    return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) + (this.system.quality_bonus ?? 0) + 1;\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)) {\n                    let thisQuality = this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier)\n                        + (this.hasTag(\"Fine\") ? 1 : 0);\n                    if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.parent)) {\n                        thisQuality += this.parent.getTaggedItemBonuses(this.tags);\n                    }\n                    return thisQuality;\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design)) {\n                    return this.system.min_quality;\n                }\n                return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier);\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale: {\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n                    return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) + (this.system.scale_bonus ?? 0);\n                }\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n                    return 0 + (this.system.scale_bonus ?? 0);\n                }\n                return 0;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude: {\n                if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual)) {\n                    return this.system.magnitude.value;\n                }\n                return 0;\n            }\n            default: return 0;\n        }\n    }\n    // #endregion\n    // #region BladesItemDocument Implementation\n    async archive() {\n        await this.addTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.System.Archived);\n        return this;\n    }\n    async unarchive() {\n        await this.remTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.System.Archived);\n        return this;\n    }\n    // #endregion\n    // #region BladesRoll Implementation\n    get rollFactors() {\n        const factorsMap = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design]: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality]\n        };\n        if (!factorsMap[this.type]) {\n            return {};\n        }\n        const factors = factorsMap[this.type];\n        const factorData = {};\n        (factors ?? []).forEach((factor, i) => {\n            const factorTotal = this.getFactorTotal(factor);\n            factorData[factor] = {\n                name: factor,\n                value: factorTotal,\n                max: factorTotal,\n                baseVal: factorTotal,\n                display: [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality].includes(factor) ? _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].romanizeNum(factorTotal) : `${factorTotal}`,\n                isActive: i === 0,\n                isPrimary: i === 0,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: `factor-gold${i === 0 ? \" factor-main\" : \"\"}`\n            };\n        });\n        return factorData;\n    }\n    // #region BladesRoll.PrimaryDoc Implementation\n    get rollPrimaryID() { return this.id; }\n    get rollPrimaryDoc() { return this; }\n    get rollPrimaryName() { return this.name; }\n    get rollPrimaryType() {\n        if (![\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gm_tracker,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.score\n        ].includes(this.type)) {\n            throw new Error(`BladesItem of type '${this.type}' (\"${this.name}\") cannot be RollPrimary.`);\n        }\n        return this.type;\n    }\n    get rollPrimaryImg() { return this.img; }\n    get rollPrimaryModsSchemaSet() {\n        // Add roll mods from COHORT harm\n        return _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_4__.BladesRollMod.ParseDocModsToSchemaSet(this);\n    }\n    async applyHarm(amount, _name) {\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n            const curHarm = this.system.harm.value;\n            let newHarm;\n            if (amount > curHarm) {\n                newHarm = amount;\n            }\n            else {\n                newHarm = curHarm + 1;\n            }\n            const harmVerb = [\"is Weakened\", \"is Impaired\", \"has been Broken\", \"has been Killed!\"];\n            const harmEffect = [\n                \"They act with Reduced Effect.\",\n                \"They act with Reduced Effect and suffer -1d to all rolls.\",\n                \"They cannot do anything until they recover.\",\n                \"You may replace them during Downtime.\"\n            ];\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: `${this.name} ${harmVerb[newHarm - 1]}`,\n                body: harmEffect[newHarm - 1],\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n                cssClasses: \"harm-alert\"\n            });\n            await this.update({ \"system.harm\": amount });\n        }\n    }\n    async applyWorsePosition() {\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n            this.setFlag(\"eunos-blades\", \"isWorsePosition\", true);\n        }\n    }\n    // #endregion\n    // #region BladesRoll.OppositionDoc Implementation\n    get rollOppID() { return this.id; }\n    get rollOppDoc() { return this; }\n    get rollOppImg() { return this.img; }\n    get rollOppName() { return this.name; }\n    get rollOppSubName() { return \"\"; }\n    get rollOppType() {\n        if (![\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gm_tracker,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.score,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.location,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual\n        ].includes(this.type)) {\n            throw new Error(`BladesItem of type '${this.type}' (\"${this.name}\") cannot be RollOpposition.`);\n        }\n        return this.type;\n    }\n    get rollOppModsSchemaSet() { return []; }\n    // #endregion\n    // #region BladesRoll.ParticipantDoc Implementation\n    get rollParticipantID() { return this.id; }\n    get rollParticipantDoc() { return this; }\n    get rollParticipantIcon() { return this.img; }\n    get rollParticipantName() { return this.name; }\n    get rollParticipantType() {\n        if (![\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gm_tracker\n        ].includes(this.type)) {\n            throw new Error(`BladesItem of type '${this.type}' (\"${this.name}\") cannot be RollParticipant.`);\n        }\n        return this.type;\n    }\n    get rollParticipantModsSchemaSet() { return []; }\n    // #endregion\n    // #endregion\n    // #region PREPARING DERIVED DATA\n    prepareDerivedData() {\n        super.prepareDerivedData();\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n            this._prepareCohortData(this.system);\n        }\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook)) {\n            this._preparePlaybookData(this.system);\n        }\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)) {\n            this._prepareGearData(this.system);\n        }\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook)) {\n            this._preparePlaybookData(this.system);\n        }\n    }\n    _prepareCohortData(system) {\n        if (!BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n            return;\n        }\n        system.tier.name = \"Quality\";\n        const subtypes = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unique(Object.values(system.subtypes)\n            .map((subtype) => subtype.trim())\n            .filter((subtype) => /[A-Za-z]/.test(subtype)));\n        const eliteSubtypes = [\n            ...Object.values(system.elite_subtypes)\n        ];\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(this.parent)) {\n            eliteSubtypes.push(...this.parent.upgrades\n                .filter((upgrade) => (upgrade.name ?? \"\").startsWith(\"Elite\"))\n                .map((upgrade) => (upgrade.name ?? \"\").trim().replace(/^Elite /, \"\")));\n        }\n        system.subtypes = Object.fromEntries(subtypes.map((subtype, i) => [`${i + 1}`, subtype]));\n        system.elite_subtypes = Object.fromEntries(_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unique(eliteSubtypes\n            .map((subtype) => subtype.trim())\n            .filter((subtype) => /[A-Za-z]/.test(subtype) && subtypes.includes(subtype)))\n            .map((subtype, i) => [`${i + 1}`, subtype]));\n        system.edges = Object.fromEntries(Object.values(system.edges ?? [])\n            .filter((edge) => /[A-Za-z]/.test(edge))\n            .map((edge, i) => [`${i + 1}`, edge.trim()]));\n        system.flaws = Object.fromEntries(Object.values(system.flaws ?? [])\n            .filter((flaw) => /[A-Za-z]/.test(flaw))\n            .map((flaw, i) => [`${i + 1}`, flaw.trim()]));\n        system.quality = this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality);\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n            if ([...subtypes, ...eliteSubtypes].includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.GangType.Vehicle)) {\n                system.scale = this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale);\n                system.scaleExample = \"(1 vehicle)\";\n            }\n            else {\n                system.scale = this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale);\n                const scaleIndex = Math.min(6, system.scale);\n                system.scaleExample = _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ScaleExamples[scaleIndex];\n                system.subtitle = _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ScaleSizes[scaleIndex];\n            }\n            if (subtypes.length + eliteSubtypes.length === 0) {\n                system.subtitle = system.subtitle.replace(/\\s+of\\b/g, \"\").trim();\n            }\n        }\n        else {\n            system.scale = 0;\n            system.scaleExample = [...subtypes, ...eliteSubtypes].includes(\"Pet\") ? \"(1 animal)\" : \"(1 person)\";\n            system.subtitle = \"An Expert\";\n        }\n        if (subtypes.length + eliteSubtypes.length > 0) {\n            if ([...subtypes, ...eliteSubtypes].includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.GangType.Vehicle)) {\n                system.subtitle = _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].VehicleDescriptors[Math.min(6, this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier))];\n            }\n            else {\n                system.subtitle += ` ${_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].oxfordize([\n                    ...subtypes.filter((subtype) => !eliteSubtypes.includes(subtype)),\n                    ...eliteSubtypes.map((subtype) => `Elite ${subtype}`)\n                ], false, \"&\")}`;\n            }\n        }\n    }\n    _prepareGearData(system) {\n        if (!BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)) {\n            return;\n        }\n        system.tier.name = \"Quality\";\n    }\n    _preparePlaybookData(system) {\n        if (!BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook)) {\n            return;\n        }\n        const expClueData = {};\n        [...Object.values(system.experience_clues).filter((clue) => /[A-Za-z]/.test(clue)), \" \"].forEach((clue, i) => { expClueData[(i + 1).toString()] = clue; });\n        system.experience_clues = expClueData;\n        // eLog.checkLog3(\"experienceClues\", {expClueData})\n        if (BladesItem.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook)) {\n            const gatherInfoData = {};\n            [...Object.values(system.gather_info_questions).filter((question) => /[A-Za-z]/.test(question)), \" \"].forEach((question, i) => { gatherInfoData[(i + 1).toString()] = question; });\n            system.gather_info_questions = gatherInfoData;\n            // eLog.checkLog3(\"gatherInfoQuestions\", {gatherInfoData});\n        }\n    }\n    // #endregion\n    // Unlock lower-level update method for subclasses\n    async callOnUpdate(...args) {\n        await this._onUpdate(...args);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesItem);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/BladesItem.ts\n");

/***/ }),

/***/ "./ts/blades.ts":
/*!**********************!*\
  !*** ./ts/blades.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/settings */ \"./ts/core/settings.ts\");\n/* harmony import */ var _core_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/helpers */ \"./ts/core/helpers.ts\");\n/* harmony import */ var _classes_BladesChat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./classes/BladesChat */ \"./ts/classes/BladesChat.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/logger */ \"./ts/core/logger.ts\");\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./classes/BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n/* harmony import */ var _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./classes/BladesDirector */ \"./ts/classes/BladesDirector.ts\");\n/* harmony import */ var _classes_BladesConsequence__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./classes/BladesConsequence */ \"./ts/classes/BladesConsequence.ts\");\n/* harmony import */ var _classes_BladesScene__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./classes/BladesScene */ \"./ts/classes/BladesScene.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _sheets_item_BladesItemSheet__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sheets/item/BladesItemSheet */ \"./ts/sheets/item/BladesItemSheet.ts\");\n/* harmony import */ var _sheets_actor_BladesPCSheet__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sheets/actor/BladesPCSheet */ \"./ts/sheets/actor/BladesPCSheet.ts\");\n/* harmony import */ var _sheets_actor_BladesCrewSheet__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./sheets/actor/BladesCrewSheet */ \"./ts/sheets/actor/BladesCrewSheet.ts\");\n/* harmony import */ var _sheets_actor_BladesNPCSheet__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./sheets/actor/BladesNPCSheet */ \"./ts/sheets/actor/BladesNPCSheet.ts\");\n/* harmony import */ var _sheets_actor_BladesFactionSheet__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./sheets/actor/BladesFactionSheet */ \"./ts/sheets/actor/BladesFactionSheet.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* harmony import */ var _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./classes/BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n/* harmony import */ var _core_ai__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./core/ai */ \"./ts/core/ai.ts\");\n/* harmony import */ var _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./documents/BladesActiveEffect */ \"./ts/documents/BladesActiveEffect.ts\");\n/* harmony import */ var _sheets_item_BladesGMTrackerSheet__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./sheets/item/BladesGMTrackerSheet */ \"./ts/sheets/item/BladesGMTrackerSheet.ts\");\n/* harmony import */ var _sheets_item_BladesClockKeeperSheet__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./sheets/item/BladesClockKeeperSheet */ \"./ts/sheets/item/BladesClockKeeperSheet.ts\");\n/* harmony import */ var _core_debug__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./core/debug */ \"./ts/core/debug.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region ▮▮▮▮▮▮▮ IMPORTS ▮▮▮▮▮▮▮ ~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* DEVCODE*/\n\nCONFIG.debug.logging = true;\nObject.assign(globalThis, { eLog: _core_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"], BladesDebug: _core_debug__WEBPACK_IMPORTED_MODULE_24__[\"default\"] });\nHandlebars.registerHelper(\"eLog\", _core_logger__WEBPACK_IMPORTED_MODULE_5__[\"default\"].hbsLog);\n/* !DEVCODE*/\nlet socket; // ~ SocketLib interface\n// #endregion ▮▮▮▮[IMPORTS]▮▮▮▮\nclass GlobalGetter {\n    get clockKeys() { return game.eunoblades.ClockKeys.filter((clockKey) => clockKey.isInScene() && clockKey.isVisible); }\n    get roll() { return _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__[\"default\"].Active; }\n    get user() { return game.users.getName(\"Alistair\"); }\n    get actor() { return game.actors.getName(\"Alistair\"); }\n    get rollTarget() { return this.roll?.target; }\n    get rollData() { return this.roll?.data; }\n    get userFlags() { return this.user?.flags?.[\"eunos-blades\"]; }\n    get actorFlags() { return this.actor?.flags?.[\"eunos-blades\"]; }\n    get rollPrimary() { return this.roll?.rollPrimary; }\n    get rollPrimaryDoc() { return this.roll?.rollPrimaryDoc; }\n    get rollOpposition() { return this.roll?.rollOpposition; }\n    get sheetData() { return this.roll?.context; }\n    newActionRoll() {\n        const pc = game.actors.getName(\"Alistair\");\n        if (!pc) {\n            return;\n        }\n        const conf = {\n            target: pc,\n            targetFlagKey: \"rollCollab\",\n            rollType: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollType.Action,\n            rollTrait: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ActionTrait.finesse,\n            rollUserID: game.users.find((user) => user.character?.name === \"Alistair\")?.id,\n            rollPrimaryData: pc\n        };\n        _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesActionRoll.New(conf);\n    }\n}\n// #region Globals: Exposing Functionality to Global Scope ~\n/* DEVCODE*/ Object.assign(globalThis, {\n    get: new GlobalGetter(),\n    // updateClaims,\n    // updateContacts,\n    // updateOps,\n    // updateFactions,\n    // updateDescriptions,\n    // updateRollMods,\n    BladesScene: _classes_BladesScene__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    BladesDirector: _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    BladesActor: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesActor,\n    BladesPC: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesPC,\n    BladesCrew: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesCrew,\n    BladesNPC: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesNPC,\n    BladesFaction: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesFaction,\n    BladesPCSheet: _sheets_actor_BladesPCSheet__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    BladesCrewSheet: _sheets_actor_BladesCrewSheet__WEBPACK_IMPORTED_MODULE_15__[\"default\"],\n    BladesFactionSheet: _sheets_actor_BladesFactionSheet__WEBPACK_IMPORTED_MODULE_17__[\"default\"],\n    BladesClockKey: _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    BladesNPCSheet: _sheets_actor_BladesNPCSheet__WEBPACK_IMPORTED_MODULE_16__[\"default\"],\n    BladesActiveEffect: _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_21__[\"default\"],\n    BladesRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__[\"default\"],\n    BladesRollMod: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesRollMod,\n    BladesRollPrimary: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesRollPrimary,\n    BladesRollOpposition: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesRollOpposition,\n    BladesRollParticipant: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesRollParticipant,\n    BladesActionRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesActionRoll,\n    BladesEngagementRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesEngagementRoll,\n    BladesFortuneRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesFortuneRoll,\n    BladesIncarcerationRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesIncarcerationRoll,\n    BladesIndulgeViceRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesIndulgeViceRoll,\n    BladesInlineResistanceRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesInlineResistanceRoll,\n    BladesResistanceRoll: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__.BladesResistanceRoll,\n    BladesChat: _classes_BladesChat__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    BladesConsequence: _classes_BladesConsequence__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    G: _core_gsap__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    U: _core_utilities__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    C: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    BladesItem: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesItem,\n    BladesClockKeeper: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesClockKeeper,\n    BladesGMTracker: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesGMTracker,\n    BladesLocation: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesLocation,\n    BladesProject: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesProject,\n    BladesScore: _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesScore,\n    BladesItemSheet: _sheets_item_BladesItemSheet__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\n    BladesClockKeeperSheet: _sheets_item_BladesClockKeeperSheet__WEBPACK_IMPORTED_MODULE_23__[\"default\"],\n    BladesGMTrackerSheet: _sheets_item_BladesGMTrackerSheet__WEBPACK_IMPORTED_MODULE_22__[\"default\"],\n    BladesAI: _core_ai__WEBPACK_IMPORTED_MODULE_20__[\"default\"],\n    AIAssistant: _core_ai__WEBPACK_IMPORTED_MODULE_20__.AIAssistant,\n    AGENTS: _core_ai__WEBPACK_IMPORTED_MODULE_20__.AGENTS\n}); /* !DEVCODE*/\n// #endregion Globals\n// #region ████████ SYSTEM INITIALIZATION: Initializing Blades In The Dark System on 'Init' Hook ████████\nHooks.once(\"init\", async () => {\n    // Initialize Game object\n    game.eunoblades = {\n        Rolls: new Collection(),\n        ClockKeys: new Collection(),\n        Consequences: new Collection(),\n        Director: _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getInstance(),\n        Tooltips: new WeakMap()\n    };\n    eLog.display(\"Initializing Blades In the Dark System\");\n    // Register System Settings\n    (0,_core_settings__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    CONFIG.debug.hooks = _core_utilities__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getSetting(\"debugHooks\");\n    // Initialize Fonts & Gsap Animations\n    (0,_core_gsap__WEBPACK_IMPORTED_MODULE_6__.Initialize)();\n    CONFIG.Item.documentClass = _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__[\"default\"];\n    CONFIG.Actor.documentClass = _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__[\"default\"];\n    CONFIG.Scene.documentClass = _classes_BladesScene__WEBPACK_IMPORTED_MODULE_10__[\"default\"];\n    CONFIG.ChatMessage.documentClass = _classes_BladesChat__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n    // Register sheet application classes\n    Actors.unregisterSheet(\"core\", ActorSheet);\n    Items.unregisterSheet(\"core\", ItemSheet);\n    Items.registerSheet(\"blades\", _sheets_item_BladesItemSheet__WEBPACK_IMPORTED_MODULE_13__[\"default\"], { types: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ItemTypes, makeDefault: true });\n    (0,_core_helpers__WEBPACK_IMPORTED_MODULE_2__.registerHandlebarHelpers)();\n    (0,_core_helpers__WEBPACK_IMPORTED_MODULE_2__.preloadHandlebarsTemplates)();\n    // Initialize preliminary classes with templates to load\n    await Promise.all([\n        _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesPC.Initialize(),\n        _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesCrew.Initialize(),\n        _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesNPC.Initialize(),\n        _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_11__.BladesFaction.Initialize(),\n        _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_21__[\"default\"].Initialize(),\n        _sheets_item_BladesGMTrackerSheet__WEBPACK_IMPORTED_MODULE_22__[\"default\"].Initialize(),\n        _sheets_item_BladesClockKeeperSheet__WEBPACK_IMPORTED_MODULE_23__[\"default\"].Initialize(),\n        _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesScore.Initialize(),\n        _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Initialize(),\n        _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__[\"default\"].Initialize(),\n        _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesProject.Initialize(),\n        _classes_BladesChat__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Initialize()\n    ]);\n});\nHooks.once(\"ready\", async () => {\n    // Initialize overlays\n    await Promise.all([\n        _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__[\"default\"].Initialize(),\n        _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesGMTracker.Initialize(),\n        _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_12__.BladesClockKeeper.Initialize()\n    ]);\n    // Initialize Clocks, ClockKeys & Consequences\n    _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_7__[\"default\"].Initialize();\n    await _classes_BladesConsequence__WEBPACK_IMPORTED_MODULE_9__[\"default\"].Initialize();\n    (0,_core_settings__WEBPACK_IMPORTED_MODULE_1__.initDOMStyles)();\n    (0,_core_settings__WEBPACK_IMPORTED_MODULE_1__.initCanvasStyles)();\n    (0,_core_settings__WEBPACK_IMPORTED_MODULE_1__.initTinyMCEStyles)();\n    await _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getInstance().renderOverlay_SocketResponse();\n    _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_8__[\"default\"].InitSockets();\n    _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_18__[\"default\"].InitSockets();\n});\n// #endregion ▄▄▄▄▄ SYSTEM INITIALIZATION ▄▄▄▄▄\n// #region ░░░░░░░[SocketLib]░░░░ SocketLib Initialization ░░░░░░░ ~\nHooks.once(\"socketlib.ready\", () => {\n    socket = socketlib.registerSystem(\"eunos-blades\");\n    /* DEVCODE*/ Object.assign(globalThis, { socket, socketlib }); /* !DEVCODE*/\n});\nHooks.once(\"diceSoNiceReady\", (dice3d) => {\n    dice3d.addSystem({ id: \"eunos-blades\", name: \"Euno's Blades\" }, \"preferred\");\n    dice3d.addDicePreset({\n        type: \"d6\",\n        labels: [1, 2, 3, 4, 5, 6].map((num) => `systems/eunos-blades/assets/dice/faces/${num}.webp`),\n        system: \"eunos-blades\",\n        bumpMaps: [1, 2, 3, 4, 5, 6].map((num) => `systems/eunos-blades/assets/dice/bump-maps/${num}.webp`),\n        emissiveMaps: [undefined, undefined, undefined, undefined, undefined, \"systems/eunos-blades/assets/dice/emission-maps/6.webp\"],\n        emissive: \"#d89300\"\n    });\n});\n// #endregion ░░░░[Dice So Nice]░░░░\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VUFBVSxrRUFBaUI7QUFDM0IsSUFBSSw2REFBYTtBQUNqQixJQUFJLGdFQUFnQjtBQUNwQixJQUFJLGlFQUFpQjtBQUNyQixVQUFVLCtEQUFjO0FBQ3hCLElBQUksK0RBQWM7QUFDbEIsSUFBSSw0REFBVTtBQUNkLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxtQkFBbUIsR0FBRztBQUNuRSxDQUFDO0FBQ0Q7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFO0FBQ0E7QUFDQSwwRkFBMEYsSUFBSTtBQUM5RjtBQUNBLGdHQUFnRyxJQUFJO0FBQ3BHO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvYmxhZGVzLnRzP2Y0N2UiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vLyAjcmVnaW9uIOKWruKWruKWruKWruKWruKWruKWriBJTVBPUlRTIOKWruKWruKWruKWruKWruKWruKWriB+XG5pbXBvcnQgQywgeyBBY3Rpb25UcmFpdCwgUm9sbFR5cGUgfSBmcm9tIFwiLi9jb3JlL2NvbnN0YW50c1wiO1xuaW1wb3J0IHJlZ2lzdGVyU2V0dGluZ3MsIHsgaW5pdFRpbnlNQ0VTdHlsZXMsIGluaXRDYW52YXNTdHlsZXMsIGluaXRET01TdHlsZXMgfSBmcm9tIFwiLi9jb3JlL3NldHRpbmdzXCI7XG5pbXBvcnQgeyByZWdpc3RlckhhbmRsZWJhckhlbHBlcnMsIHByZWxvYWRIYW5kbGViYXJzVGVtcGxhdGVzIH0gZnJvbSBcIi4vY29yZS9oZWxwZXJzXCI7XG5pbXBvcnQgQmxhZGVzQ2hhdCBmcm9tIFwiLi9jbGFzc2VzL0JsYWRlc0NoYXRcIjtcbmltcG9ydCBVIGZyb20gXCIuL2NvcmUvdXRpbGl0aWVzXCI7XG5pbXBvcnQgbG9nZ2VyIGZyb20gXCIuL2NvcmUvbG9nZ2VyXCI7XG5pbXBvcnQgRywgeyBJbml0aWFsaXplIGFzIEdzYXBJbml0aWFsaXplIH0gZnJvbSBcIi4vY29yZS9nc2FwXCI7XG5pbXBvcnQgQmxhZGVzQ2xvY2tLZXkgZnJvbSBcIi4vY2xhc3Nlcy9CbGFkZXNDbG9ja0tleVwiO1xuaW1wb3J0IEJsYWRlc0RpcmVjdG9yIGZyb20gXCIuL2NsYXNzZXMvQmxhZGVzRGlyZWN0b3JcIjtcbmltcG9ydCBCbGFkZXNDb25zZXF1ZW5jZSBmcm9tIFwiLi9jbGFzc2VzL0JsYWRlc0NvbnNlcXVlbmNlXCI7XG5pbXBvcnQgQmxhZGVzU2NlbmUgZnJvbSBcIi4vY2xhc3Nlcy9CbGFkZXNTY2VuZVwiO1xuaW1wb3J0IEJsYWRlc0FjdG9yUHJveHksIHsgQmxhZGVzQWN0b3IsIEJsYWRlc1BDLCBCbGFkZXNDcmV3LCBCbGFkZXNOUEMsIEJsYWRlc0ZhY3Rpb24gfSBmcm9tIFwiLi9kb2N1bWVudHMvQmxhZGVzQWN0b3JQcm94eVwiO1xuaW1wb3J0IEJsYWRlc0l0ZW1Qcm94eSwgeyBCbGFkZXNJdGVtLCBCbGFkZXNDbG9ja0tlZXBlciwgQmxhZGVzR01UcmFja2VyLCBCbGFkZXNMb2NhdGlvbiwgQmxhZGVzU2NvcmUsIEJsYWRlc1Byb2plY3QgfSBmcm9tIFwiLi9kb2N1bWVudHMvQmxhZGVzSXRlbVByb3h5XCI7XG5pbXBvcnQgQmxhZGVzSXRlbVNoZWV0IGZyb20gXCIuL3NoZWV0cy9pdGVtL0JsYWRlc0l0ZW1TaGVldFwiO1xuaW1wb3J0IEJsYWRlc1BDU2hlZXQgZnJvbSBcIi4vc2hlZXRzL2FjdG9yL0JsYWRlc1BDU2hlZXRcIjtcbmltcG9ydCBCbGFkZXNDcmV3U2hlZXQgZnJvbSBcIi4vc2hlZXRzL2FjdG9yL0JsYWRlc0NyZXdTaGVldFwiO1xuaW1wb3J0IEJsYWRlc05QQ1NoZWV0IGZyb20gXCIuL3NoZWV0cy9hY3Rvci9CbGFkZXNOUENTaGVldFwiO1xuaW1wb3J0IEJsYWRlc0ZhY3Rpb25TaGVldCBmcm9tIFwiLi9zaGVldHMvYWN0b3IvQmxhZGVzRmFjdGlvblNoZWV0XCI7XG5pbXBvcnQgQmxhZGVzUm9sbCwgeyBCbGFkZXNSb2xsTW9kLCBCbGFkZXNSb2xsUHJpbWFyeSwgQmxhZGVzUm9sbE9wcG9zaXRpb24sIEJsYWRlc1JvbGxQYXJ0aWNpcGFudCwgQmxhZGVzQWN0aW9uUm9sbCwgQmxhZGVzRW5nYWdlbWVudFJvbGwsIEJsYWRlc0ZvcnR1bmVSb2xsLCBCbGFkZXNJbmNhcmNlcmF0aW9uUm9sbCwgQmxhZGVzSW5kdWxnZVZpY2VSb2xsLCBCbGFkZXNJbmxpbmVSZXNpc3RhbmNlUm9sbCwgQmxhZGVzUmVzaXN0YW5jZVJvbGwgfSBmcm9tIFwiLi9jbGFzc2VzL0JsYWRlc1JvbGxcIjtcbmltcG9ydCBCbGFkZXNEaWFsb2cgZnJvbSBcIi4vY2xhc3Nlcy9CbGFkZXNEaWFsb2dcIjtcbmltcG9ydCBCbGFkZXNBSSwgeyBBR0VOVFMsIEFJQXNzaXN0YW50IH0gZnJvbSBcIi4vY29yZS9haVwiO1xuaW1wb3J0IEJsYWRlc0FjdGl2ZUVmZmVjdCBmcm9tIFwiLi9kb2N1bWVudHMvQmxhZGVzQWN0aXZlRWZmZWN0XCI7XG5pbXBvcnQgQmxhZGVzR01UcmFja2VyU2hlZXQgZnJvbSBcIi4vc2hlZXRzL2l0ZW0vQmxhZGVzR01UcmFja2VyU2hlZXRcIjtcbmltcG9ydCBCbGFkZXNDbG9ja0tlZXBlclNoZWV0IGZyb20gXCIuL3NoZWV0cy9pdGVtL0JsYWRlc0Nsb2NrS2VlcGVyU2hlZXRcIjtcbi8qIERFVkNPREUqL1xuaW1wb3J0IEJsYWRlc0RlYnVnIGZyb20gXCIuL2NvcmUvZGVidWdcIjtcbkNPTkZJRy5kZWJ1Zy5sb2dnaW5nID0gdHJ1ZTtcbk9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBlTG9nOiBsb2dnZXIsIEJsYWRlc0RlYnVnIH0pO1xuSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihcImVMb2dcIiwgbG9nZ2VyLmhic0xvZyk7XG4vKiAhREVWQ09ERSovXG5sZXQgc29ja2V0OyAvLyB+IFNvY2tldExpYiBpbnRlcmZhY2Vcbi8vICNlbmRyZWdpb24g4pau4pau4pau4pauW0lNUE9SVFNd4pau4pau4pau4pauXG5jbGFzcyBHbG9iYWxHZXR0ZXIge1xuICAgIGdldCBjbG9ja0tleXMoKSB7IHJldHVybiBnYW1lLmV1bm9ibGFkZXMuQ2xvY2tLZXlzLmZpbHRlcigoY2xvY2tLZXkpID0+IGNsb2NrS2V5LmlzSW5TY2VuZSgpICYmIGNsb2NrS2V5LmlzVmlzaWJsZSk7IH1cbiAgICBnZXQgcm9sbCgpIHsgcmV0dXJuIEJsYWRlc1JvbGwuQWN0aXZlOyB9XG4gICAgZ2V0IHVzZXIoKSB7IHJldHVybiBnYW1lLnVzZXJzLmdldE5hbWUoXCJBbGlzdGFpclwiKTsgfVxuICAgIGdldCBhY3RvcigpIHsgcmV0dXJuIGdhbWUuYWN0b3JzLmdldE5hbWUoXCJBbGlzdGFpclwiKTsgfVxuICAgIGdldCByb2xsVGFyZ2V0KCkgeyByZXR1cm4gdGhpcy5yb2xsPy50YXJnZXQ7IH1cbiAgICBnZXQgcm9sbERhdGEoKSB7IHJldHVybiB0aGlzLnJvbGw/LmRhdGE7IH1cbiAgICBnZXQgdXNlckZsYWdzKCkgeyByZXR1cm4gdGhpcy51c2VyPy5mbGFncz8uW1wiZXVub3MtYmxhZGVzXCJdOyB9XG4gICAgZ2V0IGFjdG9yRmxhZ3MoKSB7IHJldHVybiB0aGlzLmFjdG9yPy5mbGFncz8uW1wiZXVub3MtYmxhZGVzXCJdOyB9XG4gICAgZ2V0IHJvbGxQcmltYXJ5KCkgeyByZXR1cm4gdGhpcy5yb2xsPy5yb2xsUHJpbWFyeTsgfVxuICAgIGdldCByb2xsUHJpbWFyeURvYygpIHsgcmV0dXJuIHRoaXMucm9sbD8ucm9sbFByaW1hcnlEb2M7IH1cbiAgICBnZXQgcm9sbE9wcG9zaXRpb24oKSB7IHJldHVybiB0aGlzLnJvbGw/LnJvbGxPcHBvc2l0aW9uOyB9XG4gICAgZ2V0IHNoZWV0RGF0YSgpIHsgcmV0dXJuIHRoaXMucm9sbD8uY29udGV4dDsgfVxuICAgIG5ld0FjdGlvblJvbGwoKSB7XG4gICAgICAgIGNvbnN0IHBjID0gZ2FtZS5hY3RvcnMuZ2V0TmFtZShcIkFsaXN0YWlyXCIpO1xuICAgICAgICBpZiAoIXBjKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZiA9IHtcbiAgICAgICAgICAgIHRhcmdldDogcGMsXG4gICAgICAgICAgICB0YXJnZXRGbGFnS2V5OiBcInJvbGxDb2xsYWJcIixcbiAgICAgICAgICAgIHJvbGxUeXBlOiBSb2xsVHlwZS5BY3Rpb24sXG4gICAgICAgICAgICByb2xsVHJhaXQ6IEFjdGlvblRyYWl0LmZpbmVzc2UsXG4gICAgICAgICAgICByb2xsVXNlcklEOiBnYW1lLnVzZXJzLmZpbmQoKHVzZXIpID0+IHVzZXIuY2hhcmFjdGVyPy5uYW1lID09PSBcIkFsaXN0YWlyXCIpPy5pZCxcbiAgICAgICAgICAgIHJvbGxQcmltYXJ5RGF0YTogcGNcbiAgICAgICAgfTtcbiAgICAgICAgQmxhZGVzQWN0aW9uUm9sbC5OZXcoY29uZik7XG4gICAgfVxufVxuLy8gI3JlZ2lvbiBHbG9iYWxzOiBFeHBvc2luZyBGdW5jdGlvbmFsaXR5IHRvIEdsb2JhbCBTY29wZSB+XG4vKiBERVZDT0RFKi8gT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7XG4gICAgZ2V0OiBuZXcgR2xvYmFsR2V0dGVyKCksXG4gICAgLy8gdXBkYXRlQ2xhaW1zLFxuICAgIC8vIHVwZGF0ZUNvbnRhY3RzLFxuICAgIC8vIHVwZGF0ZU9wcyxcbiAgICAvLyB1cGRhdGVGYWN0aW9ucyxcbiAgICAvLyB1cGRhdGVEZXNjcmlwdGlvbnMsXG4gICAgLy8gdXBkYXRlUm9sbE1vZHMsXG4gICAgQmxhZGVzU2NlbmUsXG4gICAgQmxhZGVzRGlyZWN0b3IsXG4gICAgQmxhZGVzQWN0b3IsXG4gICAgQmxhZGVzUEMsXG4gICAgQmxhZGVzQ3JldyxcbiAgICBCbGFkZXNOUEMsXG4gICAgQmxhZGVzRmFjdGlvbixcbiAgICBCbGFkZXNQQ1NoZWV0LFxuICAgIEJsYWRlc0NyZXdTaGVldCxcbiAgICBCbGFkZXNGYWN0aW9uU2hlZXQsXG4gICAgQmxhZGVzQ2xvY2tLZXksXG4gICAgQmxhZGVzTlBDU2hlZXQsXG4gICAgQmxhZGVzQWN0aXZlRWZmZWN0LFxuICAgIEJsYWRlc1JvbGwsXG4gICAgQmxhZGVzUm9sbE1vZCxcbiAgICBCbGFkZXNSb2xsUHJpbWFyeSxcbiAgICBCbGFkZXNSb2xsT3Bwb3NpdGlvbixcbiAgICBCbGFkZXNSb2xsUGFydGljaXBhbnQsXG4gICAgQmxhZGVzQWN0aW9uUm9sbCxcbiAgICBCbGFkZXNFbmdhZ2VtZW50Um9sbCxcbiAgICBCbGFkZXNGb3J0dW5lUm9sbCxcbiAgICBCbGFkZXNJbmNhcmNlcmF0aW9uUm9sbCxcbiAgICBCbGFkZXNJbmR1bGdlVmljZVJvbGwsXG4gICAgQmxhZGVzSW5saW5lUmVzaXN0YW5jZVJvbGwsXG4gICAgQmxhZGVzUmVzaXN0YW5jZVJvbGwsXG4gICAgQmxhZGVzQ2hhdCxcbiAgICBCbGFkZXNDb25zZXF1ZW5jZSxcbiAgICBHLFxuICAgIFUsXG4gICAgQyxcbiAgICBCbGFkZXNJdGVtLFxuICAgIEJsYWRlc0Nsb2NrS2VlcGVyLFxuICAgIEJsYWRlc0dNVHJhY2tlcixcbiAgICBCbGFkZXNMb2NhdGlvbixcbiAgICBCbGFkZXNQcm9qZWN0LFxuICAgIEJsYWRlc1Njb3JlLFxuICAgIEJsYWRlc0l0ZW1TaGVldCxcbiAgICBCbGFkZXNDbG9ja0tlZXBlclNoZWV0LFxuICAgIEJsYWRlc0dNVHJhY2tlclNoZWV0LFxuICAgIEJsYWRlc0FJLFxuICAgIEFJQXNzaXN0YW50LFxuICAgIEFHRU5UU1xufSk7IC8qICFERVZDT0RFKi9cbi8vICNlbmRyZWdpb24gR2xvYmFsc1xuLy8gI3JlZ2lvbiDilojilojilojilojilojilojilojiloggU1lTVEVNIElOSVRJQUxJWkFUSU9OOiBJbml0aWFsaXppbmcgQmxhZGVzIEluIFRoZSBEYXJrIFN5c3RlbSBvbiAnSW5pdCcgSG9vayDilojilojilojilojilojilojilojilohcbkhvb2tzLm9uY2UoXCJpbml0XCIsIGFzeW5jICgpID0+IHtcbiAgICAvLyBJbml0aWFsaXplIEdhbWUgb2JqZWN0XG4gICAgZ2FtZS5ldW5vYmxhZGVzID0ge1xuICAgICAgICBSb2xsczogbmV3IENvbGxlY3Rpb24oKSxcbiAgICAgICAgQ2xvY2tLZXlzOiBuZXcgQ29sbGVjdGlvbigpLFxuICAgICAgICBDb25zZXF1ZW5jZXM6IG5ldyBDb2xsZWN0aW9uKCksXG4gICAgICAgIERpcmVjdG9yOiBCbGFkZXNEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLFxuICAgICAgICBUb29sdGlwczogbmV3IFdlYWtNYXAoKVxuICAgIH07XG4gICAgZUxvZy5kaXNwbGF5KFwiSW5pdGlhbGl6aW5nIEJsYWRlcyBJbiB0aGUgRGFyayBTeXN0ZW1cIik7XG4gICAgLy8gUmVnaXN0ZXIgU3lzdGVtIFNldHRpbmdzXG4gICAgcmVnaXN0ZXJTZXR0aW5ncygpO1xuICAgIENPTkZJRy5kZWJ1Zy5ob29rcyA9IFUuZ2V0U2V0dGluZyhcImRlYnVnSG9va3NcIik7XG4gICAgLy8gSW5pdGlhbGl6ZSBGb250cyAmIEdzYXAgQW5pbWF0aW9uc1xuICAgIEdzYXBJbml0aWFsaXplKCk7XG4gICAgQ09ORklHLkl0ZW0uZG9jdW1lbnRDbGFzcyA9IEJsYWRlc0l0ZW1Qcm94eTtcbiAgICBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzcyA9IEJsYWRlc0FjdG9yUHJveHk7XG4gICAgQ09ORklHLlNjZW5lLmRvY3VtZW50Q2xhc3MgPSBCbGFkZXNTY2VuZTtcbiAgICBDT05GSUcuQ2hhdE1lc3NhZ2UuZG9jdW1lbnRDbGFzcyA9IEJsYWRlc0NoYXQ7XG4gICAgLy8gUmVnaXN0ZXIgc2hlZXQgYXBwbGljYXRpb24gY2xhc3Nlc1xuICAgIEFjdG9ycy51bnJlZ2lzdGVyU2hlZXQoXCJjb3JlXCIsIEFjdG9yU2hlZXQpO1xuICAgIEl0ZW1zLnVucmVnaXN0ZXJTaGVldChcImNvcmVcIiwgSXRlbVNoZWV0KTtcbiAgICBJdGVtcy5yZWdpc3RlclNoZWV0KFwiYmxhZGVzXCIsIEJsYWRlc0l0ZW1TaGVldCwgeyB0eXBlczogQy5JdGVtVHlwZXMsIG1ha2VEZWZhdWx0OiB0cnVlIH0pO1xuICAgIHJlZ2lzdGVySGFuZGxlYmFySGVscGVycygpO1xuICAgIHByZWxvYWRIYW5kbGViYXJzVGVtcGxhdGVzKCk7XG4gICAgLy8gSW5pdGlhbGl6ZSBwcmVsaW1pbmFyeSBjbGFzc2VzIHdpdGggdGVtcGxhdGVzIHRvIGxvYWRcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIEJsYWRlc1BDLkluaXRpYWxpemUoKSxcbiAgICAgICAgQmxhZGVzQ3Jldy5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc05QQy5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc0ZhY3Rpb24uSW5pdGlhbGl6ZSgpLFxuICAgICAgICBCbGFkZXNBY3RpdmVFZmZlY3QuSW5pdGlhbGl6ZSgpLFxuICAgICAgICBCbGFkZXNHTVRyYWNrZXJTaGVldC5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc0Nsb2NrS2VlcGVyU2hlZXQuSW5pdGlhbGl6ZSgpLFxuICAgICAgICBCbGFkZXNTY29yZS5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc0RpYWxvZy5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc1JvbGwuSW5pdGlhbGl6ZSgpLFxuICAgICAgICBCbGFkZXNQcm9qZWN0LkluaXRpYWxpemUoKSxcbiAgICAgICAgQmxhZGVzQ2hhdC5Jbml0aWFsaXplKClcbiAgICBdKTtcbn0pO1xuSG9va3Mub25jZShcInJlYWR5XCIsIGFzeW5jICgpID0+IHtcbiAgICAvLyBJbml0aWFsaXplIG92ZXJsYXlzXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBCbGFkZXNEaXJlY3Rvci5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc0dNVHJhY2tlci5Jbml0aWFsaXplKCksXG4gICAgICAgIEJsYWRlc0Nsb2NrS2VlcGVyLkluaXRpYWxpemUoKVxuICAgIF0pO1xuICAgIC8vIEluaXRpYWxpemUgQ2xvY2tzLCBDbG9ja0tleXMgJiBDb25zZXF1ZW5jZXNcbiAgICBCbGFkZXNDbG9ja0tleS5Jbml0aWFsaXplKCk7XG4gICAgYXdhaXQgQmxhZGVzQ29uc2VxdWVuY2UuSW5pdGlhbGl6ZSgpO1xuICAgIGluaXRET01TdHlsZXMoKTtcbiAgICBpbml0Q2FudmFzU3R5bGVzKCk7XG4gICAgaW5pdFRpbnlNQ0VTdHlsZXMoKTtcbiAgICBhd2FpdCBCbGFkZXNEaXJlY3Rvci5nZXRJbnN0YW5jZSgpLnJlbmRlck92ZXJsYXlfU29ja2V0UmVzcG9uc2UoKTtcbiAgICBCbGFkZXNEaXJlY3Rvci5Jbml0U29ja2V0cygpO1xuICAgIEJsYWRlc1JvbGwuSW5pdFNvY2tldHMoKTtcbn0pO1xuLy8gI2VuZHJlZ2lvbiDiloTiloTiloTiloTiloQgU1lTVEVNIElOSVRJQUxJWkFUSU9OIOKWhOKWhOKWhOKWhOKWhFxuLy8gI3JlZ2lvbiDilpHilpHilpHilpHilpHilpHilpFbU29ja2V0TGliXeKWkeKWkeKWkeKWkSBTb2NrZXRMaWIgSW5pdGlhbGl6YXRpb24g4paR4paR4paR4paR4paR4paR4paRIH5cbkhvb2tzLm9uY2UoXCJzb2NrZXRsaWIucmVhZHlcIiwgKCkgPT4ge1xuICAgIHNvY2tldCA9IHNvY2tldGxpYi5yZWdpc3RlclN5c3RlbShcImV1bm9zLWJsYWRlc1wiKTtcbiAgICAvKiBERVZDT0RFKi8gT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7IHNvY2tldCwgc29ja2V0bGliIH0pOyAvKiAhREVWQ09ERSovXG59KTtcbkhvb2tzLm9uY2UoXCJkaWNlU29OaWNlUmVhZHlcIiwgKGRpY2UzZCkgPT4ge1xuICAgIGRpY2UzZC5hZGRTeXN0ZW0oeyBpZDogXCJldW5vcy1ibGFkZXNcIiwgbmFtZTogXCJFdW5vJ3MgQmxhZGVzXCIgfSwgXCJwcmVmZXJyZWRcIik7XG4gICAgZGljZTNkLmFkZERpY2VQcmVzZXQoe1xuICAgICAgICB0eXBlOiBcImQ2XCIsXG4gICAgICAgIGxhYmVsczogWzEsIDIsIDMsIDQsIDUsIDZdLm1hcCgobnVtKSA9PiBgc3lzdGVtcy9ldW5vcy1ibGFkZXMvYXNzZXRzL2RpY2UvZmFjZXMvJHtudW19LndlYnBgKSxcbiAgICAgICAgc3lzdGVtOiBcImV1bm9zLWJsYWRlc1wiLFxuICAgICAgICBidW1wTWFwczogWzEsIDIsIDMsIDQsIDUsIDZdLm1hcCgobnVtKSA9PiBgc3lzdGVtcy9ldW5vcy1ibGFkZXMvYXNzZXRzL2RpY2UvYnVtcC1tYXBzLyR7bnVtfS53ZWJwYCksXG4gICAgICAgIGVtaXNzaXZlTWFwczogW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcInN5c3RlbXMvZXVub3MtYmxhZGVzL2Fzc2V0cy9kaWNlL2VtaXNzaW9uLW1hcHMvNi53ZWJwXCJdLFxuICAgICAgICBlbWlzc2l2ZTogXCIjZDg5MzAwXCJcbiAgICB9KTtcbn0pO1xuLy8gI2VuZHJlZ2lvbiDilpHilpHilpHilpFbRGljZSBTbyBOaWNlXeKWkeKWkeKWkeKWkVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./ts/blades.ts\n");

/***/ }),

/***/ "./ts/classes/BladesChat.ts":
/*!**********************************!*\
  !*** ./ts/classes/BladesChat.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesRoll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* harmony import */ var _BladesConsequence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BladesConsequence */ \"./ts/classes/BladesConsequence.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region IMPORTS ~\n\n\n\n\n\nclass BladesChat extends ChatMessage {\n    static Initialize() {\n        Hooks.on(\"renderChatMessage\", (msg, html) => {\n            (0,_core_gsap__WEBPACK_IMPORTED_MODULE_0__.ApplyTooltipAnimations)(html);\n            const { rollData } = msg.flagData;\n            if (rollData) {\n                _BladesConsequence__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ApplyChatListeners(msg);\n            }\n            html.addClass(\"display-ok\");\n        });\n        return loadTemplates([\n            \"systems/eunos-blades/templates/chat/roll-result/action.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/action-clock.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/action-acquireasset.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/action-reduceheat.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/action-clock-recover.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/action-gatherinfo.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/fortune.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/fortune-clock.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/fortune-gatherinfo.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/fortune-incarceration.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/fortune-engagement.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/indulgevice.hbs\",\n            \"systems/eunos-blades/templates/chat/roll-result/resistance.hbs\",\n            \"systems/eunos-blades/templates/chat/components/inline-resistance.hbs\",\n            \"systems/eunos-blades/templates/chat/components/die.hbs\"\n        ]);\n    }\n    // static async ConstructRollOutput(rollInst: BladesRoll): Promise<BladesChat> {\n    //   const rollData = {\n    //     ...rollInst.data,\n    //     rollTraitVerb: rollInst.rollTraitVerb ?? \"\",\n    //     rollTraitPastVerb: rollInst.rollTraitPastVerb ?? rollInst.rollTraitVerb ?? \"\"\n    //   };\n    //   return await BladesChat.create({\n    //     speaker: rollInst.getSpeaker(BladesChat.getSpeaker()),\n    //     content: await renderTemplate(rollInst.template, rollData),\n    //     type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n    //     flags: {\n    //       \"eunos-blades\": {\n    //         template: rollInst.template,\n    //         rollData\n    //       }\n    //     }\n    //   }) as BladesChat;\n    // }\n    static IsNewestRollResult(rollInst) {\n        const lastRollResultID = $(\"#chat-log .chat-message .blades-roll:not(.inline-roll)\")\n            .last()\n            .attr(\"id\");\n        return typeof lastRollResultID === \"string\"\n            && lastRollResultID === rollInst.id;\n    }\n    get flagData() {\n        return this.flags[\"eunos-blades\"];\n    }\n    get rollData() { return this.flagData.rollData; }\n    async setFlagVal(scope, key, val) {\n        return await this.setFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, `${scope}.${key}`, val);\n    }\n    get allRollConsequences() {\n        const returnData = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.controlled]: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.critical]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.success]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail]: {}\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.risky]: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.critical]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.success]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail]: {}\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.desperate]: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.critical]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.success]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial]: {},\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail]: {}\n            }\n        };\n        const { consequenceData } = this.flagData.rollData ?? {};\n        if (!consequenceData) {\n            return returnData;\n        }\n        Object.entries(consequenceData)\n            .forEach(([position, positionData]) => {\n            Object.entries(positionData)\n                .forEach(([rollResult, csqDataSet]) => {\n                returnData[position][rollResult] = Object.fromEntries(Object.entries(csqDataSet)\n                    .filter(([id, cData]) => cData.id)\n                    .map(([id, cData]) => [\n                    id,\n                    game.eunoblades.Consequences.get(cData.id) ?? new _BladesConsequence__WEBPACK_IMPORTED_MODULE_4__[\"default\"](cData)\n                ]));\n            });\n        });\n        return returnData;\n    }\n    get rollConsequences() {\n        if (!this.parentRoll) {\n            return [];\n        }\n        const { rollPositionFinal, rollResult, consequenceData } = this.parentRoll.data;\n        if (!rollPositionFinal || !rollResult || !consequenceData) {\n            return [];\n        }\n        if (typeof rollResult !== \"string\" || ![_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail].includes(rollResult)) {\n            return [];\n        }\n        const activeConsequences = consequenceData?.[rollPositionFinal]?.[rollResult] ?? {};\n        return Object.values(activeConsequences)\n            .map((cData) => game.eunoblades.Consequences.get(cData.id) ?? new _BladesConsequence__WEBPACK_IMPORTED_MODULE_4__[\"default\"](cData));\n    }\n    get elem$() {\n        return $(\"#chat-log\")\n            .find(`.chat-message[data-message-id=\"${this.id}\"]`);\n    }\n    get elem() { return this.elem$[0]; }\n    get isRollResult() { return \"rollData\" in this.flagData; }\n    get parentRoll() {\n        if (!this.isRollResult) {\n            return undefined;\n        }\n        const { rollData } = this.flagData;\n        if (!rollData) {\n            return undefined;\n        }\n        return game.eunoblades.Rolls.get(rollData.id ?? \"\") ?? new _BladesRoll__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n            ...rollData,\n            isScopingById: false\n        });\n    }\n    get roll$() {\n        return this.parentRoll ? this.elem$.find(`#${this.parentRoll.id}`) : undefined;\n    }\n    async regenerateFromFlags() {\n        if (this.isRollResult) {\n            await this.update({ content: await renderTemplate(this.flagData.template, this) });\n        }\n    }\n    async render(force) {\n        await super.render(force);\n        await this.activateListeners();\n    }\n    async activateListeners() {\n        if (!this.elem$) {\n            eLog.error(\"BladesChat\", `No BladesChat.elem found for id ${this.id}.`);\n            return;\n        }\n        (0,_core_gsap__WEBPACK_IMPORTED_MODULE_0__.ApplyTooltipAnimations)(this.elem$);\n        _BladesConsequence__WEBPACK_IMPORTED_MODULE_4__[\"default\"].ApplyChatListeners(this);\n        if (this.parentRoll) {\n            this.elem$.addClass(`${this.parentRoll.rollType.toLowerCase()}-roll`);\n            if (this.parentRoll.rollType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action && this.rollConsequences.some((csq) => !csq.isAccepted)) {\n                this.elem$.addClass(\"unresolved-action-roll\");\n            }\n            else {\n                this.elem$.removeClass(\"unresolved-action-roll\");\n            }\n            if (BladesChat.IsNewestRollResult(this.parentRoll)) {\n                $(\"#chat-log .chat-message\").removeClass(\"active-chat-roll\");\n                this.elem$.addClass(\"active-chat-roll\");\n            }\n            else {\n                this.elem$.removeClass(\"active-chat-roll\");\n            }\n        }\n        _core_utilities__WEBPACK_IMPORTED_MODULE_2__[\"default\"].gsap.to(this.elem$, { autoAlpha: 1, duration: 0.15, ease: \"none\" });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesChat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9jbGFzc2VzL0JsYWRlc0NoYXQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNzRDtBQUNnQjtBQUNwQztBQUNJO0FBQ2M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrRUFBc0I7QUFDbEMsb0JBQW9CLFdBQVc7QUFDL0I7QUFDQSxnQkFBZ0IsMERBQWlCO0FBQ2pDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGtDQUFrQyx1REFBQyxlQUFlLE1BQU0sR0FBRyxJQUFJO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLGFBQWEscURBQVE7QUFDckIsaUJBQWlCLHVEQUFVLGNBQWM7QUFDekMsaUJBQWlCLHVEQUFVLGFBQWE7QUFDeEMsaUJBQWlCLHVEQUFVLGFBQWE7QUFDeEMsaUJBQWlCLHVEQUFVO0FBQzNCLGFBQWE7QUFDYixhQUFhLHFEQUFRO0FBQ3JCLGlCQUFpQix1REFBVSxjQUFjO0FBQ3pDLGlCQUFpQix1REFBVSxhQUFhO0FBQ3hDLGlCQUFpQix1REFBVSxhQUFhO0FBQ3hDLGlCQUFpQix1REFBVTtBQUMzQixhQUFhO0FBQ2IsYUFBYSxxREFBUTtBQUNyQixpQkFBaUIsdURBQVUsY0FBYztBQUN6QyxpQkFBaUIsdURBQVUsYUFBYTtBQUN4QyxpQkFBaUIsdURBQVUsYUFBYTtBQUN4QyxpQkFBaUIsdURBQVU7QUFDM0I7QUFDQTtBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSwwREFBaUI7QUFDdkY7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpREFBaUQ7QUFDakU7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHVEQUFVLFVBQVUsdURBQVU7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsMERBQWlCO0FBQy9GO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0EsaUJBQWlCO0FBQ2pCLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxtREFBVTtBQUM3RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxREFBcUQsbUJBQW1CO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2REFBNkQ7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSxRQUFRO0FBQ2hGO0FBQ0E7QUFDQSxRQUFRLGtFQUFzQjtBQUM5QixRQUFRLDBEQUFpQjtBQUN6QjtBQUNBLG1DQUFtQyx1Q0FBdUM7QUFDMUUsNkNBQTZDLHFEQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1REFBQyx1QkFBdUIsNENBQTRDO0FBQzVFO0FBQ0E7QUFDQSwrREFBZSxVQUFVLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi90cy9jbGFzc2VzL0JsYWRlc0NoYXQudHM/ZjBhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbi8vICNyZWdpb24gSU1QT1JUUyB+XG5pbXBvcnQgeyBBcHBseVRvb2x0aXBBbmltYXRpb25zIH0gZnJvbSBcIi4uL2NvcmUvZ3NhcFwiO1xuaW1wb3J0IEMsIHsgUm9sbFR5cGUsIFBvc2l0aW9uLCBSb2xsUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvY29uc3RhbnRzXCI7XG5pbXBvcnQgVSBmcm9tIFwiLi4vY29yZS91dGlsaXRpZXNcIjtcbmltcG9ydCBCbGFkZXNSb2xsIGZyb20gXCIuL0JsYWRlc1JvbGxcIjtcbmltcG9ydCBCbGFkZXNDb25zZXF1ZW5jZSBmcm9tIFwiLi9CbGFkZXNDb25zZXF1ZW5jZVwiO1xuY2xhc3MgQmxhZGVzQ2hhdCBleHRlbmRzIENoYXRNZXNzYWdlIHtcbiAgICBzdGF0aWMgSW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgSG9va3Mub24oXCJyZW5kZXJDaGF0TWVzc2FnZVwiLCAobXNnLCBodG1sKSA9PiB7XG4gICAgICAgICAgICBBcHBseVRvb2x0aXBBbmltYXRpb25zKGh0bWwpO1xuICAgICAgICAgICAgY29uc3QgeyByb2xsRGF0YSB9ID0gbXNnLmZsYWdEYXRhO1xuICAgICAgICAgICAgaWYgKHJvbGxEYXRhKSB7XG4gICAgICAgICAgICAgICAgQmxhZGVzQ29uc2VxdWVuY2UuQXBwbHlDaGF0TGlzdGVuZXJzKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodG1sLmFkZENsYXNzKFwiZGlzcGxheS1va1wiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBsb2FkVGVtcGxhdGVzKFtcbiAgICAgICAgICAgIFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2NoYXQvcm9sbC1yZXN1bHQvYWN0aW9uLmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC9hY3Rpb24tY2xvY2suaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2FjdGlvbi1hY3F1aXJlYXNzZXQuaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2FjdGlvbi1yZWR1Y2VoZWF0Lmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC9hY3Rpb24tY2xvY2stcmVjb3Zlci5oYnNcIixcbiAgICAgICAgICAgIFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2NoYXQvcm9sbC1yZXN1bHQvYWN0aW9uLWdhdGhlcmluZm8uaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2ZvcnR1bmUuaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2ZvcnR1bmUtY2xvY2suaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2ZvcnR1bmUtZ2F0aGVyaW5mby5oYnNcIixcbiAgICAgICAgICAgIFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2NoYXQvcm9sbC1yZXN1bHQvZm9ydHVuZS1pbmNhcmNlcmF0aW9uLmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC9mb3J0dW5lLWVuZ2FnZW1lbnQuaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9jaGF0L3JvbGwtcmVzdWx0L2luZHVsZ2V2aWNlLmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9yb2xsLXJlc3VsdC9yZXNpc3RhbmNlLmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9jb21wb25lbnRzL2lubGluZS1yZXNpc3RhbmNlLmhic1wiLFxuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvY2hhdC9jb21wb25lbnRzL2RpZS5oYnNcIlxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIGFzeW5jIENvbnN0cnVjdFJvbGxPdXRwdXQocm9sbEluc3Q6IEJsYWRlc1JvbGwpOiBQcm9taXNlPEJsYWRlc0NoYXQ+IHtcbiAgICAvLyAgIGNvbnN0IHJvbGxEYXRhID0ge1xuICAgIC8vICAgICAuLi5yb2xsSW5zdC5kYXRhLFxuICAgIC8vICAgICByb2xsVHJhaXRWZXJiOiByb2xsSW5zdC5yb2xsVHJhaXRWZXJiID8/IFwiXCIsXG4gICAgLy8gICAgIHJvbGxUcmFpdFBhc3RWZXJiOiByb2xsSW5zdC5yb2xsVHJhaXRQYXN0VmVyYiA/PyByb2xsSW5zdC5yb2xsVHJhaXRWZXJiID8/IFwiXCJcbiAgICAvLyAgIH07XG4gICAgLy8gICByZXR1cm4gYXdhaXQgQmxhZGVzQ2hhdC5jcmVhdGUoe1xuICAgIC8vICAgICBzcGVha2VyOiByb2xsSW5zdC5nZXRTcGVha2VyKEJsYWRlc0NoYXQuZ2V0U3BlYWtlcigpKSxcbiAgICAvLyAgICAgY29udGVudDogYXdhaXQgcmVuZGVyVGVtcGxhdGUocm9sbEluc3QudGVtcGxhdGUsIHJvbGxEYXRhKSxcbiAgICAvLyAgICAgdHlwZTogQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLlJPTEwsXG4gICAgLy8gICAgIGZsYWdzOiB7XG4gICAgLy8gICAgICAgXCJldW5vcy1ibGFkZXNcIjoge1xuICAgIC8vICAgICAgICAgdGVtcGxhdGU6IHJvbGxJbnN0LnRlbXBsYXRlLFxuICAgIC8vICAgICAgICAgcm9sbERhdGFcbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH0pIGFzIEJsYWRlc0NoYXQ7XG4gICAgLy8gfVxuICAgIHN0YXRpYyBJc05ld2VzdFJvbGxSZXN1bHQocm9sbEluc3QpIHtcbiAgICAgICAgY29uc3QgbGFzdFJvbGxSZXN1bHRJRCA9ICQoXCIjY2hhdC1sb2cgLmNoYXQtbWVzc2FnZSAuYmxhZGVzLXJvbGw6bm90KC5pbmxpbmUtcm9sbClcIilcbiAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIik7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbGFzdFJvbGxSZXN1bHRJRCA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgJiYgbGFzdFJvbGxSZXN1bHRJRCA9PT0gcm9sbEluc3QuaWQ7XG4gICAgfVxuICAgIGdldCBmbGFnRGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3NbXCJldW5vcy1ibGFkZXNcIl07XG4gICAgfVxuICAgIGdldCByb2xsRGF0YSgpIHsgcmV0dXJuIHRoaXMuZmxhZ0RhdGEucm9sbERhdGE7IH1cbiAgICBhc3luYyBzZXRGbGFnVmFsKHNjb3BlLCBrZXksIHZhbCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zZXRGbGFnKEMuU1lTVEVNX0lELCBgJHtzY29wZX0uJHtrZXl9YCwgdmFsKTtcbiAgICB9XG4gICAgZ2V0IGFsbFJvbGxDb25zZXF1ZW5jZXMoKSB7XG4gICAgICAgIGNvbnN0IHJldHVybkRhdGEgPSB7XG4gICAgICAgICAgICBbUG9zaXRpb24uY29udHJvbGxlZF06IHtcbiAgICAgICAgICAgICAgICBbUm9sbFJlc3VsdC5jcml0aWNhbF06IHt9LFxuICAgICAgICAgICAgICAgIFtSb2xsUmVzdWx0LnN1Y2Nlc3NdOiB7fSxcbiAgICAgICAgICAgICAgICBbUm9sbFJlc3VsdC5wYXJ0aWFsXToge30sXG4gICAgICAgICAgICAgICAgW1JvbGxSZXN1bHQuZmFpbF06IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW1Bvc2l0aW9uLnJpc2t5XToge1xuICAgICAgICAgICAgICAgIFtSb2xsUmVzdWx0LmNyaXRpY2FsXToge30sXG4gICAgICAgICAgICAgICAgW1JvbGxSZXN1bHQuc3VjY2Vzc106IHt9LFxuICAgICAgICAgICAgICAgIFtSb2xsUmVzdWx0LnBhcnRpYWxdOiB7fSxcbiAgICAgICAgICAgICAgICBbUm9sbFJlc3VsdC5mYWlsXToge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbUG9zaXRpb24uZGVzcGVyYXRlXToge1xuICAgICAgICAgICAgICAgIFtSb2xsUmVzdWx0LmNyaXRpY2FsXToge30sXG4gICAgICAgICAgICAgICAgW1JvbGxSZXN1bHQuc3VjY2Vzc106IHt9LFxuICAgICAgICAgICAgICAgIFtSb2xsUmVzdWx0LnBhcnRpYWxdOiB7fSxcbiAgICAgICAgICAgICAgICBbUm9sbFJlc3VsdC5mYWlsXToge31cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBjb25zZXF1ZW5jZURhdGEgfSA9IHRoaXMuZmxhZ0RhdGEucm9sbERhdGEgPz8ge307XG4gICAgICAgIGlmICghY29uc2VxdWVuY2VEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuRGF0YTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZW50cmllcyhjb25zZXF1ZW5jZURhdGEpXG4gICAgICAgICAgICAuZm9yRWFjaCgoW3Bvc2l0aW9uLCBwb3NpdGlvbkRhdGFdKSA9PiB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhwb3NpdGlvbkRhdGEpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKFtyb2xsUmVzdWx0LCBjc3FEYXRhU2V0XSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybkRhdGFbcG9zaXRpb25dW3JvbGxSZXN1bHRdID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGNzcURhdGFTZXQpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtpZCwgY0RhdGFdKSA9PiBjRGF0YS5pZClcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW2lkLCBjRGF0YV0pID0+IFtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGdhbWUuZXVub2JsYWRlcy5Db25zZXF1ZW5jZXMuZ2V0KGNEYXRhLmlkKSA/PyBuZXcgQmxhZGVzQ29uc2VxdWVuY2UoY0RhdGEpXG4gICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmV0dXJuRGF0YTtcbiAgICB9XG4gICAgZ2V0IHJvbGxDb25zZXF1ZW5jZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXJlbnRSb2xsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyByb2xsUG9zaXRpb25GaW5hbCwgcm9sbFJlc3VsdCwgY29uc2VxdWVuY2VEYXRhIH0gPSB0aGlzLnBhcmVudFJvbGwuZGF0YTtcbiAgICAgICAgaWYgKCFyb2xsUG9zaXRpb25GaW5hbCB8fCAhcm9sbFJlc3VsdCB8fCAhY29uc2VxdWVuY2VEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiByb2xsUmVzdWx0ICE9PSBcInN0cmluZ1wiIHx8ICFbUm9sbFJlc3VsdC5wYXJ0aWFsLCBSb2xsUmVzdWx0LmZhaWxdLmluY2x1ZGVzKHJvbGxSZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlQ29uc2VxdWVuY2VzID0gY29uc2VxdWVuY2VEYXRhPy5bcm9sbFBvc2l0aW9uRmluYWxdPy5bcm9sbFJlc3VsdF0gPz8ge307XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKGFjdGl2ZUNvbnNlcXVlbmNlcylcbiAgICAgICAgICAgIC5tYXAoKGNEYXRhKSA9PiBnYW1lLmV1bm9ibGFkZXMuQ29uc2VxdWVuY2VzLmdldChjRGF0YS5pZCkgPz8gbmV3IEJsYWRlc0NvbnNlcXVlbmNlKGNEYXRhKSk7XG4gICAgfVxuICAgIGdldCBlbGVtJCgpIHtcbiAgICAgICAgcmV0dXJuICQoXCIjY2hhdC1sb2dcIilcbiAgICAgICAgICAgIC5maW5kKGAuY2hhdC1tZXNzYWdlW2RhdGEtbWVzc2FnZS1pZD1cIiR7dGhpcy5pZH1cIl1gKTtcbiAgICB9XG4gICAgZ2V0IGVsZW0oKSB7IHJldHVybiB0aGlzLmVsZW0kWzBdOyB9XG4gICAgZ2V0IGlzUm9sbFJlc3VsdCgpIHsgcmV0dXJuIFwicm9sbERhdGFcIiBpbiB0aGlzLmZsYWdEYXRhOyB9XG4gICAgZ2V0IHBhcmVudFJvbGwoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JvbGxSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyByb2xsRGF0YSB9ID0gdGhpcy5mbGFnRGF0YTtcbiAgICAgICAgaWYgKCFyb2xsRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2FtZS5ldW5vYmxhZGVzLlJvbGxzLmdldChyb2xsRGF0YS5pZCA/PyBcIlwiKSA/PyBuZXcgQmxhZGVzUm9sbCh7XG4gICAgICAgICAgICAuLi5yb2xsRGF0YSxcbiAgICAgICAgICAgIGlzU2NvcGluZ0J5SWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgcm9sbCQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudFJvbGwgPyB0aGlzLmVsZW0kLmZpbmQoYCMke3RoaXMucGFyZW50Um9sbC5pZH1gKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgYXN5bmMgcmVnZW5lcmF0ZUZyb21GbGFncygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSb2xsUmVzdWx0KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZSh7IGNvbnRlbnQ6IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRoaXMuZmxhZ0RhdGEudGVtcGxhdGUsIHRoaXMpIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHJlbmRlcihmb3JjZSkge1xuICAgICAgICBhd2FpdCBzdXBlci5yZW5kZXIoZm9yY2UpO1xuICAgICAgICBhd2FpdCB0aGlzLmFjdGl2YXRlTGlzdGVuZXJzKCk7XG4gICAgfVxuICAgIGFzeW5jIGFjdGl2YXRlTGlzdGVuZXJzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZWxlbSQpIHtcbiAgICAgICAgICAgIGVMb2cuZXJyb3IoXCJCbGFkZXNDaGF0XCIsIGBObyBCbGFkZXNDaGF0LmVsZW0gZm91bmQgZm9yIGlkICR7dGhpcy5pZH0uYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgQXBwbHlUb29sdGlwQW5pbWF0aW9ucyh0aGlzLmVsZW0kKTtcbiAgICAgICAgQmxhZGVzQ29uc2VxdWVuY2UuQXBwbHlDaGF0TGlzdGVuZXJzKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5wYXJlbnRSb2xsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW0kLmFkZENsYXNzKGAke3RoaXMucGFyZW50Um9sbC5yb2xsVHlwZS50b0xvd2VyQ2FzZSgpfS1yb2xsYCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnRSb2xsLnJvbGxUeXBlID09PSBSb2xsVHlwZS5BY3Rpb24gJiYgdGhpcy5yb2xsQ29uc2VxdWVuY2VzLnNvbWUoKGNzcSkgPT4gIWNzcS5pc0FjY2VwdGVkKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbSQuYWRkQ2xhc3MoXCJ1bnJlc29sdmVkLWFjdGlvbi1yb2xsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtJC5yZW1vdmVDbGFzcyhcInVucmVzb2x2ZWQtYWN0aW9uLXJvbGxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQmxhZGVzQ2hhdC5Jc05ld2VzdFJvbGxSZXN1bHQodGhpcy5wYXJlbnRSb2xsKSkge1xuICAgICAgICAgICAgICAgICQoXCIjY2hhdC1sb2cgLmNoYXQtbWVzc2FnZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZS1jaGF0LXJvbGxcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtJC5hZGRDbGFzcyhcImFjdGl2ZS1jaGF0LXJvbGxcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW0kLnJlbW92ZUNsYXNzKFwiYWN0aXZlLWNoYXQtcm9sbFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBVLmdzYXAudG8odGhpcy5lbGVtJCwgeyBhdXRvQWxwaGE6IDEsIGR1cmF0aW9uOiAwLjE1LCBlYXNlOiBcIm5vbmVcIiB9KTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCbGFkZXNDaGF0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./ts/classes/BladesChat.ts\n");

/***/ }),

/***/ "./ts/classes/BladesClockKey.ts":
/*!**************************************!*\
  !*** ./ts/classes/BladesClockKey.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesClock: function() { return /* binding */ BladesClock; }\n/* harmony export */ });\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _BladesTargetLink__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesTargetLink */ \"./ts/classes/BladesTargetLink.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\n\nfunction isElemPosData(obj) {\n    return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isList(obj)\n        && typeof obj.x === \"number\"\n        && typeof obj.y === \"number\"\n        && typeof obj.width === \"number\"\n        && typeof obj.height === \"number\";\n}\nclass BladesClockKey extends _BladesTargetLink__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    // #region STATIC METHODS ~\n    static Initialize() {\n        function registerClockKeys(doc) {\n            if (\"clocksData\" in doc.system) {\n                Object.values(doc.system.clocksData ?? {})\n                    .forEach((keyData) => {\n                    try {\n                        new BladesClockKey(keyData);\n                    }\n                    catch (err) {\n                        eLog.error(\"BladesClockKey\", \"[BladesClockKey.Initialize] Error initializing clock key.\", err, keyData);\n                    }\n                });\n            }\n        }\n        game.items.contents\n            .filter((item) => _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.clock_keeper, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.location, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.score))\n            .forEach(registerClockKeys);\n        game.actors.contents\n            .filter((actor) => _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesActor.IsType(actor, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.faction))\n            .forEach(registerClockKeys);\n        return loadTemplates([\n            \"systems/eunos-blades/templates/components/clock-key.hbs\",\n            \"systems/eunos-blades/templates/components/clock.hbs\"\n        ]);\n    }\n    static ApplySchemaDefaults(schemaData) {\n        // Ensure all properties of Schema are provided\n        return {\n            name: \"\",\n            isVisible: false,\n            isNameVisible: false,\n            isSpotlit: false,\n            clocksData: {},\n            sceneIDs: [],\n            displayMode: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.full,\n            oneKeyIndex: _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.random(0, 4, 1),\n            ...schemaData\n        };\n    }\n    static async Create(config, _parentLinkData, clocksInitialData = []) {\n        // Confirm at least one, but no more than six, clockConfigs provided:\n        if (clocksInitialData.length > 6) {\n            // If too many clock keys, alert user and discard excess.\n            eLog.error(\"BladesClockKey\", \"[BladesClockKey.Create] Too many clock configs! (Max 6.) Eliminating extras.\", clocksInitialData);\n            clocksInitialData = clocksInitialData.slice(0, 6);\n        }\n        else if (clocksInitialData.length === 0) {\n            // If no clocks provided, add one default clock.\n            clocksInitialData.push({});\n        }\n        // Generate a local-only TargetLink instance, to assist in deriving values for the clocks data\n        const tempLink = new _BladesTargetLink__WEBPACK_IMPORTED_MODULE_2__[\"default\"](config);\n        // Generate the targetKey or targetFlagKey for each clockData\n        if (tempLink.targetKeyPrefix) {\n            config.clocksData = Object.fromEntries(clocksInitialData\n                .map((cSchema, i) => {\n                const cData = BladesClock.ParseConfigToData({\n                    ...BladesClock.ApplySchemaDefaults(cSchema),\n                    index: i,\n                    targetID: tempLink.targetID,\n                    targetKey: `${tempLink.targetKeyPrefix}.clocksData`,\n                    isScopingById: true\n                });\n                return [\n                    cData.id,\n                    cData\n                ];\n            }));\n        }\n        else if (tempLink.targetFlagKeyPrefix) {\n            config.clocksData = Object.fromEntries(clocksInitialData\n                .map((cSchema, i) => {\n                const cData = BladesClock.ParseConfigToData({\n                    ...BladesClock.ApplySchemaDefaults(cSchema),\n                    targetID: tempLink.targetID,\n                    targetFlagKey: `${tempLink.targetFlagKeyPrefix}.clocksData`,\n                    isScopingById: true\n                });\n                return [\n                    cData.id,\n                    cData\n                ];\n            }));\n        }\n        else {\n            throw new Error(\"BladesClockKey.Create: No targetKey or targetFlagKey provided.\");\n        }\n        // Create and initialize the target link\n        const clockKeyLink = await super.Create(tempLink.data);\n        // Instantiate the ClockKey\n        const clockKey = new BladesClockKey(clockKeyLink.data);\n        // Render the clock key\n        clockKey.renderTargetAndKeeper();\n        return clockKey;\n    }\n    static GetFromElement(elem) {\n        const keyElem$ = $(elem).closest(\".clock-key-container\").find(\".clock-key\");\n        if (keyElem$.length === 0) {\n            return undefined;\n        }\n        const clockKeyID = keyElem$.attr(\"id\");\n        if (!clockKeyID) {\n            return undefined;\n        }\n        return game.eunoblades.ClockKeys.get(clockKeyID);\n    }\n    // #endregion\n    // #region GETTERS & SETTERS ~\n    // #region -- Shortcut Schema Getters ~\n    get data() { return this.linkData; }\n    get name() { return this.data.name; }\n    set name(val) {\n        this.updateTarget(\"name\", val)\n            .then(() => { this.renderTargetAndKeeper(); });\n    }\n    get isVisible() { return this.data.isVisible; }\n    set isVisible(val) {\n        this.updateTarget(\"isVisible\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.renderTargetAndKeeper(); });\n    }\n    get isNameVisible() { return this.data.isNameVisible; }\n    set isNameVisible(val) {\n        this.updateTarget(\"isNameVisible\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.renderTargetAndKeeper(); });\n    }\n    get isSpotlit() { return this.data.isSpotlit; }\n    set isSpotlit(val) {\n        this.updateTarget(\"isSpotlit\", val)\n            .then(() => { this.renderTargetAndKeeper(); });\n    }\n    get clocksData() { return this.data.clocksData; }\n    get displayMode() { return this.data.displayMode; }\n    get oneKeyIndex() {\n        let { oneKeyIndex } = this.data;\n        if (!oneKeyIndex) {\n            oneKeyIndex = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.random(0, 4, 1);\n            this.updateTarget(\"oneKeyIndex\", oneKeyIndex)\n                .then(() => { this.renderTargetAndKeeper(); });\n        }\n        return oneKeyIndex;\n    }\n    get sceneIDs() { return this.data.sceneIDs ?? []; }\n    get overlayPosition() { return this.data.overlayPosition?.[game.scenes.current.id]; }\n    set overlayPosition(val) {\n        if (val) {\n            this.updateTarget(`overlayPosition.${game.scenes.current.id}`, val)\n                .then(() => { this.renderTargetAndKeeper(); });\n        }\n        else {\n            this.updateTarget(`overlayPosition.-=${game.scenes.current.id}`, null)\n                .then(() => { this.renderTargetAndKeeper(); });\n        }\n    }\n    // #endregion\n    get clocks() {\n        return new Collection(Object.entries(this.clocksData)\n            .sort((a, b) => a[1].index - b[1].index)\n            .map(([id, data]) => {\n            return [id, new BladesClock(data)];\n        }));\n    }\n    getClockByID(clockID) {\n        return this.clocks.get(clockID);\n    }\n    getClockByIndex(index) {\n        return this.clocks.find((clock) => clock.index === index);\n    }\n    get size() { return this.clocks.size; }\n    get isComplete() {\n        return Array.from(this.clocks).every((clock) => clock.isComplete);\n    }\n    get isClockKeeperKey() {\n        return this.target instanceof _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesClockKeeper;\n    }\n    get isFactionKey() {\n        return this.target instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesFaction;\n    }\n    get isProjectKey() {\n        return this.target instanceof _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesProject;\n    }\n    get isScoreKey() {\n        return this.target instanceof _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesScore;\n    }\n    get visibleClocks() {\n        return this.clocks.filter((clock) => clock.isVisible);\n    }\n    get activeClocks() {\n        return this.visibleClocks.filter((clock) => clock.isActive);\n    }\n    get inProgressClocks() {\n        return this.visibleClocks.filter((clock) => !clock.isComplete && clock.value > 0);\n    }\n    get unstartedClocks() {\n        return this.visibleClocks.filter((clock) => clock.value === 0);\n    }\n    get completedClocks() {\n        return this.visibleClocks.filter((clock) => clock.isComplete);\n    }\n    get currentClock() {\n        // If there are visible, active clocks that are not complete, return the earliest (by index property)\n        //    active clock that is not complete.\n        if (this.activeClocks.length > 0) {\n            return this.getEarliestClock(this.activeClocks);\n        }\n        // Otherwise, if there are any visible, completed clocks, return the latest visible, completed clock\n        if (this.completedClocks.length > 0) {\n            return this.getLatestClock(this.completedClocks);\n        }\n        // Otherwise, if there are any visible clocks, return the earliest visible clock.\n        if (this.visibleClocks.length > 0) {\n            return this.getEarliestClock(this.visibleClocks);\n        }\n        // Finally, if all clocks are hidden, return the clock at index 0\n        return this.getEarliestClock(Array.from(this.clocks));\n    }\n    get fullDisplayPosData() {\n        const x = this.svgData.width / 2;\n        const y = this.svgData.height / 2;\n        return {\n            x, y, width: this.svgData.width, height: this.svgData.height\n        };\n    }\n    get clocksDisplayPosData() {\n        return this.getClocksBoundingBox(Array.from(this.clocks));\n    }\n    get visibleClocksDisplayPosData() {\n        return this.getClocksBoundingBox(this.visibleClocks);\n    }\n    get activeClocksDisplayPosData() {\n        return this.getClocksBoundingBox(this.activeClocks);\n    }\n    getClocksBoundingBox(clocks) {\n        const { size, ...allClocksPosData } = this.svgData.clocks;\n        // Filter 'allClocksPosData' to include only those entries with index properties of elements in 'clocks'\n        const clocksPosData = Object.fromEntries(Object.entries(allClocksPosData)\n            .filter(([index]) => clocks.map((clock) => clock.index).includes(_core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(index)))\n            .map(([index, posData]) => [_core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(index), posData]));\n        // Sort the values of clocksPosData by their positions\n        const clockWidthPosData = Object.values(clocksPosData).sort((a, b) => a.x - b.x);\n        const clockHeightPosData = Object.values(clocksPosData).sort((a, b) => a.y - b.y);\n        // Get the highest and lowest values for each set of positions\n        const xLowest = clockWidthPosData[0].x;\n        const xHighest = clockWidthPosData[clockWidthPosData.length - 1].x;\n        const yLowest = clockHeightPosData[0].y;\n        const yHighest = clockHeightPosData[clockHeightPosData.length - 1].y;\n        return {\n            // Determine the center point in both x and y axes\n            x: (xLowest + xHighest) / 2,\n            y: (yLowest + yHighest) / 2,\n            // Determine height and width of bounding box, accounting for clock size\n            width: xHighest - xLowest + size,\n            height: yHighest - yLowest + size\n        };\n    }\n    /** This function accepts any number of arrays of BladesClock, then returns an array\n     * containing those BladesClock instances that appear in ALL provided arrays.\n     */\n    getClocksIn(...clockArrays) {\n        if (clockArrays.length === 0)\n            return [];\n        return clockArrays.reduce((acc, currentArray) => {\n            return acc.filter((clock) => currentArray.includes(clock));\n        });\n    }\n    /** This function accepts an array of BladesClock, and returns the BladesClock\n     * instance with the lowest index property.\n     */\n    getEarliestClock(clockArray) {\n        if (clockArray.length) {\n            return clockArray.sort((a, b) => a.index - b.index)[0];\n        }\n        return undefined;\n    }\n    /** This function accepts an array of BladesClock, and returns the BladesClock\n     * instance with the highest index property.\n     */\n    getLatestClock(clockArray) {\n        if (clockArray.length) {\n            return clockArray.sort((a, b) => b.index - a.index)[0];\n        }\n        return undefined;\n    }\n    isInScene(sceneID = game.scenes.current.id) {\n        return this.sceneIDs.includes(sceneID);\n    }\n    get isInCurrentScene() {\n        return this.isInScene(game.scenes.current.id);\n    }\n    get displaySelectOptions() {\n        const options = [\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.full, display: \"Full Key\" },\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.clocks, display: \"Clocks\" },\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.activeClocks, display: \"Active Clocks\" }\n        ];\n        for (let i = 0; i < this.size; i++) {\n            options.push(...[\n                { value: i, display: `Clock #${i}` },\n                { value: `present${i}`, display: `Present Clock #${i}` }\n            ]);\n        }\n        return options;\n    }\n    constructor(dataOrConfig) {\n        super(dataOrConfig);\n        game.eunoblades.ClockKeys.set(this.id, this);\n        Object.values(dataOrConfig.clocksData ?? {}).forEach((clockData) => new BladesClock(clockData));\n    }\n    // parseClockConfig(config: BladesClock.Config, indexOverride?: ClockIndex): BladesClock.Data {\n    //   if (this.size === 6) {throw new Error(\"Cannot add a clock to a clock key with 6 clocks.\");}\n    //   if (indexOverride !== undefined && indexOverride < 0) {throw new Error(\"Cannot add a clock with a negative index.\");}\n    //   // Remove target so it doesn't conflict with key's targetID\n    //   // delete config.target;\n    //   const {target, targetID, targetKey, targetFlagKey, ...partialSchema} = config;\n    //   const linkData: BladesTargetLink.LinkData = this.targetKey\n    //     ? {\n    //       targetID: this.targetID,\n    //       targetKey: `${this.targetKeyPrefix}.clocksData` as TargetKey\n    //     }\n    //     : {\n    //       targetID: this.targetID,\n    //       targetFlagKey: `${this.targetFlagKeyPrefix}.clocksData` as TargetFlagKey\n    //     };\n    //   // Derive clock's targetID and targetKey/targetFlagKey from key's values\n    //   data.targetID = this.targetID;\n    //   if (this.targetKey) {\n    //     data.targetKey = `${this.targetKeyPrefix}.clocksData` as TargetKey;\n    //   } else if (this.targetFlagKey) {\n    //     data.targetFlagKey = `${this.targetFlagKeyPrefix}.clocksData` as TargetFlagKey;\n    //   }\n    //   // Assign 'parentKeyID' and 'index'\n    //   config.parentKeyID = this.id;\n    //   config.index = indexOverride ?? this.size;\n    //   // Parse config to full data object\n    //   return BladesClock.ApplySchemaDefaults(\n    //     BladesClock.ParseConfigToData(config as BladesClock.Config)\n    //   );\n    // }\n    // #endregion\n    // #region HTML INTERACTION ~\n    // #region Get Elements$ ~\n    getElemFromDisplayContext(displayContext) {\n        let elem$;\n        const DOM$ = $(\".vtt.game.system-eunos-blades\");\n        switch (displayContext) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.overlay: {\n                elem$ = DOM$.find(`#blades-overlay #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.pcSheet: {\n                elem$ = DOM$.find(`.actor.sheet .pc #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.factionSheet: {\n                elem$ = DOM$.find(`.actor.sheet .faction #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.projectSheet: {\n                elem$ = DOM$.find(`.item.sheet .project #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.scoreSheet: {\n                elem$ = DOM$.find(`.item.sheet .score #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.rollCollab: {\n                elem$ = DOM$.find(`.roll-collab-sheet #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.chatMessage: {\n                elem$ = DOM$.find(`#chat #${this.id}`);\n                break;\n            }\n        }\n        if (!elem$.length) {\n            throw new Error(`[BladesClockKey.getElemFromDisplayContext] Error elem$ not found for key '${this.id}' for display context '${displayContext}'.`);\n        }\n        return elem$;\n    }\n    getElements$(displayContext) {\n        let elem$;\n        if (typeof displayContext === \"string\") {\n            displayContext = this.getElemFromDisplayContext(displayContext);\n        }\n        elem$ = $(displayContext).find(`#${this.id}`);\n        if (!elem$.length) {\n            elem$ = $(displayContext).closest(`#${this.id}`);\n        }\n        if (!elem$?.length) {\n            throw new Error(`[BladesClockKey.getElements$] Cannot find elements for display context '${displayContext}' of clockKey '${this.id}'.`);\n        }\n        // Using elem$ as a reference, locate relevant clock key elements and return them in a dictionary.\n        const keyElems$ = {\n            elem$\n        };\n        // Get elements that will be there regardless of context, throwing errors if not found.\n        // const container$ = elem$.closest(\".clock-key-container\");\n        if (!elem$.length) {\n            throw new Error(`[BladesClockKey.renderClockKey] Error '.clock-key-container' not found for key '${this.id}'.`);\n        }\n        keyElems$.container$ = elem$.closest(\".clock-key-container\");\n        const imgContainer$ = elem$.find(\".key-image-container\");\n        if (!imgContainer$.length) {\n            throw new Error(`[BladesClockKey.renderClockKey] Error '.key-image-container' not found for key '${this.id}'.`);\n        }\n        keyElems$.imgContainer$ = imgContainer$;\n        const label$ = elem$.find(\".key-label\");\n        if (!label$.length) {\n            throw new Error(`[BladesClockKey.renderClockKey] Error label$ not found for key '${this.id}'.`);\n        }\n        keyElems$.label$ = label$;\n        // Check for optional elements and silently exclude them from dictionary if not found.\n        const factionLabel$ = elem$.find(\".faction-label\");\n        if (factionLabel$.length) {\n            keyElems$.factionLabel$ = factionLabel$;\n        }\n        const projectLabel$ = elem$.find(\".project-label\");\n        if (projectLabel$.length) {\n            keyElems$.projectLabel$ = projectLabel$;\n        }\n        const scoreLabel$ = elem$.find(\".score-label\");\n        if (scoreLabel$.length) {\n            keyElems$.scoreLabel$ = scoreLabel$;\n        }\n        // Register each clock under its id, retrieving the elements for each.\n        this.clocks.forEach((clock) => {\n            keyElems$.clocks ??= {};\n            keyElems$.clocks[clock.id] = clock.getElements$(displayContext);\n        });\n        eLog.checkLog3(\"BladesClockKey\", \"Clock Key Elements\", keyElems$);\n        return keyElems$;\n    }\n    // #endregion\n    // #region Initial Rendering ~\n    async renderTo(parentElem) {\n        const parent$ = $(parentElem);\n        if (!parent$.length) {\n            throw new Error(`[BladesClockKey.renderClockKeyTo] Error parent element not provided for key '${this.id}'.`);\n        }\n        // Render clock key template and append it to parent element\n        const clockKeyHTML = await renderTemplate(\"systems/eunos-blades/templates/components/clock-key.hbs\", this);\n        $(clockKeyHTML).appendTo(parent$);\n    }\n    /**\n     * This function generates a partial GSAP.TweenVars object that will display the key in a given mode within the bounds of a provided container.\n     *\n     * @param {ClockKeyDisplayMode | number} [displayMode=\"full\"] - The display mode. Options include:\n     * - \"full\" - displays the entire clock key\n     * - \"clocks\" - zooms in to display only the clocks\n     * - \"activeClocks\" - zooms in to the active clocks\n     * - \"presentN\" (where N is a clock index number) - zooms in to the clock at index N, and presents whichever side has the next available segment towards the camera.\n     * - A clock index number - zooms in to the clock at index N\n     *\n     * @param {HTMLElement | JQuery<HTMLElement> | {x: number, y: number, width: number, height: number}} [container$] - The container within which the key will be displayed.\n     * This can be:\n     * - An HTMLElement\n     * - A JQuery<HTMLElement>\n     * - A {x, y, width, height} position definition\n     * If not provided, it defaults to the clock key's container element (only if the key is already rendered in the DOM).\n     *\n     * @returns {gsap.TweenVars} - A partial GSAP.TweenVars object that describes how to display the key in the given mode within the bounds of the provided container. The returned object may include the following properties:\n     * - 'scale' (number): A multiple to be applied to scale at \"full\" display mode.\n     * - 'top' (number): A delta vertical shift from \"full\" display mode position.\n     * - 'left' (number): A delta horizontal shift from \"full\" display mode position.\n     * - 'transformOrigin': An absolute value.\n     * - 'rotationZ': An absolute value for the keySwing axis.\n     * - 'rotationY': An absolute value for rotation in/out of the screen.\n     * Any variables left undefined default to \"full\" display mode.\n     */\n    getVarsForDisplayMode(keyElems$, displayMode = _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.full, container$) {\n        const keyTweenVars = {};\n        const keyImgContTweenVars = {};\n        container$ ??= keyElems$.container$;\n        // === TARGET CONTAINER ELEMENT ===\n        // container$ refers to the element that the desired clocks will be made to fit within, and can be either an\n        //   HTMLElement (or JQuery reference to such), or an Element Position object ({x, y, height, width}).\n        // We first convert any HTMLElements or JQuery<HTMLElement>s to an Element Position object:\n        let targetPosData;\n        if (container$ instanceof HTMLElement || container$ instanceof jQuery) {\n            const containerPosData = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.getProperty($(container$)[0]);\n            targetPosData = {\n                x: containerPosData(\"x\"),\n                y: containerPosData(\"y\"),\n                width: containerPosData(\"width\"),\n                height: containerPosData(\"height\")\n            };\n        }\n        else if (isElemPosData(container$)) {\n            targetPosData = container$;\n        }\n        else {\n            throw new Error(`[BladesClockKey.getVarsForDisplayMode] Error container$ '${container$}' is not a valid type.`);\n        }\n        // === TARGET FOCUS AREA ===\n        // The focus area is the area of the key that we want to display in the container.\n        // This area is determined by the display mode, and may be the full key, the clocks, the active clocks, or a single clock.\n        // We will use this area to determine the scale and position of the key within the container.\n        let presentingClock;\n        let focusPosData;\n        switch (displayMode) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.full: {\n                focusPosData = {\n                    x: this.svgData.width / 2,\n                    y: this.svgData.height / 2,\n                    width: this.svgData.width,\n                    height: this.svgData.height\n                };\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.clocks: {\n                focusPosData = this.getClocksBoundingBox(Array.from(this.clocks));\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.activeClocks: {\n                focusPosData = this.getClocksBoundingBox(this.getClocksIn(this.activeClocks, this.visibleClocks));\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.presentCurrentClock: {\n                presentingClock = this.currentClock;\n                displayMode = presentingClock.index;\n            }\n            // falls through\n            default: {\n                if (typeof displayMode === \"string\" && displayMode.startsWith(\"present\")) {\n                    displayMode = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(displayMode.toString().slice(7));\n                    presentingClock = this.getClockByIndex(displayMode);\n                }\n                // Confirm that displayMode is an integer between 0 and this.size\n                if (!_core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isInt(displayMode) || displayMode < 0 || displayMode >= this.size) {\n                    throw new Error(`[BladesClockKey.getVarsForDisplayMode] Error display mode '${displayMode}' is not a valid clock index for key '${this.id}'.`);\n                }\n                // Set focusPosData to the center of the clock, with width and height equal to size\n                const focusClockData = this.svgData.clocks[displayMode];\n                focusPosData = {\n                    x: focusClockData.x,\n                    y: focusClockData.y,\n                    width: this.svgData.clocks.size,\n                    height: this.svgData.clocks.size\n                };\n                break;\n            }\n        }\n        // === FIT FOCUS AREA INSIDE TARGET CONTAINER ===\n        // Determine scale factor necessary to fit focusArea inside keyContainer\n        keyTweenVars.scale = Math.min(targetPosData.height / focusPosData.height, targetPosData.width / focusPosData.width);\n        // Determine top and left values for key-image-container, accounting for x/yPercent -50\n        keyImgContTweenVars.top = (0.5 * _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ClockKeySquareSize) - focusPosData.y;\n        keyImgContTweenVars.left = (0.5 * _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ClockKeySquareSize) - focusPosData.x;\n        // Set transfer origin of key-image-container to same position, for further animation\n        keyImgContTweenVars.transformOrigin = `${focusPosData.x}px ${focusPosData.y}px`;\n        // Initialize rotation of key to 0\n        keyImgContTweenVars.rotateY = 0;\n        // If 'isPresenting',\n        // ... rotate clock slightly towards camera\n        // ... increase scale of key\n        // ... shift key image container horizontally\n        if (presentingClock) {\n            keyTweenVars.scale *= 2;\n            if (presentingClock.getActiveSide() === \"left\") {\n                keyImgContTweenVars.rotateY = 30;\n                keyImgContTweenVars.left += this.size === 1 ? 45 : 25;\n            }\n            else if (presentingClock.getActiveSide() === \"right\") {\n                keyImgContTweenVars.rotateY = -30;\n                keyImgContTweenVars.left -= this.size === 1 ? 45 : 25;\n            }\n        }\n        return { keyTweenVars, keyImgContTweenVars };\n    }\n    // public fitKeyToContainer(\n    //   keyElems$: ClockKeyElems$,\n    //   posOverrides?: Partial<ElemPosData & {\n    //     xShift: number,\n    //     yShift: number,\n    //     scaleMult: number\n    //   }>\n    // ) {\n    //   const {container$, elem$, imgContainer$} = keyElems$;\n    //   // Get position data for the container$ element (x, y, width, height)\n    //   const keyPosition: ElemPosData = {\n    //     x: U.gsap.getProperty(container$[0], \"x\") as number,\n    //     y: U.gsap.getProperty(container$[0], \"y\") as number,\n    //     width: U.gsap.getProperty(container$[0], \"width\") as number,\n    //     height: U.gsap.getProperty(container$[0], \"height\") as number\n    //   };\n    //   const {xShift, yShift, scaleMult, ...focusPosOverrides} = posOverrides ?? {};\n    //   const focusPosition: ElemPosData = {\n    //     ...this.fullDisplayPosData,\n    //     ...focusPosOverrides\n    //   };\n    //   eLog.checkLog3(\"BladesClockKey\", \"[BladesClockKey] Key Positions\", {\n    //     keyPosition,\n    //     focusPosition,\n    //     widthScale: keyPosition.width / focusPosition.width,\n    //     heightScale: keyPosition.height / focusPosition.height\n    //   });\n    //   // Apply scale factor to elem$ to fit default key position inside container$\n    //   U.gsap.set(elem$, {\n    //     scale: Math.min(\n    //       keyPosition.width / focusPosition.width,\n    //       keyPosition.height / focusPosition.height\n    //     ) * (scaleMult ?? 1)\n    //   });\n    //   // Apply top, left and transformOrigin value to keyImgContainer, accounting for x/yPercent -50\n    //   U.gsap.set(imgContainer$, {\n    //     top: (0.5 * C.ClockKeySquareSize) - focusPosition.y + (yShift ?? 0),\n    //     left: (0.5 * C.ClockKeySquareSize) - focusPosition.x + (xShift ?? 0),\n    //     transformOrigin: `${focusPosition.x + (xShift ?? 0)}px ${focusPosition.y + (yShift ?? 0)}px`\n    //   });\n    // }\n    formatLabels(keyElems$) {\n        const { label$, clocks, factionLabel$, projectLabel$, scoreLabel$ } = keyElems$;\n        // Collect relevant label elements, desired aspect ratio, and maximum line count, then apply adjustments to the label container for a pleasing aspect ratio\n        [\n            [label$, 2, 4],\n            factionLabel$ ? [factionLabel$, 2, 2] : undefined,\n            projectLabel$ ? [projectLabel$, 2, 2] : undefined,\n            scoreLabel$ ? [scoreLabel$, 2, 2] : undefined,\n            ...this.clocks.map((clock) => [clocks[clock.id].clockLabel$, 2.5, 3])\n        ].filter(Boolean).forEach(([labelElem$, aspectRatio, maxLines]) => {\n            _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].adjustTextContainerAspectRatio(labelElem$, aspectRatio, maxLines);\n        });\n    }\n    setToDisplayMode(keyElems$, displayMode, isUpdatingTarget = true) {\n        const { keyTweenVars, keyImgContTweenVars } = this.getVarsForDisplayMode(keyElems$, displayMode);\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.set(keyElems$.elem$, keyTweenVars);\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.set(keyElems$.imgContainer$, keyImgContTweenVars);\n        if (isUpdatingTarget && displayMode !== this.displayMode) {\n            this.updateTarget(\"displayMode\", displayMode);\n        }\n    }\n    initElementsInContext(html, displayMode, isUpdatingTarget = true) {\n        const keyElems$ = this.getElements$(html);\n        displayMode ??= this.displayMode;\n        this.setToDisplayMode(keyElems$, displayMode, isUpdatingTarget);\n        this.formatLabels(keyElems$);\n        // If displayMode starts with 'present' or is an integer, fade out all label elements\n        if (displayMode.toString().startsWith(\"present\") || Number.isInteger(displayMode)) {\n            _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(keyElems$.container$.find(\".clock-label, .clock-key-label\"), { autoAlpha: 0, duration: 0 });\n        }\n        return keyElems$;\n    }\n    // #endregion\n    async addToScene(sceneID = game.scenes.current.id) {\n        if (this.isInScene(sceneID)) {\n            return;\n        }\n        const { sceneIDs } = this;\n        sceneIDs.push(sceneID);\n        await this.updateTarget({\n            isVisible: false,\n            sceneIDs\n        });\n        this.renderTargetAndKeeper();\n    }\n    async removeFromScene(sceneID = game.scenes.current.id) {\n        if (!this.isInScene(sceneID)) {\n            return;\n        }\n        const { sceneIDs } = this;\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(sceneIDs, sceneID);\n        await this.updateTarget(\"sceneIDs\", sceneIDs);\n        this.renderTargetAndKeeper();\n    }\n    closeClockKey({ container$ }) {\n        container$.remove();\n    }\n    get svgData() {\n        if (this.size === 0) {\n            throw new Error(\"[BladesClockKey.svgData] Error size is 0.\");\n        }\n        const keyData = _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKey_SVGDATA[this.size];\n        let path;\n        if (this.size === 1 && keyData.paths) {\n            path = keyData.paths[this.oneKeyIndex];\n        }\n        else if (keyData.path) {\n            path = keyData.path;\n        }\n        else {\n            throw new Error(\"[BladesClockKey.svgData] Error path is not defined.\");\n        }\n        return {\n            width: keyData.width,\n            height: keyData.height,\n            path,\n            clocks: keyData.clocks\n        };\n    }\n    isInOverlay(elem) {\n        return $(elem).hasClass(\".overlay-section\") || $(elem).closest(\".overlay-section\").length > 0;\n    }\n    get keyHeight() { return this.svgData.height; }\n    get keyWidth() { return this.svgData.width; }\n    get keyViewbox() { return `0 0 ${this.svgData.width} ${this.svgData.height}`; }\n    get keyPath() { return this.svgData.path; }\n    get clockSize() { return this.svgData.clocks.size; }\n    getClockPosition(clockIndex = 0) {\n        if (clockIndex > this.size) {\n            throw new Error(`[BladesClockKey.getClockPosition] Error clockIndex '${clockIndex}' is greater than key size '${this.size}'.`);\n        }\n        if (clockIndex < 0) {\n            throw new Error(`[BladesClockKey.getClockPosition] Error clockIndex '${clockIndex}' is less than 0.`);\n        }\n        return this.svgData.clocks[clockIndex];\n    }\n    positionDragger;\n    removePositionDragger() {\n        this.positionDragger?.target.remove();\n        this.positionDragger?.kill();\n        delete this.positionDragger;\n    }\n    spawnPositionDragger(containerElem$ = game.eunoblades.Director.clockKeySection$) {\n        const self = this;\n        if (this.positionDragger) {\n            this.removePositionDragger();\n        }\n        const dragElem$ = $(`<div id=\"Dragger-${this.id}\" class=\"clock-key-container clock-key-dragger\" data-size=\"${this.size}\"></div>`)\n            .appendTo(containerElem$);\n        if (this.overlayPosition) {\n            dragElem$.css({\n                left: this.overlayPosition.x,\n                top: this.overlayPosition.y\n            });\n        }\n        this.positionDragger = new _core_gsap__WEBPACK_IMPORTED_MODULE_1__.Dragger(dragElem$, {\n            type: \"top,left\",\n            onDragStart() {\n                $(this.target).css(\"background\", \"rgba(255, 255, 0, 0.25)\");\n                $(this.target).css(\"outlineColor\", \"rgba(255, 255, 0, 1)\");\n            },\n            onDragEnd() {\n                $(this.target).css(\"background\", \"rgba(255, 0, 255, 0.25)\");\n                $(this.target).css(\"outlineColor\", \"rgba(255, 0, 255, 1)\");\n                self.overlayPosition = { x: this.endX, y: this.endY };\n            }\n        });\n    }\n    switchToMode(keyElems$, displayMode, extendKeyVars = {}, extendKeyContainerVars = {}, isUpdatingTarget = true, callback) {\n        const { elem$, imgContainer$ } = keyElems$;\n        const { keyTweenVars, keyImgContTweenVars } = this.getVarsForDisplayMode(keyElems$, displayMode);\n        const currentDisplayMode = this.displayMode;\n        const randomID = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.random(1, 1000, 1);\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.timeline({\n            callbackScope: this,\n            paused: true,\n            onStart() {\n                eLog.checkLog2(\"BladesClockKey\", `switchToMode #${randomID} - START`, { key: this, keyElems$, displayMode });\n            },\n            onComplete() {\n                eLog.checkLog3(\"BladesClockKey\", `switchToMode #${randomID} - COMPLETE`, { key: this, keyElems$, displayMode });\n                if (isUpdatingTarget && displayMode !== this.currentDisplayMode) {\n                    this.updateTarget(\"displayMode\", displayMode)\n                        .then(() => callback?.());\n                }\n                else {\n                    callback?.();\n                }\n            },\n            onReverseComplete() {\n                eLog.checkLog3(\"BladesClockKey\", `switchToMode #${randomID} - REVERSE COMPLETE`, { key: this, keyElems$, displayMode });\n                if (isUpdatingTarget) {\n                    this.updateTarget(\"displayMode\", currentDisplayMode);\n                }\n            }\n        })\n            .to(elem$, { ...keyTweenVars, ...extendKeyVars }, 0)\n            .to(imgContainer$, { ...keyImgContTweenVars, ...extendKeyContainerVars }, 0);\n    }\n    // #endregion\n    // #region ANIMATED UPDATES (Both GM-Only AND Socket Calls)\n    //    #region   > SOCKET CALLS: _SocketCall / static _SocketResponse / _Animation\n    fadeInName_Animation(keyElems$) {\n        if (!this.name) {\n            return undefined;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.blurReveal(keyElems$.label$, {\n            ignoreMargin: true,\n            duration: 0.75\n        });\n    }\n    async fadeInName_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"fadeInName_SocketCall\", displayContext, this.id);\n    }\n    static fadeInName_SocketResponse(displayContext, keyID) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        key.fadeInName_Animation(key.getElements$(displayContext));\n    }\n    fadeOutName_Animation(keyElems$) {\n        if (!this.name) {\n            return undefined;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.blurRemove(keyElems$.label$, {\n            ignoreMargin: true,\n            duration: 0.75\n        });\n    }\n    async fadeOutName_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        this.fadeOutName_Animation(this.getElements$(displayContext));\n        socketlib.system.executeForOthers(\"fadeOutName_SocketCall\", displayContext, this.id);\n    }\n    static fadeOutName_SocketResponse(displayContext, keyID) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        key.fadeOutName_Animation(key.getElements$(displayContext));\n    }\n    //    #endregion\n    // #endregion\n    // #region Adding & Removing Clocks ~\n    async updateClockIndices() {\n        await this.updateTarget(\"clocksData\", Object.fromEntries(Object.entries(this.clocksData)\n            .map(([id, data], index) => [id, { ...data, index }])));\n        return this.clocks;\n    }\n    async addClock(clockSchema = {}) {\n        // Derive clock data from config\n        const cData = BladesClock.ParseConfigToData({\n            ...BladesClock.ApplySchemaDefaults(clockSchema),\n            index: this.size,\n            targetID: this.targetID,\n            targetKey: `${this.targetKeyPrefix}.clocksData`,\n            isScopingById: true\n        });\n        // const clockData = this.parseClockConfig(clockConfig);\n        // Write to state\n        await this.updateTarget(`clocksData.${cData.id}`, cData);\n        // Regnerate clocks collection\n        void this.clocks;\n        this.renderTargetAndKeeper();\n    }\n    async deleteClock(clockID) {\n        if (this.size <= 1) {\n            throw new Error(\"[BladesClockKey.deleteClock()] Cannot reduce number of clocks below 1!\");\n        }\n        clockID ??= Array.from(this.clocks).pop()?.id;\n        if (!clockID) {\n            return;\n        }\n        await this.getClockByID(clockID)?.delete();\n        await this.updateClockIndices();\n        // Regenerate clocks collection\n        void this.clocks;\n    }\n    // #endregion\n    // #region OVERRIDES: Async Update Methods\n    renderTargetAndKeeper() {\n        this.renderTarget();\n        game.eunoblades.ClockKeeper.sheet?.render();\n    }\n    renderTarget() {\n        this.target.sheet?.render();\n    }\n}\nclass BladesClock extends _BladesTargetLink__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    // #region STATIC METHODS ~\n    static ApplySchemaDefaults(schemaData) {\n        const namedValueMax = {\n            name: schemaData.name ?? \"\",\n            value: schemaData.value ?? 0,\n            max: schemaData.max ?? 8\n        };\n        return {\n            index: 0,\n            color: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.white,\n            isVisible: !_core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isInt(schemaData.index) || schemaData.index === 0,\n            isNameVisible: false,\n            isHighlighted: false,\n            isActive: !_core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isInt(schemaData.index) || schemaData.index === 0,\n            ...schemaData,\n            ...namedValueMax\n        };\n    }\n    // #endregion\n    // #region GETTERS & SETTERS ~\n    get canEdit() {\n        // return true if user has edit permissions on parent document, and clock is\n        // visible and active.\n        console.log(\"NOTE: All Clocks currently Editable; see line 71 of BladesClock.ts\");\n        return this.isVisible && this.isActive;\n    }\n    get data() { return this.linkData; }\n    get name() { return this.data.name; }\n    set name(val) {\n        this.updateTarget(\"name\", val)\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get value() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(this.data.value); }\n    set value(val) {\n        this.updateTarget(\"value\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get max() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(this.data.max); }\n    set max(val) {\n        this.updateTarget(\"max\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get color() { return this.data.color ?? _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.white; }\n    set color(val) {\n        this.updateTarget(\"color\", val)\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get isActive() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(this.data.isActive); }\n    set isActive(val) {\n        this.updateTarget(\"isActive\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get parentKey() {\n        const pKey = game.eunoblades.ClockKeys.get(this.data.parentKeyID);\n        if (!pKey) {\n            throw new Error(`[BladesClockKey.parentKey] No parent key found for clock ${this.id}`);\n        }\n        return pKey;\n    }\n    get isNameVisible() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(this.data.isNameVisible); }\n    set isNameVisible(val) {\n        this.updateTarget(\"isNameVisible\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get isVisible() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(this.data.isVisible); }\n    set isVisible(val) {\n        this.updateTarget(\"isVisible\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get isHighlighted() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(this.data.isHighlighted); }\n    set isHighlighted(val) {\n        this.updateTarget(\"isHighlighted\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pBool(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get index() { return _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(this.data.index); }\n    set index(val) {\n        this.updateTarget(\"index\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].pInt(val))\n            .then(() => { this.parentKey.renderTargetAndKeeper(); });\n    }\n    get isEmpty() { return this.value === 0; }\n    get isComplete() { return this.value >= this.max; }\n    get rollOppClock() { return this; }\n    get rollOppName() { return this.name; }\n    get rollOppType() { return \"clock\"; }\n    get colorSelectOptions() {\n        return [\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.white, display: \"🔘\" },\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.yellow, display: \"📀\" },\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.cyan, display: \"🔵\" },\n            { value: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.red, display: \"🔴\" }\n        ];\n    }\n    get maxSelectOptions() {\n        return [\n            { value: 2, display: 2 },\n            { value: 3, display: 3 },\n            { value: 4, display: 4 },\n            { value: 5, display: 5 },\n            { value: 6, display: 6 },\n            { value: 8, display: 8 },\n            { value: 10, display: 10 },\n            { value: 12, display: 12 }\n        ];\n    }\n    get valueSelectOptions() {\n        const returnVals = [];\n        for (let i = 0; i <= this.max; i++) {\n            returnVals.push({ value: i, display: i });\n        }\n        return returnVals;\n    }\n    // Returns which hemisphere of the clock will show the final change if segmentDelta segments are added/removed.\n    getActiveSide(segmentDelta = 0) {\n        const finalClockValue = Math.min(this.max, Math.max(0, this.value + segmentDelta));\n        const halfClockValue = this.max / 2;\n        if (segmentDelta === 0) {\n            return finalClockValue >= halfClockValue\n                ? \"left\"\n                : \"right\";\n        }\n        return finalClockValue > halfClockValue\n            ? \"left\"\n            : \"right\";\n    }\n    // #endregion\n    // #region HTML INTERACTION ~\n    getElemFromDisplayContext(displayContext) {\n        let elem$;\n        const DOM$ = $(\".vtt.game.system-eunos-blades\");\n        switch (displayContext) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.overlay: {\n                elem$ = DOM$.find(`#blades-overlay #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.pcSheet: {\n                elem$ = DOM$.find(`.actor.sheet .pc #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.factionSheet: {\n                elem$ = DOM$.find(`.actor.sheet .faction #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.projectSheet: {\n                elem$ = DOM$.find(`.item.sheet .project #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.scoreSheet: {\n                elem$ = DOM$.find(`.item.sheet .score #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.rollCollab: {\n                elem$ = DOM$.find(`.roll-collab-sheet #${this.id}`);\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockDisplayContext.chatMessage: {\n                elem$ = DOM$.find(`#chat #${this.id}`);\n                break;\n            }\n        }\n        if (!elem$.length) {\n            throw new Error(`[BladesClockKey.getElemFromDisplayContext] Error elem$ not found for key '${this.id}' for display context '${displayContext}'.`);\n        }\n        return elem$;\n    }\n    getElements$(displayContext) {\n        let elem$;\n        if (typeof displayContext === \"string\") {\n            displayContext = this.getElemFromDisplayContext(displayContext);\n        }\n        elem$ = $(displayContext).find(`#${this.id}`);\n        if (!elem$.length) {\n            elem$ = $(displayContext).closest(`#${this.id}`);\n        }\n        if (!elem$?.length) {\n            throw new Error(`[BladesClock.getElements$] Cannot find elements for display context '${displayContext}' of clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        // Using elem$ as a reference, locate relevant clock elements and return them in a dictionary.\n        const clockElems$ = {\n            clockElem$: elem$\n        };\n        // Get elements that will be there regardless of context, throwing errors if not found.\n        const container$ = elem$.closest(\".clock-container\");\n        if (!container$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-container' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.clockContainer$ = container$;\n        const label$ = elem$.find(\".clock-label\");\n        if (!label$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-label' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.clockLabel$ = label$;\n        const bg$ = elem$.find(\".clock-bg\");\n        if (!bg$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-bg' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.bg$ = bg$;\n        const frame$ = elem$.find(\".clock-frame\");\n        if (!frame$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-frame' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.frame$ = frame$;\n        const fill$ = elem$.find(\".clock-fill\");\n        if (!fill$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-fill' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.fill$ = fill$;\n        const glow$ = elem$.find(\".clock-glow\");\n        if (!glow$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-glow' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.glow$ = glow$;\n        const cover$ = elem$.find(\".clock-cover\");\n        if (!cover$.length) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-cover' not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.cover$ = cover$;\n        const oneSegments$ = elem$.find(\".clock-one-segment\");\n        if (oneSegments$.length !== 3) {\n            throw new Error(`[BladesClock.getElements$] Error '.clock-one-segment' elements not found for clock '${this.id}' of key '${this.parentKey.id}'.`);\n        }\n        clockElems$.oneSegments$ = oneSegments$;\n        return clockElems$;\n    }\n    // #endregion\n    // #region ANIMATED UPDATES (Both GM-Only AND Socket Calls)\n    reveal_Animation(clockElems$, callback) {\n        // Identify elements for fading in\n        const fadeInElements = [\n            clockElems$.frame$,\n            clockElems$.fill$\n        ].filter((el$) => el$ !== undefined);\n        // Construct timeline for revealing clock\n        const tl = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.timeline({\n            callbackScope: this,\n            onComplete() {\n                callback?.();\n            }\n        });\n        // Fade out cover hiding clock\n        tl.to(clockElems$.cover$, { scale: 2, autoAlpha: 0, duration: 0.5, ease: \"power2\" });\n        // Fade in clock elements\n        tl.fromTo(fadeInElements, {\n            autoAlpha: 0,\n            scale: 2\n        }, {\n            autoAlpha: 1,\n            scale: 1,\n            duration: 0.5,\n            stagger: 0.2,\n            ease: \"power2\"\n        });\n        // Fade in name, if name is visible.\n        if (this.name && this.isNameVisible) {\n            tl.blurReveal(clockElems$.clockLabel$, {\n                ignoreMargin: true,\n                duration: 0.75\n            }, \"<+0.05\");\n        }\n        // Fade in glow, if highlighted\n        if (this.isHighlighted) {\n            tl.scaleUpReveal(clockElems$.glow$, {\n                scale: 3,\n                duration: 0.5\n            }, \"<+0.05\");\n        }\n        if (this.isActive) {\n            tl.add(() => this.activate_Animation(clockElems$), \"<+0.05\");\n        }\n        else {\n            tl.add(() => this.deactivate_Animation(clockElems$), \"<+0.05\");\n        }\n        return tl;\n    }\n    async reveal_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"reveal_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static reveal_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        const clockElems$ = clock.getElements$(displayContext);\n        clock.reveal_Animation(clockElems$);\n    }\n    hide_Animation(clockElems$, callback) {\n        // Identify elements for fading out\n        const fadeOutElements = [\n            clockElems$.frame$,\n            clockElems$.fill$\n        ].filter((el$) => el$ !== undefined);\n        // Construct timeline for hiding clock\n        const tl = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.timeline({\n            callbackScope: this,\n            onComplete() {\n                callback?.();\n            }\n        });\n        // Fade out clock elements\n        tl.to(fadeOutElements, {\n            autoAlpha: 0,\n            scale: 2,\n            duration: 0.5,\n            stagger: 0.2,\n            ease: \"power2\"\n        });\n        // Fade out name, if name visible\n        if (this.name && this.isNameVisible) {\n            tl.blurRemove(clockElems$.clockLabel$, {\n                ignoreMargin: true,\n                duration: 0.75\n            }, \"<+0.05\");\n        }\n        // Fade out glow, if highlighted\n        if (this.isHighlighted) {\n            tl.scaleDownRemove(clockElems$.glow$, {\n                scale: 3,\n                duration: 0.5\n            }, \"<+0.05\");\n        }\n        // Fade in cover element\n        tl.to(clockElems$.cover$, { scale: 1, autoAlpha: 1, duration: 0.5, ease: \"power2\" });\n        return tl;\n    }\n    async hide_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"hide_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static hide_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        const clockElems$ = clock.getElements$(displayContext);\n        clock.hide_Animation(clockElems$);\n    }\n    activate_Animation(clockElems$, callback) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(clockElems$.bg$, { autoAlpha: 1, duration: 0.5, ease: \"power2\" });\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(clockElems$.frame$, {\n            filter: \"brightness(0.5)\",\n            duration: 0.5,\n            ease: \"power2\",\n            onComplete: callback\n        });\n    }\n    async activate_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"activate_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static activate_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.activate_Animation(clock.getElements$(displayContext));\n    }\n    deactivate_Animation(clockElems$, callback) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(clockElems$.bg$, { autoAlpha: 0, duration: 0.5, ease: \"power2\" });\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(clockElems$.frame$, {\n            filter: \"brightness(1) blur(5px)\",\n            duration: 0.5,\n            ease: \"power2\",\n            onComplete: callback\n        });\n    }\n    async deactivate_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"deactivate_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static deactivate_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.deactivate_Animation(clock.getElements$(displayContext));\n    }\n    fadeInClockName_Animation(clockElems$) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.blurReveal(clockElems$.clockLabel$, {\n            ignoreMargin: true,\n            duration: 0.75\n        });\n    }\n    async fadeInClockName_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"fadeInClockName_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static fadeInClockName_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.fadeInClockName_Animation(clock.getElements$(displayContext));\n    }\n    fadeOutClockName_Animation(clockElems$) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.blurRemove(clockElems$.clockLabel$, {\n            ignoreMargin: true,\n            duration: 0.75\n        });\n    }\n    async fadeOutClockName_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"fadeOutClockName_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static fadeOutClockName_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.fadeOutClockName_Animation(clock.getElements$(displayContext));\n    }\n    highlight_Animation(clockElems$) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.scaleUpReveal(clockElems$.glow$, {\n            duration: 0.5,\n            scale: 3\n        });\n    }\n    async highlight_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"highlight_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static highlight_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.highlight_Animation(clock.getElements$(displayContext));\n    }\n    unhighlight_Animation(clockElems$) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.effects.scaleDownRemove(clockElems$.glow$, {\n            duration: 0.5,\n            scale: 3\n        });\n    }\n    async unhighlight_SocketCall(displayContext) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"unhighlight_SocketCall\", displayContext, this.parentKey.id, this.index);\n    }\n    static unhighlight_SocketResponse(displayContext, keyID, index) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.unhighlight_Animation(clock.getElements$(displayContext));\n    }\n    getRotationOfSegment(segment) {\n        const stepSize = 360 / this.max;\n        return stepSize * (segment - 1);\n    }\n    initOneSegments(clockElems$, segmentNums, isReversing) {\n        if (segmentNums.length > 3) {\n            throw new Error(`Too many segments: [${segmentNums.join(\", \")}]`);\n        }\n        // For each segment number, initialize a one-segment to that position,\n        //  and initialize its autoAlpha depending on isReversing.\n        const oneSegs = [...clockElems$.oneSegments$];\n        const oneSegsToAnimate = Array.from(clockElems$.oneSegments$).slice(0, segmentNums.length);\n        for (const segmentNum of segmentNums) {\n            const oneSegment = oneSegs.shift();\n            _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.set(oneSegment, {\n                rotation: this.getRotationOfSegment(segmentNum),\n                autoAlpha: isReversing ? 1 : 0\n            });\n        }\n        // If reversing, set clock element's value to the final value for proper clipping.\n        if (isReversing) {\n            clockElems$.clockElem$.attr(\"data-value\", _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getLast(segmentNums) - 1);\n        }\n        return oneSegsToAnimate;\n    }\n    changeSegments_Animation(clockElems$, startVal, endVal, callback) {\n        startVal = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.clamp(0, this.max, startVal);\n        endVal = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.clamp(0, this.max, endVal);\n        let delta = endVal - startVal;\n        if (delta === 0) {\n            return;\n        }\n        // Determine position and sequence of one-segments\n        const segmentNums = [];\n        if (delta < 0) {\n            while (Math.abs(delta) > startVal) {\n                delta++;\n            }\n            for (let i = startVal; i > endVal; i--) {\n                segmentNums.push(i);\n            }\n        }\n        else {\n            while (endVal > this.max) {\n                delta--;\n            }\n            for (let i = startVal + 1; i <= endVal; i++) {\n                segmentNums.push(i);\n            }\n        }\n        // Initialize oneSegments at determined positions\n        const segmentsToAnimate = this.initOneSegments(clockElems$, segmentNums, startVal > endVal);\n        eLog.checkLog3(\"BladesClock\", \"changeSegments_Animation\", { clockElems$, delta, segmentNums, startVal, endVal, segmentsToAnimate });\n        // Initialize master timeline\n        const tl = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.timeline();\n        // Enlarge clock key and focus clock\n        // const clockFocusTimeline: gsap.core.Timeline = this.parentKey.getClockFocusTimeline(this.index);\n        // tl.add(clockFocusTimeline);\n        // Animate one-segments\n        if (delta > 0) {\n            tl.fromTo(segmentsToAnimate, {\n                autoAlpha: 0,\n                scale: 2\n            }, {\n                autoAlpha: 1,\n                scale: 1,\n                duration: 0.5,\n                stagger: 0.2,\n                ease: \"power2\",\n                callbackScope: this,\n                onComplete() {\n                    clockElems$.clockElem$.attr(\"data-value\", endVal);\n                    _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.to(segmentsToAnimate, {\n                        autoAlpha: 0,\n                        duration: 0.5,\n                        stagger: 0.2\n                        // onComplete() {\n                        //   // Return clock key to original size and focus\n                        //   clockFocusTimeline.reverse();\n                        // }\n                    });\n                }\n            });\n        }\n        else {\n            tl.fromTo(segmentsToAnimate, {\n                autoAlpha: 1,\n                scale: 1\n            }, {\n                autoAlpha: 0,\n                scale: 2,\n                duration: 0.5,\n                stagger: 0.2,\n                ease: \"power2\"\n                // onComplete() {\n                //   // Return clock key to original size and focus\n                //   clockFocusTimeline.reverse();\n                // }\n            });\n        }\n        return tl;\n    }\n    async changeSegments_SocketCall(displayContext, startVal, endVal) {\n        if (!game.user.isGM) {\n            return;\n        }\n        startVal = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.clamp(0, this.max, startVal);\n        endVal = _core_utilities__WEBPACK_IMPORTED_MODULE_3__[\"default\"].gsap.utils.clamp(0, this.max, endVal);\n        socketlib.system.executeForEveryone(\"changeSegments_SocketCall\", displayContext, this.parentKey.id, this.index, startVal, endVal);\n    }\n    static changeSegments_SocketResponse(displayContext, keyID, index, startVal, endVal) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key?.isVisible) {\n            return;\n        }\n        const clock = key.getClockByIndex(index);\n        if (!clock) {\n            return;\n        }\n        clock.changeSegments_Animation(clock.getElements$(displayContext), startVal, endVal);\n    }\n    // #endregion\n    // #region Adding/Removing Clock Segments ~\n    // Returns number of segments beyond max (or 0, if max not met)\n    async fillSegments(count, isSilent = false) {\n        // Amount added beyond max:\n        const clockOverflow = Math.max(0, this.value + count - this.max);\n        // Clamp count to max:\n        count = Math.min(this.value + count, this.max) - this.value;\n        if (count === 0) {\n            return clockOverflow;\n        }\n        await this.updateTarget(\"value\", this.value + count);\n        if (!isSilent) {\n            this.parentKey.renderTargetAndKeeper();\n        }\n        return clockOverflow;\n    }\n    // Returns (positive) number of segments removed\n    // in excess of the number of segments in the clock\n    async clearSegments(count, isSilent = false) {\n        // Amount removed beyond 0:\n        const clockOverflow = Math.max(0, count - this.value);\n        // Clamp count to min:\n        count = Math.min(this.value, count);\n        if (count === 0) {\n            return clockOverflow;\n        }\n        await this.updateTarget(\"value\", this.value - count);\n        if (!isSilent) {\n            this.parentKey.renderTargetAndKeeper();\n        }\n        return clockOverflow;\n    }\n    async delete() {\n        const { parentKey } = this;\n        await super.delete(false);\n        parentKey.updateClockIndices();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesClockKey);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesClockKey.ts\n");

/***/ }),

/***/ "./ts/classes/BladesConsequence.ts":
/*!*****************************************!*\
  !*** ./ts/classes/BladesConsequence.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesRoll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* harmony import */ var _BladesTargetLink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BladesTargetLink */ \"./ts/classes/BladesTargetLink.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\n/* eslint-enable @typescript-eslint/no-unused-vars */\nclass BladesConsequence extends _BladesTargetLink__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    // #region Static Methods ~\n    static async Initialize() {\n        if (!game.messages) {\n            throw new Error(\"[BladesConsequence] Messages Not Ready!\");\n        }\n        return (await Promise.all(game.messages.contents\n            .map(async (msg) => msg.rollConsequences)))\n            .flat();\n    }\n    /**\n   * Checks if the given value is valid consequence data for a Resistance Roll.\n   * @param val The value to check.\n   * @param isCheckingResistedTo If the check is being recursively applied to the 'resistTo' value.\n   * @returns True if the val is valid BladesConsequence.Data, false otherwise.\n   */\n    static IsValidConsequenceData(val, isCheckingResistedTo = false) {\n        if (!_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isList(val)) {\n            return false;\n        }\n        if (typeof val.type !== \"string\" || !(val.type in _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType)) {\n            return false;\n        }\n        if (typeof val.name !== \"string\") {\n            return false;\n        }\n        if (isCheckingResistedTo) {\n            return true;\n        }\n        if (val.attribute && (typeof val.attribute !== \"string\" || !(val.attribute in _core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait))) {\n            return false;\n        }\n        if (!this.IsValidConsequenceData(val.resistTo, true)) {\n            return false;\n        }\n        return true;\n    }\n    static ApplySchemaDefaults(schemaData) {\n        // Ensure all properties of Schema are provided\n        if (!schemaData.primaryID) {\n            throw new Error(\"A primaryID is required for BladesConsequence.Schema\");\n        }\n        if (typeof schemaData.name === \"string\" && (!schemaData.name && schemaData.type !== _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None)) {\n            throw new Error(`A name must be provided for non-None-type consequences (${schemaData.name}).`);\n        }\n        return {\n            name: \"\",\n            type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None,\n            ...schemaData\n        };\n    }\n    static GetCsqTypeValue(cType, rollData) {\n        if (cType === _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.WorsePosition) {\n            // Requires position data to resolve.\n            if (!rollData) {\n                throw new Error(`Cannot resolve consequence type value for '${cType}' without roll data.`);\n            }\n            let position;\n            if (\"rollPositionFinal\" in rollData) {\n                position = rollData.rollPositionFinal;\n            }\n            else if (\"position\" in rollData) {\n                position = rollData.position;\n            }\n            if (!position) {\n                throw new Error(`Cannot resolve consequence type value for '${cType}' without roll data that includes final position data.`);\n            }\n            return {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Position.controlled]: 1,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Position.risky]: 2,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Position.desperate]: 0\n            }[position];\n        }\n        if (cType === _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.ReducedEffect) {\n            // Requires effect data to resolve.\n            if (!rollData) {\n                throw new Error(`Cannot resolve consequence type value for '${cType}' without roll data.`);\n            }\n            let effect;\n            if (\"rollEffectFinal\" in rollData) {\n                effect = rollData.rollEffectFinal;\n            }\n            else if (\"effect\" in rollData) {\n                effect = rollData.effect;\n            }\n            if (!effect) {\n                throw new Error(`Cannot resolve consequence type value for '${cType}' without roll data that includes final effect data.`);\n            }\n            return {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.extreme]: 1,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.great]: 1,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.standard]: 1,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.limited]: 2,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.zero]: 0\n            }[effect];\n        }\n        // All other values are constant for each consequence type.\n        return _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ConsequenceValues[cType];\n    }\n    // #endregion\n    // #region *** GETTERS *** ~\n    // #region Getters (Target Data) ~\n    get primaryID() { return this.data.primaryID ?? this.parentConsequence?.primaryID; }\n    get parentCsqID() { return this.data.parentCsqID; }\n    get name() { return this.data.name; }\n    get type() { return this.data.type; }\n    get attribute() { return this.data.attribute ?? this.parentConsequence?.attribute; }\n    get attributeVal() { return this.data.attributeVal ?? this.parentConsequence?.attributeVal; }\n    get specialFooterMsg() {\n        return this.data.specialFooterMsg ?? this.parentConsequence?.specialFooterMsg;\n    }\n    // #endregion\n    // #region Getters (Derived Data) ~\n    get primary() {\n        const primary = fromUuidSync(this.primaryID);\n        if (!_BladesRoll__WEBPACK_IMPORTED_MODULE_2__.BladesRollPrimary.IsDoc(primary)) {\n            throw new Error(`Could not find primary with UUID '${this.primaryID}'`);\n        }\n        if (this.roll) {\n            return new _BladesRoll__WEBPACK_IMPORTED_MODULE_2__.BladesRollPrimary(this.roll, primary);\n        }\n        return new _BladesRoll__WEBPACK_IMPORTED_MODULE_2__.BladesRollPrimary(primary);\n    }\n    get parentConsequence() {\n        if (!this.parentCsqID) {\n            return undefined;\n        }\n        const parentCsq = game.eunoblades.Consequences.get(this.parentCsqID);\n        if (!parentCsq) {\n            throw new Error(`Error locating parent consequence with id '${this.parentCsqID}'`);\n        }\n        return parentCsq;\n    }\n    get typeDisplay() { return _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ConsequenceDisplay[this.type]; }\n    get icon() { return _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ConsequenceIcons[this.type]; }\n    get value() { return BladesConsequence.GetCsqTypeValue(this.type, this); }\n    // #endregion\n    // #region Getters (Resolved Roll Data that Applied This Consequence) ~\n    get rollData() {\n        return this.data.actionRollData ?? this.parentConsequence?.rollData;\n    }\n    get roll() {\n        if (!this.rollData) {\n            return undefined;\n        }\n        return game.eunoblades.Rolls.get(this.rollData.id) ?? new _BladesRoll__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n            ...this.rollData,\n            isScopingById: false\n        });\n    }\n    get position() { return this.roll?.rollPositionFinal; }\n    get effect() { return this.roll?.rollEffectFinal; }\n    get result() { return this.roll?.rollResultFinal; }\n    // #endregion\n    // #region Getters (Resistibility & Acceptance Status) ~\n    isResistible() {\n        return Boolean(this.type !== _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None && !this.isAccepted && this.data.resistSchema);\n    }\n    get resistanceModes() { return this.data.resistanceModes ?? []; }\n    get wasResisted() { return Boolean(this.resistanceModes.length); }\n    get wasResistedByRoll() { return this.resistanceModes.includes(\"resist\"); }\n    get wasResistedByArmor() { return this.resistanceModes.includes(\"armor\"); }\n    get wasResistedBySpecialArmor() { return this.resistanceModes?.includes(\"special\"); }\n    get canResistWithRoll() {\n        if (!this.isResistible()) {\n            return false;\n        }\n        // Only PCs can roll to resist consequences.\n        if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.primary.rollPrimaryDoc)) {\n            return false;\n        }\n        // A consequence can only be resisted by roll once.\n        if (this.wasResistedByRoll) {\n            return false;\n        }\n        // Otherwise, a consequence can ALWAYS be resisted by roll once by a PC.\n        return true;\n    }\n    get canResistWithArmor() {\n        if (!this.isResistible()) {\n            return false;\n        }\n        // The consequence must be explicitly flagged as resistable by armor.\n        if (!this.data.canResistWithArmor) {\n            return false;\n        }\n        // Unlike resistance rolls, a Primary could conceivably resist twice using multiple armor boxes.\n        // So, a resistanceMode previously set to \"armor\" does not disqualify another resist, if the\n        // Primary has armor to spare.\n        return this.primary.availableArmorCount > 0;\n    }\n    get canResistWithSpecial() {\n        if (!this.isResistible()) {\n            return false;\n        }\n        // The consequence must be explicitly flagged as resistable by special armor.\n        if (!this.data.canResistWithSpecial) {\n            return false;\n        }\n        // Only PCs can resist consequences with special armor.\n        if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.primary.rollPrimaryDoc)) {\n            return false;\n        }\n        // A consequence can only be resisted by special armor once.\n        if (this.wasResistedBySpecialArmor) {\n            return false;\n        }\n        // Otherwise, the PC can resist if they have special armor to spare.\n        return this.primary.hasSpecialArmor;\n    }\n    get resistWithRollNegates() {\n        if (!this.canResistWithRoll) {\n            return false;\n        }\n        // If this is the second resistance, it automatically negates.\n        if (this.wasResisted) {\n            return true;\n        }\n        // Otherwise, it negates if explicitly flagged to do so.\n        return Boolean(this.data.resistWithRollNegates);\n    }\n    get resistWithArmorNegates() {\n        if (!this.canResistWithArmor) {\n            return false;\n        }\n        // If this is the second resistance, it automatically negates.\n        if (this.wasResisted) {\n            return true;\n        }\n        // Otherwise, it negates if explicitly flagged to do so.\n        return Boolean(this.data.resistWithArmorNegates);\n    }\n    get resistWithSpecialNegates() {\n        if (!this.canResistWithSpecial) {\n            return false;\n        }\n        // If this is the second resistance, it automatically negates.\n        if (this.wasResisted) {\n            return true;\n        }\n        // Otherwise, it negates if explicitly flagged to do so.\n        return Boolean(this.data.resistWithSpecialNegates);\n    }\n    get isAccepted() { return \"acceptanceMode\" in this.data; }\n    get acceptanceMode() {\n        return this.data.acceptanceMode;\n    }\n    // #endregion\n    // #endregion\n    // #region *** RESISTING CONSEQUENCES ***\n    // #region Constructing Resistable Consequence Schema\n    get noneSchema() {\n        return {\n            name: \"\",\n            type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None,\n            primaryID: this.primaryID\n        };\n    }\n    get resistSchema() {\n        // If this consequence can't be resisted, return undefined.\n        if (!this.isResistible()) {\n            return undefined;\n        }\n        // Expand the resistSchema into a full BladesConsequence.Schema object\n        const resSchema = {\n            name: this.data.resistSchema.name,\n            type: this.data.resistSchema.type,\n            primaryID: this.primaryID,\n            resistSchema: {\n                name: \"\",\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None\n            },\n            resistanceModes: this.resistanceModes,\n            resistWithRollNegates: true,\n            attribute: this.attribute,\n            attributeVal: this.attributeVal,\n            canResistWithArmor: this.canResistWithArmor,\n            resistWithArmorNegates: true,\n            canResistWithSpecial: this.canResistWithSpecial,\n            resistWithSpecialNegates: true,\n            specialFooterMsg: this.specialFooterMsg\n        };\n        // If this consequence has already been resisted once, convert the resistSchema to a None-type schema.\n        if (this.wasResisted) {\n            resSchema.name = \"\";\n            resSchema.type = _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None;\n            delete resSchema.resistSchema;\n            resSchema.canResistWithArmor = false;\n            resSchema.canResistWithSpecial = false;\n        }\n        return resSchema;\n    }\n    // #endregion\n    async resistConsequence(resistMode, rollInstance) {\n        if (!this.isResistible()) {\n            throw new Error(\"Cannot resist a consequence that is not resistible.\");\n        }\n        const updateData = {\n            resistanceModes: this.resistanceModes,\n            ...this.resistSchema\n        };\n        updateData.resistanceModes.push(resistMode);\n        updateData.parentCsqID = undefined;\n        if (resistMode === \"resist\") {\n            if (!rollInstance?.isResolved) {\n                throw new Error(\"Cannot transform to resisted consequence without a resolved resistance roll instance.\");\n            }\n            updateData.resistanceRollData = rollInstance.data;\n        }\n        // Now check updated schema to see whether this consequence should be automatically accepted:\n        // ... if this is the second time the consequence has been resisted = verify None-type and accept\n        // ... if the resulting resisted consequence is None-type = verify None-type and accept\n        // ... if resistMode = \"resist\" and csq can't be resisted with armor or special = transform and accept\n        //       ... (all other cases are already caught by \"second time\" check above)\n        if (this.wasResisted || updateData.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.None) {\n            updateData.acceptanceMode = \"base\"; // Use 'base' for None-type consequences so they appear faded out\n        }\n        else if (resistMode === \"resist\" && !this.canResistWithArmor && !this.canResistWithSpecial) {\n            updateData.acceptanceMode = resistMode;\n        }\n        await this.updateTargetData(updateData);\n        if (updateData.acceptanceMode) {\n            socketlib.system.executeForEveryone(\"acceptConsequence_SocketCall\", this.id);\n        }\n        else {\n            socketlib.system.executeForEveryone(\"resistConsequence_SocketCall\", this.id);\n        }\n    }\n    // #endregion\n    // #region *** ACCEPTING CONSEQUENCES ***\n    async acceptConsequence() {\n        if (this.isAccepted) {\n            return;\n        }\n        await this.updateTarget(\"acceptanceMode\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getLast(this.resistanceModes) ?? \"accept\");\n        socketlib.system.executeForEveryone(\"acceptConsequence_SocketCall\", this.id);\n    }\n    async applyConsequenceEffects() {\n        // If HARM -> Apply harm to actor.\n        if (/Harm/.test(this.type)) {\n            this.primary.applyHarm(_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(this.type.substring(this.type.length - 1)), this.name);\n            // If WORSE POSITION -> Add flag to user to be checked on next Action roll, then cleared\n        }\n        else if (this.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.WorsePosition) {\n            this.primary.applyWorsePosition();\n            // If REDUCED EFFECT -> Update chat message flag to reduced effect level.\n        }\n        else if (this.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.ConsequenceType.ReducedEffect) {\n            const curIndex = Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect)\n                .findIndex((val) => val === this.effect);\n            if (curIndex >= 1) {\n                const newEffect = Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect)[curIndex - 1];\n                await this.updateTarget(\"rollData.rollEffectFinal\", newEffect);\n            }\n        }\n        // If COMPLICATION -> No change.\n        // If LOST OPPORTUNITY -> No change.\n    }\n    // #endregion\n    // #region === CONSTRUCTOR === ~\n    // constructor(\n    //   config: BladesConsequence.Config,\n    //   parentCsq?: BladesConsequence.Data\n    // )\n    // constructor(\n    //   data: BladesConsequence.Data\n    // )\n    // constructor(\n    //   schema: Partial<BladesConsequence.Schema>,\n    //   parentCsq: BladesConsequence.Data\n    // )\n    // constructor(\n    //   dataConfigOrSchema: BladesConsequence.Config | BladesConsequence.Data | Partial<BladesConsequence.Schema>,\n    //   parentCsq?: BladesConsequence.Data\n    // ) {\n    //   // If a parentCsq is provided...\n    //   if (parentCsq) {\n    //     super({\n    //       ...BladesTargetLink.BuildLinkConfig(parentCsq),\n    //       ...dataConfigOrSchema\n    //     });\n    //   } else {\n    //     super(dataConfigOrSchema as BladesConsequence.Config | BladesConsequence.Data);\n    //   }\n    // }\n    // #endregion\n    // #region *** HTML INTERACTION ***\n    // #region *** BladesDialog *** ~\n    // #endregion\n    // #region *** BladesChat *** ~\n    static ApplyChatListeners(message) {\n        /**\n         * TIMELINES\n         * .comp.consequence-display-container:mouseenter\n         *   = fade in grey interaction buttons\n         *   ...:mouseleave = reverse\n         *\n         * .consequence-accept-button-container:mouseenter\n         *   = turn type line white, text shadow\n         *     slide out .consequence-accept-button-bg from left\n         *     turn .consequence-accept-button i black, and scale\n         *     turn .consequence-accept-button-label black, add letter spacing, bold\n         *   ...:mouseleave = reverse\n         *\n         * .consequence-resist-button-container:mouseenter\n         *   = slide in .consequence-type-bg.base-consequence to left\n         *     fade out all .base-consequence:not(.consequence-type-bg)\n         *     slide out .consequence-type.resist-consequence from left\n         *     slide out .consequence-resist-button-bg from right\n         *     slide out .consequence-footer-bg.resist-consequence from left\n         *     slide out .consequence-resist-attribute from left\n         *     slide out .consequence-name.resist-consequence from left\n         *     fade in .consequence-icon-circle.resist-consequence\n         *   ...:mouseleave = reverse\n         *   --> IF resistTo.type === \"None\", blurRemove the base_consequence name and type instead of sliding them in,\n         *                                       and don't slide the resistance ones out at all.\n         * */\n        const html$ = message.elem$;\n        html$\n            .find(\".comp.consequence-display-container\")\n            .each((_i, csqContainer) => {\n            if (!$(csqContainer).hasClass(\"consequence-accepted\")) {\n                const iconContainer$ = $(csqContainer).find(\".consequence-icon-container\");\n                const rightInteractionPad$ = $(csqContainer).find(\".interaction-pad-right\");\n                const leftInteractionPad$ = $(csqContainer).find(\".interaction-pad-left\");\n                const resistInteractionPad$ = $(csqContainer).find(\".interaction-pad-left-resist\");\n                const armorInteractionPad$ = $(csqContainer).find(\".interaction-pad-left-armor\");\n                const specialInteractionPad$ = $(csqContainer).find(\".interaction-pad-left-special\");\n                // Apply master on-enter hover timeline to consequence container.\n                $(csqContainer).data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnter(csqContainer));\n                $(csqContainer).on({\n                    mouseenter: function () {\n                        $(csqContainer).css(\"z-index\", 10);\n                        $(csqContainer).data(\"hoverTimeline\").play();\n                    },\n                    mouseleave: function () {\n                        if (!(iconContainer$.data(\"isToggled\") || iconContainer$.data(\"isTogglingOn\")) || iconContainer$.data(\"isTogglingOff\")) {\n                            $(csqContainer).data(\"hoverTimeline\").reverse().then(() => {\n                                $(csqContainer).css(\"z-index\", \"\");\n                            });\n                        }\n                    }\n                });\n                // Apply click timeline to icon circle\n                iconContainer$.data(\"clickTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqClickIcon(iconContainer$[0]));\n                iconContainer$.on({\n                    click: function () {\n                        if (iconContainer$.data(\"isToggled\") || iconContainer$.data(\"isTogglingOn\")) {\n                            iconContainer$.data(\"isTogglingOn\", false);\n                            iconContainer$.data(\"isTogglingOff\", true);\n                            iconContainer$.data(\"clickTimeline\").reverse().then(() => {\n                                iconContainer$.data(\"isTogglingOff\", false);\n                                iconContainer$.data(\"isToggled\", false);\n                            });\n                        }\n                        else {\n                            iconContainer$.data(\"isTogglingOn\", true);\n                            iconContainer$.data(\"isTogglingOff\", false);\n                            // Find any siblings with toggled-on iconContainers, and toggle them off\n                            Array.from($(csqContainer).siblings(\".consequence-display-container\"))\n                                .forEach((containerElem) => {\n                                const iContainer$ = $(containerElem).find(\".consequence-icon-container\");\n                                if (iContainer$?.data(\"isToggled\") || iContainer$?.data(\"isTogglingOn\")) {\n                                    iContainer$.data(\"isTogglingOn\", false);\n                                    iContainer$.data(\"isTogglingOff\", true);\n                                    iContainer$.data(\"clickTimeline\").reverse().then(() => {\n                                        iContainer$.data(\"isTogglingOff\", false);\n                                        iContainer$.data(\"isToggled\", false);\n                                        $(containerElem).data(\"hoverTimeline\").reverse().then(() => {\n                                            $(containerElem).css(\"z-index\", \"\");\n                                        });\n                                    });\n                                }\n                            });\n                            iconContainer$.data(\"clickTimeline\").play().then(() => {\n                                iconContainer$.data(\"isTogglingOn\", false);\n                                iconContainer$.data(\"isToggled\", true);\n                            });\n                        }\n                    }\n                });\n                // Apply hover timelines to right (accept) interaction pad\n                rightInteractionPad$.data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnterRight(csqContainer));\n                rightInteractionPad$.on({\n                    mouseenter: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            rightInteractionPad$.data(\"hoverTimeline\").play();\n                        }\n                    },\n                    mouseleave: function () {\n                        rightInteractionPad$.data(\"hoverTimeline\").reverse();\n                    }\n                });\n                // Apply hover timeline to left (resist/armor/special) interaction pad\n                leftInteractionPad$.data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnterLeft(csqContainer));\n                leftInteractionPad$.on({\n                    mouseenter: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            leftInteractionPad$.data(\"hoverTimeline\").play();\n                        }\n                    },\n                    mouseleave: function () {\n                        leftInteractionPad$.data(\"hoverTimeline\").reverse();\n                    }\n                });\n                // Apply hover timelines to specific left interaction pads\n                resistInteractionPad$.data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnterSubLeft(csqContainer, { type: \"resist\" }));\n                resistInteractionPad$.on({\n                    mouseenter: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            resistInteractionPad$.data(\"hoverTimeline\").play();\n                        }\n                    },\n                    mouseleave: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            resistInteractionPad$.data(\"hoverTimeline\").reverse();\n                        }\n                    }\n                });\n                armorInteractionPad$.data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnterSubLeft(csqContainer, { type: \"armor\" }));\n                armorInteractionPad$.on({\n                    mouseenter: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            armorInteractionPad$.data(\"hoverTimeline\").play();\n                        }\n                    },\n                    mouseleave: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            armorInteractionPad$.data(\"hoverTimeline\").reverse();\n                        }\n                    }\n                });\n                specialInteractionPad$.data(\"hoverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.effects.csqEnterSubLeft(csqContainer, { type: \"special\" }));\n                specialInteractionPad$.on({\n                    mouseenter: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            specialInteractionPad$.data(\"hoverTimeline\").play();\n                        }\n                    },\n                    mouseleave: function () {\n                        if (iconContainer$.data(\"isToggled\")) {\n                            specialInteractionPad$.data(\"hoverTimeline\").reverse();\n                        }\n                    }\n                });\n            }\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesConsequence);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesConsequence.ts\n");

/***/ }),

/***/ "./ts/classes/BladesDialog.ts":
/*!************************************!*\
  !*** ./ts/classes/BladesDialog.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesDialogType: function() { return /* binding */ BladesDialogType; },\n/* harmony export */   SelectionCategory: function() { return /* binding */ SelectionCategory; }\n/* harmony export */ });\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _BladesRoll__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\nvar SelectionCategory;\n(function (SelectionCategory) {\n    SelectionCategory[\"Heritage\"] = \"Heritage\";\n    SelectionCategory[\"Background\"] = \"Background\";\n    SelectionCategory[\"Vice\"] = \"Vice\";\n    SelectionCategory[\"Playbook\"] = \"Playbook\";\n    SelectionCategory[\"Reputation\"] = \"Reputation\";\n    SelectionCategory[\"Preferred_Op\"] = \"Preferred_Op\";\n    SelectionCategory[\"Gear\"] = \"Gear\";\n    SelectionCategory[\"Ability\"] = \"Ability\";\n    SelectionCategory[\"Faction\"] = \"Faction\";\n    SelectionCategory[\"Upgrade\"] = \"Upgrade\";\n    SelectionCategory[\"Cohort_Gang\"] = \"Cohort_Gang\";\n    SelectionCategory[\"Cohort_Expert\"] = \"Cohort_Expert\";\n    SelectionCategory[\"Feature\"] = \"Feature\";\n    SelectionCategory[\"Stricture\"] = \"Stricture\";\n    SelectionCategory[\"VicePurveyor\"] = \"VicePurveyor\";\n    SelectionCategory[\"Acquaintance\"] = \"Acquaintance\";\n    SelectionCategory[\"Friend\"] = \"Friend\";\n    SelectionCategory[\"Rival\"] = \"Rival\";\n    SelectionCategory[\"Crew\"] = \"Crew\";\n    SelectionCategory[\"Member\"] = \"Member\";\n    SelectionCategory[\"Contact\"] = \"Contact\";\n})(SelectionCategory || (SelectionCategory = {}));\nvar BladesDialogType;\n(function (BladesDialogType) {\n    BladesDialogType[\"Input\"] = \"Input\";\n    BladesDialogType[\"Selection\"] = \"Selection\";\n    BladesDialogType[\"Consequence\"] = \"Consequence\";\n})(BladesDialogType || (BladesDialogType = {}));\nclass BladesDialog extends Dialog {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"dialog\"],\n            width: \"auto\",\n            height: \"auto\",\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"front\" }]\n        });\n    }\n    static Initialize() {\n        return loadTemplates([\n            \"systems/eunos-blades/templates/dialog-selection.hbs\",\n            \"systems/eunos-blades/templates/dialog-consequence.hbs\",\n            \"systems/eunos-blades/templates/dialog-input.hbs\",\n            \"systems/eunos-blades/templates/parts/dialog-consequence-block.hbs\"\n        ]);\n    }\n    static async DisplaySimpleInputDialog(parent, prompt, target, flagTarget) {\n        const app = new BladesDialog({\n            parent,\n            title: parent instanceof _BladesRoll__WEBPACK_IMPORTED_MODULE_4__[\"default\"] ? \"Roll Input\" : `${parent.name}: Input`,\n            dialogType: BladesDialogType.Input,\n            content: \"\",\n            prompt,\n            target,\n            flagTarget,\n            buttons: {\n                apply: {\n                    icon: '<i class=\"fa-solid fa-arrow-down-to-arc\"></i>',\n                    label: \"Apply\",\n                    callback: (html) => app\n                    //   .writeToRollInstance(html as JQuery<HTMLElement>)\n                },\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: game.i18n.localize(\"Cancel\"),\n                    callback: (html) => {\n                        eLog.checkLog3(\"dialog\", \"Callback Scope\", { this: app, html });\n                        return false;\n                    }\n                }\n            },\n            default: \"apply\"\n        }, { classes: [\"eunos-blades\", \"sheet\", \"dialog\", \"simple-input-dialog\"] });\n        return app._render(true, { width: app.width }).then(() => eLog.checkLog3(\"dialog\", \"Input Dialog Instance\", { this: app }));\n    }\n    static async DisplaySelectionDialog(parent, title, docType, tabs, tags) {\n        const app = new BladesDialog({\n            parent,\n            title,\n            docType,\n            tabs,\n            tags: tags?.filter((tag) => tag !== \"\"),\n            content: \"\",\n            buttons: {\n                cancel: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: game.i18n.localize(\"Cancel\"),\n                    callback: (html) => {\n                        eLog.checkLog3(\"dialog\", \"Callback Scope\", { this: this, html });\n                        return false;\n                    }\n                }\n            },\n            default: \"cancel\"\n        });\n        return app.hasItems ? app.render(true, { width: app.width }) : undefined;\n    }\n    // static async DisplayRollConsequenceDialog(rollInst: BladesRoll) {\n    // const app: BladesDialog = new BladesDialog({\n    //   parent: rollInst,\n    //   title: \"Consequences\",\n    //   dialogType: BladesDialogType.Consequence,\n    //   content: \"\",\n    //   buttons: {\n    //     apply: {\n    //       icon: '<i class=\"fa-solid fa-arrow-down-to-arc\"></i>',\n    //       label: \"Apply\",\n    //       callback: (html: HTMLElement|JQuery<HTMLElement>) => (app as BladesDialog)\n    //         .writeToRollInstance(html as JQuery<HTMLElement>)\n    //     },\n    //     cancel: {\n    //       icon: '<i class=\"fas fa-times\"></i>',\n    //       label: game.i18n.localize(\"Cancel\"),\n    //       callback: (html: JQuery|HTMLElement) => {\n    //         eLog.checkLog3(\"dialog\", \"Callback Scope\", {this: app, html});\n    //         return false;\n    //       }\n    //     }\n    //   },\n    //   default: \"apply\"\n    // }, {classes: [\"eunos-blades\", \"sheet\", \"dialog\", \"consequence-dialog\"]});\n    // return app._render(true, {width: app.width}).then(() => eLog.checkLog3(\"dialog\", \"Dialog Instance\", {this: app}));\n    // }\n    get template() { return `systems/eunos-blades/templates/dialog-${_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lCase(this.dialogType)}.hbs`; }\n    get hasItems() {\n        return Object.values(this.tabs ?? []).some((tabItems) => tabItems.length > 0);\n    }\n    parent;\n    tabs;\n    dialogType;\n    tags = [];\n    width;\n    docType;\n    // csqData?: Record<\n    // Position,\n    // Record<\n    //   RollResult.partial|RollResult.fail,\n    //   Record<\n    //     string,\n    //     BladesRoll.ConsequenceData\n    //     >\n    //   >\n    // >;\n    prompt;\n    target;\n    flagTarget;\n    constructor(data, options) {\n        super(data, options);\n        this.dialogType = data.dialogType ?? BladesDialogType.Selection;\n        this.parent = data.parent;\n        this.width = options?.width ?? 500;\n        this.prompt = data.prompt;\n        this.target = data.target;\n        this.flagTarget = data.flagTarget;\n        switch (this.dialogType) {\n            case BladesDialogType.Input: return;\n            case BladesDialogType.Selection:\n                this.constructSelectionData(data /* , options */);\n                return;\n            // case BladesDialogType.Consequence: this.csqData = this.constructConsequenceData(data/* , options */); return;\n            default: throw new Error(`Unrecognized type for BladesDialog constructor: '${this.dialogType}'`);\n        }\n    }\n    constructSelectionData(data /* , options?: Partial<BladesDialog.Options> */) {\n        const validTabs = [];\n        if (!data.tabs) {\n            return;\n        }\n        for (const [tabName, tabItems] of Object.entries(data.tabs)) {\n            if (tabItems.length === 0) {\n                delete data.tabs[tabName];\n            }\n            else {\n                validTabs.push(tabName);\n            }\n        }\n        if (validTabs.length === 1 && !(\"Main\" in data.tabs)) {\n            data.tabs.Main = [...data.tabs[validTabs[0]]];\n            delete data.tabs[validTabs[0]];\n        }\n        this.docType = data.docType;\n        this.tabs = data.tabs;\n        this.tags = data.tags ?? [];\n        this.width = 150 * Math.ceil(Math.sqrt(Object.values(data.tabs)[0].length));\n    }\n    // constructConsequenceData(data: BladesDialog.Data/* , options?: Partial<BladesDialog.Options> */) {\n    //   eLog.checkLog3(\"dialog\", \"constructConsequenceData\", {incoming: {...data}});\n    //   if (!(this.parent instanceof BladesRoll)) { throw new Error(\"Cannot call 'constructConsequenceData' without a rollInst parent!\"); }\n    //   // Get existing consequence data, if any, on roll instance\n    //   const rollCsqData = this.parent.data.consequenceData ?? {};\n    //   // Extend consequence data by applying new blank consequence instances,\n    //   //   so at least three csq entries are available for each position/result combination\n    //   (Object.values(Position) as Position[]).forEach((rollPos: Position) => {\n    //     rollCsqData[rollPos] ??= {\n    //       [RollResult.partial]: {},\n    //       [RollResult.fail]: {}\n    //     };\n    //     ([RollResult.partial, RollResult.fail] as const).forEach((rollResult: RollResult.partial|RollResult.fail) => {\n    //       rollCsqData[rollPos] ??= {};\n    //       rollCsqData[rollPos][rollResult] ??= {};\n    //       while (Object.values(rollCsqData[rollPos][rollResult as RollResult.partial|RollResult.fail]).length < 3) {\n    //         const blankCsqData: BladesConsequence.Data = {\n    //           id: randomID() as IDString,\n    //           name: \"\",\n    //           type: \"\",\n    //           attribute: \"\"\n    //         };\n    //         rollCsqData[rollPos][rollResult as RollResult.partial|RollResult.fail][blankCsqData.id] = blankCsqData;\n    //       }\n    //     });\n    //   });\n    //   this._consequenceAI = new BladesAI(AGENTS.ConsequenceAdjuster);\n    //   return rollCsqData;\n    // }\n    getData() {\n        const data = super.getData();\n        switch (this.dialogType) {\n            case BladesDialogType.Input: return this.prepareInputData(data);\n            case BladesDialogType.Selection: return this.prepareSelectionData(data);\n            // case BladesDialogType.Consequence: return this.prepareConsequenceData(data);\n            default: return null;\n        }\n    }\n    prepareInputData(data) {\n        data.prompt = this.prompt;\n        data.target = this.target;\n        data.flagTarget = this.flagTarget;\n        return data;\n    }\n    prepareSelectionData(data) {\n        data.title = this.title;\n        data.tabs = this.tabs;\n        data.docType = this.docType;\n        data.tags = this.tags;\n        return data;\n    }\n    // prepareConsequenceData(data: BladesDialog.Data) {\n    //   eLog.checkLog3(\"dialog\", \"prepareConsequenceData this.csqData\", {...this.csqData});\n    //   eLog.checkLog3(\"dialog\", \"prepareConsequenceData\", {incoming: {...data}});\n    //   data.consequenceData = this.csqData;\n    //   data.consequenceTypeOptions = this.consequenceTypeOptions;\n    //   data.consequenceTypeOptionsAll = Object.keys(C.ConsequenceDisplay)\n    //     .map((cType) => ({value: cType, display: cType}));\n    //   data.consequenceAttributeOptions = [\n    //     {value: AttributeTrait.insight, display: \"Insight\"},\n    //     {value: AttributeTrait.prowess, display: \"Prowess\"},\n    //     {value: AttributeTrait.resolve, display: \"Resolve\"}\n    //   ];\n    //   eLog.checkLog3(\"dialog\", \"prepareConsequenceData\", {outgoing: {...data}});\n    //   return data;\n    // }\n    // get consequenceTypeOptions(): Record<\n    //   Position,\n    //   Record<\n    //     RollResult.partial|RollResult.fail,\n    //     Array<BladesSelectOption<string, ConsequenceType>>\n    //   >\n    //   > {\n    //   if (this.parent instanceof BladesRoll) {\n    //     const returnData: Partial<Record<\n    //     Position,\n    //     Record<\n    //       RollResult.partial|RollResult.fail,\n    //       Array<BladesSelectOption<string, ConsequenceType>>\n    //     >\n    //   >> = {};\n    //     [Position.controlled, Position.risky, Position.desperate].forEach((pos) => {\n    //       returnData[pos] = {\n    //         [RollResult.partial]: C.Consequences[pos][RollResult.partial]\n    //           .map((cType) => ({value: cType, display: cType})),\n    //         [RollResult.fail]: C.Consequences[pos][RollResult.fail]\n    //           .map((cType) => ({value: cType, display: cType}))\n    //       };\n    //     });\n    //     return returnData as Record<\n    //     Position,\n    //     Record<\n    //       RollResult.partial|RollResult.fail,\n    //       Array<BladesSelectOption<string, ConsequenceType>>\n    //     >\n    //   >;\n    //   }\n    //   return {} as never;\n    // }\n    updateInputText(inputElem$) {\n        const value = inputElem$.val();\n        if (this.parent instanceof _BladesRoll__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            const flagTarget = inputElem$.data(\"flagTarget\");\n            eLog.checkLog3(\"dialog\", \"updateInputText\", { value, flagTarget });\n            this.parent.updateTarget(flagTarget, value)\n                .then(() => this.parent.renderRollCollab_SocketCall());\n        }\n        else if (this.parent instanceof _BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"] || this.parent instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor) {\n            this.parent.update({ [inputElem$.data(\"target\")]: inputElem$.val() });\n        }\n    }\n    // updateConsequenceType(csqElem$: JQuery<HTMLElement>, cData: BladesConsequence.Data) {\n    //   const type$ = csqElem$.find(\".roll-consequence-type-select\") as JQuery<HTMLSelectElement>;\n    //   const typeVal = type$.val() as string|undefined;\n    //   if (typeVal && typeVal in ConsequenceType) {\n    //     cData.type = typeVal as ConsequenceType;\n    //     cData.icon = C.ConsequenceIcons[cData.type];\n    //     cData.typeDisplay = C.ConsequenceDisplay[cData.type];\n    //   }\n    // }\n    // updateConsequenceAttribute(csqElem$: JQuery<HTMLElement>, cData: BladesConsequence.Data) {\n    //   if (/Insight/.exec(cData.type)) { cData.attribute = AttributeTrait.insight; }\n    //   else if (/Prowess/.exec(cData.type)) { cData.attribute = AttributeTrait.prowess; }\n    //   else if (/Resolve/.exec(cData.type)) { cData.attribute = AttributeTrait.resolve; }\n    //   else {\n    //     const attribute$ = csqElem$.find(\".roll-consequence-attribute-select\") as JQuery<HTMLSelectElement>;\n    //     const attrVal = attribute$.val() as AttributeTrait|undefined;\n    //     if (attrVal) {\n    //       cData.attribute = attrVal;\n    //     }\n    //   }\n    // }\n    // updateConsequenceAttributeVal(cData: BladesConsequence.Data) {\n    //   if (this.parent.rollPrimaryDoc instanceof BladesPC) {\n    //     cData.attributeVal = this.parent.rollPrimaryDoc.attributes[cData.attribute as AttributeTrait];\n    //   } else if (this.parent.rollPrimaryDoc?.parent instanceof BladesPC) {\n    //     cData.attributeVal = this.parent.rollPrimaryDoc.parent.attributes[cData.attribute as AttributeTrait];\n    //   } else {\n    //     eLog.error(`Unable to get attribute from rollPrimaryDoc '${this.parent.rollPrimaryDoc?.name}' of type '${this.parent.rollPrimaryDoc?.rollPrimaryType}' (may need to log via flags if either of the previous show 'undefined'.`);\n    //   }\n    // }\n    // getSelectedResistOption(cData: BladesConsequence.Data): BladesConsequence|false {\n    //   return cData.resistTo\n    //     ? new BladesConsequence(cData.resistTo)\n    //     : false;\n    // }\n    // updateConsequenceResist(csqElem$: JQuery<HTMLElement>, cData: BladesConsequence.Data) {\n    //   const resistOptions: Record<string, BladesRoll.ConsequenceResistOption> = cData.resistOptions ?? {};\n    //   // If consequence is already minimal, toggle resistNegates to true and set 'resistTo' to None-type\n    //   const minimalCsqTypes = Object.entries(C.ResistedConsequenceTypes)\n    //     .filter(([_, rCsqType]) => rCsqType === ConsequenceType.None)\n    //     .map(([csqType]) => csqType as ConsequenceType);\n    //   if (minimalCsqTypes.includes(cData.type as ConsequenceType)) {\n    //     cData.resistNegates = true;\n    //     const noneCsq = BladesConsequence.None;\n    //     cData.resistOptions = {[noneCsq.id]: noneCsq};\n    //     cData.resistTo = noneCsq;\n    //     return;\n    //   } else {\n    //     // Clear 'resistTo' (will be redetermined below)\n    //     delete cData.resistTo;\n    //     delete cData.resistNegates;\n    //     csqElem$.find(\".consequence-resist-option\").each((_, elem) => {\n    //       const resCsqID = $(elem).data(\"csq-id\");\n    //       resistOptions[resCsqID] ??= {id: resCsqID, name: \"\", type: undefined, isSelected: false};\n    //       // Update Resistance Option Type\n    //       const resType$ = $(elem).find(\".roll-consequence-type-select\") as JQuery<HTMLSelectElement>;\n    //       const resTypeVal = resType$.val() as string|undefined;\n    //       if (resTypeVal && resTypeVal in ConsequenceType) {\n    //         resistOptions[resCsqID].type = resTypeVal as ConsequenceType;\n    //         resistOptions[resCsqID].icon = C.ConsequenceIcons[resistOptions[resCsqID].type as ConsequenceType];\n    //         resistOptions[resCsqID].typeDisplay = C.ConsequenceDisplay[resistOptions[resCsqID].type as ConsequenceType];\n    //       }\n    //       // Update Resistance Option Name\n    //       const resName$ = $(elem).find(\".consequence-name\") as JQuery<HTMLInputElement>;\n    //       const resNameVal = resName$.val();\n    //       resistOptions[resCsqID].name = resNameVal ?? \"\";\n    //       // If this is selected, update 'resistTo' data as well\n    //       if (resistOptions[resCsqID].isSelected) {\n    //         cData.resistTo = resistOptions[resCsqID];\n    //       }\n    //     });\n    //   }\n    //   cData.resistOptions = resistOptions;\n    // }\n    // updateConsequenceArmorResist(_csqElem$: JQuery<HTMLElement>, cData: BladesConsequence.Data) {\n    //   // If consequence is already minimal, toggle armorNegates to true and set 'armorTo' to None-type\n    //   const minimalCsqTypes = Object.entries(C.ResistedConsequenceTypes)\n    //     .filter(([_, rCsqType]) => rCsqType === ConsequenceType.None)\n    //     .map(([csqType]) => csqType as ConsequenceType);\n    //   if (minimalCsqTypes.includes(cData.type as ConsequenceType)) {\n    //     cData.armorNegates = true;\n    //     cData.armorTo = BladesConsequence.None;\n    //   } else {\n    //     delete cData.armorNegates;\n    //     cData.armorTo = this.getSelectedResistOption(cData);\n    //   }\n    // }\n    // updateConsequenceSpecialArmorResist(_csqElem$: JQuery<HTMLElement>, cData: BladesConsequence.Data) {\n    //   // If consequence is already minimal, toggle specialArmorNegates to true and set 'specialTo' to None-type\n    //   const minimalCsqTypes = Object.entries(C.ResistedConsequenceTypes)\n    //     .filter(([_, rCsqType]) => rCsqType === ConsequenceType.None)\n    //     .map(([csqType]) => csqType as ConsequenceType);\n    //   if (minimalCsqTypes.includes(cData.type as ConsequenceType)) {\n    //     cData.specialArmorNegates = true;\n    //     cData.specialTo = BladesConsequence.None;\n    //   } else {\n    //     delete cData.specialArmorNegates;\n    //     cData.specialArmorNegates ??= false;\n    //     cData.specialTo = this.getSelectedResistOption(cData);\n    //   }\n    // }\n    // updateConsequenceData(\n    //   html: JQuery<HTMLElement|HTMLInputElement>,\n    //   cData: BladesConsequence.Data\n    // ) {\n    //   const csqElem$ = html.find(`.roll-consequence-row[data-csq-id='${cData.id}']`);\n    //   // Update Type\n    //   this.updateConsequenceType(csqElem$, cData);\n    //   // Update Name\n    //   if (cData.type === ConsequenceType.None) {\n    //     cData.name = \"\";\n    //   } else {\n    //     const name$ = csqElem$.find(\".consequence-name\") as JQuery<HTMLInputElement>;\n    //     const nameVal = name$.val();\n    //     cData.name = nameVal ?? \"\";\n    //   }\n    //   // Update Resistance Attribute\n    //   this.updateConsequenceAttribute(csqElem$, cData);\n    //   this.updateConsequenceAttributeVal(cData);\n    //   // Update Resistance Options\n    //   this.updateConsequenceResist(csqElem$, cData);\n    //   // Update Armor Options\n    //   if ((<BladesRoll> this.parent).canResistWithArmor(cData)) {\n    //     cData.isDisplayingArmorToggle = true;\n    //     this.updateConsequenceArmorResist(csqElem$, cData);\n    //   } else {\n    //     cData.isDisplayingArmorToggle = false;\n    //   }\n    //   // Update Special Armor Options\n    //   if ((<BladesRoll> this.parent).canResistWithSpecialArmor(cData)) {\n    //     cData.isDisplayingSpecialArmorToggle = true;\n    //     this.updateConsequenceSpecialArmorResist(csqElem$, cData);\n    //   } else {\n    //     cData.isDisplayingSpecialArmorToggle = false;\n    //   }\n    //   return cData;\n    // }\n    // updateConsequenceDialog(html: JQuery<HTMLElement|HTMLInputElement>, isRendering = true) {\n    //   if (!(this.parent instanceof BladesRoll)) { return; }\n    //   if (!this.csqData) { return; }\n    //   eLog.checkLog3(\"dialog\", \"updateConsequenceDialog() this.csqData INCOMING\", {...this.csqData});\n    //   const {csqData} = this;\n    //   const {rollPrimaryDoc} = this.parent;\n    //   if (!(rollPrimaryDoc instanceof BladesPC)) { return; }\n    //   (Object.keys(csqData) as Position[]).forEach((rollPos) => {\n    //     const positionCsqData = csqData[rollPos];\n    //     (Object.keys(csqData[rollPos]) as [RollResult.partial, RollResult.fail]).forEach((rollResult) => {\n    //       positionCsqData[rollResult] = U.objMap(\n    //         positionCsqData[rollResult],\n    //         (cData: BladesConsequence.Data) => this.updateConsequenceData(html, cData)\n    //       );\n    //     });\n    //     csqData[rollPos] = positionCsqData;\n    //   });\n    //   this.csqData = csqData;\n    //   eLog.checkLog3(\"dialog\", \"updateConsequenceDialog() this.csqData OUTGOING\", {...this.csqData});\n    //   if (isRendering) {\n    //     this.render();\n    //   }\n    // }\n    // async writeToRollInstance(html: JQuery<HTMLElement>) {\n    // if (this.parent instanceof BladesRoll) {\n    // this.updateConsequenceDialog(html, false);\n    // await this.parent.updateTarget(\"consequenceData\", this.csqData);\n    // }\n    // }\n    // _consequenceAI?: BladesAI;\n    // getCsqDataFromElem(elem: HTMLElement, paramCount = 3): string[] {\n    //   const dataAction = elem.dataset.action;\n    //   if (dataAction) {\n    //     const params = dataAction.split(/-/).reverse().slice(0, paramCount);\n    //     return params.reverse();\n    //   }\n    //   return [];\n    // }\n    // async queryAI(event: ClickEvent) {\n    //   if (!this.csqData) { return; }\n    //   // If the AI generator has not been initialized, do so.\n    //   if (!this._consequenceAI) {\n    //     this._consequenceAI = new BladesAI(AGENTS.ConsequenceAdjuster);\n    //   }\n    //   const [rollPosition, rollResult, csqID] = this.getCsqDataFromElem(event.currentTarget);\n    //   const csqName: string|undefined =\n    //     this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID]?.name;\n    //   if (csqName) {\n    //     const response = await this._consequenceAI?.query(csqName, csqName);\n    //     if (response) {\n    //       this.refreshResistanceOptions(rollPosition as Position, rollResult as RollResult.partial|RollResult.fail, csqID, response.split(\"|\"));\n    //     }\n    //   }\n    // }\n    // async spawnBlankResistOption(event: ClickEvent) {\n    //   if (!this.csqData) { return; }\n    //   const [rollPosition, rollResult, csqID] = this.getCsqDataFromElem(event.currentTarget);\n    //   const rCsqID = randomID() as IDString;\n    //   this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID]\n    //     .resistOptions = {\n    //       [rCsqID]: {\n    //         id: rCsqID,\n    //         name: \"\",\n    //         type: undefined,\n    //         isSelected: true\n    //       }\n    //     };\n    //   this.render();\n    // }\n    // async setFlagVal(target: string, value: unknown) {\n    //   if (this.parent instanceof BladesRoll) {\n    //     await this.parent.updateTarget(target, value);\n    //   }\n    // }\n    // async refreshResistanceOptions(rollPosition: Position, rollResult: RollResult, cID: string, rOptions: string[]) {\n    //   if (!this.csqData) { return; }\n    //   const cData = this.csqData[rollPosition][rollResult as RollResult.partial|RollResult.fail][cID];\n    //   if (!cData) { return; }\n    //   const cType = cData.type as keyof typeof C[\"ResistedConsequenceTypes\"];\n    //   const rType = C.ResistedConsequenceTypes[cType] ?? undefined;\n    //   const resistOptions: Record<string, BladesRoll.ConsequenceResistOption> = {};\n    //   for (let i = 0; i < rOptions.length; i++) {\n    //     const rID = randomID() as IDString;\n    //     resistOptions[rID] = {\n    //       id: rID,\n    //       name: rOptions[i],\n    //       isSelected: false\n    //     };\n    //     if (rType) {\n    //       resistOptions[rID].type = rType;\n    //       resistOptions[rID].typeDisplay = C.ConsequenceDisplay[rType];\n    //       resistOptions[rID].icon = C.ConsequenceIcons[rType];\n    //     }\n    //   }\n    //   this.csqData[rollPosition][rollResult as RollResult.partial|RollResult.fail][cID].resistOptions = resistOptions;\n    //   eLog.checkLog3(\"dialog\", \"addResistanceOptions() this.csqData\", {...this.csqData});\n    //   this.render();\n    // }\n    // async selectResistOption(event: ClickEvent) {\n    //   if (!this.csqData) { return; }\n    //   const [rollPosition, rollResult, csqID, resID] = this.getCsqDataFromElem(event.currentTarget, 4);\n    //   eLog.checkLog3(\"dialog\", \"... Action Passed\", {rollResult, csqIndex: csqID, resIndex: resID});\n    //   // Get consequence data\n    //   const cData = this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID];\n    //   cData.resistOptions ??= {};\n    //   // Toggle clicked resistance option\n    //   cData.resistOptions[resID].isSelected = !cData.resistOptions[resID].isSelected;\n    //   // If resistance option is now selected...\n    //   if (cData.resistOptions[resID].isSelected) {\n    //     // ... deselect & hide other options\n    //     Object.keys(cData.resistOptions)\n    //       .filter((key) => key !== resID)\n    //       .forEach((key) => {\n    //         Object.assign(cData.resistOptions?.[key] ?? {}, {isSelected: false, isVisible: false});\n    //       });\n    //     // ... and set 'resistTo' to this consequence.\n    //     cData.resistTo = cData.resistOptions[resID];\n    //   } else {\n    //     // Otherwise, set 'resistTo' to false...\n    //     cData.resistTo = false;\n    //     // ... and unhide other options.\n    //     Object.keys(cData.resistOptions)\n    //       .filter((key) => key !== resID)\n    //       .forEach((key) => {\n    //         Object.assign(cData.resistOptions?.[key] ?? {}, {isVisible: true});\n    //       });\n    //   }\n    //   // Assign new cData instance.\n    //   this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID] = cData;\n    //   this.render();\n    // }\n    // async clearResistOptions(event: ContextMenuEvent) {\n    //   if (!this.csqData) { return; }\n    //   const [rollPosition, rollResult, csqID] = this.getCsqDataFromElem(event.currentTarget);\n    //   this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID].resistOptions = {};\n    //   this.render();\n    // }\n    // async toggleArmor(event: ClickEvent) {\n    //   if (!this.csqData) { return; }\n    //   const [rollPosition, rollResult, csqID] = this.getCsqDataFromElem(event.currentTarget);\n    //   const cData = this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID];\n    //   cData.canArmor = !cData.canArmor;\n    //   this.render();\n    // }\n    // async toggleSpecialArmor(event: ClickEvent) {\n    //   if (!this.csqData) { return; }\n    //   const [rollPosition, rollResult, csqID] = this.getCsqDataFromElem(event.currentTarget);\n    //   const cData = this.csqData[rollPosition as Position][rollResult as RollResult.partial|RollResult.fail][csqID];\n    //   cData.canSpecialArmor = !cData.canSpecialArmor;\n    //   this.render();\n    // }\n    activateListeners(html) {\n        super.activateListeners(html);\n        // ~ Tooltips\n        (0,_core_gsap__WEBPACK_IMPORTED_MODULE_0__.ApplyTooltipAnimations)(html);\n        switch (this.dialogType) {\n            case BladesDialogType.Input:\n                this.activateInputListeners(html);\n                break;\n            case BladesDialogType.Selection:\n                this.activateSelectionListeners(html);\n                break;\n            // case BladesDialogType.Consequence: {\n            // this.activateConsequenceListeners(html);\n            // Select --> updateConsequenceDialog -> updateConsequenceData(each csq)\n            // break;\n            // }\n        }\n    }\n    activateInputListeners(html) {\n        html.find(\"textarea\").on({ change: (event) => this.updateInputText($(event.currentTarget)) });\n    }\n    activateSelectionListeners(html) {\n        const self = this;\n        // ~ Changing Width on Tab Change Depending on Number of Items\n        html.find(\".nav-tabs .tab-selector\").on(\"click\", (event) => {\n            const tabIndex = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(event.currentTarget).data(\"tab\"));\n            const numItems = Object.values(self.tabs ?? [])[tabIndex].length;\n            const width = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(150 * Math.ceil(Math.sqrt(numItems)));\n            eLog.checkLog3(\"nav\", \"Nav Tab Size Recalculation\", { tabIndex, numItems, width });\n            this.render(false, { width });\n        });\n        // ~ Item Control\n        html.find(\"[data-item-id]\").on(\"click\", function () {\n            if ($(this).parent().hasClass(\"locked\")) {\n                return;\n            }\n            const docId = $(this).data(\"itemId\");\n            const docType = $(this).data(\"docType\");\n            eLog.checkLog(\"dialog\", \"[BladesDialog] on Click\", { elem: this, docId, docType, parent: self.parent });\n            if (self.parent instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor) {\n                if (docType === \"Actor\") {\n                    self.parent.addSubActor(docId, self.tags);\n                }\n                else if (docType === \"Item\") {\n                    self.parent.addSubItem(docId);\n                }\n            }\n            self.close();\n        });\n    }\n    async close() {\n        $(\"#eunos-blades-tooltips > *\").remove();\n        super.close();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesDialog);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesDialog.ts\n");

/***/ }),

/***/ "./ts/classes/BladesDirector.ts":
/*!**************************************!*\
  !*** ./ts/classes/BladesDirector.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\nclass BladesDirector {\n    // #region INITIALIZATION ~\n    // #region   >>  Single-Instance Factory Construction ~\n    static instance;\n    _id;\n    constructor() {\n        this._id = randomID();\n    }\n    static getInstance() {\n        return (BladesDirector.instance ??= new BladesDirector());\n    }\n    // #endregion\n    static async Initialize() {\n        // Define hook that re-renders overlay on scene change.\n        Hooks.on(\"renderApplication\", async () => {\n            game.eunoblades.Director.initClockKeySection(true);\n            if (game.user.isGM) {\n                await game.eunoblades.ClockKeeper.update({ \"system.targetScene\": game.scenes.current.id });\n                game.eunoblades.ClockKeeper.render();\n            }\n        });\n        // game.eunoblades.Director.renderOverlay_SocketResponse();\n        // Return asynchronous template loading.\n        return loadTemplates([\n            \"systems/eunos-blades/templates/overlay/blades-overlay.hbs\",\n            \"systems/eunos-blades/templates/overlay/location.hbs\",\n            \"systems/eunos-blades/templates/overlay/score-panel.hbs\",\n            \"systems/eunos-blades/templates/overlay/npc-portrait.hbs\",\n            \"systems/eunos-blades/templates/overlay/pc-portrait.hbs\",\n            \"systems/eunos-blades/templates/overlay/cohort-portrait.hbs\",\n            \"systems/eunos-blades/templates/overlay/crew-status-bar.hbs\",\n            \"systems/eunos-blades/templates/overlay/game-phase-bar.hbs\",\n            \"systems/eunos-blades/templates/overlay/notices/push.hbs\"\n        ]);\n    }\n    // #region   >>  Sockets ~\n    static InitSockets() {\n        const director = BladesDirector.getInstance();\n        socketlib.system.register(\"renderOverlay_SocketCall\", director.renderOverlay_SocketResponse.bind(director));\n        director.initClockSockets();\n        director.initScorePanelSockets();\n        director.initLocationSockets();\n        director.initNPCSockets();\n        director.initPCSockets();\n        director.initCohortSockets();\n        director.initCrewSockets();\n        director.initNotificationSockets();\n        director.initTransitionSockets();\n    }\n    // #endregion\n    // #endregion\n    // #region OVERLAY ~\n    // #region  >> Overlay Elements$ ~\n    _overlayContainer;\n    _overlayContainer$;\n    get overlayContainer() {\n        if (!this._overlayContainer) {\n            [this._overlayContainer] = $(\"#blades-overlay\");\n        }\n        if (!this._overlayContainer) {\n            $(\"body.vtt\").append(\"<section id=\\\"blades-overlay\\\"></section>\");\n            [this._overlayContainer] = $(\"#blades-overlay\");\n        }\n        return this._overlayContainer;\n    }\n    get overlayContainer$() {\n        if (!this._overlayContainer$) {\n            this._overlayContainer$ = $(this.overlayContainer);\n        }\n        return this._overlayContainer$;\n    }\n    get clockKeySection$() {\n        return this.overlayContainer$.find(\".overlay-section-clock-keys\");\n    }\n    get locationSection$() {\n        return this.overlayContainer$.find(\".overlay-section-location\");\n    }\n    get scorePanelSection$() {\n        return this.overlayContainer$.find(\".overlay-section-score-panel\");\n    }\n    get npcSection$() {\n        return this.overlayContainer$.find(\".overlay-section-npcs\");\n    }\n    get playerSection$() {\n        return this.overlayContainer$.find(\".overlay-section-players\");\n    }\n    get crewSection$() {\n        return this.overlayContainer$.find(\".overlay-section-crew\");\n    }\n    get notificationSection$() {\n        return this.overlayContainer$.find(\".overlay-section-notifications\");\n    }\n    get transitionSection$() {\n        return this.overlayContainer$.find(\".overlay-section-transitions\");\n    }\n    get tooltipSection$() {\n        return this.overlayContainer$.find(\".overlay-section-tooltips\");\n    }\n    get svgData() { return _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKey_SVGDATA; }\n    // #endregion\n    // #region  >> Rendering ~\n    renderOverlay_SocketCall() {\n        if (!game.user.isGM) {\n            return;\n        }\n        if (!this.overlayContainer) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"renderOverlay_SocketCall\");\n    }\n    async renderOverlay_SocketResponse() {\n        // Render the overlay element\n        const overlayContent = await renderTemplate(\"systems/eunos-blades/templates/overlay/blades-overlay.hbs\", this);\n        this.overlayContainer$.empty().append(overlayContent);\n        // Initialize clock key section\n        this.initClockKeySection();\n        // Initialize tooltip section\n        this.initTooltipSection();\n    }\n    // #endregion\n    // #endregion\n    // #region CLOCKS & CLOCK KEYS ~\n    // #region   >> INITIALIZATION ~\n    initClockKeySection(isResetting = false) {\n        if (isResetting) {\n            this.clockKeySection$.empty();\n        }\n        // Render keys that are visible\n        const visibleSceneKeys = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].shuffle(this.sceneKeys.filter((key) => key.isVisible));\n        let staggerDelay = 0;\n        while (visibleSceneKeys.length) {\n            const key = visibleSceneKeys.shift();\n            if (key) {\n                setTimeout(() => this.renderClockKey(key), staggerDelay * 1000);\n                staggerDelay += 0.5;\n            }\n        }\n        // Apply item dragger\n        setTimeout(() => {\n            // Create dragger instance for dragging clocks & clock keys onto, e.g, rolls\n        }, staggerDelay * 1000);\n    }\n    initClockSockets() {\n        socketlib.system.register(\"renderClockKey_SocketCall\", BladesDirector.renderClockKey_SocketResponse.bind(BladesDirector));\n        socketlib.system.register(\"pullKey_SocketCall\", BladesDirector.pullKey_SocketResponse.bind(BladesDirector));\n        socketlib.system.register(\"fadeInName_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fadeInName_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__[\"default\"]));\n        socketlib.system.register(\"fadeOutName_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__[\"default\"].fadeOutName_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__[\"default\"]));\n        socketlib.system.register(\"reveal_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.reveal_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"hide_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.hide_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"activate_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.activate_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"deactivate_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.deactivate_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"fadeInClockName_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.fadeInClockName_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"fadeOutClockName_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.fadeOutClockName_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"highlight_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.highlight_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"unhighlight_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.unhighlight_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n        socketlib.system.register(\"changeSegments_SocketCall\", _BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock.changeSegments_SocketResponse.bind(_BladesClockKey__WEBPACK_IMPORTED_MODULE_2__.BladesClock));\n    }\n    // #endregion\n    get sceneKeys() { return game.eunoblades.ClockKeeper.getSceneKeys(game.scenes.current.id); }\n    // #region   >> Rendering (Dropping) Clock Keys ~\n    dropKey_Animation(key, keyElems$) {\n        const { container$, label$, imgContainer$, clocks } = keyElems$ ?? key.getElements$(game.eunoblades.Director.clockKeySection$);\n        const keySwingTimeline = imgContainer$.data(\"keySwingTimeline\");\n        // Construct timeline for revealing clock key\n        const tl = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n            .call(() => { keySwingTimeline.seek(\"NEUTRAL\").play(); })\n            .from(container$, {\n            y: -800,\n            ease: \"bounce\",\n            duration: 1\n        }, 0)\n            .to(container$, { autoAlpha: 1, duration: 0.5, ease: \"power2\" }, 0);\n        // Reveal visible clocks\n        key.visibleClocks.forEach((clock, i) => {\n            tl.add(() => { clock.reveal_Animation(clocks[clock.id]); }, i === 0 ? \">\" : \"<+0.15\");\n        });\n        // Reveal key label, if visible\n        if (key.name && key.isNameVisible) {\n            tl.blurReveal(label$, {\n                ignoreMargin: true,\n                duration: 0.75\n            }, \"<+0.05\");\n        }\n    }\n    prepareClockKeyTimelines(key, keyElems$) {\n        const { container$, imgContainer$, elem$, label$, clocks } = keyElems$;\n        // Initialize element starting properties\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(container$, { pointerEvents: \"auto\" });\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(elem$, { filter: \"brightness(1)\" });\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(imgContainer$, { transformOrigin: \"50% 10%\" });\n        // Retrieve element starting properties\n        const keyElemScale = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.getProperty(container$[0], \"scale\");\n        // Timeline: Swinging key timeline\n        imgContainer$.data(\"keySwingTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ paused: true, repeat: -1, yoyo: true })\n            .fromTo(imgContainer$, { rotateZ: -1 }, { rotateZ: 1, duration: 3, ease: \"sine.inOut\" })\n            .addLabel(\"NEUTRAL\", 1.5)\n            .seek(\"NEUTRAL\"));\n        // Timeline: Hover over clock key\n        container$.data(\"hoverOverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n            paused: true,\n            data: { key, imgContainer$, label$, isNameRevealed: false },\n            onStart() {\n                this.data.imgContainer$.data(\"keySwingTimeline\")\n                    .tweenTo(\"NEUTRAL\", {\n                    duration: 0.25,\n                    ease: \"back.out(1.5)\"\n                });\n                if (this.data.key.name && !this.data.key.isNameVisible) {\n                    this.data.isNameRevealed = true;\n                    _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurReveal(this.data.label$, {\n                        ignoreMargin: true,\n                        duration: 0.5\n                    });\n                }\n            },\n            onReverseComplete() {\n                this.data.imgContainer$.data(\"keySwingTimeline\")\n                    .seek(\"NEUTRAL\")\n                    .play();\n                if (this.data.isNameRevealed) {\n                    this.data.isNameRevealed = false;\n                    _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurRemove(this.data.label$, {\n                        ignoreMargin: true,\n                        duration: 0.5\n                    });\n                }\n            }\n        })\n            .to(elem$, { filter: \"brightness(1.5)\", scale: keyElemScale * 1.25, duration: 0.5, ease: \"sine\" }));\n        // Timelines: Hover over clocks\n        key.clocks.forEach((clock) => {\n            const { clockContainer$, clockLabel$, clockElem$ } = clocks[clock.id];\n            if (!clockContainer$?.length) {\n                throw new Error(`[BladesDirector.prepareClockKeyTimelines] Error clockContainer$ not found for clock '${clock.id}' of key '${key.id}'.`);\n            }\n            _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(clockContainer$, { pointerEvents: \"auto\" });\n            clockContainer$.data(\"hoverOverTimeline\", _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                paused: true,\n                data: { clock, clockLabel$, isNameRevealed: false },\n                onStart() {\n                    if (this.data.clock.name && !this.data.clock.isNameVisible) {\n                        this.data.isNameRevealed = true;\n                        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurReveal(this.data.clockLabel$, {\n                            ignoreMargin: true,\n                            duration: 0.5\n                        });\n                    }\n                },\n                onReverseComplete() {\n                    if (this.data.isNameRevealed) {\n                        this.data.isNameRevealed = false;\n                        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurRemove(this.data.clockLabel$, {\n                            ignoreMargin: true,\n                            duration: 0.5\n                        });\n                    }\n                }\n            })\n                .to(clockElem$, { filter: \"brightness(1.5)\", scale: 1.25, duration: 0.25, ease: \"sine\" }));\n        });\n    }\n    async activateClockKeyListeners(key, keyElems$) {\n        const { container$, clocks } = keyElems$;\n        if (game.user.isGM) {\n            // === GM-ONLY LISTENERS ===\n            // Double-Click a Clock Key = Open ClockKeeper sheet\n            container$.on(\"dblclick\", async () => {\n                game.eunoblades.ClockKeeper.sheet?.render(true);\n            });\n            // Right-Click a Clock Key = Pull it\n            container$.on(\"contextmenu\", async () => {\n                this.pullKey_SocketCall(key.id);\n                key.updateTarget(\"isVisible\", false);\n            });\n        }\n        else {\n            // === PLAYER-ONLY LISTENERS ===\n            // Add listeners to container for mouseenter and mouseleave, that play and reverse timeline attached to element\n            container$.on(\"mouseenter\", () => {\n                container$.data(\"hoverOverTimeline\").play();\n            }).on(\"mouseleave\", () => {\n                container$.data(\"hoverOverTimeline\").reverse();\n            });\n            // Now repeat this for each clock in the clock key\n            key.clocks.forEach((clock) => {\n                const { clockContainer$ } = clocks[clock.id];\n                // Add listeners to clock for mouseenter and mouseleave, that play and reverse timeline attached to element\n                clockContainer$.on(\"mouseenter\", () => {\n                    if (clock.isVisible) {\n                        clockContainer$.data(\"hoverOverTimeline\").play();\n                    }\n                }).on(\"mouseleave\", () => {\n                    if (clock.isVisible) {\n                        clockContainer$.data(\"hoverOverTimeline\").reverse();\n                    }\n                });\n            });\n        }\n    }\n    async renderClockKey(key) {\n        await key.renderTo(this.clockKeySection$);\n        // If a position-dragger is present, remove it.\n        if (key.positionDragger) {\n            key.removePositionDragger();\n        }\n        // Initialize clock key elements to overlay context\n        const keyElems$ = key.initElementsInContext(this.clockKeySection$, _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKeyDisplayMode.full);\n        // If an overlayPosition has been set, apply to the container element:\n        if (key.overlayPosition) {\n            _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(keyElems$.container$, {\n                left: key.overlayPosition.x,\n                top: key.overlayPosition.y\n            });\n        }\n        // Prepare animation timelines & attach them to rendered elements\n        this.prepareClockKeyTimelines(key, keyElems$);\n        // Activate listeners for the rendered key\n        this.activateClockKeyListeners(key, keyElems$);\n        // Animate the key dropping into the overlay\n        this.dropKey_Animation(key, keyElems$);\n    }\n    async renderClockKey_SocketCall(keyID) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"renderClockKey_SocketCall\", keyID);\n    }\n    static async renderClockKey_SocketResponse(keyID) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        game.eunoblades.Director.renderClockKey(key);\n    }\n    // #endregion\n    // #region   >> Un-Rendering (Pulling) Clock Keys ~\n    pullKey_Animation(key) {\n        const { container$ } = key.getElements$(game.eunoblades.Director.clockKeySection$);\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n            .to(container$, {\n            y: -800,\n            ease: \"back.in(1)\",\n            duration: 0.75\n        })\n            .to(container$, {\n            opacity: 0,\n            ease: \"power2.out\",\n            duration: 0.25\n        }, 0.75)\n            .call(() => { container$.remove(); });\n    }\n    async pullKey_SocketCall(keyID) {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForEveryone(\"pullKey_SocketCall\", keyID);\n    }\n    static pullKey_SocketResponse(keyID) {\n        const key = game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        game.eunoblades.Director.pullKey_Animation(key);\n    }\n    // #endregion\n    // #endregion\n    // #region SCORE PANEL ~\n    // #region   >> INITIALIZATION ~\n    initScorePanelSockets() {\n        // tbd...\n    }\n    // #endregion\n    // ## Score Details\n    // - Small panel overlapping corner of Location\n    // - Engagement roll result\n    // - Plan & Detail\n    // - Target tier\n    activateScorePanelListeners() {\n        // tbd...\n    }\n    // #endregion\n    // #region LOCATIONS ~\n    // #region   >> INITIALIZATION ~\n    initLocationSockets() {\n        // tbd...\n    }\n    // #endregion\n    // ## Locations\n    // - District wrapper/header\n    // - Faction wrapper/footer\n    // - Location main\n    // - Slide-scroll of sublocations\n    activateLocationListeners() {\n        // tbd...\n    }\n    // #endregion\n    // #region NPCs ~\n    // #region   >> INITIALIZATION ~\n    initNPCSockets() {\n        // tbd...\n    }\n    // #endregion// ## NPCs\n    // - Linked to a location: When location is displayed, so are they.  *(Can be linked to District wrapper, main Location, or sublocations)*\n    // - Portrait images close to the central location display, hover-over popups provide more detailed information from sheet or `BladesScore` instance\n    activateNPCListeners() {\n        // tbd...\n    }\n    // #endregion\n    // #region PCs, COHORTs, CREW ~\n    // #region   >> INITIALIZATION ~\n    initPCSockets() {\n        // tbd...\n    }\n    initCohortSockets() {\n        // tbd...\n    }\n    initCrewSockets() {\n        // tbd...\n    }\n    // #endregion\n    // ## PCs\n    // - Display panels along bottom\n    // - Signal lights\n    activatePCListeners() {\n        // tbd...\n    }\n    // ## Cohorts\n    // - Smaller panels alongside the PCs\n    activateCohortListeners() {\n        // tbd...\n    }\n    // ## Crew\n    // - Limited information displayed, maybe bar beneath PCs showing Heat, Wanted Level…\n    activateCrewListeners() {\n        // tbd...\n    }\n    // #endregion\n    // #region NOTIFICATIONS ~\n    // #region   >> INITIALIZATION ~\n    initNotificationSockets() {\n        socketlib.system.register(\"pushNotice_SocketCall\", BladesDirector.pushNotice_SocketResponse.bind(BladesDirector));\n    }\n    // #endregion\n    pushNotice_SocketCall(targets, config) {\n        const pushID = randomID();\n        if (typeof targets === \"string\") {\n            if (targets === \"ALL\") {\n                return socketlib.system.executeForEveryone(\"pushNotice_SocketCall\", pushID, config);\n            }\n            else if (targets === \"GM\") {\n                return socketlib.system.executeForAllGMs(\"pushNotice_SocketCall\", pushID, config);\n            }\n            else {\n                targets = game.users.filter((user) => user.id === targets\n                    || user.name === targets\n                    || user.character?.id === targets\n                    || user.character?.name === targets\n                    || game.user.isGM).map((user) => user.id);\n            }\n        }\n        if (targets.length > 0) {\n            return socketlib.system.executeForUsers(\"pushNotice_SocketCall\", targets, pushID, config);\n        }\n        return undefined;\n    }\n    static async pushNotice_SocketResponse(pushID, config) {\n        const director = game.eunoblades.Director;\n        const pushElem$ = $(await renderTemplate(\"systems/eunos-blades/templates/overlay/notices/push.hbs\", {\n            id: pushID,\n            ...config\n        }))\n            .appendTo(director.notificationSection$)\n            .on(\"click\", (event) => { director.$removePush(event.currentTarget); })\n            .on(\"contextmenu\", (event) => { director.$removeAndClear(event.currentTarget); });\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.fromTo(pushElem$, {\n            x: 200,\n            skewX: 20,\n            autoAlpha: 0,\n            filter: \"blur(10px)\"\n        }, {\n            x: 0,\n            skewX: 0,\n            autoAlpha: 1,\n            filter: \"blur(0px)\",\n            duration: 0.5,\n            ease: \"back\"\n        });\n    }\n    async $removePush(target) {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.to(target, {\n            x: \"+=200\",\n            autoAlpha: 0,\n            ease: \"power2\",\n            duration: 0.5,\n            onComplete: function () {\n                $(target).remove();\n            }\n        });\n    }\n    async $removeAndClear(target) {\n        const targets = $(target).prevAll().get().reverse();\n        targets.unshift(target);\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.to(targets, {\n            x: \"+=200\",\n            autoAlpha: 0,\n            ease: \"power2\",\n            duration: 0.5,\n            stagger: {\n                each: 0.5,\n                from: \"start\",\n                ease: \"power1.inOut\"\n            },\n            onComplete: function () {\n                targets.forEach((targ) => $(targ).remove());\n            }\n        });\n    }\n    // #endregion\n    // #region TRANSITIONS ~\n    // #region   >> INITIALIZATION ~\n    initTransitionSockets() {\n        // tbd...\n    }\n    // #endregion\n    // ## Transitions\n    async advanceGamePhase(phase) {\n        const nextPhase = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.wrap(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase), Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase).indexOf(phase ?? game.eunoblades.Tracker?.phase ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Freeplay) + 1);\n    }\n    // - As with notifications: placeholder animation until something more final can be coded.\n    // #endregion\n    // #region TOOLTIPS ~\n    _tooltipObserver;\n    _tooltipElems = new Map();\n    _displayedTooltipID;\n    /**\n     * Adjusts the tooltip's position to ensure it remains within its parent container using jQuery methods.\n     * @param tooltip - The tooltip element, which can be either an HTMLElement or a JQuery<HTMLElement>.\n     */\n    adjustTooltipPosition(tooltip$) {\n        // Validate tooltip position style\n        if (tooltip$.css(\"position\") !== \"absolute\") {\n            throw new Error(\"Tooltip position must be 'absolute'.\");\n        }\n        // Calculate bounds and directly apply necessary shifts to the tooltip element\n        const tooltipRect = tooltip$[0].getBoundingClientRect();\n        const containerRect = this.tooltipSection$[0].getBoundingClientRect();\n        // Initial position of the tooltip\n        const currentTop = tooltip$.position().top;\n        const currentLeft = tooltip$.position().left;\n        // Check for right overflow and adjust left position if necessary\n        if (tooltipRect.right > containerRect.right) {\n            const xShift = containerRect.right - tooltipRect.right;\n            tooltip$.css(\"left\", `${currentLeft + xShift}px`);\n        }\n        // Check for left overflow and adjust left position if necessary\n        else if (tooltipRect.left < containerRect.left) {\n            const xShift = containerRect.left - tooltipRect.left;\n            tooltip$.css(\"left\", `${currentLeft + xShift}px`);\n        }\n        // Check for bottom overflow and adjust top position if necessary\n        if (tooltipRect.bottom > containerRect.bottom) {\n            const yShift = containerRect.bottom - tooltipRect.bottom;\n            tooltip$.css(\"top\", `${currentTop + yShift}px`);\n        }\n        // Check for top overflow and adjust top position if necessary\n        else if (tooltipRect.top < containerRect.top) {\n            const yShift = containerRect.top - tooltipRect.top;\n            tooltip$.css(\"top\", `${currentTop + yShift}px`);\n        }\n    }\n    displayTooltip(tooltip) {\n        if (!tooltip.id) {\n            throw new Error(\"Tooltip must have an ID to be cloned to the overlay.\");\n        }\n        this._displayedTooltipID = tooltip.id;\n        const self = this;\n        // Clear out any other tooltips in the overlay.\n        game.eunoblades.Director.clearTooltips();\n        if (!this._tooltipElems.has(tooltip.id)) {\n            // Create cloned tooltip and attach it to the tooltip overlay.\n            const ttClone$ = $(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].changeContainer(tooltip, game.eunoblades.Director.tooltipSection$[0], true));\n            // Adjust the tooltip's position so it does not overflow the tooltip container\n            this.adjustTooltipPosition(ttClone$);\n            // Generate the reveal timeline and attach it to the cloned tooltip element.\n            const revealTimeline = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurRevealTooltip(ttClone$[0], {\n                onReverseComplete() {\n                    if (ttClone$.attr(\"id\") === self._displayedTooltipID) {\n                        delete self._displayedTooltipID;\n                    }\n                    game.eunoblades.Director._tooltipElems.delete(ttClone$.attr(\"id\"));\n                    game.eunoblades.Director.tooltipSection$.find(`#${ttClone$.attr(\"id\")}`).remove();\n                    game.eunoblades.Director.tooltipSection$.children(\"[style*='opacity: 0'], [style*='opacity:0']\").each(function () {\n                        const id = this.id; // Get the ID of the current element\n                        if (id === self._displayedTooltipID) {\n                            return;\n                        }\n                        if (id) {\n                            game.eunoblades.Director._tooltipElems.delete(id); // Remove from the map if the ID exists\n                        }\n                        $(this).remove(); // Remove the element from the DOM\n                    });\n                }\n            });\n            ttClone$.data(\"revealTimeline\", revealTimeline);\n            // Register the cloned tooltip element to the master map\n            this._tooltipElems.set(tooltip.id, ttClone$);\n        }\n        // Play the timeline.\n        this._tooltipElems.get(tooltip.id)?.data(\"revealTimeline\")?.play();\n    }\n    clearTooltip(tooltipID, isClearingIfTweening = true) {\n        if (tooltipID === this._displayedTooltipID) {\n            delete this._displayedTooltipID;\n        }\n        const ttElem = game.eunoblades.Director._tooltipElems.get(tooltipID);\n        if (!ttElem) {\n            return;\n        }\n        const ttTimeline = ttElem.data(\"revealTimeline\");\n        if (ttTimeline.isActive() && !isClearingIfTweening) {\n            return;\n        }\n        ttTimeline.reverse();\n    }\n    clearTooltips() {\n        eLog.checkLog3(\"Observer\", \"Observer Triggered!\");\n        // Look for tooltip elements in the overlay container, and remove them.\n        game.eunoblades.Director._tooltipElems.forEach((ttElem) => {\n            if (ttElem.attr(\"id\") === this._displayedTooltipID) {\n                return;\n            }\n            game.eunoblades.Director.clearTooltip(ttElem.attr(\"id\"), true);\n        });\n    }\n    initTooltipSection() {\n        const self = this;\n        this.clearTooltips();\n        // Reset tooltip observer\n        this._tooltipObserver?.kill();\n        // Simplified throttle function that takes a function with Observer parameter\n        const throttle = (func, limit) => {\n            let lastFunc;\n            let lastRan;\n            return function (obs) {\n                const now = Date.now();\n                if (!lastRan || now - lastRan >= limit) {\n                    func(obs);\n                    lastRan = now;\n                }\n                else {\n                    clearTimeout(lastFunc);\n                    lastFunc = window.setTimeout(() => {\n                        if (now - lastRan >= limit) {\n                            func(obs);\n                            lastRan = now;\n                        }\n                    }, limit - (now - lastRan));\n                }\n            };\n        };\n        // Throttled onMove callback\n        const throttledOnMove = throttle((obs) => {\n            // Calculate the absolute magnitude of velocity independent of direction\n            const magnitudeOfVelocity = Math.sqrt((obs.velocityX ** 2) + (obs.velocityY ** 2));\n            if (magnitudeOfVelocity >= _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MIN_MOUSE_MOVEMENT_THRESHOLD) {\n                self.clearTooltips();\n            }\n        }, 200); // Adjust 200ms to your preferred throttling limit\n        this._tooltipObserver = Observer.create({\n            type: \"touch,pointer\",\n            // onMove: throttledOnMove,\n            onClick() {\n                self.clearTooltips();\n            }\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesDirector);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesDirector.ts\n");

/***/ }),

/***/ "./ts/classes/BladesRoll.ts":
/*!**********************************!*\
  !*** ./ts/classes/BladesRoll.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesActionRoll: function() { return /* binding */ BladesActionRoll; },\n/* harmony export */   BladesEngagementRoll: function() { return /* binding */ BladesEngagementRoll; },\n/* harmony export */   BladesFortuneRoll: function() { return /* binding */ BladesFortuneRoll; },\n/* harmony export */   BladesIncarcerationRoll: function() { return /* binding */ BladesIncarcerationRoll; },\n/* harmony export */   BladesIndulgeViceRoll: function() { return /* binding */ BladesIndulgeViceRoll; },\n/* harmony export */   BladesInlineResistanceRoll: function() { return /* binding */ BladesInlineResistanceRoll; },\n/* harmony export */   BladesResistanceRoll: function() { return /* binding */ BladesResistanceRoll; },\n/* harmony export */   BladesRollMod: function() { return /* binding */ BladesRollMod; },\n/* harmony export */   BladesRollOpposition: function() { return /* binding */ BladesRollOpposition; },\n/* harmony export */   BladesRollParticipant: function() { return /* binding */ BladesRollParticipant; },\n/* harmony export */   BladesRollPrimary: function() { return /* binding */ BladesRollPrimary; }\n/* harmony export */ });\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _BladesConsequence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BladesConsequence */ \"./ts/classes/BladesConsequence.ts\");\n/* harmony import */ var _BladesDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n/* harmony import */ var _BladesChat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BladesChat */ \"./ts/classes/BladesChat.ts\");\n/* harmony import */ var _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./BladesTargetLink */ \"./ts/classes/BladesTargetLink.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region IMPORTS ~\n\n\n\n\n\n\n\n\n\n// #endregion\n// #region Types & Type Checking ~\n/**\n * Checks if the given string is a RollType.\n * @param {unknown} str The string to check.\n * @returns {boolean} True if the string is a RollType, false otherwise.\n */\nfunction isRollType(str) {\n    return typeof str === \"string\" && str in _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType;\n}\n/**\n * Checks if the given trait is an ActionTrait.\n * @param {unknown} trait The trait to check.\n * @returns {boolean} True if the trait is an ActionTrait, false otherwise.\n */\nfunction isAction(trait) {\n    return Boolean(trait && typeof trait === \"string\" && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(trait) in _core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait);\n}\n/**\n * Checks if the given trait is an AttributeTrait.\n * @param {unknown} trait The trait to check.\n * @returns {boolean} True if the trait is an AttributeTrait, false otherwise.\n */\nfunction isAttribute(trait) {\n    return Boolean(trait && typeof trait === \"string\" && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(trait) in _core_constants__WEBPACK_IMPORTED_MODULE_1__.AttributeTrait);\n}\n/**\n * Checks if the given trait is a Factor.\n * @param {unknown} trait The trait to check.\n * @returns {boolean} True if the trait is a Factor, false otherwise.\n */\nfunction isFactor(trait) {\n    return Boolean(trait && typeof trait === \"string\" && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(trait) in _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor);\n}\n/**\n * Checks if the given string is a RollModStatus.\n * @param {unknown} str The string to check.\n * @returns {boolean} True if the string is a RollModStatus, false otherwise.\n */\nfunction isModStatus(str) {\n    return typeof str === \"string\" && str in _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus;\n}\n/**\n * Checks if the given section can contain BladesRollParticipant documents.\n * @param {RollModSection} section\n */\nfunction isParticipantSection(section) {\n    return [\n        _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n        _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n        _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect\n    ].includes(section);\n}\n/**\n * Checks if the given subSection can hold BladesRollParticipant documents.\n * @param {string} subSection\n */\nfunction isParticipantSubSection(subSection) {\n    if (subSection.startsWith(\"Group_\")) {\n        return true;\n    }\n    if ([\"Assist\", \"Setup\"].includes(subSection)) {\n        return true;\n    }\n    return false;\n}\n// #endregion\n// #region Utility Functions ~\n// #endregion\nclass BladesRollMod extends _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"] {\n    static ApplySchemaDefaults(schemaData) {\n        // Ensure all properties of Schema are provided\n        if (!schemaData.name) {\n            throw new Error(\"name is required for BladesRollMod.Schema\");\n        }\n        return {\n            key: `${schemaData.name}-positive-roll`,\n            modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n            section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n            posNeg: \"positive\",\n            base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n            value: 1,\n            tooltip: \"\",\n            ...schemaData\n        };\n    }\n    static get GMOnlyModStatuses() {\n        return [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden];\n    }\n    static getSchemaFromStrings(mStrings) {\n        const nameString = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pullElement(mStrings, (v) => typeof v === \"string\" && /^na/i.test(v));\n        const nameVal = (typeof nameString === \"string\" && nameString.replace(/^.*:/, \"\"));\n        if (!nameVal) {\n            throw new Error(`RollMod Missing Name: '${mStrings.join(\"@\")}'`);\n        }\n        const catString = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pullElement(mStrings, (v) => typeof v === \"string\" && /^cat/i.test(v));\n        const catVal = (typeof catString === \"string\" && catString.replace(/^.*:/, \"\"));\n        if (!catVal || !(catVal in _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection)) {\n            throw new Error(`RollMod Missing Category: '${mStrings.join(\"@\")}'`);\n        }\n        const posNegString = (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pullElement(mStrings, (v) => typeof v === \"string\" && /^p/i.test(v)) || \"posNeg:positive\");\n        const posNegVal = posNegString.replace(/^.*:/, \"\");\n        return {\n            key: `${nameVal}-${posNegVal}-${catVal}`,\n            name: nameVal,\n            section: catVal,\n            posNeg: posNegVal,\n            base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n            modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n            tooltip: \"\",\n            value: 1,\n            ...Object.fromEntries(mStrings.map(getModParameterKeyVal))\n        };\n        function getModParameterKeyVal(mString) {\n            const [keyString, valString] = mString.split(/:/);\n            let val = /\\|/.test(valString) ? valString.split(/\\|/) : valString;\n            let key;\n            if (/^stat/i.test(keyString)) {\n                key = \"base_status\";\n            }\n            else if (/^val/i.test(keyString)) {\n                key = \"value\";\n            }\n            else if (/^eff|^ekey/i.test(keyString)) {\n                key = \"effectKeys\";\n            }\n            else if (/^side|^ss/i.test(keyString)) {\n                key = \"sideString\";\n            }\n            else if (/^s.*ame/i.test(keyString)) {\n                key = \"source_name\";\n            }\n            else if (/^tool|^tip/i.test(keyString)) {\n                key = \"tooltip\";\n            }\n            else if (/^ty/i.test(keyString)) {\n                key = \"modType\";\n            }\n            else if (/^c.{0,10}r?.{0,3}ty/i.test(keyString)) {\n                key = \"conditionalRollTypes\";\n            }\n            else if (/^a.{0,3}r?.{0,3}y/i.test(keyString)) {\n                key = \"autoRollTypes\";\n            }\n            else if (/^p.{0,10}r?.{0,3}y/i.test(keyString)) {\n                key = \"participantRollTypes\";\n            }\n            else if (/^c.{0,10}r?.{0,3}tr/i.test(keyString)) {\n                key = \"conditionalRollTraits\";\n            }\n            else if (/^a.{0,3}r?.{0,3}tr/i.test(keyString)) {\n                key = \"autoRollTraits\";\n            }\n            else if (/^p.{0,10}r?.{0,3}tr/i.test(keyString)) {\n                key = \"participantRollTypes\";\n            }\n            else {\n                throw new Error(`Bad Roll Mod Key: ${keyString}`);\n            }\n            if (key === \"base_status\" && val === \"Conditional\") {\n                val = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden;\n            }\n            let valProcessed;\n            if ([\"value\"].includes(key)) {\n                valProcessed = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(val);\n            }\n            else if ([\"effectKeys\", \"conditionalRollTypes\", \"autoRollTypes\", \"conditionalRollTraits\", \"autoRollTraits\"].includes(key)) {\n                valProcessed = [val].flat();\n            }\n            else {\n                valProcessed = val.replace(/%COLON%/g, \":\");\n            }\n            return [key, valProcessed];\n        }\n    }\n    static ParseDocModsToSchemaSet(doc) {\n        if (doc instanceof _BladesChat__WEBPACK_IMPORTED_MODULE_7__[\"default\"]) {\n            throw new Error(\"BladesRollMod.ParseDocRollMods cannot be called on a BladesChat document.\");\n        }\n        const { roll_mods } = doc.system;\n        if (!roll_mods || roll_mods.length === 0) {\n            return [];\n        }\n        return roll_mods\n            .filter((elem) => Boolean(elem && typeof elem === \"string\"))\n            .map((modString) => {\n            return this.getSchemaFromStrings(modString.split(/@/));\n        });\n    }\n    isRerendering = false;\n    get status() {\n        // USER STATUS of \"ForcedOn\", \"ForcedOff\", or \"Hidden\" trumps all other status values.\n        if (this.userStatus && BladesRollMod.GMOnlyModStatuses.includes(this.userStatus)) {\n            return this.userStatus;\n        }\n        // HELD STATUS of \"ToggledOff\" or \"ToggledOn\" can be overridden by User Status\n        if (this.heldStatus && [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn].includes(this.heldStatus)) {\n            return this.userStatus ?? this.heldStatus;\n        }\n        // Otherwise, return the first status that is set out of held, user, and base.\n        return this.heldStatus ?? this.userStatus ?? this.baseStatus;\n    }\n    get isActive() { return [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn].includes(this.status); }\n    get isVisible() { return this.status !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden; }\n    // get flagParams() {\n    //   return [C.SYSTEM_ID, `rollCollab.rollModsData.${this.id}`] as const;}\n    // async setUserStatusFlag(val: RollModStatus | undefined) {\n    // }\n    get isConditional() {\n        return [\n            ...this.conditionalRollTraits,\n            ...this.autoRollTraits,\n            ...this.participantRollTraits,\n            ...this.conditionalRollTypes,\n            ...this.autoRollTypes,\n            ...this.participantRollTypes\n        ].length > 0;\n    }\n    get isInInactiveBlock() {\n        if (game.user.isGM) {\n            return [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff].includes(this.status)\n                && (this.isConditional || this.modType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.ability);\n        }\n        return [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff].includes(this.status)\n            && (this.isConditional || this.modType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.ability);\n    }\n    get isPush() {\n        return Boolean(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(this.name) === \"push\"\n            || this.effectKeys.find((eKey) => eKey === \"Is-Push\"));\n    }\n    get isBasicPush() { return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(this.name) === \"push\"; }\n    get stressCost() {\n        const costKeys = this.effectKeys.filter((key) => key.startsWith(\"Cost-Stress\"));\n        if (costKeys.length === 0) {\n            return 0;\n        }\n        let stressCost = 0;\n        costKeys.forEach((key) => {\n            const [thisParam] = (key.split(/-/) ?? []).slice(1);\n            const [_, valStr] = (/([A-Za-z]+)(\\d*)/.exec(thisParam) ?? []).slice(1);\n            stressCost += _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(valStr);\n        });\n        return stressCost;\n    }\n    isValidForRollType() {\n        switch (this.rollInstance.rollType) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action: {\n                return true;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance:\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Fortune:\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.IndulgeVice: {\n                if (this.isPush\n                    || [\"bargain\", \"setup\", \"assist\", \"potency\"].includes(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(this.name))) {\n                    return false;\n                }\n                return true;\n            }\n            default: return false;\n        }\n    }\n    /**\n     * Checks if any types or traits apply to the roll instance.\n     * @param {AnyRollType[]} types The types to check.\n     * @param {RollTrait[]} traits The traits to check.\n     * @returns {boolean} - Returns true if any types or traits apply, false otherwise.\n     */\n    checkTypesOrTraits(types, traits) {\n        const rollTypes = [this.rollInstance.rollType, this.rollInstance.rollSubType, this.rollInstance.rollDowntimeAction]\n            .filter((rType) => Boolean(rType));\n        const typesApply = (!this.rollInstance.isParticipantRoll && types.length === 0)\n            || rollTypes.some((rType) => types.includes(rType));\n        const traitsApply = (!this.rollInstance.isParticipantRoll && traits.length === 0)\n            || (this.rollInstance.rollTrait && traits.includes(this.rollInstance.rollTrait));\n        return Boolean(typesApply && traitsApply);\n    }\n    /**\n     * Sets the conditional status of the roll mod instance.\n     * @returns {boolean} - Returns false if the status is ForcedOn or ToggledOff, true if the status is Hidden.\n     */\n    setConditionalStatus() {\n        // If the roll mod instance is not conditional, return false\n        if (!this.isConditional) {\n            return false;\n        }\n        // If any auto-Types apply, set status to ForcedOn and return false\n        if (this.autoRollTypes.includes(this.rollInstance.rollType)\n            || (this.rollInstance.rollSubType && this.autoRollTypes.includes(this.rollInstance.rollSubType))\n            || (this.rollInstance.rollDowntimeAction && this.autoRollTypes.includes(this.rollInstance.rollDowntimeAction))) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn;\n            return false;\n        }\n        // If any auto-Traits apply, set status to ForcedOn and return false\n        if (this.rollInstance.rollTrait && this.autoRollTraits.includes(this.rollInstance.rollTrait)) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn;\n            return false;\n        }\n        // If any conditionalTypes or conditionalTraits apply, set status to ToggledOff and return false\n        if (this.checkTypesOrTraits(this.conditionalRollTypes, this.conditionalRollTraits)) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff;\n            return false;\n        }\n        // If this is a participant roll\n        //   AND any participantTypes or participantTraits apply,\n        // ... set status to ToggledOff and return false\n        if (this.rollInstance.isParticipantRoll\n            && this.checkTypesOrTraits(this.participantRollTypes, this.participantRollTraits)) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff;\n            return false;\n        }\n        // If none of the above conditions apply, set status to Hidden and return true\n        this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden;\n        return true;\n    }\n    /**\n     * Sets the auto-reveal/enable status of the roll mod instance.\n     * @returns {boolean} - Returns false if the status is ForcedOn or ToggledOff, true if the status is Hidden.\n     */\n    setAutoStatus() {\n        // Check for AutoRevealOn and AutoEnableOn\n        const holdKeys = this.effectKeys.filter((key) => key.startsWith(\"Auto\"));\n        if (holdKeys.length === 0) {\n            return false;\n        }\n        for (const key of holdKeys) {\n            const [thisKey, thisParam] = key.split(/-/) ?? [];\n            if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(thisParam) in _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position && this.rollInstance.rollPositionFinal === _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(thisParam)) {\n                if (thisKey === \"AutoRevealOn\") {\n                    this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff;\n                    return false;\n                }\n                else if (thisKey === \"AutoEnableOn\") {\n                    this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn;\n                    return false;\n                }\n            }\n        }\n        this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden;\n        return true;\n    }\n    /**\n     * Sets the relevancy status of the roll mod instance (i.e. hides irrelevant rollMods).\n     * @returns {boolean} - Returns true if mod is irrelevant and status is Hidden, false otherwise.\n     */\n    setRelevancyStatus() {\n        const holdKeys = this.effectKeys.filter((key) => /^Negate|^Increase/.test(key));\n        if (holdKeys.length === 0) {\n            return false;\n        }\n        const relevantKeys = holdKeys\n            .filter((key) => {\n            const [thisKey, thisParam] = key.split(/-/) ?? [];\n            if (thisKey === \"Negate\") {\n                const negateOperations = {\n                    PushCost: () => this.rollInstance.isPushed(),\n                    QualityPenalty: () => this.rollInstance.isTraitRelevant(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality)\n                        && (this.rollInstance.rollFactors.source[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]?.value ?? 0)\n                            < (this.rollInstance.rollFactors.opposition[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]?.value ?? 0),\n                    ScalePenalty: () => this.rollInstance.isTraitRelevant(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale)\n                        && (this.rollInstance.rollFactors.source[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]?.value ?? 0)\n                            < (this.rollInstance.rollFactors.opposition[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]?.value ?? 0),\n                    TierPenalty: () => this.rollInstance.isTraitRelevant(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier)\n                        && (this.rollInstance.rollFactors.source[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]?.value ?? 0)\n                            < (this.rollInstance.rollFactors.opposition[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]?.value ?? 0)\n                };\n                if (Object.hasOwn(negateOperations, thisParam)) {\n                    return negateOperations[thisParam]();\n                }\n                else {\n                    throw new Error(`Unrecognized Negate parameter: ${thisParam}`);\n                }\n            }\n            else if (thisKey === \"Increase\") {\n                const [_, traitStr] = /(\\w+)\\d+/.exec(thisParam) ?? [];\n                return this.rollInstance.isTraitRelevant(traitStr);\n            }\n            else {\n                throw new Error(`Unrecognized Function Key: ${thisKey}`);\n            }\n        });\n        if (relevantKeys.length === 0) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Sets the payable status of the roll mod instance (i.e. forces off rollMods the primary can't pay for).\n     * @returns {boolean} - Returns true if mod is unpayable and status is ForcedOff, false otherwise.\n     */\n    setPayableStatus() {\n        const holdKeys = this.effectKeys.filter((key) => key.startsWith(\"Cost\"));\n        if (holdKeys.length === 0) {\n            return false;\n        }\n        const payableKeys = holdKeys\n            .filter((key) => {\n            const [thisParam] = (key.split(/-/) ?? []).slice(1);\n            const [traitStr, valStr] = (/([A-Za-z]+)(\\d*)/.exec(thisParam) ?? []).slice(1);\n            const { rollPrimaryDoc } = this.rollInstance.rollPrimary ?? {};\n            if (!BladesRollPrimary.IsDoc(rollPrimaryDoc)) {\n                return false;\n            }\n            switch (traitStr) {\n                case \"SpecialArmor\": {\n                    return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)\n                        && rollPrimaryDoc.system.armor.active.special\n                        && !rollPrimaryDoc.system.armor.checked.special;\n                }\n                case \"Stress\": {\n                    const val = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(valStr);\n                    return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)\n                        && rollPrimaryDoc.system.stress.max - rollPrimaryDoc.system.stress.value >= val;\n                }\n                case \"Heat\": {\n                    return (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(rollPrimaryDoc) && _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(rollPrimaryDoc.crew))\n                        || _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(rollPrimaryDoc);\n                }\n                default: throw new Error(`Unrecognize Payable Key: ${traitStr}`);\n            }\n        });\n        if (payableKeys.length === 0) {\n            this.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff;\n            return true;\n        }\n        return false;\n    }\n    applyRollModEffectKeys() {\n        if (!this.isActive) {\n            return;\n        }\n        const holdKeyParams = this.effectKeys\n            .filter((key) => /^Negate|^Increase/.test(key))\n            .map((key) => key.split(/-/));\n        if (holdKeyParams.length === 0) {\n            return;\n        }\n        holdKeyParams.forEach(([key, param]) => {\n            if (key === \"Negate\") {\n                const negateOperations = {\n                    PushCost: () => {\n                        this.rollInstance.negatePushCost();\n                    },\n                    QualityPenalty: () => {\n                        this.rollInstance.negateFactorPenalty(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality);\n                    },\n                    ScalePenalty: () => {\n                        this.rollInstance.negateFactorPenalty(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale);\n                    },\n                    TierPenalty: () => {\n                        this.rollInstance.negateFactorPenalty(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier);\n                    }\n                };\n                if (Object.hasOwn(negateOperations, param)) {\n                    return negateOperations[param]();\n                }\n                else {\n                    throw new Error(`Unrecognized Negate parameter: ${param}`);\n                }\n            }\n            else if (key === \"Increase\") {\n                const [_, traitStr] = /(\\w+)\\d+/.exec(param) ?? [];\n                return this.rollInstance.isTraitRelevant(traitStr);\n            }\n            else {\n                throw new Error(`Unrecognized Function Key: ${key} (key: ${key})`);\n            }\n        });\n    }\n    get selectOptions() {\n        if (this.modType !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.teamwork) {\n            return null;\n        }\n        if (this.name === \"Assist\" || this.name === \"Setup\") {\n            return this.rollInstance.rollParticipantSelectOptions[this.name];\n        }\n        else if (this.name.startsWith(\"Group_\")) {\n            return this.rollInstance.rollParticipantSelectOptions.Group;\n        }\n        return null;\n    }\n    get selectedParticipant() {\n        if (this.modType !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.teamwork) {\n            return null;\n        }\n        return this.rollInstance.getRollParticipant(this.section, this.name);\n    }\n    get allFlagData() {\n        return this.rollInstance.data;\n    }\n    get costs() {\n        if (!this.isActive) {\n            return undefined;\n        }\n        const holdKeys = this.effectKeys.filter((key) => key.startsWith(\"Cost\"));\n        if (holdKeys.length === 0) {\n            return undefined;\n        }\n        return holdKeys.map((key) => {\n            const [thisParam] = (key.split(/-/) ?? []).slice(1);\n            const [traitStr, valStr] = (/([A-Za-z]+)(\\d*)/.exec(thisParam) ?? []).slice(1);\n            let label = this.name;\n            if (this.isBasicPush) {\n                if (this.posNeg === \"negative\") {\n                    label = `${this.name} (<span class='red-bright'>To Act</span>)`;\n                }\n                else {\n                    const effect = this.section === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll ? \"+1d\" : \"+1 effect\";\n                    label = `${this.name} (<span class='gold-bright'>${effect}</span>)`;\n                }\n            }\n            return {\n                id: this.id,\n                label,\n                costType: traitStr,\n                costAmount: valStr ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(valStr) : 1\n            };\n        });\n    }\n    _rollInstance;\n    constructor(modData, rollInstance) {\n        super(modData);\n        this._rollInstance = rollInstance;\n    }\n    get rollInstance() { return this._rollInstance; }\n    get name() { return this.data.name; }\n    get modType() { return this.data.modType; }\n    get sourceName() { return this.data.source_name ?? this.data.name; }\n    get section() { return this.data.section; }\n    get posNeg() { return this.data.posNeg; }\n    get userStatus() { return this.data.user_status; }\n    set userStatus(val) {\n        if (val === this.userStatus) {\n            return;\n        }\n        const { isRerendering } = this;\n        if (!val || val === this.baseStatus) {\n            this.updateTarget(\"user_status\", null)\n                .then(() => {\n                if (isRerendering) {\n                    this.rollInstance.renderRollCollab_SocketCall();\n                }\n            });\n        }\n        else {\n            if (!game.user.isGM\n                && (BladesRollMod.GMOnlyModStatuses.includes(val)\n                    || (this.userStatus && BladesRollMod.GMOnlyModStatuses.includes(this.userStatus)))) {\n                return;\n            }\n            this.updateTarget(\"user_status\", val)\n                .then(() => {\n                if (isRerendering) {\n                    this.rollInstance.renderRollCollab_SocketCall();\n                }\n            });\n        }\n    }\n    get baseStatus() { return this.data.base_status; }\n    get heldStatus() { return this.data.held_status; }\n    set heldStatus(val) {\n        if (val === this.heldStatus) {\n            return;\n        }\n        const { isRerendering } = this;\n        if (!val) {\n            this.updateTarget(\"held_status\", null)\n                .then(() => {\n                if (isRerendering) {\n                    this.rollInstance.renderRollCollab_SocketCall();\n                }\n            });\n        }\n        else {\n            this.updateTarget(\"held_status\", val)\n                .then(() => {\n                if (isRerendering) {\n                    this.rollInstance.renderRollCollab_SocketCall();\n                }\n            });\n        }\n    }\n    get value() { return this.data.value; }\n    get effectKeys() { return this.data.effectKeys ?? []; }\n    get sideString() {\n        if (this.data.sideString) {\n            return this.data.sideString;\n        }\n        if (this.selectedParticipant) {\n            return this.selectedParticipant.rollParticipantName;\n        }\n        return undefined;\n    }\n    get tooltip() {\n        let parsedTooltip = this.data.tooltip.replace(/%COLON%/g, \":\");\n        if (parsedTooltip.includes(\"%DOC_NAME%\")) {\n            parsedTooltip = parsedTooltip.replace(/%DOC_NAME%/g, this.selectedParticipant\n                ? this.selectedParticipant.rollParticipantName\n                : \"an Ally\");\n        }\n        if (parsedTooltip.includes(\"@OPPOSITION_NAME@\")) {\n            parsedTooltip = parsedTooltip.replace(/@OPPOSITION_NAME@/g, this.rollInstance.rollOpposition\n                ? this.rollInstance.rollOpposition.rollOppName\n                : \"Your Opposition\");\n        }\n        return parsedTooltip;\n    }\n    get conditionalRollTypes() {\n        return this.data.conditionalRollTypes ?? [];\n    }\n    get autoRollTypes() {\n        return this.data.autoRollTypes ?? [];\n    }\n    get participantRollTypes() {\n        return this.data.participantRollTypes ?? [];\n    }\n    get conditionalRollTraits() {\n        return this.data.conditionalRollTraits ?? [];\n    }\n    get autoRollTraits() {\n        return this.data.autoRollTraits ?? [];\n    }\n    get participantRollTraits() {\n        return this.data.participantRollTraits ?? [];\n    }\n}\nclass BladesRollPrimary {\n    // #region Static Methods ~\n    static IsValidData(data) {\n        if (BladesRollPrimary.IsDoc(data)) {\n            return false;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data)\n            && typeof data.rollPrimaryName === \"string\"\n            && typeof data.rollPrimaryType === \"string\"\n            && typeof data.rollPrimaryImg === \"string\"\n            && Array.isArray(data.rollPrimaryModsSchemaSet)\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data.rollFactors)\n            && (!data.rollPrimaryID || typeof data.rollPrimaryID === \"string\")\n            && (!data.rollPrimaryDoc || BladesRollPrimary.IsDoc(data.rollPrimaryDoc));\n    }\n    static GetDoc(docRef) {\n        let doc = docRef;\n        if (typeof docRef === \"string\") {\n            doc = game.actors.get(docRef)\n                ?? game.items.get(docRef)\n                ?? game.actors.getName(docRef)\n                ?? game.items.getName(docRef);\n        }\n        return BladesRollPrimary.IsDoc(doc) && doc;\n    }\n    static IsDoc(doc) {\n        return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew)\n            || _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gm_tracker);\n    }\n    static GetDataFromDoc(doc) {\n        return {\n            rollPrimaryID: doc.id,\n            rollPrimaryName: doc.name,\n            rollPrimaryType: doc.type,\n            rollPrimaryImg: doc.img,\n            rollPrimaryModsSchemaSet: doc.rollPrimaryModsSchemaSet,\n            rollFactors: doc.rollFactors\n        };\n    }\n    static BuildData(config) {\n        if (BladesRollPrimary.IsValidData(config.rollPrimaryData)) {\n            return config.rollPrimaryData;\n        }\n        let rollPrimary;\n        const rollUser = game.users.get(config.rollUserID ?? game.user.id);\n        if (\"target\" in config && BladesRollPrimary.IsDoc(config.target)) {\n            rollPrimary = config.target;\n        }\n        else if (rollUser && BladesRollPrimary.IsDoc(rollUser.character)) {\n            rollPrimary = rollUser.character;\n        }\n        else {\n            throw new Error(\"[BladesRollPrimary.BuildData()] A valid source of PrimaryData must be provided to construct a roll.\");\n        }\n        return {\n            rollPrimaryID: rollPrimary.rollPrimaryID,\n            rollPrimaryName: rollPrimary.rollPrimaryName,\n            rollPrimaryType: rollPrimary.rollPrimaryType,\n            rollPrimaryImg: rollPrimary.rollPrimaryImg,\n            rollPrimaryModsSchemaSet: rollPrimary.rollPrimaryModsSchemaSet,\n            rollFactors: rollPrimary.rollFactors\n        };\n    }\n    static Build(config) {\n        return new BladesRollPrimary(this.BuildData(config));\n    }\n    // #endregion\n    rollInstance;\n    rollPrimaryID;\n    _rollPrimaryDoc;\n    get rollPrimaryDoc() {\n        if (!this._rollPrimaryDoc) {\n            let doc;\n            if (this.rollPrimaryID) {\n                doc = game.items.get(this.rollPrimaryID)\n                    ?? game.actors.get(this.rollPrimaryID);\n            }\n            if (!doc && this.rollPrimaryName) {\n                doc = game.items.getName(this.rollPrimaryName)\n                    ?? game.actors.getName(this.rollPrimaryName);\n            }\n            if (BladesRollPrimary.IsDoc(doc)) {\n                this._rollPrimaryDoc = doc;\n            }\n        }\n        return this._rollPrimaryDoc;\n    }\n    rollPrimaryName;\n    rollPrimaryType;\n    rollPrimaryImg;\n    rollPrimaryModsSchemaSet;\n    rollFactors;\n    get data() {\n        return {\n            rollPrimaryID: this.rollPrimaryID,\n            rollPrimaryName: this.rollPrimaryName,\n            rollPrimaryType: this.rollPrimaryType,\n            rollPrimaryImg: this.rollPrimaryImg,\n            rollPrimaryModsSchemaSet: this.rollPrimaryModsSchemaSet,\n            rollFactors: this.rollFactors\n        };\n    }\n    get isWorsePosition() {\n        if (this.rollPrimaryDoc) {\n            return this.rollPrimaryDoc.getFlag(\"eunos-blades\", \"isWorsePosition\") === true;\n        }\n        return false;\n    }\n    async applyHarm(amount, name) {\n        if (this.rollPrimaryDoc) {\n            return this.rollPrimaryDoc.applyHarm(amount, name);\n        }\n    }\n    async applyWorsePosition() {\n        if (this.rollPrimaryDoc) {\n            return this.rollPrimaryDoc.applyWorsePosition();\n        }\n    }\n    get hasSpecialArmor() {\n        return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.rollPrimaryDoc) && this.rollPrimaryDoc.isSpecialArmorAvailable;\n    }\n    get availableArmorCount() {\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.rollPrimaryDoc)) {\n            return this.rollPrimaryDoc.availableArmor.length;\n        }\n        else if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(this.rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert)) {\n            return this.rollPrimaryDoc.system.armor.max - this.rollPrimaryDoc.system.armor.value;\n        }\n        return 0;\n    }\n    async spendArmor(count) {\n        if (!this.rollPrimaryDoc) {\n            throw new Error(\"[BladesRollPrimary.spendArmor()] Cannot spend armor when rollPrimaryDoc is not defined.\");\n        }\n        if (count > this.availableArmorCount) {\n            throw new Error(`[BladesRollPrimary.spendArmor()] Cannot spend more armor (${count}) than ${this.rollPrimaryDoc?.name} has (${this.availableArmorCount}).`);\n        }\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.rollPrimaryDoc)) {\n            const armorToSpend = this.rollPrimaryDoc.availableArmor.slice(0, count);\n            const updateData = {};\n            if (armorToSpend.includes(\"Light Armor\")) {\n                updateData[\"system.armor.active.light\"] = true;\n                updateData[\"system.armor.checked.light\"] = true;\n            }\n            if (armorToSpend.includes(\"Heavy Armor\")) {\n                updateData[\"system.armor.active.heavy\"] = true;\n                updateData[\"system.armor.checked.heavy\"] = true;\n            }\n            await this.rollPrimaryDoc.update(updateData);\n        }\n        else if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(this.rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert)) {\n            await this.rollPrimaryDoc.update({ \"system.armor.value\": this.rollPrimaryDoc.system.armor.value + count });\n        }\n    }\n    constructor(...args) {\n        let primaryData = false;\n        let primaryDoc = false;\n        if (args[0] instanceof BladesRoll) {\n            this.rollInstance = args[0];\n            args.shift();\n        }\n        if (BladesRollPrimary.IsDoc(args[0])) {\n            primaryDoc = args[0];\n        }\n        else if (BladesRollPrimary.IsValidData(args[0])) {\n            primaryData = args[0];\n        }\n        else if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(args[0])) {\n            if (\"rollPrimaryID\" in args[0]) {\n                primaryDoc = BladesRollPrimary.GetDoc(args[0].rollPrimaryID);\n            }\n            else if (\"rollPrimaryName\" in args[0]) {\n                primaryDoc = BladesRollPrimary.GetDoc(args[0].rollPrimaryName);\n            }\n        }\n        if (primaryDoc && !BladesRollPrimary.IsValidData(primaryData)) {\n            primaryData = {\n                rollPrimaryID: primaryDoc.rollPrimaryID,\n                rollPrimaryName: primaryDoc.rollPrimaryName,\n                rollPrimaryType: primaryDoc.rollPrimaryType,\n                rollPrimaryImg: primaryDoc.rollPrimaryImg,\n                rollPrimaryModsSchemaSet: primaryDoc.rollPrimaryModsSchemaSet,\n                rollFactors: primaryDoc.rollFactors\n            };\n        }\n        if (!BladesRollPrimary.IsValidData(primaryData) && !BladesRollPrimary.IsDoc(primaryDoc) && this.rollInstance) {\n            primaryData = this.rollInstance.rollPrimary.data;\n        }\n        if (!BladesRollPrimary.IsValidData(primaryData)) {\n            throw new Error(`[BladesRoll.constructor] Failed to resolve primary data from provided arguments: ${JSON.stringify(args)}`);\n        }\n        const { rollPrimaryID, rollPrimaryName, rollPrimaryType, rollPrimaryImg, rollPrimaryModsSchemaSet, rollFactors } = primaryData;\n        this.rollPrimaryID = rollPrimaryID;\n        if (!rollPrimaryName) {\n            throw new Error(\"Must include a rollPrimaryName when constructing a BladesRollPrimary object.\");\n        }\n        if (!rollPrimaryImg) {\n            throw new Error(\"Must include a rollPrimaryImg when constructing a BladesRollPrimary object.\");\n        }\n        if (!rollPrimaryType) {\n            throw new Error(\"Must include a rollPrimaryType when constructing a BladesRollPrimary object.\");\n        }\n        if (!rollFactors) {\n            throw new Error(\"Must include a rollFactors when constructing a BladesRollPrimary object.\");\n        }\n        this.rollPrimaryName = rollPrimaryName;\n        this.rollPrimaryType = rollPrimaryType;\n        this.rollPrimaryImg = rollPrimaryImg;\n        this.rollFactors = rollFactors;\n        this.rollPrimaryModsSchemaSet = rollPrimaryModsSchemaSet ?? [];\n    }\n}\nclass BladesRollOpposition {\n    // #region Static Methods ~\n    static IsValidData(data) {\n        if (BladesRollOpposition.IsDoc(data)) {\n            return true;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data)\n            && typeof data.rollOppName === \"string\"\n            && typeof data.rollOppType === \"string\"\n            && typeof data.rollOppImg === \"string\"\n            && (!data.rollOppSubName || typeof data.rollOppSubName === \"string\")\n            && (!data.rollOppModsSchemaSet || Array.isArray(data.rollOppModsSchemaSet))\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data.rollFactors)\n            && (!data.rollOppID || typeof data.rollOppID === \"string\");\n    }\n    static GetDoc(docRef) {\n        let doc = docRef;\n        if (typeof docRef === \"string\") {\n            doc = game.actors.get(docRef)\n                ?? game.items.get(docRef)\n                ?? game.actors.getName(docRef)\n                ?? game.items.getName(docRef);\n        }\n        if (BladesRollOpposition.IsDoc(doc)) {\n            return doc;\n        }\n        return false;\n    }\n    static IsDoc(doc) {\n        return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.faction) || _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang);\n    }\n    static GetDataFromDoc(doc) {\n        return {\n            rollOppID: doc.id,\n            rollOppName: doc.name,\n            rollOppType: doc.type,\n            rollOppImg: doc.img,\n            rollOppModsSchemaSet: doc.rollOppModsSchemaSet,\n            rollFactors: doc.rollFactors\n        };\n    }\n    // #endregion\n    rollInstance;\n    rollOppID;\n    rollOppDoc;\n    rollOppName;\n    rollOppSubName;\n    rollOppType;\n    rollOppImg;\n    rollOppModsSchemaSet;\n    rollFactors;\n    // #region Constructor ~\n    constructor(rollInstance, { rollOppID, rollOppName, rollOppSubName, rollOppType, rollOppImg, rollOppModsSchemaSet, rollFactors } = {}) {\n        this.rollInstance = rollInstance;\n        // Attempt to fetch an associated BladesActor or BladesItem document\n        const doc = BladesRollOpposition.GetDoc(rollOppID ?? rollOppName);\n        if (doc) {\n            // Derive settings from valid Actor/Item document, unless explicitly set in constructor.\n            this.rollOppDoc = doc;\n            rollOppID = doc.rollOppID;\n            rollOppName ??= doc.rollOppName;\n            rollOppSubName ??= doc.rollOppSubName;\n            rollOppType ??= doc.rollOppType;\n            rollOppImg ??= doc.rollOppImg;\n            rollOppModsSchemaSet = [\n                ...rollOppModsSchemaSet ?? [],\n                ...doc.rollOppModsSchemaSet ?? []\n            ];\n            rollFactors = {\n                ...doc.rollFactors,\n                ...rollFactors ?? {}\n            };\n        }\n        // Confirm required settings\n        if (!rollOppName) {\n            throw new Error(\"Must include a rollOppName when constructing a BladesRollOpposition object.\");\n        }\n        if (!rollOppType) {\n            throw new Error(\"Must include a rollOppType when constructing a BladesRollOpposition object.\");\n        }\n        if (!rollFactors) {\n            throw new Error(\"Must include a rollFactors when constructing a BladesRollOpposition object.\");\n        }\n        // Initialize properties\n        this.rollOppID = rollOppID;\n        this.rollOppName = rollOppName;\n        this.rollOppSubName = rollOppSubName;\n        this.rollOppType = rollOppType;\n        this.rollOppImg = rollOppImg ?? \"\";\n        this.rollOppModsSchemaSet = rollOppModsSchemaSet ?? [];\n        this.rollFactors = rollFactors;\n    }\n    // #endregion\n    get data() {\n        return {\n            rollOppID: this.rollOppID,\n            rollOppName: this.rollOppName,\n            rollOppSubName: this.rollOppSubName,\n            rollOppType: this.rollOppType,\n            rollOppImg: this.rollOppImg,\n            rollOppModsSchemaSet: this.rollOppModsSchemaSet,\n            rollFactors: this.rollFactors\n        };\n    }\n    async updateRollFlags() {\n        if (!this.rollInstance) {\n            return;\n        }\n        await this.rollInstance.updateTarget(\"rollOppData\", this.data);\n        if (this.rollInstance.isRendered) {\n            socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.rollInstance.id);\n        }\n    }\n    refresh() {\n        if (!this.rollInstance) {\n            return;\n        }\n        const rollOppFlags = this.rollInstance.data.rollOppData;\n        if (rollOppFlags) {\n            this.rollOppID = rollOppFlags.rollOppID;\n            this.rollOppName = rollOppFlags.rollOppName;\n            this.rollOppSubName = rollOppFlags.rollOppSubName;\n            this.rollOppType = rollOppFlags.rollOppType;\n            this.rollOppImg = rollOppFlags.rollOppImg;\n            this.rollOppModsSchemaSet = rollOppFlags.rollOppModsSchemaSet ?? [];\n            this.rollFactors = rollOppFlags.rollFactors;\n        }\n        return this;\n    }\n}\nclass BladesRollParticipant {\n    // #region Static Methods ~\n    static IsValidData(data) {\n        if (BladesRollParticipant.IsDoc(data)) {\n            return true;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data)\n            && typeof data.rollParticipantName === \"string\"\n            && typeof data.rollParticipantType === \"string\"\n            && typeof data.rollParticipantIcon === \"string\"\n            && (!data.rollParticipantModsSchemaSet || Array.isArray(data.rollParticipantModsSchemaSet))\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(data.rollFactors)\n            && (!data.rollParticipantID || typeof data.rollParticipantID === \"string\")\n            && (!data.rollParticipantDoc || BladesRollParticipant.IsDoc(data.rollParticipantDoc));\n    }\n    static GetDoc(docRef) {\n        let doc = docRef;\n        if (typeof docRef === \"string\") {\n            doc = game.actors.get(docRef)\n                ?? game.items.get(docRef)\n                ?? game.actors.getName(docRef)\n                ?? game.items.getName(docRef);\n        }\n        if (BladesRollParticipant.IsDoc(doc)) {\n            return doc;\n        }\n        return false;\n    }\n    static IsDoc(doc) {\n        return _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc)\n            || _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gm_tracker);\n    }\n    // #endregion\n    rollInstance;\n    rollParticipantID;\n    rollParticipantDoc;\n    rollParticipantName;\n    rollParticipantType;\n    rollParticipantIcon;\n    rollParticipantSection;\n    rollParticipantSubSection;\n    rollParticipantModsSchemaSet; // As applied to MAIN roll when this participant involved\n    rollFactors;\n    constructor(rollInstance, section, subSection, rollParticipantDataOrDoc) {\n        this.rollInstance = rollInstance;\n        if (!section) {\n            throw new Error(\"Must include a rollParticipantSection when constructing a BladesRollParticipant object.\");\n        }\n        if (!subSection) {\n            throw new Error(\"Must include a rollParticipantSubSection when constructing a BladesRollParticipant object.\");\n        }\n        this.rollParticipantSection = section;\n        this.rollParticipantSubSection = subSection;\n        // Attempt to fetch an associated BladesActor or BladesItem document\n        const doc = BladesRollParticipant.IsDoc(rollParticipantDataOrDoc)\n            ? rollParticipantDataOrDoc\n            : BladesRollParticipant.GetDoc(rollParticipantDataOrDoc.rollParticipantID ?? rollParticipantDataOrDoc.rollParticipantName);\n        if (doc) {\n            rollParticipantDataOrDoc = doc;\n        }\n        // Confirm required settings\n        if (!rollParticipantDataOrDoc.rollParticipantName) {\n            throw new Error(\"Must include a rollParticipantName when constructing a BladesRollParticipant object.\");\n        }\n        if (!rollParticipantDataOrDoc.rollParticipantType) {\n            throw new Error(\"Must include a rollParticipantType when constructing a BladesRollParticipant object.\");\n        }\n        if (!rollParticipantDataOrDoc.rollFactors) {\n            throw new Error(\"Must include a rollFactors when constructing a BladesRollParticipant object.\");\n        }\n        // Initialize properties\n        this.rollParticipantID = rollParticipantDataOrDoc.rollParticipantID;\n        this.rollParticipantName = rollParticipantDataOrDoc.rollParticipantName;\n        this.rollParticipantType = rollParticipantDataOrDoc.rollParticipantType;\n        this.rollParticipantIcon = rollParticipantDataOrDoc.rollParticipantIcon ?? \"\";\n        this.rollParticipantModsSchemaSet = rollParticipantDataOrDoc.rollParticipantModsSchemaSet ?? [];\n        this.rollFactors = rollParticipantDataOrDoc.rollFactors;\n    }\n    // #endregion\n    get data() {\n        return {\n            rollParticipantID: this.rollParticipantID,\n            rollParticipantName: this.rollParticipantName,\n            rollParticipantType: this.rollParticipantType,\n            rollParticipantIcon: this.rollParticipantIcon,\n            rollParticipantModsSchemaSet: this.rollParticipantModsSchemaSet,\n            rollFactors: this.rollFactors\n        };\n    }\n    async updateRollFlags() {\n        await this.rollInstance.updateTarget(`rollParticipantData.${this.rollParticipantSection}.${this.rollParticipantSubSection}`, this.data);\n        if (this.rollInstance.isRendered) {\n            socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.rollInstance.id);\n        }\n    }\n    refresh() {\n        const rollParticipantFlagData = this.rollInstance.data.rollParticipantData?.[this.rollParticipantSection];\n        if (rollParticipantFlagData && this.rollParticipantSubSection in rollParticipantFlagData) {\n            const rollParticipantFlags = rollParticipantFlagData[this.rollParticipantSubSection];\n            if (rollParticipantFlags) {\n                this.rollParticipantID = rollParticipantFlags.rollParticipantID;\n                this.rollParticipantName = rollParticipantFlags.rollParticipantName;\n                this.rollParticipantType = rollParticipantFlags.rollParticipantType;\n                this.rollParticipantIcon = rollParticipantFlags.rollParticipantIcon;\n                this.rollParticipantModsSchemaSet = rollParticipantFlags.rollParticipantModsSchemaSet ?? [];\n                this.rollFactors = rollParticipantFlags.rollFactors;\n            }\n        }\n        return this;\n    }\n}\nclass BladesRoll extends _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"] {\n    static Debug = {\n        modWatch: false,\n        watchRollMod(name) {\n            if (typeof name === \"string\") {\n                BladesRoll.Debug.modWatch = new RegExp(name, \"g\");\n            }\n            else {\n                BladesRoll.Debug.modWatch = false;\n            }\n        }\n    };\n    // #region STATIC METHODS: INITIALIZATION & DEFAULTS ~\n    static Initialize() {\n        return loadTemplates([\n            \"systems/eunos-blades/templates/roll/partials/roll-collab-gm-number-line.hbs\",\n            \"systems/eunos-blades/templates/roll/partials/roll-collab-gm-select-doc.hbs\",\n            \"systems/eunos-blades/templates/roll/partials/roll-collab-gm-factor-control.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-action.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-action-gm.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-resistance.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-resistance-gm.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-fortune.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-fortune-gm.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-indulgevice.hbs\",\n            \"systems/eunos-blades/templates/roll/roll-collab-indulgevice-gm.hbs\"\n        ]);\n    }\n    static InitSockets() {\n        socketlib.system.register(\"constructRollCollab_SocketCall\", BladesRoll.constructRollCollab_SocketResponse.bind(BladesRoll));\n        socketlib.system.register(\"renderRollCollab_SocketCall\", BladesRoll.renderRollCollab_SocketResponse.bind(BladesRoll));\n        socketlib.system.register(\"closeRollCollab_SocketCall\", BladesRoll.closeRollCollab_SocketResponse.bind(BladesRoll));\n    }\n    static ParseConfigToData(data, parentRollData) {\n        const parentRollInst = game.eunoblades.Rolls.get(parentRollData.id);\n        if (!parentRollInst) {\n            throw new Error(`[BladesRoll.ParseConfigToData] No BladesRoll instance found with id ${parentRollData.id}.`);\n        }\n        if (data.rollPrimaryData instanceof BladesRollPrimary) {\n            data.rollPrimaryData = data.rollPrimaryData.data;\n        }\n        if (data.rollOppData instanceof BladesRollOpposition) {\n            data.rollOppData = data.rollOppData.data;\n        }\n        if (data.rollParticipantData) {\n            if (data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll]) {\n                Object.keys(data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll]).forEach((key) => {\n                    const thisParticipant = data.rollParticipantData?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll]?.[key];\n                    if (thisParticipant instanceof BladesRollParticipant) {\n                        data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll][key] = thisParticipant.data;\n                    }\n                });\n            }\n            if (data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position]) {\n                Object.keys(data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position]).forEach((key) => {\n                    const thisParticipant = data.rollParticipantData?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position]?.[key];\n                    if (thisParticipant instanceof BladesRollParticipant) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position][key] = thisParticipant.data;\n                    }\n                });\n            }\n            if (data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect]) {\n                Object.keys(data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect]).forEach((key) => {\n                    const thisParticipant = data.rollParticipantData?.[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect]?.[key];\n                    if (thisParticipant instanceof BladesRollParticipant) {\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                        data.rollParticipantData[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect][key] = thisParticipant.data;\n                    }\n                });\n            }\n        }\n        return super.ParseConfigToData(data);\n    }\n    static ApplySchemaDefaults(schemaData) {\n        // Ensure all properties of Schema are provided\n        if (!schemaData.rollType) {\n            throw new Error(\"Must include a rollType when constructing a BladesRoll object.\");\n        }\n        schemaData.rollPhase ??= _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.Collaboration;\n        schemaData.GMBoosts = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: 0,\n            ...schemaData.GMBoosts ?? {}\n        };\n        schemaData.GMOppBoosts = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: 0,\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: 0,\n            ...schemaData.GMOppBoosts ?? {}\n        };\n        schemaData.GMOverrides ??= {};\n        schemaData.userPermissions ??= {};\n        if (schemaData.rollPrimaryData instanceof BladesRollPrimary) {\n            schemaData.rollPrimaryData = schemaData.rollPrimaryData.data;\n        }\n        if (schemaData.rollOppData instanceof BladesRollOpposition) {\n            schemaData.rollOppData = schemaData.rollOppData.data;\n        }\n        return schemaData;\n    }\n    // static override get defaultOptions() {\n    //   return foundry.utils.mergeObject(super.defaultOptions, {\n    //     classes: [\"eunos-blades\", \"sheet\", \"roll-collab\", game.user.isGM ? \"gm-roll-collab\" : \"\"],\n    //     template: `systems/eunos-blades/templates/roll/roll-collab${game.user.isGM ? \"-gm\" : \"\"}.hbs`,\n    //     submitOnChange: true,\n    //     width: 500,\n    //     dragDrop: [\n    //       {dragSelector: null, dropSelector: \"[data-action='gm-drop-opposition'\"}\n    //     ]\n    //     // Height: 500\n    //   });\n    // }\n    static get DefaultRollModSchemaSet() {\n        /* Subclass overrides determine default roll mods. */\n        return [];\n    }\n    static GetDieClass(rollType, rollResult, dieVal, dieIndex) {\n        switch (rollType) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance: {\n                if (dieVal === 6 && dieIndex <= 1 && rollResult === -1) {\n                    return \"blades-die-critical\";\n                }\n                if (dieIndex === 0) {\n                    return \"blades-die-resistance\";\n                }\n                return \"blades-die-fail\";\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.IndulgeVice: {\n                if (dieIndex === 0) {\n                    return \"blades-die-indulge-vice\";\n                }\n                return \"blades-die-fail\";\n            }\n            default: break;\n        }\n        if (dieVal === 6 && dieIndex <= 1 && rollResult === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.critical) {\n            dieVal++;\n        }\n        return [\n            \"\",\n            \"blades-die-fail\",\n            \"blades-die-fail\",\n            \"blades-die-fail\",\n            \"blades-die-partial\",\n            \"blades-die-partial\",\n            \"blades-die-success\",\n            \"blades-die-critical\"\n        ][dieVal];\n    }\n    static GetDieImage(rollType, rollResult, dieVal, dieIndex, isGhost = false, isCritical = false) {\n        let imgPath = \"systems/eunos-blades/assets/dice/image/\";\n        if (isGhost) {\n            imgPath += \"ghost-\";\n        }\n        else if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.IndulgeVice].includes(rollType)) {\n            imgPath += \"grad-\";\n        }\n        imgPath += dieVal;\n        if (!isGhost && dieVal === 6 && dieIndex <= 1 && isCritical) {\n            imgPath += \"-crit\";\n        }\n        imgPath += \".webp\";\n        return imgPath;\n    }\n    static get Active() {\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLast(game.eunoblades.Rolls.filter((roll) => roll.isActive));\n    }\n    // #endregion\n    // #region STATIC METHODS: New Roll Creation ~\n    // static Current: Record<string, BladesRoll> = {};\n    // static _Active?: BladesRoll;\n    // static get Active(): BladesRoll | undefined {\n    //   if (BladesRoll._Active) {return BladesRoll._Active;}\n    //   if (U.objSize(BladesRoll.Current) > 0) {return U.getLast(Object.values(BladesRoll.Current));}\n    //   return undefined;\n    // }\n    // static set Active(val: BladesRoll | undefined) {\n    //   BladesRoll._Active = val;\n    // }\n    static GetUserPermissions(config) {\n        if (!config.rollPrimaryData) {\n            throw new Error(\"[BladesRoll.GetUserPermissions()] Missing rollPrimaryData.\");\n        }\n        // === ONE === GET USER IDS\n        // Get user ID of GM\n        const GMUserID = game.users.find((user) => user.isGM)?.id;\n        if (!GMUserID) {\n            throw new Error(\"[BladesRoll.GetUserPermissions()] No GM found!\");\n        }\n        // Get user IDs of players\n        const playerUserIDs = game.users\n            .filter((user) => _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(user.character) && !user.isGM && typeof user.id === \"string\")\n            .map((user) => user.id);\n        // Prepare user ID permissions object\n        const userIDs = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.GM]: [GMUserID],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary]: [],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Participant]: [],\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Observer]: []\n        };\n        // === TWO === DETERMINE PRIMARY USER(S)\n        // Check RollPrimaryDoc to determine how to assign primary users\n        const { rollPrimaryDoc } = (new BladesRollPrimary(config.rollPrimaryData));\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(rollPrimaryDoc)\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pullElement(playerUserIDs, rollPrimaryDoc.primaryUser?.id)) {\n            userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].push(rollPrimaryDoc.primaryUser?.id);\n        }\n        else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(rollPrimaryDoc)) {\n            userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].push(...playerUserIDs);\n        }\n        else if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert)) {\n            if (config.rollUserID === GMUserID) {\n                userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].push(...playerUserIDs);\n            }\n            else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(rollPrimaryDoc.parent)\n                && rollPrimaryDoc.parent.primaryUser?.id) {\n                userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].push(rollPrimaryDoc.parent.primaryUser.id);\n            }\n        }\n        else if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesGMTracker.IsType(rollPrimaryDoc)) {\n            userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].push(GMUserID);\n        }\n        // === THREE === DETERMINE ROLL PARTICIPANT USER(S)\n        // Check config.rollParticipantData to determine if roll starts with any participants\n        if (config.rollParticipantData) {\n            userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Participant].push(...getParticipantDocUserIDs(config.rollParticipantData, playerUserIDs));\n        }\n        // === FOUR === ASSIGN ROLL OBSERVERS\n        // Add remaining players as observers.\n        userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Observer] = playerUserIDs\n            .filter((uID) => !userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Participant].includes(uID));\n        // === FIVE === PARSE INTO {ID: PERMISSION} FORMAT\n        const userFlagData = {};\n        Object.entries(userIDs)\n            .forEach(([rollPermission, idsArray]) => {\n            for (const id of idsArray) {\n                userFlagData[id] = rollPermission;\n            }\n        });\n        return userFlagData;\n        /**\n         * Generates BladesRollParticipant documents from the provided schema data.\n         * @param {BladesRoll.RollParticipantDataSet} participantData\n         */\n        function getParticipantDocs(participantData) {\n            return Object.values(flattenObject(participantData))\n                .map((pData) => {\n                if (BladesRollParticipant.IsDoc(pData)) {\n                    return pData;\n                }\n                if (BladesRollParticipant.IsValidData(pData)) {\n                    if (typeof pData.rollParticipantID === \"string\") {\n                        const pDoc = game.actors.get(pData.rollParticipantID) ?? game.items.get(pData.rollParticipantID);\n                        if (BladesRollParticipant.IsDoc(pDoc)) {\n                            return pDoc;\n                        }\n                    }\n                }\n                // Throw an error with sufficient debug data if pData does not match any expected types\n                throw new Error(`[getParticipantDocs] Invalid participant data encountered. Data: ${JSON.stringify(pData)}, Expected: \"BladesRollParticipant or valid participant data\", Function Context: \"getParticipantDocs\", Participant Data: ${JSON.stringify(participantData)}`);\n            });\n        }\n        /**\n         * Returns the user ids of potential BladesRollParticipants defined in the provided data schema.\n         * @param {BladesRoll.RollParticipantDataSet} participantData\n         * @param {IDString[]} unassignedIDs\n         */\n        function getParticipantDocUserIDs(participantData, unassignedIDs) {\n            return getParticipantDocs(participantData)\n                .map((pDoc) => {\n                if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(pDoc) && typeof pDoc.primaryUser?.id === \"string\") {\n                    return pDoc.primaryUser.id;\n                }\n                else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(pDoc)\n                    || _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(pDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert)) {\n                    return unassignedIDs;\n                }\n                return null;\n            })\n                .flat()\n                .filter((pUser) => pUser !== null && !userIDs[_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary].includes(pUser));\n        }\n    }\n    static BuildLinkConfig(config) {\n        // Prepare partial target link config\n        const partialLinkConfig = {};\n        if (\"targetKey\" in config && config.targetKey) {\n            partialLinkConfig.targetKey = config.targetKey;\n        }\n        else if (\"targetFlagKey\" in config && config.targetFlagKey) {\n            partialLinkConfig.targetFlagKey = config.targetFlagKey;\n        }\n        if (\"target\" in config) {\n            if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocUUID(config.target)) {\n                partialLinkConfig.targetID = config.target;\n            }\n            else if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(config.target)) {\n                const confTarget = game.actors.get(config.target)\n                    ?? game.items.get(config.target)\n                    ?? game.messages.get(config.target)\n                    ?? game.users.get(config.target);\n                if (confTarget) {\n                    partialLinkConfig.targetID = confTarget.uuid;\n                }\n                else {\n                    throw new Error(`[BladesRoll.BuildLinkConfig] No target found with id ${config.target}.`);\n                }\n            }\n            else {\n                partialLinkConfig.targetID = config.target.uuid;\n            }\n        }\n        else if (\"targetID\" in config) {\n            partialLinkConfig.targetID = config.targetID;\n        }\n        else {\n            throw new Error(\"[BladesRoll.BuildLinkConfig] You must provide a valid target or targetID in the config object.\");\n        }\n        // If neither targetKey nor targetFlagKey are provided, set targetFlagKey to 'rollCollab'.\n        if (!partialLinkConfig.targetKey && !partialLinkConfig.targetFlagKey) {\n            partialLinkConfig.targetFlagKey = \"rollCollab\";\n        }\n        // Build target link config\n        if (_BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"].IsValidConfig(partialLinkConfig)) {\n            return _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"].BuildLinkConfig(partialLinkConfig);\n        }\n        throw new Error(\"[BladesRoll.BuildLinkConfig] Invalid link config.\");\n    }\n    /**\n     * Asynchronously creates a new instance of `BladesRoll` or its subclasses.\n     *\n     * This generic static method is designed to facilitate the creation of roll instances with\n     * configurations specific to the type of roll being created. It ensures that the correct type\n     * of roll instance is returned based on the class it's called on, allowing for a flexible and\n     * type-safe creation process that can be extended to subclasses of `BladesRoll`.\n     *\n     * @template C The class on which `New` is called. This class must extend `BladesRoll` and\n     * must be constructible with a configuration object that is either a `BladesRoll.Config` or\n     * a combination of `BladesTargetLink.Data` and a partial `BladesRoll.Schema`. This ensures\n     * that any subclass of `BladesRoll` can use this method to create instances of itself while\n     * applying any class-specific configurations or behaviors.\n     *\n     * @param {BladesRoll.Config} config The configuration object for creating a new roll instance.\n     * This configuration includes all necessary data to initialize the roll, such as user permissions,\n     * roll type, and any modifications or additional data required for the roll's operation.\n     *\n     * @returns {Promise<InstanceType<C>>} A promise that resolves to an instance of the class\n     * from which `New` was called. This allows for the dynamic creation of roll instances based\n     * on the subclass calling the method, ensuring that the returned instance is of the correct type.\n     *\n     * @example\n     * // Assuming `MyCustomRoll` is a subclass of `BladesRoll`\n     * MyCustomRoll.New(myConfig).then(instance => {\n     *   // `instance` is of type `MyCustomRoll`\n     * });\n     *\n     * @remarks\n     * - The method performs several key operations as part of the roll instance creation process:\n     *   1. Builds link configuration based on the provided config.\n     *   2. Prepares roll user flag data to determine permissions for different users.\n     *   3. Validates that a roll type is defined in the config, throwing an error if not.\n     *   4. Logs the roll data for debugging or auditing purposes.\n     *   5. Constructs and initializes the roll instance, including setting up roll modifications\n     *      and sending out socket calls to inform all users about the roll.\n     * - This method is central to the dynamic and flexible creation of roll instances within the\n     *   system, allowing for easy extension and customization in subclasses of `BladesRoll`.\n     */\n    static async New(config) {\n        // Build link config\n        const linkConfig = this.BuildLinkConfig(config);\n        // Prepare roll user flag data\n        config.userPermissions = this.GetUserPermissions(config);\n        // Ensure rollType is defined\n        if (!config.rollType) {\n            throw new Error(\"rollType must be defined in config\");\n        }\n        // Log the roll data\n        eLog.checkLog3(\"bladesRoll\", \"BladesRoll.NewRoll()\", { config });\n        // Construct and initialize the BladesRoll/BladesTargetLink instance\n        const rollInst = await this.Create({ ...config, ...linkConfig });\n        if (!rollInst.isInitPromiseResolved) {\n            eLog.checkLog3(\"bladesRoll\", \"BladesRoll Init Promise NOT Resolved After Awaiting Create\");\n            await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor(rollInst.initPromise);\n        }\n        else {\n            eLog.checkLog3(\"bladesRoll\", \"BladesRoll Init Promise Resolved After Awaiting Create\");\n        }\n        // Send out socket calls to all users to see the roll.\n        rollInst.constructRollCollab_SocketCall(rollInst.linkData);\n        return rollInst;\n    }\n    async initTargetLink() {\n        this.initialSchema.rollModsData = this.rollModsDataSet;\n        super.initTargetLink();\n    }\n    get rollModsSchemaSets() {\n        const compiledModSchemaSets = [];\n        // Add roll mods on rollPrimary\n        if (this.rollPrimary) {\n            compiledModSchemaSets.push(...this.rollPrimary.rollPrimaryModsSchemaSet\n                .filter((pSchema) => compiledModSchemaSets.every((mSchema) => mSchema.key !== pSchema.key)));\n        }\n        // Add roll mods on rollOpposition\n        if (this.rollOpposition?.rollOppModsSchemaSet) {\n            compiledModSchemaSets.push(...this.rollOpposition.rollOppModsSchemaSet\n                .filter((oSchema) => compiledModSchemaSets.every((mSchema) => mSchema.key !== oSchema.key)));\n        }\n        // Add default roll mods\n        compiledModSchemaSets.push(...this.constructor.DefaultRollModSchemaSet\n            .filter((dSchema) => compiledModSchemaSets.every((mSchema) => mSchema.key !== dSchema.key)));\n        // If this is a downtime action roll, add default downtime action roll mods\n        if (this.rollDowntimeAction) {\n            compiledModSchemaSets.push({\n                key: \"HelpFromFriend-positive-roll\",\n                name: \"Help From a Friend\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1>Help From a Friend</h1><p>Add <strong>+1d</strong> if you enlist the help of a friend or contact.</p>\"\n            });\n            if (this.rollDowntimeAction !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.IndulgeVice) {\n                compiledModSchemaSets.push({\n                    key: \"CanBuyResultLevel-positive-after\",\n                    name: \"Buying Result Level\",\n                    section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.after,\n                    base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn,\n                    posNeg: \"positive\",\n                    modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                    value: 0,\n                    effectKeys: [],\n                    tooltip: \"<h1>Buying Result Level</h1><p>After your roll, you can <strong>increase the result level</strong> by one for each <strong class=\\\"gold-bright\\\">Coin</strong> you spend.</p>\"\n                });\n            }\n            if (this.rollDowntimeAction === _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.AcquireAsset) {\n                compiledModSchemaSets.push({\n                    key: \"RepeatPurchase-positive-roll\",\n                    name: \"Repeat Purchase\",\n                    section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                    base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                    posNeg: \"positive\",\n                    modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                    value: 1,\n                    effectKeys: [],\n                    tooltip: \"<h1>Repeat Purchase Bonus</h1><p>Add <strong>+1d</strong> if you have previously acquired this asset or service with a <strong>Acquire Asset</strong> Downtime activity.</p>\"\n                }, {\n                    key: \"RestrictedItem-negative-after\",\n                    name: \"Restricted\",\n                    section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.after,\n                    base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                    posNeg: \"negative\",\n                    modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                    value: 0,\n                    effectKeys: [\"Cost-Heat2\"],\n                    tooltip: \"<h1>Restricted</h1><p>Whether contraband goods or dangerous materials, this <strong>Acquire Asset</strong> Downtime activity will add <strong class=\\\"red-bright\\\">+2 Heat</strong> to your crew.</p>\"\n                });\n            }\n        }\n        return compiledModSchemaSets;\n    }\n    get rollModsDataSet() {\n        const { linkData } = this;\n        const modLinkConfig = {\n            targetID: linkData.targetID,\n            isScopingById: true,\n            ...(\"targetKey\" in linkData\n                ? { targetKey: `${this.targetKeyPrefix}.rollModsData` }\n                : {}),\n            ...(\"targetFlagKey\" in linkData\n                ? { targetFlagKey: `${this.targetFlagKeyPrefix}.rollModsData` }\n                : {})\n        };\n        return Object.fromEntries(this.rollModsSchemaSets\n            .map((modSchema) => {\n            const modData = _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"].ParseConfigToData({\n                ...BladesRollMod.ApplySchemaDefaults(modSchema),\n                ...modLinkConfig\n            });\n            return [modData.id, modData];\n        }));\n    }\n    // #endregion\n    // #region SOCKET CALLS & RESPONSES ~\n    static GetRollSubClass(linkData) {\n        const targetLink = new _BladesTargetLink__WEBPACK_IMPORTED_MODULE_8__[\"default\"](linkData);\n        switch (targetLink.data.rollType) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action: return BladesActionRoll;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Fortune: {\n                if (targetLink.data.rollSubType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollSubType.Engagement) {\n                    return BladesEngagementRoll;\n                }\n                else if (targetLink.data.rollSubType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollSubType.Incarceration) {\n                    return BladesIncarcerationRoll;\n                }\n                return BladesFortuneRoll;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance: {\n                if (targetLink.data.isInlineResistanceRoll) {\n                    return BladesInlineResistanceRoll;\n                }\n                return BladesResistanceRoll;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.IndulgeVice: return BladesIndulgeViceRoll;\n        }\n    }\n    constructRollCollab_SocketCall(linkData) {\n        socketlib.system.executeForEveryone(\"constructRollCollab_SocketCall\", linkData);\n    }\n    static constructRollCollab_SocketResponse(linkData) {\n        const rollInst = new (this.GetRollSubClass(linkData))(linkData);\n        eLog.checkLog3(\"rollCollab\", \"constructRollCollab_SocketResponse()\", { params: { linkData }, rollInst });\n        this.renderRollCollab_SocketResponse(rollInst.id);\n    }\n    renderRollCollab_SocketCall() {\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n    static renderRollCollab_SocketResponse(id) {\n        const rollInst = game.eunoblades.Rolls.get(id);\n        if (!rollInst) {\n            throw new Error(`[BladesRoll.renderRollCollab_SocketResponse] No roll found with id ${id}.`);\n        }\n        rollInst.renderRollCollab();\n    }\n    closeRollCollab_Animation() {\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.blurRemove(this.elem$, { ignoreMargins: true });\n    }\n    async closeRollCollab_SocketCall() {\n        if (!game.user.isGM) {\n            return;\n        }\n        socketlib.system.executeForOthers(\"closeRollCollab_SocketCall\", this.id);\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor(this.closeRollCollab_Animation());\n    }\n    static closeRollCollab_SocketResponse(id) {\n        game.eunoblades.Rolls.get(id)?.closeRollCollab_Animation();\n    }\n    // #endregion\n    // #region *** CONSTRUCTOR *** ~\n    rollPermission;\n    _rollPrimary;\n    _rollOpposition;\n    _rollParticipants;\n    projectSelectOptions;\n    constructor(dataOrConfig) {\n        super(dataOrConfig);\n        this.rollPermission = this.data.userPermissions[game.user.id];\n        this._rollPrimary = new BladesRollPrimary(this, this.data.rollPrimaryData);\n        if (this.data.rollOppData) {\n            this._rollOpposition = new BladesRollOpposition(this, this.data.rollOppData);\n        }\n        else if (this.data.rollDowntimeAction === _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.LongTermProject) {\n            this.projectSelectOptions = Array.from(game.items)\n                .filter((item) => _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.project))\n                .map((project) => ({ value: project.id ?? \"\", display: project.name }));\n        }\n        if (this.data.rollParticipantData) {\n            this._rollParticipants = {};\n            for (const [rollSection, rollParticipantList] of Object.entries(this.data.rollParticipantData)) {\n                if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect]\n                    .includes(rollSection) && !_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isEmpty(rollParticipantList)) {\n                    const sectionParticipants = {};\n                    for (const [participantType, participantData] of Object.entries(rollParticipantList)) {\n                        sectionParticipants[participantType] = new BladesRollParticipant(this, rollSection, participantType, participantData);\n                    }\n                    this._rollParticipants[rollSection] = sectionParticipants;\n                }\n            }\n        }\n        game.eunoblades.Rolls.set(this.id, this);\n    }\n    // #endregion\n    // #region Roll Participation & User Permissions\n    async addRollParticipant(participantRef, rollSection, rollSubSection) {\n        if (!rollSubSection) {\n            /* Insert logic to determine from rollSection and number of existing Group_X members */\n            rollSubSection = \"Assist\";\n        }\n        const participantData = typeof participantRef === \"string\"\n            ? game.actors.get(participantRef)\n                ?? game.actors.getName(participantRef)\n                ?? game.items.get(participantRef)\n                ?? game.items.getName(participantRef)\n            : participantRef;\n        if (!BladesRollParticipant.IsValidData(participantData)) {\n            throw new Error(\"Bad data.\");\n        }\n        const rollParticipant = new BladesRollParticipant(this, rollSection, rollSubSection, participantData);\n        await rollParticipant.updateRollFlags();\n        if (this.isRendered) {\n            socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n        }\n    }\n    async removeRollParticipant(rollSection, rollSubSection) {\n        await this.updateTarget(`rollParticipantData.${rollSection}.${rollSubSection}`, null);\n    }\n    async updateUserPermission(_user, _permission) {\n        /* Force-render roll with new permissions */\n    }\n    // #endregion\n    // #region Basic User Flag Getters/Setters ~\n    // get data(): BladesRoll.FlagData {\n    //   if (!this.document.getFlag(C.SYSTEM_ID, \"rollCollab\")) {\n    //     throw new Error(\"[get flags()] No RollCollab Flags Found on User Document\");\n    //   }\n    //   return this.document.getFlag(C.SYSTEM_ID, \"rollCollab\") as BladesRoll.FlagData;\n    // }\n    get rollPrimary() {\n        return this._rollPrimary;\n    }\n    get rollPrimaryDoc() {\n        return this.rollPrimary.rollPrimaryDoc;\n    }\n    get rollOpposition() {\n        if (!this._rollOpposition && BladesRollOpposition.IsValidData(this.data.rollOppData)) {\n            this._rollOpposition = new BladesRollOpposition(this, this.data.rollOppData);\n        }\n        return this._rollOpposition?.refresh();\n    }\n    set rollOpposition(val) {\n        if (val === undefined) {\n            this._rollOpposition = undefined;\n        }\n        else {\n            this._rollOpposition = val;\n            val.updateRollFlags();\n        }\n    }\n    get rollClockKey() {\n        return this.data.rollClockKey\n            ? game.eunoblades.ClockKeys.get(this.data.rollClockKey)\n            : undefined;\n    }\n    set rollClockKey(val) {\n        this.updateTarget(\"rollClockKeyID\", val ?? null);\n    }\n    /**\n     * This method prepares the roll participant data.\n     * It iterates over the roll sections (roll, position, effect) and for each section,\n     * it creates a new BladesRollParticipant instance for each participant in that section.\n     * The created instances are stored in the rollParticipants object.\n     */\n    prepareRollParticipantData() {\n        const participantFlagData = this.data.rollParticipantData;\n        if (!participantFlagData) {\n            return;\n        }\n        const rollParticipants = {};\n        [\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect\n        ].forEach((rollSection) => {\n            const sectionFlagData = participantFlagData[rollSection];\n            if (sectionFlagData) {\n                const sectionParticipants = {};\n                Object.entries(sectionFlagData).forEach(([subSection, subSectionFlagData]) => {\n                    if (subSectionFlagData) {\n                        sectionParticipants[subSection] =\n                            new BladesRollParticipant(this, rollSection, subSection, subSectionFlagData);\n                    }\n                });\n                rollParticipants[rollSection] = sectionParticipants;\n            }\n        });\n        this._rollParticipants = rollParticipants;\n    }\n    get rollParticipants() {\n        return this._rollParticipants;\n    }\n    getRollParticipant(section, subSection) {\n        if (isParticipantSection(section) && isParticipantSubSection(subSection)) {\n            const sectionData = this.rollParticipants?.[section];\n            if (sectionData) {\n                return sectionData[subSection] ?? null;\n            }\n        }\n        return null;\n    }\n    get rollParticipantSelectOptions() {\n        const nonPrimaryPCs = _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.All\n            .filter((actor) => actor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.PC.ActivePC) && actor.id !== this.rollPrimary.rollPrimaryID)\n            .map((actor) => ({ value: actor.id, display: actor.name }));\n        return {\n            Assist: nonPrimaryPCs,\n            Setup: nonPrimaryPCs,\n            Group: nonPrimaryPCs\n        };\n    }\n    get rollType() { return this.data.rollType; }\n    get rollSubType() { return this.data.rollSubType; }\n    set rollSubType(val) {\n        this.updateTarget(\"rollSubType\", val ?? null);\n    }\n    get rollPhase() {\n        return this.data.rollPhase ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.Collaboration;\n    }\n    get rollDowntimeAction() { return this.data.rollDowntimeAction; }\n    get rollTrait() { return this.data.rollTrait; }\n    get rollTraitVerb() {\n        if (!this.rollTrait) {\n            return undefined;\n        }\n        if (!(this.rollTrait in _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ActionVerbs)) {\n            return undefined;\n        }\n        return _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ActionVerbs[this.rollTrait];\n    }\n    get rollTraitPastVerb() {\n        if (!this.rollTrait) {\n            return undefined;\n        }\n        if (!(this.rollTrait in _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ActionPastVerbs)) {\n            return undefined;\n        }\n        return _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ActionPastVerbs[this.rollTrait];\n    }\n    _rollTraitValOverride;\n    get rollTraitValOverride() { return this._rollTraitValOverride; }\n    set rollTraitValOverride(val) { this._rollTraitValOverride = val; }\n    get rollTraitData() {\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this.rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n            if (isAction(this.rollTrait)) {\n                return {\n                    name: this.rollTrait,\n                    value: this.rollTraitValOverride ?? this.rollPrimaryDoc.actions[this.rollTrait],\n                    max: this.rollTraitValOverride ?? this.rollPrimaryDoc.actions[this.rollTrait],\n                    pcTooltip: this.rollPrimaryDoc.rollTraitPCTooltipActions,\n                    gmTooltip: _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ActionTooltipsGM[this.rollTrait]\n                };\n            }\n            if (isAttribute(this.rollTrait)) {\n                return {\n                    name: this.rollTrait,\n                    value: this.rollTraitValOverride ?? this.rollPrimaryDoc.attributes[this.rollTrait],\n                    max: this.rollTraitValOverride ?? this.rollPrimaryDoc.attributes[this.rollTrait],\n                    pcTooltip: this.rollPrimaryDoc.rollTraitPCTooltipAttributes,\n                    gmTooltip: _core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].AttributeTooltips[this.rollTrait]\n                };\n            }\n        }\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(this.rollTrait)) {\n            return {\n                name: `+${this.rollTraitValOverride ?? this.rollTrait}`,\n                value: this.rollTraitValOverride ?? this.rollTrait,\n                max: this.rollTraitValOverride ?? this.rollTrait\n            };\n        }\n        if (isFactor(this.rollTrait)) {\n            return {\n                name: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(this.rollTrait),\n                value: this.rollTraitValOverride ?? this.rollPrimary.rollFactors[this.rollTrait]?.value ?? 0,\n                max: this.rollTraitValOverride ?? this.rollPrimary.rollFactors[this.rollTrait]?.max ?? 10\n            };\n        }\n        throw new Error(`[get rollTraitData] Invalid rollTrait: '${this.rollTrait}'`);\n    }\n    get rollTraitOptions() {\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this.rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)) {\n            if (isAction(this.rollTrait)) {\n                return Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait)\n                    .map((action) => ({\n                    name: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uCase(action),\n                    value: action\n                }));\n            }\n            if (isAttribute(this.rollTrait)) {\n                return Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.AttributeTrait)\n                    .map((attribute) => ({\n                    name: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uCase(attribute),\n                    value: attribute\n                }));\n            }\n        }\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(this.rollTrait)) {\n            return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n                .map((num) => ({\n                name: `+${num}`,\n                value: num\n            }));\n        }\n        if (isFactor(this.rollTrait)) {\n            return [];\n        }\n        throw new Error(`[get rollTraitOptions] Invalid rollTrait: '${this.rollTrait}'`);\n    }\n    get posEffectTrade() {\n        return this.data?.rollPosEffectTrade ?? false;\n    }\n    // getFlagVal<T>(flagKey?: string): T | undefined {\n    //   if (flagKey) {\n    //     return this.document.getFlag(C.SYSTEM_ID, `rollCollab.${flagKey}`.replace(/(rollCollab\\.)+/g, \"rollCollab.\")) as T | undefined;\n    //   }\n    //   return this.document.getFlag(C.SYSTEM_ID, \"rollCollab\") as T | undefined;\n    // }\n    // async setFlagVal(flagKey: string, flagVal: unknown, isRerendering = true) {\n    //   await this.document.setFlag(C.SYSTEM_ID, `rollCollab.${flagKey}`.replace(/(rollCollab\\.)+/g, \"rollCollab.\"), flagVal);\n    //   if (isRerendering) {\n    //     socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    //   }\n    // }\n    // async clearFlagVal(flagKey: string, isRerendering = true) {\n    //   await this.document.unsetFlag(C.SYSTEM_ID, `rollCollab.${flagKey}`.replace(/(rollCollab\\.)+/g, \"rollCollab.\"));\n    //   if (isRerendering) {\n    //     socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    //   }\n    // }\n    get initialPosition() {\n        return this.data.rollPositionInitial ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.risky;\n    }\n    set initialPosition(val) {\n        this.updateTarget(\"rollPositionInitial\", val ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.risky);\n    }\n    get initialEffect() {\n        return this.data.rollEffectInitial ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect.standard;\n    }\n    set initialEffect(val) {\n        this.updateTarget(\"rollEffectInitial\", val ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect.standard);\n    }\n    get isApplyingConsequences() {\n        if (this.rollType !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action) {\n            return false;\n        }\n        if (!this.rollResult) {\n            return false;\n        }\n        if (![_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail].includes(this.rollResult)) {\n            return false;\n        }\n        return true;\n    }\n    // Get rollConsequence() --> For resistance rolls.\n    get rollConsequence() {\n        const { consequence } = this.data.resistanceData ?? {};\n        if (!consequence?.id) {\n            return undefined;\n        }\n        return game.eunoblades.Consequences.get(consequence.id)\n            ?? new _BladesConsequence__WEBPACK_IMPORTED_MODULE_5__[\"default\"](consequence);\n    }\n    // #endregion\n    // #region GETTERS: DERIVED DATA ~\n    get rollPositionFinal() {\n        return Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position)[_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clampNum(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position).indexOf(this.initialPosition)\n            + this.getModsDelta(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position)\n            + (this.posEffectTrade === \"position\" ? 1 : 0)\n            + (this.posEffectTrade === \"effect\" ? -1 : 0), [0, 2])];\n    }\n    get rollEffectFinal() {\n        return Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect)[_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clampNum(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect).indexOf(this.initialEffect)\n            + this.getModsDelta(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect)\n            + (this.posEffectTrade === \"effect\" ? 1 : 0)\n            + (this.posEffectTrade === \"position\" ? -1 : 0), [0, 4])];\n    }\n    get rollResultDelta() {\n        return this.getModsDelta(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.result)\n            + (this.data?.GMBoosts.Result ?? 0)\n            + (this.tempGMBoosts.Result ?? 0);\n    }\n    get rollResultFinal() {\n        if (this.rollResult === false) {\n            return false;\n        }\n        if (this.rollResultDelta === 0) {\n            return this.rollResult;\n        }\n        switch (this.rollType) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action:\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Fortune: {\n                return Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult).toReversed()[_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clampNum(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult).toReversed().indexOf(this.rollResult)\n                    + this.rollResultDelta, [0, 3])];\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance: { // Return stress cost of resisting\n                if (this.isCritical) {\n                    return -1;\n                }\n                return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clampNum(6 - this.highestDieVal - this.rollResultDelta, [-1, Infinity]);\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.IndulgeVice: { // Return stress cleared from indulging\n                return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clampNum(this.highestDieVal + this.rollResultDelta, [0, Infinity]);\n            }\n        }\n        return false;\n    }\n    get finalDicePool() {\n        return Math.max(0, this.rollTraitData.value\n            + this.getModsDelta(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll)\n            + (this.data.GMBoosts.Dice ?? 0)\n            + (this.tempGMBoosts.Dice ?? 0));\n    }\n    get isRollingZero() {\n        return Math.max(0, this.rollTraitData.value\n            + this.getModsDelta(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll)\n            + (this.data.GMBoosts.Dice ?? 0)\n            + (this.tempGMBoosts.Dice ?? 0)) <= 0;\n    }\n    _roll;\n    get roll() {\n        this._roll ??= new Roll(`${this.isRollingZero ? 2 : this.finalDicePool}d6`, {});\n        return this._roll;\n    }\n    get rollFactors() {\n        const defaultFactors = {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: {\n                name: \"Tier\",\n                value: 0,\n                max: 0,\n                baseVal: 0,\n                display: \"?\",\n                isActive: false,\n                isPrimary: true,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: \"factor-gold\"\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: {\n                name: \"Quality\",\n                value: 0,\n                max: 0,\n                baseVal: 0,\n                display: \"?\",\n                isActive: false,\n                isPrimary: false,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: \"factor-gold\"\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: {\n                name: \"Scale\",\n                value: 0,\n                max: 0,\n                baseVal: 0,\n                display: \"?\",\n                isActive: false,\n                isPrimary: false,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: \"factor-gold\"\n            },\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: {\n                name: \"Magnitude\",\n                value: 0,\n                max: 0,\n                baseVal: 0,\n                display: \"?\",\n                isActive: false,\n                isPrimary: false,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: \"factor-gold\"\n            }\n        };\n        const mergedSourceFactors = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMerge(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMerge(defaultFactors, this.rollPrimary.rollFactors, { isMutatingOk: false }), this.data.rollFactorToggles.source, { isMutatingOk: false });\n        const mergedOppFactors = this.rollOpposition\n            ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMerge(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMerge(defaultFactors, this.rollOpposition.rollFactors, { isMutatingOk: false }), this.data.rollFactorToggles.opposition, { isMutatingOk: false })\n            : {};\n        return {\n            source: Object.fromEntries(Object.entries(mergedSourceFactors)\n                .map(([factor, factorData]) => {\n                factorData.value +=\n                    (this.data.GMBoosts[factor] ?? 0)\n                        + (this.tempGMBoosts[factor] ?? 0);\n                if (factor === _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier) {\n                    factorData.display = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(factorData.value);\n                }\n                else {\n                    factorData.display = `${factorData.value}`;\n                }\n                return [factor, factorData];\n            })),\n            opposition: Object.fromEntries(Object.entries(mergedOppFactors)\n                .map(([factor, factorData]) => {\n                factorData.value += this.data.GMOppBoosts[factor] ?? 0;\n                if (factor === _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier) {\n                    factorData.display = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(factorData.value);\n                }\n                else {\n                    factorData.display = `${factorData.value}`;\n                }\n                return [factor, factorData];\n            }))\n        };\n    }\n    // #endregion\n    // #region ROLL MODS: Getters & Update Method ~\n    initRollMods() {\n        // Reset override values previously enabled by rollmods\n        this.rollTraitValOverride = undefined;\n        this.rollFactorPenaltiesNegated = {};\n        this.tempGMBoosts = {};\n        // ESLINT DISABLE: Dev Code.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const initReport = {};\n        let initReportCount = 0;\n        const watchMod = (label) => {\n            if (BladesRoll.Debug.modWatch === false) {\n                return;\n            }\n            const reportLabel = `(${initReportCount}) == ${label}`;\n            const rollMod = this.rollMods\n                .find((mod) => BladesRoll.Debug.modWatch && BladesRoll.Debug.modWatch.exec(mod.name));\n            if (rollMod) {\n                initReport[`${reportLabel} : ${rollMod.status}`] = {\n                    inst: rollMod,\n                    data: { ...rollMod.data },\n                    sourceName: rollMod.sourceName,\n                    status: {\n                        ALL: rollMod.status,\n                        base: rollMod.baseStatus,\n                        held: rollMod.heldStatus,\n                        user: rollMod.userStatus\n                    },\n                    is: {\n                        active: rollMod.isActive,\n                        visible: rollMod.isVisible,\n                        conditional: rollMod.isConditional,\n                        inInactiveBlock: rollMod.isInInactiveBlock,\n                        isPush: rollMod.isPush,\n                        isBasicPush: rollMod.isBasicPush\n                    }\n                };\n            }\n            else {\n                initReport[reportLabel] = \"MOD NOT FOUND\";\n            }\n            initReportCount++;\n        };\n        watchMod(\"INITIAL\");\n        /* *** PASS ZERO: ROLLTYPE VALIDATION PASS *** */\n        this._rollMods = this.rollMods.filter((rollMod) => rollMod.isValidForRollType());\n        watchMod(\"ROLLTYPE VALIDATION\");\n        /* *** PASS ONE: DISABLE PASS *** */\n        // ... Conditional Status Pass\n        const conditionalDisablePass = this.rollMods.filter((rollMod) => !rollMod.setConditionalStatus());\n        watchMod(\"DISABLE - CONDITIONAL\");\n        // ... AutoReveal/AutoEnable Pass\n        const autoRevealDisablePass = conditionalDisablePass.filter((rollMod) => !rollMod.setAutoStatus());\n        watchMod(\"DISABLE - AUTO-REVEAL/ENABLE\");\n        // ... Payable Pass\n        autoRevealDisablePass.forEach((rollMod) => { rollMod.setPayableStatus(); });\n        watchMod(\"DISABLE - PAYABLE\");\n        /* *** PASS TWO: FORCE-ON PASS *** */\n        const parseForceOnKeys = (mod) => {\n            const holdKeys = mod.effectKeys.filter((key) => key.startsWith(\"ForceOn\"));\n            if (holdKeys.length === 0) {\n                return;\n            }\n            while (holdKeys.length) {\n                const thisTarget = holdKeys.pop()?.split(/-/)?.pop();\n                if (thisTarget === \"BestAction\") {\n                    if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.rollPrimaryDoc)) {\n                        this.rollTraitValOverride = Math.max(...Object.values(this.rollPrimaryDoc.actions));\n                    }\n                }\n                else {\n                    const [targetName, targetCat, targetPosNeg] = thisTarget?.split(/,/) ?? [];\n                    if (!targetName) {\n                        throw new Error(`No targetName found in thisTarget: ${thisTarget}.`);\n                    }\n                    let targetMod = this.getRollModByName(targetName)\n                        ?? this.getRollModByName(targetName, targetCat ?? mod.section);\n                    if (!targetMod && targetName === \"Push\") {\n                        [targetMod] = [\n                            ...this.getActiveBasicPushMods(targetCat ?? mod.section, \"negative\").filter((m) => m.status === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn),\n                            ...this.getActiveBasicPushMods(targetCat ?? mod.section, \"positive\").filter((m) => m.status === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn),\n                            ...this.getInactiveBasicPushMods(targetCat ?? mod.section, \"positive\").filter((m) => m.status === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff)\n                        ];\n                    }\n                    targetMod ??= this.getRollModByName(targetName, targetCat ?? mod.section, targetPosNeg ?? mod.posNeg);\n                    if (!targetMod) {\n                        throw new Error(`No mod found matching ${targetName}/${targetCat}/${targetPosNeg}`);\n                    }\n                    if (!targetMod.isActive) {\n                        targetMod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn;\n                        parseForceOnKeys(targetMod);\n                    }\n                    else {\n                        targetMod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn;\n                    }\n                }\n            }\n        };\n        this.getActiveRollMods().forEach((rollMod) => parseForceOnKeys(rollMod));\n        watchMod(\"FORCE-ON PASS\");\n        /* *** PASS THREE: PUSH-CHECK PASS *** */\n        // IF ROLL FORCED ...\n        if (this.isForcePushed()) {\n            // ... Force Off _ALL_ visible, inactive \"Is-Push\" mods.\n            this.getInactivePushMods()\n                .filter((mod) => !mod.isBasicPush)\n                .forEach((mod) => { mod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff; });\n            watchMod(\"PUSH-CHECK: FORCE-OFF IS-PUSH\");\n        }\n        // ... BY CATEGORY ...\n        [_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect].forEach((cat) => {\n            if (this.isPushed(cat)) {\n                // ... if pushed by positive mod, Force Off any visible Bargain\n                if (cat === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll && this.isPushed(cat, \"positive\")) {\n                    const bargainMod = this.getRollModByKey(\"Bargain-positive-roll\");\n                    if (bargainMod?.isVisible) {\n                        bargainMod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff;\n                    }\n                }\n                watchMod(\"PUSH-CHECK: FORCE OFF BARGAIN\");\n            }\n            else {\n                // Otherwise, hide all Is-Push mods\n                this.getInactivePushMods(cat)\n                    .filter((mod) => !mod.isBasicPush)\n                    .forEach((mod) => { mod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden; });\n                watchMod(\"PUSH-CHECK: HIDE IS-PUSH\");\n            }\n        });\n        /* *** PASS FOUR: Relevancy Pass *** */\n        this.getVisibleRollMods()\n            .forEach((mod) => { mod.setRelevancyStatus(); });\n        watchMod(\"RELEVANCY PASS\");\n        /* *** PASS FIVE: Overpayment Pass *** */\n        // ... If 'Cost-SpecialArmor' active, ForceOff other visible Cost-SpecialArmor mods\n        const activeArmorCostMod = this.getActiveRollMods().find((mod) => mod.effectKeys.includes(\"Cost-SpecialArmor\"));\n        if (activeArmorCostMod) {\n            this.getVisibleRollMods()\n                .filter((mod) => !mod.isActive && mod.effectKeys.includes(\"Cost-SpecialArmor\"))\n                .forEach((mod) => { mod.heldStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff; });\n            watchMod(\"OVERPAYMENT PASS\");\n        }\n        eLog.checkLog2(\"rollMods\", \"*** initRollMods() PASS ***\", initReport);\n    }\n    isTraitRelevant(trait) {\n        if (trait in _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor) {\n            const { source, opposition } = this.rollFactors;\n            return Boolean(trait in source && trait in opposition && source[trait]?.isActive);\n        }\n        return false;\n    }\n    get isParticipantRoll() {\n        return (this.rollType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Fortune && !game.user.isGM)\n            || (this.rollSubType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollSubType.GroupParticipant);\n    }\n    negatePushCost() {\n        const costlyPushMod = this.getActiveRollMods()\n            .find((mod) => mod.isPush && mod.stressCost > 0);\n        if (costlyPushMod) {\n            _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pullElement(costlyPushMod.effectKeys, (k) => k.startsWith(\"Cost-Stress\"));\n        }\n    }\n    rollFactorPenaltiesNegated = {};\n    negateFactorPenalty(factor) {\n        this.rollFactorPenaltiesNegated[factor] = true;\n    }\n    tempGMBoosts = {};\n    isPushed(cat, posNeg) { return this.getActiveBasicPushMods(cat, posNeg).length > 0; }\n    hasOpenPush(cat, posNeg) { return this.isPushed(cat) && this.getOpenPushMods(cat, posNeg).length > 0; }\n    isForcePushed(cat, posNeg) { return this.isPushed(cat) && this.getForcedPushMods(cat, posNeg).length > 0; }\n    get rollCosts() {\n        if (!this.isPushed) {\n            return 0;\n        }\n        const harmPush = this.getRollModByKey(\"Push-negative-roll\");\n        const rollPush = this.getRollModByKey(\"Push-positive-roll\");\n        const effectPush = this.getRollModByKey(\"Push-positive-effect\");\n        const negatePushCostMods = this.getActiveRollMods(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.after, \"positive\")\n            .filter((mod) => mod.effectKeys.includes(\"Negate-PushCost\"));\n        return ((harmPush?.isActive && harmPush?.stressCost) || 0)\n            + ((rollPush?.isActive && rollPush?.stressCost) || 0)\n            + ((effectPush?.isActive && effectPush?.stressCost) || 0)\n            - (negatePushCostMods.length * 2);\n    }\n    get rollCostData() {\n        return this.getActiveRollMods()\n            .map((rollMod) => rollMod.costs ?? [])\n            .flat();\n    }\n    getRollModByID(id) { return this.rollMods.find((rollMod) => rollMod.id === id); }\n    getRollModByName(name, cat, posNeg) {\n        const modMatches = this.rollMods.filter((rollMod) => {\n            if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(rollMod.name) !== _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(name)) {\n                return false;\n            }\n            if (cat && rollMod.section !== cat) {\n                return false;\n            }\n            if (posNeg && rollMod.posNeg !== posNeg) {\n                return false;\n            }\n            return true;\n        });\n        if (modMatches.length === 0) {\n            return undefined;\n        }\n        if (modMatches.length > 1) {\n            return undefined;\n        }\n        return modMatches[0];\n    }\n    getRollModByKey(key) { return this.rollMods.find((rollMod) => rollMod.data.key === key); }\n    getRollMods(cat, posNeg) {\n        return this.rollMods.filter((rollMod) => (!cat || rollMod.section === cat)\n            && (!posNeg || rollMod.posNeg === posNeg));\n    }\n    getVisibleRollMods(cat, posNeg) {\n        return this.getRollMods(cat, posNeg).filter((rollMod) => rollMod.isVisible);\n    }\n    getActiveRollMods(cat, posNeg) {\n        return this.getRollMods(cat, posNeg).filter((rollMod) => rollMod.isActive);\n    }\n    getVisibleInactiveRollMods(cat, posNeg) {\n        return this.getVisibleRollMods(cat, posNeg).filter((rollMod) => !rollMod.isActive);\n    }\n    getPushMods(cat, posNeg) {\n        return this.getRollMods(cat, posNeg).filter((rollMod) => rollMod.isPush);\n    }\n    getVisiblePushMods(cat, posNeg) {\n        return this.getPushMods(cat, posNeg).filter((rollMod) => rollMod.isVisible);\n    }\n    getActivePushMods(cat, posNeg) {\n        return this.getVisiblePushMods(cat, posNeg).filter((rollMod) => rollMod.isActive);\n    }\n    getActiveBasicPushMods(cat, posNeg) {\n        return this.getActivePushMods(cat, posNeg).filter((rollMod) => rollMod.isBasicPush);\n    }\n    getInactivePushMods(cat, posNeg) {\n        return this.getVisiblePushMods(cat, posNeg).filter((rollMod) => !rollMod.isActive);\n    }\n    getInactiveBasicPushMods(cat, posNeg) {\n        return this.getInactivePushMods(cat, posNeg).filter((rollMod) => rollMod.isBasicPush);\n    }\n    getForcedPushMods(cat, posNeg) {\n        return this.getActivePushMods(cat, posNeg)\n            .filter((rollMod) => rollMod.isBasicPush\n            && rollMod.status === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn);\n    }\n    getOpenPushMods(cat, posNeg) {\n        return this.getActivePushMods(cat, posNeg)\n            .filter((rollMod) => rollMod.isBasicPush\n            && rollMod.status === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn);\n    }\n    getModsDelta = (cat) => {\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sum([\n            ...this.getActiveRollMods(cat, \"positive\").map((mod) => mod.value),\n            ...this.getActiveRollMods(cat, \"negative\").map((mod) => -mod.value)\n        ]);\n    };\n    _rollMods;\n    /**\n     * Compare function for sorting roll mods.\n     * @param {BladesRollMod} modA First mod to compare.\n     * @param {BladesRollMod} modB Second mod to compare.\n     * @returns {number} - Comparison result.\n     */\n    compareMods(modA, modB) {\n        // Define the order of mod names for sorting\n        const modOrder = [\"Bargain\", \"Assist\", \"Setup\"];\n        // Check for basic push\n        if (modA.isBasicPush) {\n            return -1;\n        }\n        if (modB.isBasicPush) {\n            return 1;\n        }\n        // Check for active Bargain\n        if (modA.name === \"Bargain\" && modA.isActive) {\n            return -1;\n        }\n        if (modB.name === \"Bargain\" && modB.isActive) {\n            return 1;\n        }\n        // Check for push\n        if (modA.isPush) {\n            return -1;\n        }\n        if (modB.isPush) {\n            return 1;\n        }\n        // Check for mod name order\n        const modAIndex = modOrder.indexOf(modA.name);\n        const modBIndex = modOrder.indexOf(modB.name);\n        if (modAIndex !== -1 && modBIndex !== -1) {\n            return modAIndex - modBIndex;\n        }\n        // Default to alphabetical order\n        return modA.name.localeCompare(modB.name);\n    }\n    get rollMods() {\n        if (!this._rollMods) {\n            this._rollMods = Object.values(this.data.rollModsData).map((modData) => new BladesRollMod(modData, this));\n        }\n        return [...this._rollMods].sort((modA, modB) => this.compareMods(modA, modB));\n    }\n    // #endregion\n    // #region CONSEQUENCES: Getting, Accepting, Resisting\n    get consequences() {\n        const csqDataSet = this.data.consequenceData?.[this.rollPositionFinal]?.[this.rollResult];\n        if (csqDataSet) {\n            return Object.values(csqDataSet).map((csqData) => new _BladesConsequence__WEBPACK_IMPORTED_MODULE_5__[\"default\"](csqData));\n        }\n        return [];\n    }\n    getConsequenceByID(csqID) {\n        return this.consequences.find((csq) => csq.id === csqID) ?? false;\n    }\n    get acceptedConsequences() {\n        if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.AwaitingConsequences, _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.Complete].includes(this.rollPhase)) {\n            return this.consequences.filter((csq) => csq.isAccepted === true);\n        }\n        return [];\n    }\n    get unacceptedConsequences() {\n        if (this.rollPhase === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.AwaitingConsequences) {\n            return this.consequences.filter((csq) => csq.isAccepted !== true);\n        }\n        return [];\n    }\n    // #endregion\n    // #region *** ROLL COLLAB HTML INTERACTION *** ~\n    /**\n     * Retrieve the data for rendering the base RollCollab sheet.\n     * @returns {Promise<object>} The data which can be used to render the HTML of the sheet.\n     */\n    get context() {\n        this.initRollMods();\n        this.rollMods.forEach((rollMod) => rollMod.applyRollModEffectKeys());\n        return this.getTemplateContext();\n    }\n    /**\n     * Determines if the user is a game master.\n     * @returns {boolean} Whether the user is a GM.\n     */\n    getIsGM() {\n        return game.eunoblades.Tracker?.system.is_spoofing_player ? false : game.user.isGM;\n    }\n    /**\n     * Gets the roll costs.\n     * @returns {BladesRoll.CostData[]} The roll costs.\n     */\n    getRollCosts() {\n        return this.getActiveRollMods()\n            .map((rollMod) => rollMod.costs)\n            .flat()\n            .filter((costData) => costData !== undefined);\n    }\n    /**\n     * Constructs the sheet data.\n     * @param {boolean} isGM If the user is a GM.\n     * @param {BladesRoll.CostData[]} rollCosts The roll costs.\n     * @returns {BladesRoll.Context} The constructed sheet data.\n     */\n    getTemplateContext() {\n        const { data: rData, rollPrimary, rollTraitData, rollTraitOptions, rollClockKey, finalDicePool, rollPositionFinal, rollEffectFinal, rollResultDelta, rollResultFinal, rollMods, rollFactors } = this;\n        if (!rollPrimary) {\n            throw new Error(\"A primary roll source is required for BladesRoll.\");\n        }\n        const baseData = {\n            ...this.data,\n            cssClass: \"roll-collab\",\n            isGM: this.isGM,\n            system: this.rollPrimaryDoc?.system,\n            rollMods,\n            rollPrimary,\n            rollTraitData,\n            rollTraitOptions,\n            diceTotal: finalDicePool,\n            rollOpposition: this.rollOpposition,\n            rollParticipants: this.rollParticipants,\n            rollParticipantOptions: this.rollParticipantSelectOptions,\n            rollEffects: Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect),\n            rollTraitValOverride: this.rollTraitValOverride,\n            rollFactorPenaltiesNegated: this.rollFactorPenaltiesNegated,\n            posRollMods: Object.fromEntries(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection)\n                .map((cat) => [cat, this.getRollMods(cat, \"positive\")])),\n            negRollMods: Object.fromEntries(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection)\n                .map((cat) => [cat, this.getRollMods(cat, \"negative\")])),\n            hasInactiveConditionals: this.calculateHasInactiveConditionalsData(),\n            rollFactors,\n            ...this.calculateOddsHTML(finalDicePool, rollResultDelta)\n        };\n        const GMBoostsData = this.calculateGMBoostsData(rData);\n        const positionEffectTradeData = this.calculatePositionEffectTradeData();\n        const stressCostDataSet = this.getRollCosts()\n            .filter((costData) => costData.costType === \"Stress\")\n            .map((costData) => [costData.label, costData.costAmount]);\n        const availableArmor = [];\n        if (this.rollPrimaryDoc instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC) {\n            availableArmor.push(...this.rollPrimaryDoc.availableArmor);\n        }\n        else if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.IsType(this.rollPrimaryDoc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert)) {\n            // Gang or Expert Cohort\n            for (let index = 0; index < this.rollPrimaryDoc.system.armor.value; index++) {\n                availableArmor.push(\"Armor\");\n            }\n        }\n        const armorCostDataSet = this.getRollCosts()\n            .filter((costData) => costData.costType === \"Armor\")\n            .map((costData, index) => [costData.label, availableArmor[index]])\n            .filter(([_label, armorType]) => armorType !== undefined);\n        const specialArmorCostDataSet = this.getRollCosts()\n            .filter((costData) => costData.costType === \"SpecialArmor\")\n            .map((costData) => costData.label);\n        const userPermission = baseData.userPermissions[game.user.id] ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Observer;\n        // const downtimeData = this.processDowntimeActions();\n        return {\n            ...baseData,\n            rollPrimary: this.rollPrimary,\n            rollPositionFinal,\n            rollEffectFinal,\n            rollResultFinal,\n            rollPositions: Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Position),\n            rollEffects: Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect),\n            rollResultDelta,\n            isAffectingResult: rollResultDelta !== 0\n                || this.getVisibleRollMods(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.result).length > 0\n                || (this.isGM && this.getRollMods(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.result).length > 0),\n            isAffectingAfter: this.getVisibleRollMods(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.after).length > 0\n                || (this.isGM && this.getRollMods(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.after).length > 0),\n            ...GMBoostsData,\n            ...positionEffectTradeData,\n            rollClockKey: this.rollClockKey,\n            totalStressCost: stressCostDataSet.reduce((acc, [_label, amount]) => acc + amount, 0),\n            totalArmorCost: armorCostDataSet.length,\n            stressCosts: stressCostDataSet.length > 0\n                ? Object.fromEntries(stressCostDataSet)\n                : undefined,\n            armorCosts: armorCostDataSet.length > 0\n                ? Object.fromEntries(armorCostDataSet)\n                : undefined,\n            specArmorCost: specialArmorCostDataSet[0],\n            userPermission,\n            editable: userPermission === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.Primary || userPermission === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPermissions.GM,\n            gamePhase: game.eunoblades.Tracker.phase\n        };\n    }\n    // type BladesSelectOption<displayType, valueType = string> = {\n    //   value: valueType,\n    //   display: displayType\n    // };\n    // protected processDowntimeActions() {\n    //   const downtimeData: Record<string,any>;\n    //   if (BladesActor.IsType(this.rollPrimaryDoc, BladesActorType.pc)) {\n    //     downtimeData.canDoDowntimeActions = true;\n    //     downtimeData.downtimeActionsRemaining = this.rollPrimaryDoc.remainingDowntimeActions;\n    //     const availableDowntimeActions: DowntimeAction[] = [];\n    //     if (this.rollType === RollType.Action) {\n    //       availableDowntimeActions.push(...[\n    //         DowntimeAction.AcquireAsset,\n    //         DowntimeAction.LongTermProject,\n    //         DowntimeAction.Recover,\n    //         DowntimeAction.ReduceHeat\n    //       ]);\n    //     } else if (this.rollType === RollType.Fortune) {\n    //       availableDowntimeActions.push(...[\n    //         DowntimeAction.\n    //       ])\n    //     }\n    //     downtimeData.downtimeActionOptions =\n    //   downtimeActionOptions?: Array<BladesSelectOption<string, DowntimeAction>\n    // }\n    calculateGMBoostsData(data) {\n        return {\n            GMBoosts: {\n                Dice: data.GMBoosts.Dice ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: data.GMBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: data.GMBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: data.GMBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: data.GMBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude] ?? 0,\n                Result: data.GMBoosts.Result ?? 0\n            },\n            GMOppBoosts: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: data.GMOppBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: data.GMOppBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: data.GMOppBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale] ?? 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: data.GMOppBoosts[_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude] ?? 0\n            }\n        };\n    }\n    calculateOddsHTML(diceTotal, rollResultDelta) {\n        if (this.rollType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Resistance) {\n            return this.calculateOddsHTML_Resistance(diceTotal);\n        }\n        return this.calculateOddsHTML_Standard(diceTotal, rollResultDelta);\n    }\n    /**\n     * Calculate odds starting & ending HTML based on given dice total.\n     * @param {number} diceTotal Total number of dice.\n     * @param {number} rollResultDelta\n     * @returns {{oddsHTMLStart: string, oddsHTMLStop: string}} Opening & Closing HTML for odds bar display\n     */\n    calculateOddsHTML_Standard(diceTotal, rollResultDelta) {\n        const oddsColors = {\n            crit: \"var(--blades-gold)\",\n            success: \"var(--blades-white-bright)\",\n            partial: \"var(--blades-grey)\",\n            fail: \"var(--blades-black-dark)\"\n        };\n        const odds = { ..._core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DiceOddsStandard[diceTotal] };\n        if (rollResultDelta < 0) {\n            for (let i = rollResultDelta; i < 0; i++) {\n                oddsColors.crit = oddsColors.success;\n                oddsColors.success = oddsColors.partial;\n                oddsColors.partial = oddsColors.fail;\n            }\n        }\n        else if (rollResultDelta > 0) {\n            for (let i = 0; i < rollResultDelta; i++) {\n                oddsColors.fail = oddsColors.partial;\n                oddsColors.partial = oddsColors.success;\n                oddsColors.success = oddsColors.crit;\n            }\n        }\n        const resultElements = [];\n        Object.entries(odds).reverse().forEach(([result, chance]) => {\n            if (chance === 0) {\n                return;\n            }\n            resultElements.push(`<div class=\"odds-section\" style=\"height: 100%; width: ${chance}%; background: ${oddsColors[result]};\">&nbsp;</div>`);\n        });\n        return {\n            oddsHTMLStart: [\n                \"<div class=\\\"roll-odds-section-container\\\">\",\n                ...resultElements\n            ].join(\"\\n\"),\n            oddsHTMLStop: \"</div>\"\n        };\n    }\n    /**\n     * Calculate odds starting & ending HTML based on given dice total.\n     * @param {number} diceTotal Total number of dice.\n     * @returns {{oddsHTMLStart: string, oddsHTMLStop: string}} Opening & Closing HTML for odds bar display\n     */\n    calculateOddsHTML_Resistance(diceTotal) {\n        // Const oddsColors = [\n        //   \"var(--blades-gold)\", // -1\n        //   \"var(--blades-white)\", // 0\n        //   \"var(--blades-red-bright)\", // 1\n        //   \"var(--blades-red-dark)\", // 2\n        //   \"var(--blades-red-bright)\", // 3\n        //   \"var(--blades-red-dark)\", // 4\n        //   \"var(--blades-red-bright)\" // 5\n        // ].reverse();\n        const oddsColors = [\n            \"var(--blades-gold)\", // -1\n            \"var(--blades-white)\", // 0\n            \"var(--blades-red)\", // 1\n            \"var(--blades-red)\", // 2\n            \"var(--blades-red)\", // 3\n            \"var(--blades-red)\", // 4\n            \"var(--blades-red)\" // 5\n        ].reverse();\n        const oddsFilters = [\n            \"none\",\n            \"none\",\n            \"brightness(0.2)\",\n            \"brightness(0.4)\",\n            \"brightness(0.6)\",\n            \"brightness(0.8)\",\n            \"none\"\n        ].reverse();\n        const odds = [..._core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DiceOddsResistance[diceTotal]].reverse();\n        const resultElements = [];\n        for (let index = 0; index < odds.length; index++) {\n            const chance = odds[index];\n            if (chance > 0) {\n                const color = oddsColors[index];\n                const filter = oddsFilters[index];\n                resultElements.push(...[\n                    `<div class=\"odds-section odds-section-stress\" style=\"height: 100%; width: ${chance}%; background: ${color}; filter: ${filter};\">&nbsp;</div>`\n                ]);\n            }\n        }\n        return {\n            oddsHTMLStart: [\n                \"<div class=\\\"roll-odds-section-container\\\">\",\n                ...resultElements\n            ].join(\"\\n\"),\n            oddsHTMLStop: \"</div>\"\n        };\n    }\n    /**\n     * Calculate data for position and effect trade.\n     * @returns {{canTradePosition: boolean, canTradeEffect: boolean}}\n     */\n    calculatePositionEffectTradeData() {\n        const canTradePosition = this.posEffectTrade === \"position\" || (this.posEffectTrade === false\n            && this.rollPositionFinal !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.desperate\n            && this.rollEffectFinal !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect.extreme);\n        const canTradeEffect = this.posEffectTrade === \"effect\" || (this.posEffectTrade === false\n            && this.rollPositionFinal !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.controlled\n            && this.rollEffectFinal !== _core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect.zero);\n        return { canTradePosition, canTradeEffect };\n    }\n    /**\n     * Calculate data on whether there are any inactive conditionals.\n     * @returns {Record<RollModSection, boolean>} - Data on inactive conditionals.\n     */\n    calculateHasInactiveConditionalsData() {\n        const hasInactive = {};\n        for (const section of Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection)) {\n            hasInactive[section] = this.getRollMods(section).filter((mod) => mod.isInInactiveBlock).length > 0;\n        }\n        return hasInactive;\n    }\n    // #endregion\n    // #region *** EVALUATING ROLL *** ~\n    // #region DICE ~\n    _dieVals;\n    get dieVals() {\n        return this.roll.terms[0].results\n            .map((result) => result.result)\n            .sort()\n            .reverse();\n        // return this._dieVals;\n    }\n    // Accounts for rolling zero dice by removing highest.\n    get finalDieVals() {\n        return this.isRollingZero ? this.dieVals.slice(1) : this.dieVals;\n    }\n    get finalDiceData() {\n        eLog.checkLog3(\"rollCollab\", \"[get finalDiceData()]\", { roll: this, dieVals: this.dieVals });\n        const dieVals = [...this.dieVals];\n        const ghostNum = this.isRollingZero ? dieVals.shift() : null;\n        const isCritical = dieVals.filter((val) => val === 6).length >= 2;\n        const diceData = dieVals.map((val, i) => ({\n            value: val,\n            dieClass: BladesRoll.GetDieClass(this.rollType, this.rollResult, val, i),\n            dieImage: BladesRoll.GetDieImage(this.rollType, this.rollResult, val, i, false, isCritical)\n        }));\n        if (ghostNum) {\n            diceData.push({\n                value: ghostNum,\n                dieClass: \"blades-die-ghost\",\n                dieImage: BladesRoll.GetDieImage(this.rollType, this.rollResult, ghostNum, diceData.length, true, false)\n            });\n        }\n        return diceData;\n    }\n    // get dieValsHTML(): string {\n    //   eLog.checkLog3(\"rollCollab\", \"[get dieValsHTML()]\", {roll: this, dieVals: this.dieVals});\n    //   const dieVals = [...this.dieVals];\n    //   const ghostNum = this.isRollingZero ? dieVals.shift() : null;\n    //   const isCritical = dieVals.filter((val) => val === 6).length >= 2;\n    //   const diceData = dieVals.map((val, i) => ({\n    //     value: val,\n    //     dieClass: BladesRoll.GetDieClass(this.rollType, this.rollResult, val, i),\n    //     dieImage: BladesRoll.GetDieImage(this.rollType, this.rollResult, val, i, false, isCritical)\n    //   }));\n    //   if (ghostNum) {\n    //     diceData.push({\n    //       value: ghostNum,\n    //       dieClass: \"blades-die-ghost\",\n    //       dieImage: BladesRoll.GetDieImage(this.rollType, this.rollResult, ghostNum, diceData.length, true, false)\n    //     });\n    //   }\n    //   return [\n    //     ...dieVals.map((val, i) => `<span class='blades-die ${dieClass} blades-die-${value}'><img src='${dieImage}' /></span>`),\n    //     ghostNum ? `<span class='blades-die blades-die-ghost blades-die-${ghostNum}'><img src='${this.getDieImage(ghostNum, 0, true)}' /></span>` : null\n    //   ]\n    //     .filter((val): val is string => typeof val === \"string\")\n    //     .join(\"\");\n    // }\n    // #endregion\n    // #region RESULT GETTERS ~\n    get isCritical() {\n        return this.finalDieVals.filter((val) => val === 6).length >= 2;\n    }\n    get isSuccess() {\n        return Boolean(!this.isCritical && this.finalDieVals.find((val) => val === 6));\n    }\n    get isPartial() {\n        return Boolean(!this.isCritical && !this.isSuccess && this.finalDieVals.find((val) => val && val >= 4));\n    }\n    get isFail() {\n        return !this.isCritical && !this.isSuccess && !this.isPartial;\n    }\n    get highestDieVal() {\n        return this.finalDieVals[0];\n    }\n    get rollResult() {\n        /* Subclass overrides determine how roll result is communicated. */\n        throw new Error(\"[BladesRoll.rollResult] Unimplemented by Subclass.\");\n    }\n    // #endregion\n    get isResolved() { return this.roll.total !== undefined; }\n    async evaluateRoll() {\n        // If this command is called on an already-resolved roll, close the roll collab element and return.\n        if (this.isResolved) {\n            this.closeRollCollab_Animation();\n            return this.data;\n        }\n        this.closeRollCollab_SocketCall();\n        eLog.checkLog3(\"rollCollab\", \"[resolveRoll()] Before Evaluation\", { roll: this, rollData: { ...this.data } });\n        await this.roll.evaluate({ async: true });\n        return await this.updateTargetData({\n            ...this.data,\n            rollPositionFinal: this.rollPositionFinal,\n            rollEffectFinal: this.rollEffectFinal,\n            rollResult: this.rollResult,\n            rollTraitVerb: this.rollTraitVerb,\n            rollTraitPastVerb: this.rollTraitPastVerb,\n            finalDiceData: this.finalDiceData,\n            rollPhase: this.isApplyingConsequences\n                ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.AwaitingConsequences\n                : _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollPhase.Complete\n        });\n    }\n    async resolveRollResult() {\n        /* Subclass overrides determine how result affects roll participants */\n        throw new Error(\"[BladesRoll.resolveRollResult] Unimplemented by Subclass.\");\n    }\n    async outputRollToChat() {\n        await _BladesChat__WEBPACK_IMPORTED_MODULE_7__[\"default\"].create({\n            speaker: this.getSpeaker(_BladesChat__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getSpeaker()),\n            content: await renderTemplate(this.chatTemplate, this.data),\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            flags: {\n                \"eunos-blades\": { rollData: this.data }\n            }\n        });\n    }\n    async resolveRoll() {\n        await this.evaluateRoll();\n        this.resolveRollResult();\n        await this.outputRollToChat();\n    }\n    // #endregion\n    // #region *** INTERFACING WITH BLADESCHAT ***\n    getSpeaker(chatSpeaker) {\n        // Compare against rollPrimary and modify accordingly.\n        const { rollPrimaryID, rollPrimaryName, rollPrimaryType, rollPrimaryDoc } = this.rollPrimary;\n        chatSpeaker.alias = rollPrimaryName;\n        if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.cohort_expert].includes(rollPrimaryType)) {\n            chatSpeaker.actor = rollPrimaryDoc?.parent?.id ?? chatSpeaker.actor;\n            if (rollPrimaryDoc?.parent instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC) {\n                chatSpeaker.alias = `${chatSpeaker.alias} (${rollPrimaryDoc.parent.name})`;\n            }\n        }\n        else if ([_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gm_tracker, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.score].includes(rollPrimaryType)) {\n            chatSpeaker.actor = null;\n            chatSpeaker.alias = \"The Gamemaster\";\n        }\n        else if (rollPrimaryID) {\n            chatSpeaker.actor = rollPrimaryID;\n        }\n        // chatSpeaker.alias = `${chatSpeaker.alias} Rolls ...`;\n        return chatSpeaker;\n    }\n    // #endregion\n    // #region *** ROLL COLLAB HTML ELEMENT ***\n    _elem$;\n    _overlayPosition = { x: 200, y: 200 };\n    get overlayPosition() { return this._overlayPosition; }\n    set overlayPosition(val) { this._overlayPosition = val; }\n    get elem$() {\n        if (this._elem$) {\n            return this._elem$;\n        }\n        const elem$ = $(`#${this.id}`);\n        if (elem$.length) {\n            this._elem$ = elem$;\n        }\n        else {\n            this._elem$ = $(`<div id=\"${this.id}\" class=\"app window-app ${_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID} sheet roll-collab${game.user.isGM ? \" gm-roll-collab\" : \"\"}\"></div>`).appendTo(\"body\");\n            this._elem$.css({\n                left: `${this.overlayPosition.x}px`,\n                top: `${this.overlayPosition.y}px`\n            });\n        }\n        return this._elem$;\n    }\n    async renderRollCollab() {\n        this.prepareRollParticipantData();\n        const html = await renderTemplate(this.collabTemplate, this.context);\n        this.elem$.html(html);\n        this.activateListeners();\n    }\n    get isRendered() {\n        return Boolean(this._elem$?.length);\n    }\n    get collabTemplate() {\n        /* Subclass overrides determine template against which data is parsed */\n        throw new Error(\"[BladesRoll.collabTemplate] Unimplemented by Subclass.\");\n    }\n    get chatTemplate() {\n        /* Subclass overrides determine template against which data is parsed */\n        throw new Error(\"[BladesRoll.chatTemplate] Unimplemented by Subclass.\");\n    }\n    // #region LISTENER FUNCTIONS ~\n    // async _handleConsequenceClick(event: ClickEvent) {\n    //   const clickTarget$ = $(event.currentTarget);\n    //   const csqParent$ = clickTarget$.closest(\".comp.consequence-display-container\");\n    //   const csqID = csqParent$.data(\"csq-id\");\n    //   const chatElem$ = csqParent$.closest(\".blades-roll\");\n    //   const chatMessage$ = chatElem$.closest(\".chat-message\");\n    //   const chatID = chatMessage$.data(\"messageId\") as IDString;\n    //   const chatMessage = game.messages.get(chatID);\n    //   if (!chatMessage) {return;}\n    //   const csqs = await BladesConsequence.GetFromChatMessage(chatMessage);\n    //   const thisCsq = csqs.find((csq) => csq.id === csqID);\n    //   if (!thisCsq) {return;}\n    //   switch (clickTarget$.data(\"action\")) {\n    //     case \"accept-consequence\": return thisCsq.resolveAccept();\n    //     case \"resist-consequence\": return thisCsq.resistConsequence();\n    //     case \"armor-consequence\": return thisCsq.resistArmorConsequence();\n    //     case \"special-consequence\": return thisCsq.resistSpecialArmorConsequence();\n    //   }\n    //   return undefined as never;\n    // }\n    _toggleRollModClick(event) {\n        event.preventDefault();\n        const elem$ = $(event.currentTarget);\n        const id = elem$.data(\"id\");\n        const rollMod = this.getRollModByID(id);\n        if (!rollMod) {\n            throw new Error(`Unable to find roll mod with id '${id}'`);\n        }\n        rollMod.isRerendering = true;\n        switch (rollMod.status) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden:\n                rollMod.userStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff;\n                break;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOff:\n                rollMod.userStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff;\n                break;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff:\n                rollMod.userStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn;\n                break;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOn:\n                rollMod.userStatus = game.user.isGM\n                    ? _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn\n                    : _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff;\n                break;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn:\n                rollMod.userStatus = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden;\n                break;\n            default: throw new Error(`Unrecognized RollModStatus: ${rollMod.status}`);\n        }\n        rollMod.isRerendering = false;\n    }\n    /**\n     * Handles setting of rollMod status via GM pop-out controls\n     * @param {ClickEvent} event JQuery click event sent to listener.\n     */\n    _gmControlSet(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const id = elem$.data(\"id\");\n        const status = elem$.data(\"status\");\n        if (!isModStatus(status) && status !== \"Reset\") {\n            return;\n        }\n        const rollMod = this.getRollModByID(id);\n        if (rollMod) {\n            rollMod.userStatus = status === \"Reset\" ? undefined : status;\n        }\n    }\n    /**\n     * Handles setting values via GM number line (e.g. roll factor boosts/modifications).\n     * @param {ClickEvent} event JQuery click event sent to listener.\n     */\n    async _gmControlSetTargetToValue(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const target = elem$.data(\"target\").replace(/flags\\.eunos-blades\\./, \"\");\n        const value = elem$.data(\"value\");\n        await this.updateTarget(target, value);\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n    async _gmControlCycleTarget(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const flagTarget = elem$.data(\"flagTarget\");\n        const curVal = elem$.data(\"curVal\");\n        const cycleVals = elem$.data(\"vals\")?.split(/\\|/);\n        if (!cycleVals) {\n            throw new Error(`Unable to parse cycle values from data-vals = ${elem$.data(\"vals\")}`);\n        }\n        const curValIndex = cycleVals.indexOf(curVal);\n        if (curValIndex === -1) {\n            throw new Error(`Unable to find current value '${curVal}' in cycle values '${elem$.data(\"vals\")}'`);\n        }\n        let newValIndex = curValIndex + 1;\n        if (newValIndex >= cycleVals.length) {\n            newValIndex = 0;\n        }\n        const newVal = cycleVals[newValIndex];\n        eLog.checkLog3(\"gmControlCycleTarget\", \"gmControlCycleTarget\", { flagTarget, curVal, cycleVals, curValIndex, newValIndex, newVal });\n        await this.updateTarget(flagTarget, newVal);\n    }\n    /**\n     * Handles resetting value associated with GM number line on a right-click.\n     * @param {ClickEvent} event JQuery context menu event sent to listener.\n     */\n    async _gmControlResetTarget(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        await this.updateTarget($(event.currentTarget).data(\"target\"), undefined);\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n    /**\n     * Handles setting of baseline rollPosition via GM button line\n     * @param {ClickEvent} event JQuery click event sent to listener.\n     */\n    _gmControlSetPosition(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const position = elem$.data(\"status\");\n        this.initialPosition = position;\n    }\n    /**\n     * Handles setting of baseline rollPosition via GM button line\n     * @param {ClickEvent} event JQuery click event sent to listener.\n     */\n    _gmControlSetEffect(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const effect = elem$.data(\"status\");\n        this.initialEffect = effect;\n    }\n    /**\n     * Handles setting of Factor toggles: isActive, isPrimary, highFavorsPC, isDominant\n     * @param {ClickEvent} event JQuery click event sent to listener.\n     */\n    async _gmControlToggleFactor(event) {\n        event.preventDefault();\n        if (!game.user.isGM) {\n            return;\n        }\n        const elem$ = $(event.currentTarget);\n        const target = elem$.data(\"target\");\n        const value = !elem$.data(\"value\");\n        eLog.checkLog3(\"toggleFactor\", \"_gmControlToggleFactor\", { event, target, value });\n        const factorToggleData = this.data.rollFactorToggles;\n        const [thisSource, thisFactor, thisToggle] = target.split(/\\./).slice(-3);\n        // If thisToggle is unrecognized, just toggle whatever value target points at\n        if (![\"isActive\", \"isPrimary\", \"isDominant\", \"highFavorsPC\"].includes(thisToggle)) {\n            await this.updateTarget(target, value);\n            socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n        }\n        // Otherwise, first toggle targeted factor to new value\n        factorToggleData[thisSource][thisFactor] = {\n            ...factorToggleData[thisSource][thisFactor] ?? { display: \"\" },\n            [thisToggle]: value\n        };\n        // Then perform specific logic depending on toggle targeted:\n        switch (thisToggle) {\n            case \"isDominant\":\n            case \"isPrimary\": {\n                // Only one factor per sourceType can be declared Primary or Dominant:\n                //    If one is being activated, must toggle off the others.\n                if (value === true) {\n                    Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor)\n                        .filter((factor) => factor !== thisFactor)\n                        .forEach((factor) => {\n                        if (factorToggleData[thisSource][factor]?.[thisToggle] === true) {\n                            factorToggleData[thisSource][factor] = {\n                                ...factorToggleData[thisSource][factor],\n                                [thisToggle]: false\n                            };\n                        }\n                    });\n                }\n                break;\n            }\n            case \"isActive\": {\n                // 'isActive' should be synchronized when 1) value is true, and 2) the other value is false\n                if (value === true) {\n                    const otherSource = thisSource === \"source\" ? \"opposition\" : \"source\";\n                    factorToggleData[otherSource][thisFactor] = {\n                        ...factorToggleData[otherSource][thisFactor] ?? { display: \"\" },\n                        isActive: value\n                    };\n                }\n                break;\n            }\n            default: break;\n        }\n        await this.updateTarget(\"rollFactorToggles\", factorToggleData);\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n    async _onSelectChange(event) {\n        event.preventDefault();\n        const elem = event.currentTarget;\n        const { docType } = elem.dataset;\n        if (elem.value !== \"\" && docType?.startsWith(\"BladesRollParticipant\")) {\n            const [_, section, subSection] = docType.split(\".\");\n            await this.addRollParticipant(elem.value, section, subSection);\n        }\n        else {\n            await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EventHandlers.onSelectChange(this, event);\n            socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n        }\n    }\n    async _onTextInputBlur(event) {\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EventHandlers.onTextInputBlur(this, event);\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n    async _onGMPopupClick(event) {\n        /**\n         * <element\n         *  data-action=\"gm-text-popup\"\n         *  data-prompt=\"Enter text for Major Advantage.\"\n         *  data-flag-target=\"rollCollab.advantages.{{calc (count data.advantages) '+' 1)}}\n         * >\n         *\n         * */\n        const elem$ = $(event.currentTarget);\n        const prompt = elem$.data(\"prompt\");\n        const flagTarget = elem$.data(\"flagTarget\");\n        if (prompt && flagTarget) {\n            _BladesDialog__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DisplaySimpleInputDialog(this, prompt, undefined, flagTarget);\n        }\n    }\n    // Async _gmControlSelect(event: SelectChangeEvent) {\n    //   event.preventDefault();\n    //   const elem$ = $(event.currentTarget);\n    //   const section = elem$.data(\"rollSection\");\n    //   const subSection = elem$.data(\"rollSubSection\");\n    //   const selectedOption = elem$.val();\n    //   if (typeof selectedOption !== \"string\") { return; }\n    //   if (selectedOption === \"false\") {\n    //     await this.document.unsetFlag(C.SYSTEM_ID, `rollCollab.rollParticipantData.${section}.${subSection}`);\n    //   }\n    //   await this.addRollParticipant(selectedOption, section, subSection);\n    // }\n    // #endregion\n    // #region ACTIVATE LISTENERS ~\n    _positionDragger;\n    get positionDragger() {\n        if (this._positionDragger) {\n            return this._positionDragger;\n        }\n        return this.spawnPositionDragger();\n    }\n    spawnPositionDragger() {\n        const self = this;\n        if (!this._elem$) {\n            throw new Error(`[BladesRoll.spawnPositionDragger] No elem$ found for roll ${this.id}.`);\n        }\n        this._positionDragger?.kill();\n        return (this._positionDragger = new _core_gsap__WEBPACK_IMPORTED_MODULE_4__.Dragger(this._elem$, {\n            type: \"top,left\",\n            trigger: \".window-header.dragger\",\n            onDragStart() {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.to(this.target, { opacity: 0.25, duration: 0.25, ease: \"power2\" });\n            },\n            onDragEnd() {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.to(this.target, { opacity: 1, duration: 0.25, ease: \"power2\" });\n                self.overlayPosition = { x: this.endX, y: this.endY };\n            }\n        }));\n    }\n    activateListeners() {\n        (0,_core_gsap__WEBPACK_IMPORTED_MODULE_4__.ApplyTooltipAnimations)(this.elem$);\n        this.spawnPositionDragger();\n        // If a rollClockKey exists, initialize its elements\n        if (this.rollClockKey) {\n            this.elem$.find(\".roll-clock\").removeClass(\"hidden\");\n        }\n        // User-Toggleable Roll Mods\n        this.elem$.find(\".roll-mod[data-action='toggle']\").on({\n            click: this._toggleRollModClick.bind(this)\n        });\n        this.elem$.find(\"[data-action='tradePosition']\").on({\n            click: (event) => {\n                const curVal = `${$(event.currentTarget).data(\"value\")}`;\n                if (curVal === \"false\") {\n                    this.updateTarget(\"rollPosEffectTrade\", \"effect\")\n                        .then(() => socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id));\n                }\n                else {\n                    this.updateTarget(\"rollPosEffectTrade\", false)\n                        .then(() => socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id));\n                }\n            }\n        });\n        this.elem$.find(\"[data-action='tradeEffect']\").on({\n            click: (event) => {\n                const curVal = `${$(event.currentTarget).data(\"value\")}`;\n                if (curVal === \"false\") {\n                    this.updateTarget(\"rollPosEffectTrade\", \"position\")\n                        .then(() => socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id));\n                }\n                else {\n                    this.updateTarget(\"rollPosEffectTrade\", false)\n                        .then(() => socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id));\n                }\n            }\n        });\n        this.elem$.find(\"[data-action='roll']\").on({\n            click: () => this.resolveRoll()\n        });\n        this.elem$\n            .find(\"select[data-action='player-select']\")\n            .on({ change: this._onSelectChange.bind(this) });\n        if (!game.user.isGM) {\n            return;\n        }\n        /**\n         * Handles setting of rollMod status via GM pop-out controls\n         */\n        this.elem$.find(\".controls-toggle\").on({\n            click: (event) => {\n                event.preventDefault();\n                $(event.currentTarget).parents(\".controls-panel\").toggleClass(\"active\");\n            }\n        });\n        this.elem$.find(\"[data-action=\\\"gm-set\\\"]\").on({\n            click: this._gmControlSet.bind(this)\n        });\n        /**\n         * Handles setting of baseline rollPosition via GM button line\n         */\n        this.elem$.find(\"[data-action=\\\"gm-set-position\\\"]\").on({\n            click: this._gmControlSetPosition.bind(this)\n        });\n        /**\n         * Handles setting of baseline rollEffect via GM button line\n         */\n        this.elem$.find(\"[data-action=\\\"gm-set-effect\\\"]\").on({\n            click: this._gmControlSetEffect.bind(this)\n        });\n        /**\n         * Handles setting values via GM number line (e.g. roll factor boosts/modifications).\n         * Handles resetting value associated with GM number line on a right-click.\n         */\n        this.elem$.find(\"[data-action=\\\"gm-set-target\\\"]\").on({\n            click: this._gmControlSetTargetToValue.bind(this),\n            contextmenu: this._gmControlResetTarget.bind(this)\n        });\n        /**\n         * Handles setting values via GM number line (e.g. roll factor boosts/modifications).\n         * Handles resetting value associated with GM number line on a right-click.\n         */\n        this.elem$.find(\"[data-action=\\\"gm-cycle-target\\\"]\").on({\n            click: this._gmControlCycleTarget.bind(this)\n        });\n        /**\n         * Handles setting of Factor toggles: isActive, isPrimary, highFavorsPC, isDominant\n         */\n        this.elem$.find(\"[data-action=\\\"gm-toggle-factor\\\"]\").on({\n            click: this._gmControlToggleFactor.bind(this)\n        });\n        this.elem$\n            .find(\"select[data-action='gm-select']\")\n            .on({ change: this._onSelectChange.bind(this) });\n        // this.elem$\n        //   .find(\"[data-action=\\\"gm-edit-consequences\\\"]\")\n        //   .on({click: () => BladesDialog.DisplayRollConsequenceDialog(this)});\n        this.elem$\n            .find(\"[data-action=\\\"gm-text-popup\\\"]\")\n            .on({ click: this._onGMPopupClick.bind(this) });\n        this.elem$\n            .find(\"[data-action='gm-text-input']\")\n            .on({ blur: this._onTextInputBlur.bind(this) });\n    }\n    // #endregion\n    // #endregion\n    // #region OVERRIDES: _canDragDrop, _onDrop, _onSubmit, close, render ~\n    // override _canDragDrop() {\n    //   return game.user.isGM;\n    // }\n    // override _onDrop(event: DragEvent) {\n    //   const {uuid} = TextEditor.getDragEventData(event) as {uuid: UUIDString};\n    //   const dropDoc = fromUuidSync(uuid);\n    //   if (BladesRollOpposition.IsDoc(dropDoc)) {\n    //     this.rollOpposition = new BladesRollOpposition(this, {rollOppDoc: dropDoc});\n    //   } else if (dropDoc instanceof BladesProject && dropDoc.clockKey) {\n    //     // Project dropped on roll: Assign project's clock key to roll.\n    //     this.rollClockKey = dropDoc.clockKey;\n    //   }\n    // }\n    async submitChange(prop, val) {\n        await this.updateTarget(prop, val);\n        socketlib.system.executeForEveryone(\"renderRollCollab_SocketCall\", this.id);\n    }\n}\nclass BladesActionRoll extends BladesRoll {\n    /* Not much -- most action roll things will extend to other rolls, but split out things like Position, Effect, default Mods */\n    static ApplySchemaDefaults(schemaData) {\n        schemaData.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollType.Action;\n        if (!schemaData.rollPrimaryData) {\n            throw new Error(\"Must include a rollPrimaryData when constructing a BladesActionRoll object.\");\n        }\n        // Validate the rollTrait\n        if (!(schemaData.rollTrait === \"\" || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(schemaData.rollTrait) || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(schemaData.rollTrait) in { ..._core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait, ..._core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor })) {\n            throw new Error(`[BladesActionRoll.ApplySchemaDefaults()] Bad RollTrait for Action Roll: ${schemaData.rollTrait}`);\n        }\n        const fullSchema = super.ApplySchemaDefaults(schemaData);\n        const rollPrimary = BladesRollPrimary.Build(fullSchema);\n        // Modify Config object depending on downtime action where necessary.\n        switch (fullSchema.rollDowntimeAction) { // Remember: Can be done outside of Downtime during Flashbacks!\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.AcquireAsset: {\n                fullSchema.rollTrait = _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier;\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.LongTermProject: {\n                // Validate that rollOppData points to a project item\n                if (!BladesRollOpposition.IsValidData(fullSchema.rollOppData)) {\n                    throw new Error(\"No rollOppData provided for LongTermProject roll.\");\n                }\n                if (![\n                    _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.project,\n                    _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.design\n                ].includes(fullSchema.rollOppData.rollOppType)) {\n                    throw new Error(\"rollOppType must be 'project' or 'design' for LongTermProject roll.\");\n                }\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.Recover: {\n                // Validate that rollPrimary is an NPC or a PC with Physiker.\n                if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(rollPrimary.rollPrimaryDoc)) {\n                    if (!rollPrimary.rollPrimaryDoc.abilities.find((ability) => ability.name === \"Physiker\")) {\n                        throw new Error(\"A PC rollPrimary on a Recovery roll must have the Physiker ability.\");\n                    }\n                    fullSchema.rollTrait = _core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait.tinker;\n                }\n                else if (rollPrimary.rollPrimaryDoc?.rollPrimaryType === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc) {\n                    fullSchema.rollTrait = _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality;\n                }\n                else {\n                    throw new Error(\"Only a PC with Physiker or an NPC can be rollPrimary on a Recover roll.\");\n                }\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.ReduceHeat: {\n                // rollPrimary must be a cohort with a parent PC or Crew,\n                // and PC must be member of a crew\n                // and Crew must not have zero Heat.\n                let parentCrew = undefined;\n                if (rollPrimary.rollPrimaryDoc) {\n                    const { parent } = rollPrimary.rollPrimaryDoc;\n                    if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(parent)) {\n                        parentCrew = parent;\n                    }\n                    else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(parent) && _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(parent.crew)) {\n                        parentCrew = parent.crew;\n                    }\n                }\n                if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesCrew.IsType(parentCrew)) {\n                    throw new Error(`Could not find crew for rollPrimary '${rollPrimary.rollPrimaryDoc?.rollPrimaryName}'`);\n                }\n                if (parentCrew.system.heat.value === 0) {\n                    throw new Error(\"Attempt to Reduce Heat for a Crew with no Heat.\");\n                }\n                break;\n            }\n            case undefined: break;\n            default: throw new Error(`Unrecognized Roll Downtime Action: ${fullSchema.rollDowntimeAction}`);\n        }\n        return {\n            rollPositionInitial: _core_constants__WEBPACK_IMPORTED_MODULE_1__.Position.risky,\n            rollEffectInitial: _core_constants__WEBPACK_IMPORTED_MODULE_1__.Effect.standard,\n            rollPosEffectTrade: false,\n            GMBoosts: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: 0\n            },\n            GMOppBoosts: {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: 0,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: 0\n            },\n            GMOverrides: {},\n            rollFactorToggles: {\n                source: {\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    }\n                },\n                opposition: {\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    },\n                    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude]: {\n                        display: \"\",\n                        isActive: false,\n                        isPrimary: false,\n                        isDominant: false,\n                        highFavorsPC: true\n                    }\n                }\n            },\n            ...fullSchema,\n            rollPrimaryData: rollPrimary.data,\n            rollOppData: fullSchema.rollOppData instanceof BladesRollOpposition\n                ? fullSchema.rollOppData.data\n                : fullSchema.rollOppData\n        };\n    }\n    static get DefaultRollModSchemaSet() {\n        return [\n            {\n                key: \"Push-positive-roll\",\n                name: \"PUSH\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [\"ForceOff-Bargain\", \"Cost-Stress2\"],\n                tooltip: \"<h1>Push for +1d</h1><p>For <strong class='red-bright'>2 Stress</strong>, add <strong class='gold-bright'>1 die</strong> to your pool.</p><p><em>(You <strong>cannot</strong> also accept a <strong class='red-bright'>Devil's Bargain</strong> to increase your dice pool: It's one or the other.)</em></p>\"\n            },\n            {\n                key: \"Bargain-positive-roll\",\n                name: \"Bargain\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1 class='red-bright'>Devil's Bargain</h1><p>The GM has offered you a <strong class='red-bright'>Devil's Bargain</strong>.</p><p><strong class='red-bright'>Accept the terms</strong> to add <strong class='gold-bright'>1 die</strong> to your pool.</p><p><em>(You <strong>cannot</strong> also <strong>Push for +1d</strong> to increase your dice pool: It's one or the other.)</em></p>\"\n            },\n            {\n                key: \"Assist-positive-roll\",\n                name: \"Assist\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.teamwork,\n                value: 1,\n                tooltip: \"<h1 class='gold-bright'>%DOC_NAME% Assists</h1><p><strong class='gold-bright'>%DOC_NAME%</strong> is <strong>Assisting</strong> your efforts, adding <strong class='gold-bright'>1 die</strong> to your pool.</p>\"\n            },\n            {\n                key: \"Setup-positive-position\",\n                name: \"Setup\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.teamwork,\n                value: 1,\n                tooltip: \"<h1 class='gold-bright'>%DOC_NAME% Sets You Up</h1><p><strong class='gold-bright'>%DOC_NAME%</strong> has set you up for success with a preceding <strong>Setup</strong> action, increasing your <strong class='gold-bright'>Position</strong> by one level.</p>\"\n            },\n            {\n                key: \"Push-positive-effect\",\n                name: \"PUSH\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [\"Cost-Stress2\"],\n                tooltip: \"<h1>Push for Effect</h1><p>For <strong class='red-bright'>2 Stress</strong>, increase your <strong class='gold-bright'>Effect</strong> by one level.</p>\"\n            },\n            {\n                key: \"Setup-positive-effect\",\n                name: \"Setup\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.teamwork,\n                value: 1,\n                tooltip: \"<h1 class='gold-bright'>%DOC_NAME% Sets You Up</h1><p><strong class='gold-bright'>%DOC_NAME%</strong> has set you up for success with a preceding <strong>Setup</strong> action, increasing your <strong class='gold-bright'>Effect</strong> by one level.</p>\"\n            },\n            {\n                key: \"Potency-positive-effect\",\n                name: \"Potency\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                tooltip: \"<h1>Potency</h1><p>By circumstance or advantage, you have <strong>Potency</strong> in this action, increasing your <strong class='gold-bright'>Effect</strong> by one level.</p>\"\n            },\n            {\n                key: \"Potency-negative-effect\",\n                name: \"Potency\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.Hidden,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                tooltip: \"<h1 class='red-bright'>Potency</h1><p>By circumstance or advantage, <strong class='red-bright'>@OPPOSITION_NAME@</strong> has <strong>Potency</strong> against you, reducing your <strong class='red-bright'>Effect</strong> by one level.\"\n            }\n        ];\n    }\n    /**\n     * Asynchronously creates a new instance of this subclass of `BladesRoll`.\n     *\n     * Overrides the `New` static method from `BladesRoll`, applying subclass-specific configurations\n     * to the instance creation process. It ensures that the returned instance is correctly typed\n     * and configured for this subclass.\n     *\n     * @param {BladesRoll.Config} config The configuration object for creating a new roll instance,\n     * extended with any subclass-specific configurations or requirements.\n     *\n     * @returns {Promise<InstanceType<this>>} A promise that resolves to an instance of this subclass.\n     *\n     * @see {@link BladesRoll.New} for the base method's functionality and the generic creation process\n     * for roll instances.\n     */\n    static async New(config) {\n        // Build link config\n        const linkConfig = this.BuildLinkConfig(config);\n        const parsedConfig = {\n            ...config,\n            ...linkConfig\n        };\n        // Call super.New and cast the result appropriately.\n        // The cast to InstanceType<C> is safe here because C is constrained to typeof BladesActionRoll.\n        const rollInst = await super.New(parsedConfig);\n        return rollInst;\n    }\n    get rollModsSchemaSets() {\n        const rollModSchemaSets = super.rollModsSchemaSets;\n        // Add additional conditional roll mods based on effects of previous consequences.\n        if (this.rollPrimary.isWorsePosition) {\n            rollModSchemaSets.push({\n                key: \"WorsePosition-negative-position\",\n                name: \"Worse Position\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1>Worse Position</h1><p>A <strong class='red-bright'>Consequence</strong> on a previous roll has worsened your <strong>Position</strong>.</p>\"\n            });\n        }\n        if (this.acceptedConsequences.some((csq) => csq.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.ConsequenceType.ReducedEffect)) {\n            rollModSchemaSets.push({\n                key: \"ReducedEffect-negative-effect\",\n                name: \"Reduced Effect\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.effect,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ForcedOn,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1>Reduced Effect</h1><p>A <strong class='red-bright'>Consequence</strong> has worsened your <strong>Effect</strong>.</p>\"\n            });\n        }\n        return rollModSchemaSets;\n    }\n    get collabTemplate() {\n        return `systems/eunos-blades/templates/roll/roll-collab-action${game.user.isGM ? \"-gm\" : \"\"}.hbs`;\n    }\n    get chatTemplate() {\n        const templateParts = [\n            \"systems/eunos-blades/templates/chat/roll-result/action\",\n            this.rollClockKey ? \"-clock\" : \"\"\n        ];\n        if (this.rollDowntimeAction && [\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.AcquireAsset, // action-acquireasset\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.ReduceHeat, //   action-reduceheat\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.Recover //       action-clock-recover\n        ].includes(this.rollDowntimeAction)) {\n            templateParts.push(`-${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(this.rollDowntimeAction)}`);\n        }\n        else if (this.rollSubType && [\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollSubType.GatherInfo //      action-gatherinfo\n        ].includes(this.rollSubType)) {\n            templateParts.push(`-${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(this.rollSubType)}`);\n        }\n        templateParts.push(\".hbs\");\n        return templateParts.join(\"\");\n    }\n    get rollResult() {\n        if (!this.isResolved) {\n            return false;\n        }\n        if (this.isCritical) {\n            return _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.critical;\n        }\n        if (this.isSuccess) {\n            return _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.success;\n        }\n        if (this.isPartial) {\n            return _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.partial;\n        }\n        return _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollResult.fail;\n    }\n    async resolveRollResult() {\n        eLog.checkLog2(\"bladesRoll\", \"[BladesActionRoll] Costs\", this.getRollCosts());\n        const armorCost = this.getRollCosts()\n            .filter((costData) => costData.costType === \"Armor\")\n            .length;\n        if (this.rollPrimaryDoc instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC) {\n            const stressCost = this.getRollCosts()\n                .filter((costData) => costData.costType === \"Stress\")\n                .reduce((acc, costData) => acc + costData.costAmount, 0);\n            if (stressCost !== 0) {\n                this.rollPrimaryDoc.adjustStress(stressCost);\n            }\n            const specArmorCost = this.getRollCosts()\n                .filter((costData) => costData.costType === \"SpecialArmor\")\n                .length;\n            if (specArmorCost !== 0) {\n                this.rollPrimaryDoc.spendSpecialArmor();\n            }\n        }\n        if (armorCost !== 0) {\n            this.rollPrimary.spendArmor(armorCost);\n        }\n        if (this.getRollModByKey(\"WorsePosition-negative-position\")?.isActive) {\n            this.rollPrimaryDoc?.unsetFlag(\"eunos-blades\", \"isWorsePosition\");\n        }\n    }\n}\nclass BladesResistanceRoll extends BladesRoll {\n    static ApplySchemaDefaults(config) {\n        // Validate consequenceData\n        if (!config.resistanceData || !_BladesConsequence__WEBPACK_IMPORTED_MODULE_5__[\"default\"].IsValidConsequenceData(config.resistanceData?.consequence)) {\n            eLog.error(\"rollCollab\", \"[PrepareResistanceRoll] Bad Roll Consequence Data.\", config);\n            throw new Error(\"[PrepareResistanceRoll()] Bad Consequence Data for Resistance Roll\");\n        }\n        // Set rollTrait\n        config.rollTrait = config.resistanceData.consequence.attribute;\n        eLog.checkLog3(\"bladesRoll\", \"BladesRoll.PrepareResistanceRoll() [1]\", { config });\n        return config;\n    }\n    /**\n     * Asynchronously creates a new instance of this subclass of `BladesRoll`.\n     *\n     * Overrides the `New` static method from `BladesRoll`, applying subclass-specific configurations\n     * to the instance creation process. It ensures that the returned instance is correctly typed\n     * and configured for this subclass.\n     *\n     * @param {BladesRoll.Config} config The configuration object for creating a new roll instance,\n     * extended with any subclass-specific configurations or requirements.\n     *\n     * @returns {Promise<InstanceType<this>>} A promise that resolves to an instance of this subclass.\n     *\n     * @see {@link BladesRoll.New} for the base method's functionality and the generic creation process\n     * for roll instances.\n     */\n    static async New(config) {\n        // Build link config\n        const linkConfig = this.BuildLinkConfig(config);\n        const parsedConfig = {\n            ...config,\n            ...linkConfig\n        };\n        // Call super.New and cast the result appropriately.\n        // The cast to InstanceType<C> is safe here because C is constrained to typeof BladesResistanceRoll.\n        const rollInst = await super.New(parsedConfig);\n        return rollInst;\n    }\n    get collabTemplate() {\n        return `systems/eunos-blades/templates/roll/roll-collab-resistance${game.user.isGM ? \"-gm\" : \"\"}.hbs`;\n    }\n    get chatTemplate() {\n        return \"systems/eunos-blades/templates/chat/roll-result/resistance.hbs\";\n    }\n    get stressCost() {\n        if (!this.isResolved) {\n            return 0;\n        }\n        const dieVals = [...this.finalDieVals];\n        if (this.isCritical) {\n            return -1;\n        }\n        return 6 - (dieVals.shift() ?? 0);\n    }\n    get rollResult() {\n        if (!this.isResolved) {\n            return false;\n        }\n        return this.stressCost;\n    }\n    async resolveRollResult() {\n        if (this.rollPrimaryDoc instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC && this.stressCost !== 0) {\n            this.rollPrimaryDoc.adjustStress(this.stressCost);\n        }\n    }\n}\nclass BladesInlineResistanceRoll extends BladesResistanceRoll {\n    get chatTemplate() {\n        return \"systems/eunos-blades/templates/chat/components/inline-resistance.hbs\";\n    }\n}\nclass BladesFortuneRoll extends BladesRoll {\n    static ApplySchemaDefaults(config) {\n        // Validate the rollTrait\n        if (!(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(config.rollTrait) || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(config.rollTrait) in { ..._core_constants__WEBPACK_IMPORTED_MODULE_1__.ActionTrait, ..._core_constants__WEBPACK_IMPORTED_MODULE_1__.AttributeTrait, ..._core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor })) {\n            throw new Error(`[PrepareFortuneRoll()] Bad RollTrait for Fortune Roll: ${config.rollTrait}`);\n        }\n        return config;\n    }\n    /**\n     * Asynchronously creates a new instance of this subclass of `BladesRoll`.\n     *\n     * Overrides the `New` static method from `BladesRoll`, applying subclass-specific configurations\n     * to the instance creation process. It ensures that the returned instance is correctly typed\n     * and configured for this subclass.\n     *\n     * @param {BladesRoll.Config} config The configuration object for creating a new roll instance,\n     * extended with any subclass-specific configurations or requirements.\n     *\n     * @returns {Promise<InstanceType<this>>} A promise that resolves to an instance of this subclass.\n     *\n     * @see {@link BladesRoll.New} for the base method's functionality and the generic creation process\n     * for roll instances.\n     */\n    static async New(config) {\n        // Build link config\n        const linkConfig = this.BuildLinkConfig(config);\n        const parsedConfig = {\n            ...config,\n            ...linkConfig\n        };\n        // Call super.New and cast the result appropriately.\n        // The cast to InstanceType<C> is safe here because C is constrained to typeof BladesFortuneRoll.\n        const rollInst = await super.New(parsedConfig);\n        return rollInst;\n    }\n}\nclass BladesIndulgeViceRoll extends BladesRoll {\n    static ApplySchemaDefaults(config) {\n        // Validate rollPrimary\n        const rollPrimaryDoc = BladesRollPrimary.GetDoc(config.rollPrimaryData?.rollPrimaryID);\n        if (!rollPrimaryDoc || !_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(rollPrimaryDoc)) {\n            throw new Error(\"[BladesRoll.PrepareIndulgeViceRollConfig] RollPrimary must be a PC for Indulge Vice rolls.\");\n        }\n        // Set rollTrait\n        const { attributes } = rollPrimaryDoc;\n        const minAttrVal = Math.min(...Object.values(attributes));\n        config.rollTrait = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sample(Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.AttributeTrait).filter((attr) => attributes[attr] === minAttrVal))[0];\n        // Set other known config values\n        config.rollDowntimeAction = _core_constants__WEBPACK_IMPORTED_MODULE_1__.DowntimeAction.IndulgeVice;\n        return config;\n    }\n    /**\n     * Asynchronously creates a new instance of this subclass of `BladesRoll`.\n     *\n     * Overrides the `New` static method from `BladesRoll`, applying subclass-specific configurations\n     * to the instance creation process. It ensures that the returned instance is correctly typed\n     * and configured for this subclass.\n     *\n     * @param {BladesRoll.Config} config The configuration object for creating a new roll instance,\n     * extended with any subclass-specific configurations or requirements.\n     *\n     * @returns {Promise<InstanceType<this>>} A promise that resolves to an instance of this subclass.\n     *\n     * @see {@link BladesRoll.New} for the base method's functionality and the generic creation process\n     * for roll instances.\n     */\n    static async New(config) {\n        // Build link config\n        const linkConfig = this.BuildLinkConfig(config);\n        const parsedConfig = {\n            ...config,\n            ...linkConfig\n        };\n        // Call super.New and cast the result appropriately.\n        // The cast to InstanceType<C> is safe here because C is constrained to typeof BladesIndulgeViceRoll.\n        const rollInst = await super.New(parsedConfig);\n        return rollInst;\n    }\n    get collabTemplate() {\n        return `systems/eunos-blades/templates/roll/roll-collab-indulgevice${game.user.isGM ? \"-gm\" : \"\"}.hbs`;\n    }\n    get chatTemplate() {\n        return \"systems/eunos-blades/templates/chat/roll-result/indulgevice.hbs\";\n    }\n    get rollResult() {\n        if (!this.isResolved) {\n            return false;\n        }\n        return this.highestDieVal;\n    }\n    async resolveRollResult() {\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesPC.IsType(this.rollPrimaryDoc)) {\n            this.rollPrimaryDoc.indulgeStress(this.highestDieVal);\n        }\n    }\n}\nclass BladesEngagementRoll extends BladesFortuneRoll {\n    static get DefaultRollModSchemaSet() {\n        return [\n            {\n                key: \"BoldPlan-positive-roll\",\n                name: \"Bold Plan\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1></h1><p></p>\"\n            },\n            {\n                key: \"ComplexPlan-negative-roll\",\n                name: \"Complex Plan\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1></h1><p></p>\"\n            },\n            {\n                key: \"ExploitWeakness-positive-roll\",\n                name: \"Exploiting a Weakness\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1></h1><p></p>\"\n            },\n            {\n                key: \"WellDefended-negative-roll\",\n                name: \"Well-Defended\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1></h1><p></p>\"\n            },\n            {\n                key: \"HelpFromFriend-positive-roll\",\n                name: \"Help From a Friend\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.position,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"positive\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1>Help From a Friend</h1><p>Add <strong>+1d</strong> if you enlist the help of a friend or contact.</p>\"\n            },\n            {\n                key: \"EnemyInterference-negative-roll\",\n                name: \"Enemy Interference\",\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModSection.roll,\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModStatus.ToggledOff,\n                posNeg: \"negative\",\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_1__.RollModType.general,\n                value: 1,\n                effectKeys: [],\n                tooltip: \"<h1></h1><p></p>\"\n            }\n        ];\n    }\n    get chatTemplate() {\n        return \"systems/eunos-blades/templates/chat/roll-result/fortune-engagement.hbs\";\n    }\n}\nclass BladesIncarcerationRoll extends BladesFortuneRoll {\n    get chatTemplate() {\n        return \"systems/eunos-blades/templates/chat/roll-result/fortune-incarceration.hbs\";\n    }\n}\n// #region EXPORTS ~\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesRoll);\n\n// #endregion\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesRoll.ts\n");

/***/ }),

/***/ "./ts/classes/BladesScene.ts":
/*!***********************************!*\
  !*** ./ts/classes/BladesScene.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nclass BladesScene extends Scene {\n    async registerClockKey(clockKey) {\n        this.update({ [`clockKeys.${clockKey.id}`]: true });\n    }\n    async unregisterClockKey(clockKey) {\n        if (typeof clockKey === \"string\") {\n            this.update({ [`clockKeys.-=${clockKey}`]: null });\n        }\n        else {\n            this.update({ [`clockKeys.-=${clockKey.id}`]: null });\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesScene);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9jbGFzc2VzL0JsYWRlc1NjZW5lLnRzIiwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0Esc0JBQXNCLGNBQWMsWUFBWSxVQUFVO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixnQkFBZ0IsU0FBUyxVQUFVO0FBQzdEO0FBQ0E7QUFDQSwwQkFBMEIsZ0JBQWdCLFlBQVksVUFBVTtBQUNoRTtBQUNBO0FBQ0E7QUFDQSwrREFBZSxXQUFXLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi90cy9jbGFzc2VzL0JsYWRlc1NjZW5lLnRzPzllOGUiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmxhZGVzU2NlbmUgZXh0ZW5kcyBTY2VuZSB7XG4gICAgYXN5bmMgcmVnaXN0ZXJDbG9ja0tleShjbG9ja0tleSkge1xuICAgICAgICB0aGlzLnVwZGF0ZSh7IFtgY2xvY2tLZXlzLiR7Y2xvY2tLZXkuaWR9YF06IHRydWUgfSk7XG4gICAgfVxuICAgIGFzeW5jIHVucmVnaXN0ZXJDbG9ja0tleShjbG9ja0tleSkge1xuICAgICAgICBpZiAodHlwZW9mIGNsb2NrS2V5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh7IFtgY2xvY2tLZXlzLi09JHtjbG9ja0tleX1gXTogbnVsbCB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHsgW2BjbG9ja0tleXMuLT0ke2Nsb2NrS2V5LmlkfWBdOiBudWxsIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQmxhZGVzU2NlbmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/classes/BladesScene.ts\n");

/***/ }),

/***/ "./ts/classes/BladesTargetLink.ts":
/*!****************************************!*\
  !*** ./ts/classes/BladesTargetLink.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _BladesChat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BladesChat */ \"./ts/classes/BladesChat.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\nclass BladesTargetLink {\n    // #region STATIC METHODS ~\n    static get ValidTargetClasses() {\n        return [\n            _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor,\n            _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem,\n            _BladesChat__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n            User\n        ];\n    }\n    static IsValidConfig(ref) {\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isSimpleObj(ref)\n            && (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(ref.target)\n                || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocUUID(ref.target)\n                || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(ref.targetID)\n                || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocUUID(ref.targetID)\n                || this.ValidTargetClasses.some((cls) => ref.target instanceof cls))\n            && (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetKey(ref.targetKey) || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetFlagKey(ref.targetFlagKey))\n            && !(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetKey(ref.targetKey) && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetFlagKey(ref.targetFlagKey));\n    }\n    static IsValidData(ref) {\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isSimpleObj(ref)\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(ref.id)\n            && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocUUID(ref.targetID)\n            && (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetKey(ref.targetKey) || _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetFlagKey(ref.targetFlagKey))\n            && !(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetKey(ref.targetKey) && _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isTargetFlagKey(ref.targetFlagKey));\n        // && (typeof ref.isScopingById === \"boolean\");\n    }\n    static #ParseChildLinkData(childData, parentLinkData) {\n        if (!parentLinkData) {\n            return childData;\n        }\n        const keyPrefixParts = \"targetKey\" in parentLinkData\n            ? [parentLinkData.targetKey]\n            : [parentLinkData.targetFlagKey];\n        if (parentLinkData.isScopingById) {\n            keyPrefixParts.push(parentLinkData.id);\n        }\n        const keyPrefix = keyPrefixParts.join(\".\");\n        if (\"targetKey\" in childData && \"targetKey\" in parentLinkData) {\n            if (childData.targetKey.startsWith(`${keyPrefix}.`)) {\n                // Remove the keyPrefix and the following dot from childData.targetKey\n                childData.targetKey = childData.targetKey.slice(keyPrefix.length + 1);\n            }\n            childData.targetKey = [\n                parentLinkData.targetKey,\n                parentLinkData.isScopingById ? parentLinkData.id : undefined,\n                childData.targetKey\n            ].filter(Boolean).join(\".\");\n        }\n        else if (\"targetFlagKey\" in childData && \"targetFlagKey\" in parentLinkData) {\n            if (childData.targetFlagKey.startsWith(`${keyPrefix}.`)) {\n                // Remove the keyPrefix and the following dot from childData.targetFlagKey\n                childData.targetFlagKey = childData.targetFlagKey.slice(keyPrefix.length + 1);\n            }\n            childData.targetFlagKey = [\n                parentLinkData.targetFlagKey,\n                parentLinkData.isScopingById ? parentLinkData.id : undefined,\n                childData.targetFlagKey\n            ].filter(Boolean).join(\".\");\n        }\n        else {\n            throw new Error(\"[BladesTargetLink.ParseChildLinkData] targetKey/targetFlagKey mismatch between provided partialConfig and parentLinkData.\");\n        }\n        return childData;\n    }\n    static BuildLinkConfig(partialConfig) {\n        // const {target, targetID, targetKey, targetFlagKey, isScopingById} = partialConfig;\n        if (\"target\" in partialConfig) {\n            if (\"targetKey\" in partialConfig) {\n                return {\n                    target: partialConfig.target,\n                    targetKey: partialConfig.targetKey,\n                    isScopingById: partialConfig.isScopingById\n                };\n            }\n            else if (\"targetFlagKey\" in partialConfig) {\n                return {\n                    target: partialConfig.target,\n                    targetFlagKey: partialConfig.targetFlagKey,\n                    isScopingById: partialConfig.isScopingById\n                };\n            }\n            throw new Error(\"[BladesTargetLink.BuildConfig] Must provide a targetKey or targetFlagKey.\");\n        }\n        else if (\"targetID\" in partialConfig) {\n            if (\"targetKey\" in partialConfig) {\n                return {\n                    targetID: partialConfig.targetID,\n                    targetKey: partialConfig.targetKey,\n                    isScopingById: partialConfig.isScopingById\n                };\n            }\n            else if (\"targetFlagKey\" in partialConfig) {\n                return {\n                    targetID: partialConfig.targetID,\n                    targetFlagKey: partialConfig.targetFlagKey,\n                    isScopingById: partialConfig.isScopingById\n                };\n            }\n            throw new Error(\"[BladesTargetLink.BuildConfig] Must provide a targetKey or targetFlagKey.\");\n        }\n        throw new Error(\"[BladesTargetLink.BuildConfig] Must provide a target or targetID.\");\n    }\n    /**\n     * This private static method is used to transform a configuration object into a data object for BladesTargetLink.\n     * It checks if the provided configuration object is already valid data, and if so, returns it directly.\n     * Otherwise, it partitions the configuration object into link-specific configuration and additional schema data,\n     * constructs a full link configuration, and then creates a data object with a new random ID and the target UUID.\n     * The method ensures that either 'targetKey' or 'targetFlagKey' is present and throws an error if the configuration is invalid.\n     *\n     * @template Schema - The additional schema data required by the subclass.\n     * @param {BladesTargetLink.Config | BladesTargetLink.Data & Partial<Schema>} config - The configuration object that may contain BladesTargetLink properties and any subclass-specific schema data.\n     * @returns {BladesTargetLink.Data & Partial<Schema>} - The fully constructed data object with necessary properties for BladesTargetLink.\n     * @throws {Error} - Throws an error if the configuration object is invalid, lacks a target reference, or if both 'targetKey' and 'targetFlagKey' are provided.\n     */\n    static #ParseConfigToData(config, parentLinkData) {\n        if (this.IsValidData(config)) {\n            return this.ParseConfigToData(config, parentLinkData);\n        }\n        const { linkConfig, partialSchema } = this.PartitionSchemaData(config);\n        const fullConfig = this.BuildLinkConfig(linkConfig);\n        // === CONVERT CONFIG TO DATA OBJECT ===\n        // - Send through public ParseConfigToData method, so subclasses can include their own logic.\n        if (\"targetKey\" in fullConfig) {\n            return this.ParseConfigToData({\n                id: randomID(),\n                ...partialSchema,\n                targetID: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parseDocRefToUUID(\"target\" in fullConfig ? fullConfig.target : fullConfig.targetID),\n                targetKey: fullConfig.targetKey\n            }, parentLinkData);\n        }\n        return this.ParseConfigToData({\n            id: randomID(),\n            ...partialSchema,\n            targetID: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parseDocRefToUUID(\"target\" in fullConfig ? fullConfig.target : fullConfig.targetID),\n            targetFlagKey: fullConfig.targetFlagKey\n        }, parentLinkData);\n    }\n    /**\n     * This static method parses the provided data into a format suitable for BladesTargetLink.\n     * Subclasses can override this method to include their own parse logic.\n     * If the provided data is already valid, it is returned as is.\n     * Otherwise, the data is passed to the private #ParseConfig method for further processing.\n     * Note: The 'id' property is defined at the return step, within #ParseConfig: Subclass\n     * functionality that depends on the id property should be placed after the super call to this method.\n     *\n     * @template Schema - The data schema required by the subclass.\n     * @param {(BladesTargetLink.Config | BladesTargetLink.Data) & Partial<Schema>} data - The data to be parsed.\n     * @returns {BladesTargetLink.Data & Partial<Schema>} - The parsed data, suitable for BladesTargetLink.\n     */\n    static ParseConfigToData(data, parentLinkData) {\n        if (this.IsValidData(data)) {\n            return this.#ParseChildLinkData(data, parentLinkData);\n        }\n        return this.#ParseConfigToData(data, parentLinkData);\n    }\n    static PartitionSchemaData(dataOrConfig) {\n        const { id, target, targetID, targetKey, targetFlagKey, isScopingById, ...schemaData } = dataOrConfig;\n        const partialSchema = schemaData;\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isDocID(id)) {\n            // A Data object was submitted.\n            if (!this.IsValidData({ id, targetID, targetKey, targetFlagKey, isScopingById })) {\n                eLog.error(\"BladesTargetLink\", \"Bad Constructor DATA\", { dataOrConfig });\n                throw new Error(\"[new BladesTargetLink()] Bad Constructor DATA (see log)\");\n            }\n            let linkData;\n            if (targetKey) {\n                linkData = { id, targetID: targetID, targetKey, isScopingById: isScopingById ?? true };\n            }\n            else if (targetFlagKey) {\n                linkData = { id, targetID: targetID, targetFlagKey, isScopingById: isScopingById ?? true };\n            }\n            else {\n                eLog.error(\"BladesTargetLink\", \"Bad Constructor DATA\", { dataOrConfig });\n                throw new Error(\"[BladesTargetLink.PartitionSchemaData] Bad Constructor DATA (see log)\");\n            }\n            return {\n                linkData,\n                partialSchema\n            };\n        }\n        // A Config object was submitted.\n        return {\n            linkConfig: this.BuildLinkConfig({\n                ...{ isScopingById: isScopingById ?? true },\n                ...(\"targetID\" in dataOrConfig\n                    ? { targetID: dataOrConfig.targetID }\n                    : { target: dataOrConfig.target }),\n                ...(\"targetKey\" in dataOrConfig\n                    ? { targetKey: dataOrConfig.targetKey }\n                    : { targetFlagKey: dataOrConfig.targetFlagKey })\n            }),\n            partialSchema\n        };\n    }\n    static _ApplySchemaDefaults(schemaData) {\n        return this.ApplySchemaDefaults(schemaData);\n    }\n    /**\n   * This static method applies defaults to any values missing from the class' data Schema.\n   * 'Schema' is defined by subclasses to BladesTargetLink.\n   * Subclasses must override this method to apply their own defaults.\n   *\n   * @template Schema - The data schema required by the subclass.\n   * @param {Partial<Schema>} schemaData - Schema data overriding the defaults.\n   * @returns {Schema} - The schema data with defaults applied.\n   * @throws {Error} - Throws an error if this method is not overridden in a subclass.\n   */\n    static ApplySchemaDefaults(schemaData) {\n        throw new Error(\"[BladesTargetLink.ApplySchemaDefaults] Static Method ApplySchemaDefaults must be overridden in subclass\");\n    }\n    /**\n     * Creates a new instance of BladesTargetLink and initializes it with the provided configuration.\n     * The configuration is parsed into a data object which is then used to initialize the target link.\n     * The function logs the parsed data for debugging purposes.\n     *\n     * @template Schema - The schema type parameter that extends the data structure.\n     * @param {BladesTargetLink.Config & Partial<Schema>} config - The configuration object containing both the target link configuration and the schema configuration.\n     *\n     * @returns {Promise<BladesTargetLink<Schema> & BladesTargetLink.Subclass<Schema>>} - A promise that resolves to a new instance of BladesTargetLink, initialized with the provided data.\n     *\n     * @throws {Error} - Throws an error if the initialization of the target link fails.\n     */\n    static async Create(config, parentLinkData) {\n        const tLink = new this(config, parentLinkData);\n        await tLink.initTargetLink();\n        return tLink;\n    }\n    // #endregion\n    // #region GETTERS ~\n    get isGM() { return game.user.isGM; }\n    _id;\n    _targetID;\n    _targetKey;\n    _targetFlagKey;\n    _isScopingById = true;\n    _initialSchema;\n    get id() { return this._id; }\n    get targetID() { return this._targetID; }\n    get targetKey() { return this._targetKey; }\n    get targetFlagKey() { return this._targetFlagKey; }\n    get isScopingById() { return this._isScopingById; }\n    get initialSchema() { return this._initialSchema; }\n    get targetKeyPrefix() {\n        if (!this.targetKey) {\n            return undefined;\n        }\n        if (!this.isScopingById) {\n            return this.targetKey;\n        }\n        return this.targetKey\n            ? `${this.targetKey}.${this.id}`\n            : undefined;\n    }\n    get targetKeyNullPrefix() {\n        if (!this.targetKey) {\n            return undefined;\n        }\n        if (this.isScopingById) {\n            return `${this.targetKey}.-=${this.id}`;\n        }\n        if (/^.+\\..+$/g.test(this.targetKey)) {\n            return this.targetKey.replace(/\\.([^.]+)$/, \".-=$1\");\n        }\n        throw new Error(`[BladesTargetLink.targetKeyNullPrefix] Can't Nullify TargetKey '${this.targetKey}'`);\n    }\n    get targetFlagKeyPrefix() {\n        if (!this.targetFlagKey) {\n            return undefined;\n        }\n        if (!this.isScopingById) {\n            return this.targetFlagKey;\n        }\n        return this.targetFlagKey\n            ? `${this.targetFlagKey}.${this.id}`\n            : undefined;\n    }\n    get isLinkInitialized() { return this.isInitPromiseResolved; }\n    get linkData() {\n        if (this.targetKey) {\n            return {\n                id: this.id,\n                targetID: this.targetID,\n                targetKey: this.targetKey,\n                isScopingById: this.isScopingById\n            };\n        }\n        if (this.targetFlagKey) {\n            return {\n                id: this.id,\n                targetID: this.targetID,\n                targetFlagKey: this.targetFlagKey,\n                isScopingById: this.isScopingById\n            };\n        }\n        throw new Error(`[BladesTargetLink.linkData] Missing targetKey and targetFlagKey for '${this.id}'`);\n    }\n    _target;\n    get target() { return this._target; }\n    get localData() {\n        return {\n            ...this.initialSchema,\n            ...this.linkData\n        };\n    }\n    get data() {\n        if (this.isLinkInitialized) {\n            let data;\n            if (this.targetFlagKeyPrefix) {\n                data = this.target.getFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.targetFlagKeyPrefix);\n            }\n            else if (this.targetKeyPrefix) {\n                data = getProperty(this.target, this.targetKeyPrefix);\n            }\n            if (!data) {\n                throw new Error(\"[BladesTargetLink.data] Error retrieving data.\");\n            }\n            return data;\n        }\n        else {\n            eLog.warn(\"BladesTargetLink\", \"Attempt to access data of uninitiated BladesTargetLink: Returning local data only.\", { bladesTargetLink: this, localData: this.localData });\n            return this.localData;\n        }\n    }\n    constructor(dataOrConfig, parentLinkData) {\n        let linkData;\n        let schema;\n        const subclassConstructor = this.constructor;\n        // First, we construct the link data from the config or data object.\n        if (subclassConstructor.IsValidData(dataOrConfig)) {\n            // If a simple link data object was provided, acquire the schema from the source document\n            ({ linkData } = subclassConstructor.PartitionSchemaData(dataOrConfig));\n            const target = fromUuidSync(linkData.targetID);\n            if (!target) {\n                throw new Error(`[new BladesTargetLink()] Unable to resolve target from uuid '${linkData.targetID}'`);\n            }\n            if (\"targetKey\" in linkData) {\n                schema = getProperty(target, `${linkData.targetKey}.${linkData.id}`);\n            }\n            else {\n                schema = target.getFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, `${linkData.targetFlagKey}.${linkData.id}`);\n            }\n            // Set the isInitPromiseResolved flag to true\n            this.isInitPromiseResolved = true;\n        }\n        else {\n            // Otherwise, we have to parse the config into a data object, and extract any schema data\n            // First we convert the config object to a BladesTargetLink.Data & Partial<Schema> object.\n            const parsedData = BladesTargetLink.#ParseConfigToData(dataOrConfig, parentLinkData);\n            // Next we separate the linkData and the schemaData from the parsedData object.\n            let partialSchema;\n            ({ linkData, partialSchema } = subclassConstructor.PartitionSchemaData(parsedData));\n            // And apply any schema defaults to the provided schema data.\n            schema = subclassConstructor._ApplySchemaDefaults(partialSchema);\n        }\n        this._id = linkData.id;\n        this._targetID = linkData.targetID;\n        if (\"targetKey\" in linkData) {\n            this._targetKey = linkData.targetKey;\n        }\n        else {\n            this._targetFlagKey = linkData.targetFlagKey;\n        }\n        const target = fromUuidSync(this.targetID);\n        if (!target) {\n            throw new Error(`[new BladesTargetLink()] Unable to resolve target from uuid '${this._targetID}'`);\n        }\n        this._target = target;\n        this._initialSchema = schema;\n    }\n    // #endregion\n    // #region ASYNC UPDATE & DELETE METHODS ~\n    getDotKeyToProp(prop, isNullifying = false) {\n        if (this.targetKeyPrefix) {\n            if (prop === undefined) {\n                return isNullifying ? this.targetKeyNullPrefix : this.targetKeyPrefix;\n            }\n            return `${this.targetKeyPrefix}.${isNullifying ? \"-=\" : \"\"}${prop}`;\n        }\n        if (this.targetFlagKeyPrefix) {\n            if (prop === undefined) {\n                return this.targetFlagKeyPrefix;\n            }\n            return `${this.targetFlagKeyPrefix}.${prop}`;\n        }\n        throw new Error(\"[BladesTargetLink.getDotKeyToProp()] Missing 'targetKeyPrefix' and 'targetFlagKeyPrefix'\");\n    }\n    getFlagParamsToProp(prop) {\n        return [_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.getDotKeyToProp(prop)];\n    }\n    async updateTargetFlag(prop, val) {\n        if (!this.targetFlagKeyPrefix) {\n            return;\n        }\n        if (val === null) {\n            await this.target.unsetFlag(...this.getFlagParamsToProp(prop));\n        }\n        else if (this.target instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor) {\n            await this.target.setFlag(...this.getFlagParamsToProp(prop), val);\n        }\n        else if (this.target instanceof _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem) {\n            await this.target.setFlag(...this.getFlagParamsToProp(prop), val);\n        }\n        else if (this.target instanceof User) {\n            await this.target.setFlag(...this.getFlagParamsToProp(prop), val);\n        }\n        else if (this.target instanceof _BladesChat__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            await this.target.setFlag(...this.getFlagParamsToProp(prop), val);\n        }\n    }\n    async updateTargetKey(prop, val) {\n        if (!this.targetKeyPrefix) {\n            return;\n        }\n        await this.target.update({ [this.getDotKeyToProp(prop, val === null)]: val }, { render: false });\n    }\n    initPromise;\n    isInitPromiseResolved = false;\n    /**\n     * Initializes a target link by updating the target's data with the provided data object.\n     * If a targetKey is provided, the data is updated directly on the target.\n     * If a targetFlagKey is provided, the data is set as a flag on the target.\n     *\n     * This method need only be run once, when the document is first created and its data must be written to server storage.\n     * External functions can synchronously check the status of initialization via the isInitPromiseResolved property, while\n     * asynchronous functions can await the initPromise property.\n     *\n     * TargetLink documents whose data already exists in server storage can be constructed directly (i.e. new BladesTargetLink(data))\n     * without needing to call this method.\n     *\n     * @param {BladesTargetLink.Data & Schema} data - The combined data object containing both the target link data and the schema data.\n     * @returns {Promise<void>} - A promise that resolves when the server update is complete.\n     */\n    async initTargetLink() {\n        this.isInitPromiseResolved = false;\n        // Construct data object\n        const data = {\n            ...this.linkData,\n            ...this.initialSchema\n        };\n        this.initPromise = new Promise((resolve, reject) => {\n            if (this.targetKeyPrefix) {\n                const updateData = mergeObject((getProperty(this.target, this.targetKeyPrefix) ?? {}), data);\n                this.target.update({ [this.targetKeyPrefix]: updateData }, { render: false }).then(() => {\n                    this.isInitPromiseResolved = true;\n                    resolve();\n                }).catch(reject);\n            }\n            else if (this.targetFlagKeyPrefix) {\n                const updateData = mergeObject((this.target.getFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.targetFlagKeyPrefix) ?? {}), data);\n                this.target.setFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.targetFlagKeyPrefix, updateData).then(() => {\n                    this.isInitPromiseResolved = true;\n                    resolve();\n                }).catch(reject);\n            }\n            else {\n                reject();\n            }\n        });\n        return this.initPromise;\n    }\n    async #updateTargetViaMerge(updateData, waitFor) {\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor(waitFor);\n        if (this.targetKeyPrefix) {\n            // First, prepend targetKeyPrefix or targetFlagKeyPrefix (as appropriate) to each key of updateData\n            updateData = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objMap(updateData, false, (key) => `${this.targetKeyPrefix || this.targetFlagKeyPrefix}.${key}`);\n            return this.target.update(updateData, { render: false });\n        }\n        else if (this.targetFlagKeyPrefix) {\n            // We must retrieve the existing flag data, flattenObject it, then merge it with updateData\n            const existingFlagData = this.target.getFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.targetFlagKeyPrefix) ?? {};\n            const flattenedFlagData = flattenObject(existingFlagData);\n            const mergedFlagData = mergeObject(flattenedFlagData, updateData);\n            return this.target.setFlag(_core_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SYSTEM_ID, this.targetFlagKeyPrefix, mergedFlagData);\n        }\n        else {\n            throw new Error(`[BladesTargetLink.#updateTargetViaMerge] Unable to update target data for BladesTargetLink id '${this.id}': Missing both 'targetKeyPrefix' and 'targetFlagKeyPrefix'`);\n        }\n    }\n    async #updateTargetPropVal(prop, val, waitFor) {\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor(waitFor);\n        if (this.targetKeyPrefix) {\n            return this.target.update({ [`${this.targetKeyPrefix}.${prop}`]: val });\n        }\n        else if (this.targetFlagKeyPrefix) {\n            return this.updateTargetFlag(prop, val);\n        }\n    }\n    async updateTarget(propOrData, valOrWaitFor, waitFor) {\n        // If the provided data is an object, we assume it is a full data object and we update the target with it.\n        if (typeof propOrData === \"string\") {\n            if (getProperty(this.data, propOrData) === valOrWaitFor) {\n                return;\n            }\n            return this.#updateTargetPropVal(propOrData, valOrWaitFor, waitFor);\n        }\n        if (typeof propOrData === \"object\") {\n            return this.#updateTargetViaMerge(propOrData, valOrWaitFor);\n        }\n        else {\n            throw new Error(`[BladesTargetLink.updateTarget()] Bad updateData for id '${this.id}': ${propOrData}`);\n        }\n    }\n    async updateTargetData(val, waitFor) {\n        if (val) {\n            // Add BladesTargetLink.Data to provided schema\n            val = {\n                ...val,\n                ...this.linkData\n            };\n        }\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor([this.initPromise, waitFor]);\n        if (this.targetFlagKeyPrefix) {\n            await this.updateTargetFlag(undefined, val);\n        }\n        else {\n            await this.updateTargetKey(undefined, val);\n        }\n    }\n    async delete(collection, waitFor) {\n        if (collection) {\n            collection.delete(this.id);\n        }\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].waitFor([this.initPromise, waitFor]);\n        await this.updateTargetData(null);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesTargetLink);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/classes/BladesTargetLink.ts\n");

/***/ }),

/***/ "./ts/core/ai.ts":
/*!***********************!*\
  !*** ./ts/core/ai.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AGENTS: function() { return /* binding */ AGENTS; },\n/* harmony export */   AIAssistant: function() { return /* binding */ AIAssistant; },\n/* harmony export */   OpenAIModel: function() { return /* binding */ OpenAIModel; },\n/* harmony export */   OpenAITool: function() { return /* binding */ OpenAITool; }\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n\n\nvar OpenAITool;\n(function (OpenAITool) {\n    OpenAITool[\"code_interpreter\"] = \"code_interpreter\";\n    OpenAITool[\"retrieval\"] = \"retrieval\";\n    OpenAITool[\"function\"] = \"function\";\n})(OpenAITool || (OpenAITool = {}));\nvar OpenAIModel;\n(function (OpenAIModel) {\n    OpenAIModel[\"ada\"] = \"ada\";\n    OpenAIModel[\"ada-code-search-code\"] = \"ada-code-search-code\";\n    OpenAIModel[\"ada-code-search-text\"] = \"ada-code-search-text\";\n    OpenAIModel[\"ada-search-document\"] = \"ada-search-document\";\n    OpenAIModel[\"ada-search-query\"] = \"ada-search-query\";\n    OpenAIModel[\"ada-similarity\"] = \"ada-similarity\";\n    OpenAIModel[\"babbage\"] = \"babbage\";\n    OpenAIModel[\"babbage-002\"] = \"babbage-002\";\n    OpenAIModel[\"babbage-code-search-code\"] = \"babbage-code-search-code\";\n    OpenAIModel[\"babbage-code-search-text\"] = \"babbage-code-search-text\";\n    OpenAIModel[\"babbage-search-document\"] = \"babbage-search-document\";\n    OpenAIModel[\"babbage-search-query\"] = \"babbage-search-query\";\n    OpenAIModel[\"babbage-similarity\"] = \"babbage-similarity\";\n    OpenAIModel[\"canary-tts\"] = \"canary-tts\";\n    OpenAIModel[\"canary-whisper\"] = \"canary-whisper\";\n    OpenAIModel[\"code-davinci-edit-001\"] = \"code-davinci-edit-001\";\n    OpenAIModel[\"code-search-ada-code-001\"] = \"code-search-ada-code-001\";\n    OpenAIModel[\"code-search-ada-text-001\"] = \"code-search-ada-text-001\";\n    OpenAIModel[\"code-search-babbage-code-001\"] = \"code-search-babbage-code-001\";\n    OpenAIModel[\"code-search-babbage-text-001\"] = \"code-search-babbage-text-001\";\n    OpenAIModel[\"curie\"] = \"curie\";\n    OpenAIModel[\"curie-instruct-beta\"] = \"curie-instruct-beta\";\n    OpenAIModel[\"curie-search-document\"] = \"curie-search-document\";\n    OpenAIModel[\"curie-search-query\"] = \"curie-search-query\";\n    OpenAIModel[\"curie-similarity\"] = \"curie-similarity\";\n    OpenAIModel[\"dall-e-2\"] = \"dall-e-2\";\n    OpenAIModel[\"davinci\"] = \"davinci\";\n    OpenAIModel[\"davinci-002\"] = \"davinci-002\";\n    OpenAIModel[\"davinci-instruct-beta\"] = \"davinci-instruct-beta\";\n    OpenAIModel[\"davinci-search-document\"] = \"davinci-search-document\";\n    OpenAIModel[\"davinci-search-query\"] = \"davinci-search-query\";\n    OpenAIModel[\"davinci-similarity\"] = \"davinci-similarity\";\n    OpenAIModel[\"gpt-3.5-turbo\"] = \"gpt-3.5-turbo\";\n    OpenAIModel[\"gpt-3.5-turbo-0301\"] = \"gpt-3.5-turbo-0301\";\n    OpenAIModel[\"gpt-3.5-turbo-0613\"] = \"gpt-3.5-turbo-0613\";\n    OpenAIModel[\"gpt-3.5-turbo-1106\"] = \"gpt-3.5-turbo-1106\";\n    OpenAIModel[\"gpt-3.5-turbo-16k\"] = \"gpt-3.5-turbo-16k\";\n    OpenAIModel[\"gpt-3.5-turbo-16k-0613\"] = \"gpt-3.5-turbo-16k-0613\";\n    OpenAIModel[\"gpt-3.5-turbo-instruct\"] = \"gpt-3.5-turbo-instruct\";\n    OpenAIModel[\"gpt-3.5-turbo-instruct-0914\"] = \"gpt-3.5-turbo-instruct-0914\";\n    OpenAIModel[\"gpt-4\"] = \"gpt-4\";\n    OpenAIModel[\"gpt-4-0314\"] = \"gpt-4-0314\";\n    OpenAIModel[\"gpt-4-0613\"] = \"gpt-4-0613\";\n    OpenAIModel[\"gpt-4-1106-preview\"] = \"gpt-4-1106-preview\";\n    OpenAIModel[\"gpt-4-vision-preview\"] = \"gpt-4-vision-preview\";\n    OpenAIModel[\"text-ada-001\"] = \"text-ada-001\";\n    OpenAIModel[\"text-babbage-001\"] = \"text-babbage-001\";\n    OpenAIModel[\"text-curie-001\"] = \"text-curie-001\";\n    OpenAIModel[\"text-davinci-001\"] = \"text-davinci-001\";\n    OpenAIModel[\"text-davinci-002\"] = \"text-davinci-002\";\n    OpenAIModel[\"text-davinci-003\"] = \"text-davinci-003\";\n    OpenAIModel[\"text-davinci-edit-001\"] = \"text-davinci-edit-001\";\n    OpenAIModel[\"text-embedding-ada-002\"] = \"text-embedding-ada-002\";\n    OpenAIModel[\"text-search-ada-doc-001\"] = \"text-search-ada-doc-001\";\n    OpenAIModel[\"text-search-ada-query-001\"] = \"text-search-ada-query-001\";\n    OpenAIModel[\"text-search-babbage-doc-001\"] = \"text-search-babbage-doc-001\";\n    OpenAIModel[\"text-search-babbage-query-001\"] = \"text-search-babbage-query-001\";\n    OpenAIModel[\"text-search-curie-doc-001\"] = \"text-search-curie-doc-001\";\n    OpenAIModel[\"text-search-curie-query-001\"] = \"text-search-curie-query-001\";\n    OpenAIModel[\"text-search-davinci-doc-001\"] = \"text-search-davinci-doc-001\";\n    OpenAIModel[\"text-search-davinci-query-001\"] = \"text-search-davinci-query-001\";\n    OpenAIModel[\"text-similarity-ada-001\"] = \"text-similarity-ada-001\";\n    OpenAIModel[\"text-similarity-babbage-001\"] = \"text-similarity-babbage-001\";\n    OpenAIModel[\"text-similarity-curie-001\"] = \"text-similarity-curie-001\";\n    OpenAIModel[\"text-similarity-davinci-001\"] = \"text-similarity-davinci-001\";\n    OpenAIModel[\"tts-1\"] = \"tts-1\";\n    OpenAIModel[\"tts-1-1106\"] = \"tts-1-1106\";\n    OpenAIModel[\"tts-1-hd\"] = \"tts-1-hd\";\n    OpenAIModel[\"tts-1-hd-1106\"] = \"tts-1-hd-1106\";\n    OpenAIModel[\"whisper-1\"] = \"whisper-1\";\n})(OpenAIModel || (OpenAIModel = {}));\nclass AIAssistant {\n    #apiKey;\n    #id;\n    #name;\n    get name() { return this.#name; }\n    #instructions;\n    #tools;\n    #model;\n    #fileIDs;\n    #metadata;\n    constructor(nameOrID, instructions, model = OpenAIModel[\"gpt-4-1106-preview\"], { isUsingRetrieval, functionTools, file_ids, metadata } = {}) {\n        // Initialize private properties so TypeScript doesn't yell at me.\n        this.#id = \"\";\n        this.#name = \"\";\n        this.#instructions = instructions ?? \"\";\n        this.#tools = [];\n        this.#model = model;\n        this.#fileIDs = file_ids ?? [];\n        this.#metadata = metadata ?? {};\n        // Retrieve API key\n        const apiKey = _utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSetting(\"openAPIKey\");\n        if (!apiKey) {\n            throw new Error(\"API Key required in Settings to use AI features.\");\n        }\n        this.#apiKey = apiKey;\n        // If instructions sent, we're creating a new Assistant.\n        if (instructions) {\n            this.#name = nameOrID;\n            if (isUsingRetrieval) {\n                this.#tools.push({ type: \"retrieval\" });\n            }\n            if (functionTools && functionTools.length) {\n                this.#tools.push(...functionTools);\n            }\n            this.createAssistant();\n        }\n        else {\n            // Otherwise, assume an ID was passed, and fetch the existing assistant.\n            this.#id = nameOrID;\n            this.retrieveAssistant();\n        }\n    }\n    async createAssistant() {\n        // curl https://api.openai.com/v1/assistants \\\n        // -H \"Content-Type: application/json\" \\\n        // -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n        // -H \"OpenAI-Beta: assistants=v1\" \\\n        // -d '{\n        //   \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies.\",\n        //   \"tools\": [{\"type\": \"retrieval\"}],\n        //   \"model\": \"gpt-4\",\n        //   \"file_ids\": [\"file-abc123\"]\n        // }'\n        const fetchRequest = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.#apiKey}`,\n                \"OpenAI-Beta\": \"assistants=v1\"\n            },\n            body: JSON.stringify({\n                name: this.#name,\n                instructions: this.#instructions,\n                tools: this.#tools,\n                model: this.#model,\n                file_ids: this.#fileIDs\n            })\n        };\n        eLog.checkLog3(\"BladesAssistant\", \"Fetch Request\", fetchRequest);\n        // Send a POST request to the OpenAI API\n        const response = await fetch(\"https://api.openai.com/v1/assistants\", fetchRequest);\n        // Check if the response status is not 200 (OK)\n        if (!response.ok) {\n            console.log(\"Failed AI Request:\", JSON.parse(fetchRequest.body));\n            // Throw an error with the status code\n            throw new Error(`OpenAI API request failed with status ${response.status}`);\n        }\n        // Parse the response body as JSON\n        const data = await response.json();\n        fetchRequest.body = JSON.parse(fetchRequest.body);\n        eLog.checkLog3(\"BladesAI\", \"AI Query\", { prompt: fetchRequest, response: data });\n        this.#id = data.id;\n    }\n    async retrieveAssistant() {\n        //   curl https://api.openai.com/v1/assistants/asst_abc123 \\\n        // -H \"Content-Type: application/json\" \\\n        // -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n        // -H \"OpenAI-Beta: assistants=v1\"\n        const fetchRequest = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.#apiKey}`,\n                \"OpenAI-Beta\": \"assistants=v1\"\n            }\n        };\n        // Send a POST request to the OpenAI API\n        const response = await fetch(`https://api.openai.com/v1/assistants/${this.#id}`, fetchRequest);\n        // Check if the response status is not 200 (OK)\n        if (!response.ok) {\n            // Throw an error with the status code\n            throw new Error(`OpenAI API request failed with status ${response.status}`);\n        }\n        // Parse the response body as JSON\n        const data = await response.json();\n        eLog.checkLog3(\"BladesAI\", \"AI Query\", { prompt: fetchRequest, response: data });\n        this.#name = data.name;\n        this.#instructions = data.instructions;\n        this.#tools = data.tools;\n        this.#model = data.model;\n        this.#fileIDs = data.file_ids;\n        this.#metadata = data.metadata;\n    }\n}\n/**\n * AI class for querying OpenAI API\n */\nclass BladesAI {\n    static async GetModels(isVerbose = false) {\n        const apiKey = _utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSetting(\"openAPIKey\");\n        if (!apiKey) {\n            throw new Error(\"You must configure your OpenAI API Key in Settings to use AI features.\");\n        }\n        const fetchRequest = {\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        };\n        // Send a POST request to the OpenAI API\n        const response = await fetch(\"https://api.openai.com/v1/models\", fetchRequest);\n        // Check if the response status is not 200 (OK)\n        if (!response.ok) {\n            // Throw an error with the status code\n            throw new Error(`OpenAI API request failed with status ${response.status}`);\n        }\n        // Parse the response body as JSON\n        const data = await response.json();\n        // const modelKeys = data.map(({id}: {id: string}) => id);\n        // const modelData = data.map(({id: _id, ...mData}: Record<string, string>) => mData);\n        const dataList = Object.fromEntries(data.map(({ id, ...mData }) => [id, mData]));\n        if (isVerbose) {\n            eLog.checkLog3(\"BladesAI\", \"Available Models\", { dataList });\n        }\n    }\n    apiKey;\n    model;\n    temperature = 0.5;\n    frequency_penalty = 0.8;\n    presence_penalty = 0.8;\n    systemMessage;\n    examplePrompts;\n    /**\n     * AI class constructor\n     * @param {BladesAI.Config} [config] Configuration settings for the API\n     */\n    constructor(config) {\n        const apiKey = _utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSetting(\"openAPIKey\");\n        if (!apiKey) {\n            throw new Error(\"You must configure your OpenAI API Key in Settings to use AI features.\");\n        }\n        this.model = _utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getSetting(\"openAPIModelLevel\");\n        if (typeof this.model !== \"number\") {\n            eLog.error(\"BladesAI\", \"Set base AI quality in settings. Defaulting to lowest.\");\n            this.model = 0;\n        }\n        this.apiKey = apiKey;\n        this.systemMessage = config.systemMessage;\n        this.examplePrompts = config.examplePrompts;\n        this.temperature = config.temperature ?? this.temperature;\n        this.frequency_penalty = config.frequency_penalty ?? this.frequency_penalty;\n        this.presence_penalty = config.presence_penalty ?? this.presence_penalty;\n    }\n    _initialMessages = [];\n    get initialMessages() {\n        if (this._initialMessages.length === 0) {\n            this._initialMessages.push({\n                role: \"system\",\n                content: this.systemMessage\n            });\n            for (const { human, ai } of this.examplePrompts) {\n                this._initialMessages.push({\n                    role: \"user\",\n                    content: human\n                });\n                this._initialMessages.push({\n                    role: \"assistant\",\n                    content: ai\n                });\n            }\n        }\n        return this._initialMessages;\n    }\n    prompts = {};\n    responses = {};\n    getResponse(queryID) {\n        return this.responses[queryID] ?? null;\n    }\n    hasQueried(queryID) {\n        return this.prompts[queryID] !== undefined;\n    }\n    /**\n     * Query OpenAI API\n     * @param {string} queryID A label for later retrieval of the query data\n     * @param {string} prompt The prompt to send to the API\n     * @param {number} [modelMod] Optional modifier to the base model level.\n     *                            If provided, the final model quality will be adjusted by this number.\n     * @param {boolean} [extendedContext=false] Optional flag to indicate whether to use extended context models.\n     *                            If true, extended context models are used; otherwise, base context models are used.\n     * @returns {Promise<Response>} The API response\n     */\n    async query(queryID, prompt, modelMod, extendedContext = false) {\n        if (!prompt) {\n            return;\n        }\n        this.responses[queryID] = null;\n        const modelNum = typeof modelMod === \"number\"\n            ? _utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].clampNum(this.model + modelMod, [0, 2])\n            : this.model;\n        const model = extendedContext\n            ? _constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AI_MODELS.extendedContext[modelNum]\n            : _constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AI_MODELS.baseContext[modelNum];\n        const fetchRequest = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.apiKey}`\n            },\n            body: JSON.stringify({\n                model,\n                temperature: this.temperature,\n                frequency_penalty: this.frequency_penalty,\n                presence_penalty: this.presence_penalty,\n                messages: [\n                    ...this.initialMessages,\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ]\n            })\n        };\n        // EeLog.checkLog3(\"BladesAI\", \"Fetch Request\", fetchRequest);\n        // Send a POST request to the OpenAI API\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", fetchRequest);\n        // {\n        //   method: \"POST\",\n        //   headers: {\n        //     // The content type of the request\n        //     \"Content-Type\": \"application/json\",\n        //     // The authorization header with the API key\n        //     Authorization: `Bearer ${this.apiKey}`\n        //   },\n        //   body: JSON.stringify({\n        //     model,\n        //     messages: [\n        //       ...this.initialMessages,\n        //       {\n        //         role: \"user\",\n        //         content: prompt\n        //       }\n        //     ],\n        //     // Maximum number of tokens in the output. Min: 1, Max: 4096\n        //     // max_tokens: 60,\n        //     // Controls randomness. Higher values mean the model will take more risks.\n        //     temperature: 0.5, // 0 to 2.0\n        //     /* The 'top_p' parameter is an alternative to 'temperature' for controlling the randomness of\n        //       the AI's responses. It represents the cumulative probability and its value ranges from 0 to 1.\n        //       A lower value makes the AI's responses more deterministic, while a higher value makes them\n        //       more diverse and unpredictable. */\n        //     // top_p: 1, // 0 to 1\n        //     /* The 'frequency_penalty' parameter is used to penalize new tokens based on their frequency in\n        //       the training set. Its value ranges from 0 to 1. A higher value means the AI is less likely to\n        //       use common phrases from its training set, leading to more unique responses. A lower value\n        //       means the AI is more likely to use common phrases, leading to more predictable responses. */\n        //     frequency_penalty: 0.8, // -2.0 to 2.0\n        //     /* The 'presence_penalty' parameter is used to penalize tokens (words or phrases) that are out\n        //       of context. Its value ranges from 0 to 1. A higher value means the AI is less likely to\n        //       include out-of-context tokens in its responses, leading to more coherent and contextually\n        //       appropriate responses. A lower value means the AI is more likely to include out-of-context\n        //       tokens, which can lead to more creative but potentially less coherent responses. */\n        //     presence_penalty: 0.8 // -2.0 to 2.0\n        //   })\n        // }\n        // );\n        // Check if the response status is not 200 (OK)\n        if (!response.ok) {\n            console.log(\"Failed AI Request:\", JSON.parse(fetchRequest.body));\n            // Throw an error with the status code\n            throw new Error(`OpenAI API request failed with status ${response.status}`);\n        }\n        // Parse the response body as JSON\n        const data = await response.json();\n        fetchRequest.body = JSON.parse(fetchRequest.body);\n        eLog.checkLog3(\"BladesAI\", \"AI Query\", { prompt: fetchRequest, response: data });\n        this.responses[queryID] = data.choices[0].message.content;\n        return this.responses[queryID];\n    }\n}\nconst AGENTS = {\n    GeneralContentGenerator: {\n        systemMessage: \"You will act as a creative content generator for a game of Blades In The Dark set in the city of Duskvol. You will be prompted with some element of the game world (a location, a character, an event, a faction, a dilemma) in the form of a JSON object. Your job is to analyze the JSON object and replace any values that equal \\\"<GEN>\\\" with original content of your own creation. Original content must meet these requirements:  (A) it should align with and be consistent with the provided contextual information, as well as your broader understanding of the game's themes. (B) It should be presented in a format that matches (in length and in style) other entries for that particular value, examples of which will also be provided. (C) It should be creative, interesting, and daring: Be bold with your creativity. Specific context for this prompt is as follows:\",\n        examplePrompts: []\n    },\n    NPCGenerator: {\n        systemMessage: \"You will play the role of a \\\"creative content generator\\\" for random NPCs generated for the Blades In The Dark roleplaying system. When prompted with a description of a subject (an NPC, a category of NPCs, a faction, or a group of NPCs), you will respond with a pipe-delimited list of sixteen items, divided into four categories, prefacing each category with the associated header in square brackets: [5 KEYWORDS] Five one-word keywords describing the subject. [5 PHRASES] Five evocative phrases that could be used by a GM directly when narrating the subject during play. These should be extremely well-worded, very original, and packed with drama and evocative imagery. Be bold with your responses here. [3 QUIRKS/MOTIFFS] Three phrases describing potential quirks or motiffs that a GM could employ in a scene involving the subject. [3 PLOT HOOKS] Three plot hooks that could directly and specifically involve one or more of the PCs. The PCs are: (1) Alistair, full name Lord Alistair Bram Chesterfield, the crew's boss, a Spider with connections among the nobility; (2) High-Flyer, a former noble himself, now serving as the crew's Slide; (3) Jax, a stoic and laconic Hound with ties to the disenfranchised of Duskvol; (4) Ollie, the youngest of the crew at barely nineteen, a prodigy Leech with knowledge of alchemy and spark-craft, who grew up as an orphan in Duskvol's underground; (5) Wraith, the mysterious Lurk of the crew, who never speaks for reasons unknown; and (6) Spencer, the bookish Whisper of the crew, who harbors a secret fascination for demons and all things related to them.\",\n        examplePrompts: [\n            {\n                human: \"The Billhooks, a hack-and-slash gang of toughened thugs. The Billhooks have a bloody reputation, often leaving the butchered corpses of their victims strewn about in a grisly display. Many wonder why the Bluecoats turn a blind eye to their savagery. Based out of their butcher shop headquarters, they are led by Tarvul, who is currently serving life in prison.\",\n                ai: \"[5 KEYWORDS]brutal|unrelenting|savage|fierce|unhinged|[5 PHRASES]blood-flecked, yellowed teeth|eyes that want to flay your skin from your bones|crooked leer like he's looking at his Judas goat|reek like a charnel house|gobbets of a meaty lunch still in his beard|[3 QUIRKS/MOTIFFS]always ready to wreck, vandalize or destroy something|relish in instilling fear in others|have a twisted sense of loyalty|[3 PLOT HOOKS]Tarvul hires the crew to start a war among his most promising underlings, intending to make whoever survives his successor|the Billhooks kidnap a member of High-Flyer's noble family|a Demon of Shadows promises Spencer the answer to three questions, in exchange for an artifact recently stolen by the Billhooks\"\n            },\n            {\n                human: \"The hooded proprietor of a half-flooded grotto tavern near the docks. 'Strange passageways lead to stranger chambers beyond.' Vice Purveyor - Weird.\",\n                ai: \"[5 KEYWORDS]mysterious|cryptic|enigmatic|peculiar|shrouded|[5 PHRASES]a voice like wet burlap sliding over gravel|the flicker of torchlight dancing on the flooded floor|the scent of brackish water and old spices|a smile that hinted at a thousand secrets hidden in the shadows|hands gnarled as driftwood, eternally damp|[3 QUIRKS/MOTIFFS]has an uncanny knack for knowing patrons' darkest secrets without them telling him|never seems to sleep or leave the tavern, always there no matter what time you visit|always seen with a strange, luminescent creature that lives in one of the flooded chambers behind the bar|[3 PLOT HOOKS]Alistair hears rumors that this tavern is actually a front for a powerful secret society - perhaps they could be useful allies...or dangerous enemies.|The proprietor offers Ollie a rare alchemical ingredient - but it's not for sale. He'll only trade it for something equally valuable.|Wraith overhears whispers about a hidden chamber beneath the tavern where unimaginable treasures are kept.\"\n            },\n            {\n                human: \"Setarra, a Demon. Patient, Defiant, Ruthless, Cold\",\n                ai: \"[5 KEYWORDS]shadowy|sinister|unfathomable|enigmatic|tempting|[5 PHRASES]whispers that crawl under your skin|always watching, always plotting|in tones of silk and venom|intoxicating presence that draws you closer, despite your instincts urging you to run|eyes like black holes, swallowing all light around them|[3 QUIRKS/MOTIFFS]a disorienting mist clings to her form, obscuring her true shape|casually discusses the devastating acts of capricious revenge she has taken on those who crossed her|never forgets a slight or betrayal, no matter how small or insignificant it may seem at the time|[3 PLOT HOOKS]seeks revenge against Alistair for meddling in her affairs years ago|makes Ollie an offer he can't refuse: unlimited access to forbidden alchemical knowledge in exchange for a single favor, to be called in at some future time|tempts Spencer with forbidden knowledge about demons, promising answers to all their questions if they perform a dangerous ritual\"\n            }\n            /*\n            \"brutish,merciless,terrifying,savage,loyal,\n            bloody tools,hulking figures,blood-soaked alleys,grimy aprons,grisly displays,\n            never clean their tools,relishes the terror they inspire,occasional laughter among them,\n            recruiting a PC to perform a job for them from prison,\n            the gang blames one of the PCs for Tarvul's imprisonment and they're out for revenge\" */\n        ]\n    },\n    ConsequenceAdjuster: {\n        systemMessage: \"You will act as a \\\"Setback Adjuster\\\" for a game of Blades In The Dark.  You will be prompted with a short phrase describing an injury, lasting consequence or other setback. Your job is to respond with a pipe-delimited list of three possible alternative consequences that are less severe by one level, using the following scale as a rough guide: Level 1 = Lesser (e.g. 'Battered', 'Drained', 'Distracted', 'Scared', 'Confused'), Level 2 = Moderate (e.g. 'Exhausted', 'Deep Cut to Arm', 'Concussion', 'Panicked', 'Seduced'), Level 3 = Severe (e.g. 'Impaled', 'Broken Leg', 'Shot In Chest', 'Badly Burned', 'Terrified'), Level 4 = Fatal or Ruinous (e.g. 'Impaled Through Heart', 'Electrocuted', 'Headquarters Burned to the Ground'). So, if you determine that the consequence described in the prompt is severity level 3, you should respond with three narratively similar consequences that are severity level 2.  Your three suggestions should be different from each other, but they should all logically follow from the initial harm described: You should not introduce new facts or make assumptions that are not indicated in the initial prompt. The consequences you suggest should always describe a NEGATIVE setback or complication, just one that is less severe than the one described in the prompt.\",\n        examplePrompts: [\n            { human: \"Shattered Right Leg\", ai: \"Fractured Right Ankle|Dislocated Knee|Broken Foot\" },\n            { human: \"Soul Destroyed\", ai: \"Fully Corrupted|Lost In Darkness|Spirit Broken\" },\n            { human: \"Humiliated\", ai: \"Embarrassed|Momentarily Off-Balance|Enraged\" },\n            { human: \"She Escapes!\", ai: \"She Spots a Means of Escape|She Puts More Distance Between You|She Stops to Gloat\" },\n            { human: \"The fire spreads to the hostages.\", ai: \"The fire approaches the hostages.|The hostages must be evacuated.|The fire billows choking black smoke.\" }\n        ]\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesAI);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/ai.ts\n");

/***/ }),

/***/ "./ts/core/constants.ts":
/*!******************************!*\
  !*** ./ts/core/constants.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTrait: function() { return /* binding */ ActionTrait; },\n/* harmony export */   AdvancementPoint: function() { return /* binding */ AdvancementPoint; },\n/* harmony export */   AttributeTrait: function() { return /* binding */ AttributeTrait; },\n/* harmony export */   BladesActorType: function() { return /* binding */ BladesActorType; },\n/* harmony export */   BladesItemType: function() { return /* binding */ BladesItemType; },\n/* harmony export */   BladesNoticeType: function() { return /* binding */ BladesNoticeType; },\n/* harmony export */   BladesPermissions: function() { return /* binding */ BladesPermissions; },\n/* harmony export */   BladesPhase: function() { return /* binding */ BladesPhase; },\n/* harmony export */   ClockColor: function() { return /* binding */ ClockColor; },\n/* harmony export */   ClockDisplayContext: function() { return /* binding */ ClockDisplayContext; },\n/* harmony export */   ClockKeyDisplayMode: function() { return /* binding */ ClockKeyDisplayMode; },\n/* harmony export */   ClockKeyUpdateAction: function() { return /* binding */ ClockKeyUpdateAction; },\n/* harmony export */   ClockKey_SVGDATA: function() { return /* binding */ ClockKey_SVGDATA; },\n/* harmony export */   ConsequenceType: function() { return /* binding */ ConsequenceType; },\n/* harmony export */   District: function() { return /* binding */ District; },\n/* harmony export */   DowntimeAction: function() { return /* binding */ DowntimeAction; },\n/* harmony export */   Effect: function() { return /* binding */ Effect; },\n/* harmony export */   Factor: function() { return /* binding */ Factor; },\n/* harmony export */   Harm: function() { return /* binding */ Harm; },\n/* harmony export */   InsightActions: function() { return /* binding */ InsightActions; },\n/* harmony export */   MainDistrict: function() { return /* binding */ MainDistrict; },\n/* harmony export */   OtherDistrict: function() { return /* binding */ OtherDistrict; },\n/* harmony export */   Playbook: function() { return /* binding */ Playbook; },\n/* harmony export */   Position: function() { return /* binding */ Position; },\n/* harmony export */   PrereqType: function() { return /* binding */ PrereqType; },\n/* harmony export */   ProwessActions: function() { return /* binding */ ProwessActions; },\n/* harmony export */   Randomizers: function() { return /* binding */ Randomizers; },\n/* harmony export */   ResolveActions: function() { return /* binding */ ResolveActions; },\n/* harmony export */   RollModSection: function() { return /* binding */ RollModSection; },\n/* harmony export */   RollModStatus: function() { return /* binding */ RollModStatus; },\n/* harmony export */   RollModType: function() { return /* binding */ RollModType; },\n/* harmony export */   RollPermissions: function() { return /* binding */ RollPermissions; },\n/* harmony export */   RollPhase: function() { return /* binding */ RollPhase; },\n/* harmony export */   RollResult: function() { return /* binding */ RollResult; },\n/* harmony export */   RollSubType: function() { return /* binding */ RollSubType; },\n/* harmony export */   RollType: function() { return /* binding */ RollType; },\n/* harmony export */   SVGDATA: function() { return /* binding */ SVGDATA; },\n/* harmony export */   Tag: function() { return /* binding */ Tag; },\n/* harmony export */   Vice: function() { return /* binding */ Vice; }\n/* harmony export */ });\n// #region ENUMS ~\nvar BladesPermissions;\n(function (BladesPermissions) {\n    BladesPermissions[BladesPermissions[\"NONE\"] = CONST.DOCUMENT_PERMISSION_LEVELS.NONE] = \"NONE\";\n    BladesPermissions[BladesPermissions[\"BASIC\"] = CONST.DOCUMENT_PERMISSION_LEVELS.LIMITED] = \"BASIC\";\n    BladesPermissions[BladesPermissions[\"FULL\"] = CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER] = \"FULL\";\n    BladesPermissions[BladesPermissions[\"OWNER\"] = CONST.DOCUMENT_PERMISSION_LEVELS.OWNER] = \"OWNER\";\n})(BladesPermissions || (BladesPermissions = {}));\nvar BladesActorType;\n(function (BladesActorType) {\n    BladesActorType[\"pc\"] = \"pc\";\n    BladesActorType[\"npc\"] = \"npc\";\n    BladesActorType[\"crew\"] = \"crew\";\n    BladesActorType[\"faction\"] = \"faction\";\n})(BladesActorType || (BladesActorType = {}));\nvar BladesItemType;\n(function (BladesItemType) {\n    BladesItemType[\"ability\"] = \"ability\";\n    BladesItemType[\"background\"] = \"background\";\n    BladesItemType[\"clock_keeper\"] = \"clock_keeper\";\n    BladesItemType[\"cohort_gang\"] = \"cohort_gang\";\n    BladesItemType[\"cohort_expert\"] = \"cohort_expert\";\n    BladesItemType[\"crew_ability\"] = \"crew_ability\";\n    BladesItemType[\"crew_reputation\"] = \"crew_reputation\";\n    BladesItemType[\"crew_playbook\"] = \"crew_playbook\";\n    BladesItemType[\"crew_upgrade\"] = \"crew_upgrade\";\n    BladesItemType[\"feature\"] = \"feature\";\n    BladesItemType[\"gm_tracker\"] = \"gm_tracker\";\n    BladesItemType[\"heritage\"] = \"heritage\";\n    BladesItemType[\"gear\"] = \"gear\";\n    BladesItemType[\"playbook\"] = \"playbook\";\n    BladesItemType[\"preferred_op\"] = \"preferred_op\";\n    BladesItemType[\"stricture\"] = \"stricture\";\n    BladesItemType[\"vice\"] = \"vice\";\n    BladesItemType[\"project\"] = \"project\";\n    BladesItemType[\"ritual\"] = \"ritual\";\n    BladesItemType[\"design\"] = \"design\";\n    BladesItemType[\"location\"] = \"location\";\n    BladesItemType[\"score\"] = \"score\";\n})(BladesItemType || (BladesItemType = {}));\nvar PrereqType;\n(function (PrereqType) {\n    PrereqType[\"HasActiveItem\"] = \"HasActiveItem\";\n    PrereqType[\"HasActiveItemsByTag\"] = \"HasActiveItemByTag\";\n    PrereqType[\"AdvancedPlaybook\"] = \"AdvancedPlaybook\";\n    PrereqType[\"HasAllTags\"] = \"HasAllTags\";\n    PrereqType[\"HasAnyTag\"] = \"HasAnyTag\";\n    PrereqType[\"Not_HasActiveItem\"] = \"Not_HasActiveItem\";\n    PrereqType[\"Not_HasActiveItemsByTag\"] = \"Not_HasActiveItemsByTag\";\n    PrereqType[\"Not_AdvancedPlaybook\"] = \"Not_AdvancedPlaybook\";\n    PrereqType[\"Not_HasAllTags\"] = \"Not_HasAllTags\";\n    PrereqType[\"Not_HasAnyTag\"] = \"Not_HasAnyTag\";\n})(PrereqType || (PrereqType = {}));\nvar ClockColor;\n(function (ClockColor) {\n    ClockColor[\"yellow\"] = \"yellow\";\n    ClockColor[\"red\"] = \"red\";\n    ClockColor[\"white\"] = \"white\";\n    ClockColor[\"cyan\"] = \"cyan\";\n})(ClockColor || (ClockColor = {}));\nvar ClockDisplayContext;\n(function (ClockDisplayContext) {\n    ClockDisplayContext[\"overlay\"] = \"overlay\";\n    ClockDisplayContext[\"pcSheet\"] = \"pcSheet\";\n    ClockDisplayContext[\"factionSheet\"] = \"factionSheet\";\n    ClockDisplayContext[\"projectSheet\"] = \"projectSheet\";\n    ClockDisplayContext[\"scoreSheet\"] = \"scoreSheet\";\n    ClockDisplayContext[\"rollCollab\"] = \"rollCollab\";\n    ClockDisplayContext[\"chatMessage\"] = \"chatMessage\";\n})(ClockDisplayContext || (ClockDisplayContext = {}));\nvar ClockKeyUpdateAction;\n(function (ClockKeyUpdateAction) {\n    ClockKeyUpdateAction[\"RenderAll\"] = \"RenderAll\";\n    ClockKeyUpdateAction[\"RenderNonClockKeeper\"] = \"RenderNonClockKeeper\";\n    ClockKeyUpdateAction[\"RenderNone\"] = \"RenderNone\";\n})(ClockKeyUpdateAction || (ClockKeyUpdateAction = {}));\nvar ClockKeyDisplayMode;\n(function (ClockKeyDisplayMode) {\n    ClockKeyDisplayMode[\"full\"] = \"full\";\n    ClockKeyDisplayMode[\"clocks\"] = \"clocks\";\n    ClockKeyDisplayMode[\"activeClocks\"] = \"activeClocks\";\n    ClockKeyDisplayMode[\"presentCurrentClock\"] = \"presentCurrentClock\";\n    ClockKeyDisplayMode[\"present0\"] = \"present0\";\n    ClockKeyDisplayMode[\"present1\"] = \"present1\";\n    ClockKeyDisplayMode[\"present2\"] = \"present2\";\n    ClockKeyDisplayMode[\"present3\"] = \"present3\";\n    ClockKeyDisplayMode[\"present4\"] = \"present4\";\n    ClockKeyDisplayMode[\"present5\"] = \"present5\";\n})(ClockKeyDisplayMode || (ClockKeyDisplayMode = {}));\nvar BladesNoticeType;\n(function (BladesNoticeType) {\n    BladesNoticeType[\"push\"] = \"push\";\n})(BladesNoticeType || (BladesNoticeType = {}));\nvar District;\n(function (District) {\n    District[\"Barrowcleft\"] = \"Barrowcleft\";\n    District[\"Brightstone\"] = \"Brightstone\";\n    District[\"Charhollow\"] = \"Charhollow\";\n    District[\"Charterhall\"] = \"Charterhall\";\n    District[\"Coalridge\"] = \"Coalridge\";\n    District[\"Crows Foot\"] = \"Crows Foot\";\n    District[\"The Docks\"] = \"The Docks\";\n    District[\"Dunslough\"] = \"Dunslough\";\n    District[\"Nightmarket\"] = \"Nightmarket\";\n    District[\"Silkshore\"] = \"Silkshore\";\n    District[\"Six Towers\"] = \"Six Towers\";\n    District[\"Whitecrown\"] = \"Whitecrown\";\n    District[\"Gaddoc Station\"] = \"Gaddoc Station\";\n    District[\"The Lost District\"] = \"The Lost District\";\n    District[\"The Void Sea\"] = \"The Void Sea\";\n    District[\"Ironhook Prison\"] = \"Ironhook Prison\";\n    District[\"Old North Port\"] = \"Old North Port\";\n    District[\"Deathlands\"] = \"Deathlands\";\n})(District || (District = {}));\nvar MainDistrict;\n(function (MainDistrict) {\n    MainDistrict[\"Barrowcleft\"] = \"Barrowcleft\";\n    MainDistrict[\"Brightstone\"] = \"Brightstone\";\n    MainDistrict[\"Charhollow\"] = \"Charhollow\";\n    MainDistrict[\"Charterhall\"] = \"Charterhall\";\n    MainDistrict[\"Coalridge\"] = \"Coalridge\";\n    MainDistrict[\"Crows Foot\"] = \"Crows Foot\";\n    MainDistrict[\"The Docks\"] = \"The Docks\";\n    MainDistrict[\"Dunslough\"] = \"Dunslough\";\n    MainDistrict[\"Nightmarket\"] = \"Nightmarket\";\n    MainDistrict[\"Silkshore\"] = \"Silkshore\";\n    MainDistrict[\"Six Towers\"] = \"Six Towers\";\n    MainDistrict[\"Whitecrown\"] = \"Whitecrown\";\n})(MainDistrict || (MainDistrict = {}));\nvar OtherDistrict;\n(function (OtherDistrict) {\n    OtherDistrict[\"Gaddoc Station\"] = \"Gaddoc Station\";\n    OtherDistrict[\"The Lost District\"] = \"The Lost District\";\n    OtherDistrict[\"The Void Sea\"] = \"The Void Sea\";\n    OtherDistrict[\"Ironhook Prison\"] = \"Ironhook Prison\";\n    OtherDistrict[\"Old North Port\"] = \"Old North Port\";\n    OtherDistrict[\"Deathlands\"] = \"Deathlands\";\n})(OtherDistrict || (OtherDistrict = {}));\nvar AttributeTrait;\n(function (AttributeTrait) {\n    AttributeTrait[\"insight\"] = \"insight\";\n    AttributeTrait[\"prowess\"] = \"prowess\";\n    AttributeTrait[\"resolve\"] = \"resolve\";\n})(AttributeTrait || (AttributeTrait = {}));\nvar InsightActions;\n(function (InsightActions) {\n    InsightActions[\"hunt\"] = \"hunt\";\n    InsightActions[\"study\"] = \"study\";\n    InsightActions[\"survey\"] = \"survey\";\n    InsightActions[\"tinker\"] = \"tinker\";\n})(InsightActions || (InsightActions = {}));\nvar ProwessActions;\n(function (ProwessActions) {\n    ProwessActions[\"finesse\"] = \"finesse\";\n    ProwessActions[\"prowl\"] = \"prowl\";\n    ProwessActions[\"skirmish\"] = \"skirmish\";\n    ProwessActions[\"wreck\"] = \"wreck\";\n})(ProwessActions || (ProwessActions = {}));\nvar ResolveActions;\n(function (ResolveActions) {\n    ResolveActions[\"attune\"] = \"attune\";\n    ResolveActions[\"command\"] = \"command\";\n    ResolveActions[\"consort\"] = \"consort\";\n    ResolveActions[\"sway\"] = \"sway\";\n})(ResolveActions || (ResolveActions = {}));\nvar ActionTrait;\n(function (ActionTrait) {\n    ActionTrait[\"hunt\"] = \"hunt\";\n    ActionTrait[\"study\"] = \"study\";\n    ActionTrait[\"survey\"] = \"survey\";\n    ActionTrait[\"tinker\"] = \"tinker\";\n    ActionTrait[\"finesse\"] = \"finesse\";\n    ActionTrait[\"prowl\"] = \"prowl\";\n    ActionTrait[\"skirmish\"] = \"skirmish\";\n    ActionTrait[\"wreck\"] = \"wreck\";\n    ActionTrait[\"attune\"] = \"attune\";\n    ActionTrait[\"command\"] = \"command\";\n    ActionTrait[\"consort\"] = \"consort\";\n    ActionTrait[\"sway\"] = \"sway\";\n})(ActionTrait || (ActionTrait = {}));\nvar DowntimeAction;\n(function (DowntimeAction) {\n    DowntimeAction[\"AcquireAsset\"] = \"AcquireAsset\";\n    DowntimeAction[\"IndulgeVice\"] = \"IndulgeVice\";\n    DowntimeAction[\"LongTermProject\"] = \"LongTermProject\";\n    DowntimeAction[\"Recover\"] = \"Recover\";\n    DowntimeAction[\"ReduceHeat\"] = \"ReduceHeat\";\n    DowntimeAction[\"Train\"] = \"Train\";\n})(DowntimeAction || (DowntimeAction = {}));\nvar RollPermissions;\n(function (RollPermissions) {\n    RollPermissions[\"Primary\"] = \"Primary\";\n    RollPermissions[\"Observer\"] = \"Observer\";\n    RollPermissions[\"GM\"] = \"GM\";\n    RollPermissions[\"Participant\"] = \"Participant\";\n})(RollPermissions || (RollPermissions = {}));\nvar RollType;\n(function (RollType) {\n    RollType[\"Action\"] = \"Action\";\n    RollType[\"Resistance\"] = \"Resistance\";\n    RollType[\"Fortune\"] = \"Fortune\";\n    RollType[\"IndulgeVice\"] = \"IndulgeVice\";\n})(RollType || (RollType = {}));\nvar RollSubType;\n(function (RollSubType) {\n    RollSubType[\"Incarceration\"] = \"Incarceration\";\n    RollSubType[\"Engagement\"] = \"Engagement\";\n    RollSubType[\"GatherInfo\"] = \"GatherInfo\";\n    RollSubType[\"GroupLead\"] = \"GroupLead\";\n    RollSubType[\"GroupParticipant\"] = \"GroupParticipant\";\n})(RollSubType || (RollSubType = {}));\nvar RollModType;\n(function (RollModType) {\n    RollModType[\"general\"] = \"general\";\n    RollModType[\"harm\"] = \"harm\";\n    RollModType[\"teamwork\"] = \"teamwork\";\n    RollModType[\"ability\"] = \"ability\";\n    RollModType[\"gear\"] = \"gear\";\n    RollModType[\"crew_ability\"] = \"crew_ability\";\n    RollModType[\"crew_upgrade\"] = \"crew_upgrade\";\n    RollModType[\"advantage\"] = \"advantage\";\n    RollModType[\"disadvantage\"] = \"disadvantage\";\n})(RollModType || (RollModType = {}));\nvar ConsequenceType;\n(function (ConsequenceType) {\n    ConsequenceType[\"ReducedEffect\"] = \"ReducedEffect\";\n    ConsequenceType[\"ComplicationMinor\"] = \"ComplicationMinor\";\n    ConsequenceType[\"ComplicationMajor\"] = \"ComplicationMajor\";\n    ConsequenceType[\"ComplicationSerious\"] = \"ComplicationSerious\";\n    ConsequenceType[\"LostOpportunity\"] = \"LostOpportunity\";\n    ConsequenceType[\"WorsePosition\"] = \"WorsePosition\";\n    ConsequenceType[\"InsightHarm1\"] = \"InsightHarm1\";\n    ConsequenceType[\"InsightHarm2\"] = \"InsightHarm2\";\n    ConsequenceType[\"InsightHarm3\"] = \"InsightHarm3\";\n    ConsequenceType[\"InsightHarm4\"] = \"InsightHarm4\";\n    ConsequenceType[\"ProwessHarm1\"] = \"ProwessHarm1\";\n    ConsequenceType[\"ProwessHarm2\"] = \"ProwessHarm2\";\n    ConsequenceType[\"ProwessHarm3\"] = \"ProwessHarm3\";\n    ConsequenceType[\"ProwessHarm4\"] = \"ProwessHarm4\";\n    ConsequenceType[\"ResolveHarm1\"] = \"ResolveHarm1\";\n    ConsequenceType[\"ResolveHarm2\"] = \"ResolveHarm2\";\n    ConsequenceType[\"ResolveHarm3\"] = \"ResolveHarm3\";\n    ConsequenceType[\"ResolveHarm4\"] = \"ResolveHarm4\";\n    ConsequenceType[\"None\"] = \"None\";\n})(ConsequenceType || (ConsequenceType = {}));\nvar RollModStatus;\n(function (RollModStatus) {\n    RollModStatus[\"Hidden\"] = \"Hidden\";\n    RollModStatus[\"ForcedOff\"] = \"ForcedOff\";\n    RollModStatus[\"ToggledOff\"] = \"ToggledOff\";\n    RollModStatus[\"ToggledOn\"] = \"ToggledOn\";\n    RollModStatus[\"ForcedOn\"] = \"ForcedOn\";\n    RollModStatus[\"Dominant\"] = \"Dominant\";\n})(RollModStatus || (RollModStatus = {}));\nvar RollModSection;\n(function (RollModSection) {\n    RollModSection[\"roll\"] = \"roll\";\n    RollModSection[\"position\"] = \"position\";\n    RollModSection[\"effect\"] = \"effect\";\n    RollModSection[\"result\"] = \"result\";\n    RollModSection[\"after\"] = \"after\";\n})(RollModSection || (RollModSection = {}));\nvar Position;\n(function (Position) {\n    Position[\"desperate\"] = \"desperate\";\n    Position[\"risky\"] = \"risky\";\n    Position[\"controlled\"] = \"controlled\";\n})(Position || (Position = {}));\nvar Effect;\n(function (Effect) {\n    Effect[\"zero\"] = \"zero\";\n    Effect[\"limited\"] = \"limited\";\n    Effect[\"standard\"] = \"standard\";\n    Effect[\"great\"] = \"great\";\n    Effect[\"extreme\"] = \"extreme\";\n})(Effect || (Effect = {}));\nvar Factor;\n(function (Factor) {\n    Factor[\"tier\"] = \"tier\";\n    Factor[\"quality\"] = \"quality\";\n    Factor[\"scale\"] = \"scale\";\n    Factor[\"magnitude\"] = \"magnitude\";\n})(Factor || (Factor = {}));\nvar RollResult;\n(function (RollResult) {\n    RollResult[\"critical\"] = \"critical\";\n    RollResult[\"success\"] = \"success\";\n    RollResult[\"partial\"] = \"partial\";\n    RollResult[\"fail\"] = \"fail\";\n})(RollResult || (RollResult = {}));\nvar RollPhase;\n(function (RollPhase) {\n    // Collaboration: Before GM toggles \"Roll\" button for player to click.\n    RollPhase[\"Collaboration\"] = \"Collaboration\";\n    // AwaitingRoll: Waiting for player to click \"ROLL\"\n    RollPhase[\"AwaitingRoll\"] = \"AwaitingRoll\";\n    // AwaitingConsequences: Waiting for player to resist or accept consequences\n    //                        in chat. Only moves to 'Complete' when all consequences\n    //                        have been accepted or negated. (Resisted consequences\n    //                        must still be accepted, since player could elect to use armor.)\n    RollPhase[\"AwaitingConsequences\"] = \"AwaitingConsequences\";\n    // Complete: Roll finished.\n    RollPhase[\"Complete\"] = \"Complete\";\n})(RollPhase || (RollPhase = {}));\nvar Harm;\n(function (Harm) {\n    Harm[\"Weakened\"] = \"Weakened\";\n    Harm[\"Impaired\"] = \"Impaired\";\n    Harm[\"Broken\"] = \"Broken\";\n    Harm[\"Dead\"] = \"Dead\";\n})(Harm || (Harm = {}));\nvar Vice;\n(function (Vice) {\n    Vice[\"Faith\"] = \"Faith\";\n    Vice[\"Gambling\"] = \"Gambling\";\n    Vice[\"Luxury\"] = \"Luxury\";\n    Vice[\"Obligation\"] = \"Obligation\";\n    Vice[\"Pleasure\"] = \"Pleasure\";\n    Vice[\"Stupor\"] = \"Stupor\";\n    Vice[\"Weird\"] = \"Weird\";\n    Vice[\"Worship\"] = \"Worship\";\n    Vice[\"Life_Essence\"] = \"Life_Essence\";\n    Vice[\"Living_Essence\"] = \"Living_Essence\";\n    Vice[\"Electroplasmic_Power\"] = \"Electroplasmic_Power\";\n    Vice[\"Servitude\"] = \"Servitude\";\n})(Vice || (Vice = {}));\nvar Playbook;\n(function (Playbook) {\n    Playbook[\"Cutter\"] = \"Cutter\";\n    Playbook[\"Hound\"] = \"Hound\";\n    Playbook[\"Leech\"] = \"Leech\";\n    Playbook[\"Lurk\"] = \"Lurk\";\n    Playbook[\"Slide\"] = \"Slide\";\n    Playbook[\"Spider\"] = \"Spider\";\n    Playbook[\"Whisper\"] = \"Whisper\";\n    Playbook[\"Vampire\"] = \"Vampire\";\n    Playbook[\"Hull\"] = \"Hull\";\n    Playbook[\"Ghost\"] = \"Ghost\";\n    Playbook[\"Assassins\"] = \"Assassins\";\n    Playbook[\"Bravos\"] = \"Bravos\";\n    Playbook[\"Cult\"] = \"Cult\";\n    Playbook[\"Hawkers\"] = \"Hawkers\";\n    Playbook[\"Shadows\"] = \"Shadows\";\n    Playbook[\"Smugglers\"] = \"Smugglers\";\n    Playbook[\"Vigilantes\"] = \"Vigilantes\";\n})(Playbook || (Playbook = {}));\nvar AdvancementPoint;\n(function (AdvancementPoint) {\n    AdvancementPoint[\"UpgradeOrAbility\"] = \"UpgradeOrAbility\";\n    AdvancementPoint[\"Ability\"] = \"Ability\";\n    AdvancementPoint[\"Upgrade\"] = \"Upgrade\";\n    AdvancementPoint[\"Cohort\"] = \"Cohort\";\n    AdvancementPoint[\"CohortType\"] = \"CohortType\";\n    AdvancementPoint[\"GeneralAction\"] = \"GeneralAction\";\n    AdvancementPoint[\"GeneralInsight\"] = \"GeneralInsight\";\n    AdvancementPoint[\"GeneralProwess\"] = \"GeneralProwess\";\n    AdvancementPoint[\"GeneralResolve\"] = \"GeneralResolve\";\n    AdvancementPoint[\"hunt\"] = \"hunt\";\n    AdvancementPoint[\"study\"] = \"study\";\n    AdvancementPoint[\"survey\"] = \"survey\";\n    AdvancementPoint[\"tinker\"] = \"tinker\";\n    AdvancementPoint[\"finesse\"] = \"finesse\";\n    AdvancementPoint[\"prowl\"] = \"prowl\";\n    AdvancementPoint[\"skirmish\"] = \"skirmish\";\n    AdvancementPoint[\"wreck\"] = \"wreck\";\n    AdvancementPoint[\"attune\"] = \"attune\";\n    AdvancementPoint[\"command\"] = \"command\";\n    AdvancementPoint[\"consort\"] = \"consort\";\n    AdvancementPoint[\"sway\"] = \"sway\";\n})(AdvancementPoint || (AdvancementPoint = {}));\nvar BladesPhase;\n(function (BladesPhase) {\n    BladesPhase[\"CharGen\"] = \"CharGen\";\n    BladesPhase[\"Freeplay\"] = \"Freeplay\";\n    BladesPhase[\"Score\"] = \"Score\";\n    BladesPhase[\"Downtime\"] = \"Downtime\";\n})(BladesPhase || (BladesPhase = {}));\nvar Tag;\n(function (Tag) {\n    let System;\n    (function (System) {\n        System[\"Archived\"] = \"Archived\";\n        System[\"Featured\"] = \"Featured\";\n        System[\"Hidden\"] = \"Hidden\";\n        System[\"MultiplesOK\"] = \"MultiplesOK\";\n    })(System = Tag.System || (Tag.System = {}));\n    let Gear;\n    (function (Gear) {\n        Gear[\"Fine\"] = \"Fine\";\n        Gear[\"General\"] = \"General\";\n        Gear[\"Advanced\"] = \"Advanced\";\n        Gear[\"Upgraded\"] = \"Upgraded\";\n    })(Gear = Tag.Gear || (Tag.Gear = {}));\n    let PC;\n    (function (PC) {\n        PC[\"Member\"] = \"Member\";\n        PC[\"CharacterCrew\"] = \"CharacterCrew\";\n        PC[\"ActivePC\"] = \"ActivePC\";\n        PC[\"Small\"] = \"Small\";\n        PC[\"Medium\"] = \"Medium\";\n        PC[\"Large\"] = \"Large\";\n        PC[\"CanHeal\"] = \"CanHeal\";\n    })(PC = Tag.PC || (Tag.PC = {}));\n    let Invention;\n    (function (Invention) {\n        Invention[\"Arcane\"] = \"Arcane\";\n        Invention[\"SparkCraft\"] = \"SparkCraft\";\n        Invention[\"Alchemical\"] = \"Alchemical\";\n        Invention[\"Mundane\"] = \"Mundane\";\n        Invention[\"Ritual\"] = \"Ritual\"; // Rituals\n    })(Invention = Tag.Invention || (Tag.Invention = {}));\n    let GearCategory;\n    (function (GearCategory) {\n        GearCategory[\"ArcaneImplement\"] = \"ArcaneImplement\";\n        GearCategory[\"Document\"] = \"Document\";\n        GearCategory[\"GearKit\"] = \"GearKit\";\n        GearCategory[\"SubterfugeSupplies\"] = \"SubterfugeSupplies\";\n        GearCategory[\"Tool\"] = \"Tool\";\n        GearCategory[\"Weapon\"] = \"Weapon\";\n    })(GearCategory = Tag.GearCategory || (Tag.GearCategory = {}));\n    let NPC;\n    (function (NPC) {\n        NPC[\"Acquaintance\"] = \"Acquaintance\";\n        NPC[\"VicePurveyor\"] = \"VicePurveyor\";\n        NPC[\"CanHeal\"] = \"CanHeal\";\n    })(NPC = Tag.NPC || (Tag.NPC = {}));\n    let GangType;\n    (function (GangType) {\n        GangType[\"Thugs\"] = \"Thugs\";\n        GangType[\"Rooks\"] = \"Rooks\";\n        GangType[\"Adepts\"] = \"Adepts\";\n        GangType[\"Rovers\"] = \"Rovers\";\n        GangType[\"Skulks\"] = \"Skulks\";\n        GangType[\"Vehicle\"] = \"Vehicle\";\n    })(GangType = Tag.GangType || (Tag.GangType = {}));\n})(Tag || (Tag = {}));\n// #endregion\n// #region 'C' CONSTANTS DEFINITIONS ~\nconst C = {\n    SYSTEM_ID: \"eunos-blades\",\n    SYSTEM_NAME: \"Euno's Blades\",\n    SYSTEM_FULL_NAME: \"Euno's Blades In The Dark\",\n    TEMPLATE_ROOT: \"systems/eunos-blades/templates\",\n    AI_MODELS: {\n        baseContext: [\n            \"babbage-002\",\n            \"gpt-3.5-turbo\",\n            \"gpt-4\"\n        ],\n        extendedContext: [\n            \"gpt-3.5-turbo-16k\",\n            \"gpt-3.5-turbo-16k\",\n            \"gpt-4-32k\"\n        ]\n    },\n    MIN_MOUSE_MOVEMENT_THRESHOLD: 2000,\n    AI_FILE_IDS: {\n        BladesPDF: \"file-n72HTTNwt051piPbswQ8isUa\"\n    },\n    ClockKeySquareSize: 100,\n    DowntimeActionDisplay: {\n        [DowntimeAction.AcquireAsset]: \"Acquire an Asset\",\n        [DowntimeAction.IndulgeVice]: \"Indulge Your Vice\",\n        [DowntimeAction.LongTermProject]: \"Work on a Project\",\n        [DowntimeAction.Recover]: \"Heal\",\n        [DowntimeAction.ReduceHeat]: \"Reduce the Crew's Heat\",\n        [DowntimeAction.Train]: \"Train\"\n    },\n    ConsequenceValues: {\n        [ConsequenceType.ReducedEffect]: undefined,\n        [ConsequenceType.LostOpportunity]: 2,\n        [ConsequenceType.WorsePosition]: undefined,\n        [ConsequenceType.None]: 0,\n        [ConsequenceType.InsightHarm4]: 4,\n        [ConsequenceType.InsightHarm3]: 3,\n        [ConsequenceType.InsightHarm2]: 2,\n        [ConsequenceType.InsightHarm1]: 1,\n        [ConsequenceType.ProwessHarm4]: 4,\n        [ConsequenceType.ProwessHarm3]: 3,\n        [ConsequenceType.ProwessHarm2]: 2,\n        [ConsequenceType.ProwessHarm1]: 1,\n        [ConsequenceType.ResolveHarm4]: 4,\n        [ConsequenceType.ResolveHarm3]: 3,\n        [ConsequenceType.ResolveHarm2]: 2,\n        [ConsequenceType.ResolveHarm1]: 1,\n        [ConsequenceType.ComplicationSerious]: 3,\n        [ConsequenceType.ComplicationMajor]: 2,\n        [ConsequenceType.ComplicationMinor]: 1\n    },\n    ResistedConsequenceTypes: {\n        [ConsequenceType.None]: [],\n        [ConsequenceType.InsightHarm4]: [ConsequenceType.InsightHarm3],\n        [ConsequenceType.InsightHarm3]: [ConsequenceType.InsightHarm2],\n        [ConsequenceType.InsightHarm2]: [ConsequenceType.InsightHarm1],\n        [ConsequenceType.InsightHarm1]: [ConsequenceType.None],\n        [ConsequenceType.ProwessHarm4]: [ConsequenceType.ProwessHarm3],\n        [ConsequenceType.ProwessHarm3]: [ConsequenceType.ProwessHarm2],\n        [ConsequenceType.ProwessHarm2]: [ConsequenceType.ProwessHarm1],\n        [ConsequenceType.ProwessHarm1]: [ConsequenceType.None],\n        [ConsequenceType.ResolveHarm4]: [ConsequenceType.ResolveHarm3],\n        [ConsequenceType.ResolveHarm3]: [ConsequenceType.ResolveHarm2],\n        [ConsequenceType.ResolveHarm2]: [ConsequenceType.ResolveHarm1],\n        [ConsequenceType.ResolveHarm1]: [ConsequenceType.None],\n        [ConsequenceType.ComplicationSerious]: [ConsequenceType.ComplicationMajor],\n        [ConsequenceType.ComplicationMajor]: [ConsequenceType.ComplicationMinor],\n        [ConsequenceType.ComplicationMinor]: [ConsequenceType.None]\n    },\n    ConsequenceDisplay: {\n        [ConsequenceType.ReducedEffect]: \"Reduced Effect\",\n        [ConsequenceType.ComplicationMinor]: \"Minor Complication\",\n        [ConsequenceType.ComplicationMajor]: \"Major Complication\",\n        [ConsequenceType.ComplicationSerious]: \"Serious Complication\",\n        [ConsequenceType.LostOpportunity]: \"Lost Opportunity\",\n        [ConsequenceType.WorsePosition]: \"Worse Position\",\n        [ConsequenceType.InsightHarm1]: \"Level 1 Harm (Lesser)\",\n        [ConsequenceType.InsightHarm2]: \"Level 2 Harm (Moderate)\",\n        [ConsequenceType.InsightHarm3]: \"Level 3 Harm (Severe)\",\n        [ConsequenceType.InsightHarm4]: \"Level 4 Harm (FATAL)\",\n        [ConsequenceType.ProwessHarm1]: \"Level 1 Harm (Lesser)\",\n        [ConsequenceType.ProwessHarm2]: \"Level 2 Harm (Moderate)\",\n        [ConsequenceType.ProwessHarm3]: \"Level 3 Harm (Severe)\",\n        [ConsequenceType.ProwessHarm4]: \"Level 4 Harm (FATAL)\",\n        [ConsequenceType.ResolveHarm1]: \"Level 1 Harm (Lesser)\",\n        [ConsequenceType.ResolveHarm2]: \"Level 2 Harm (Moderate)\",\n        [ConsequenceType.ResolveHarm3]: \"Level 3 Harm (Severe)\",\n        [ConsequenceType.ResolveHarm4]: \"Level 4 Harm (FATAL)\",\n        [ConsequenceType.None]: \"None\"\n    },\n    ConsequenceIcons: {\n        [ConsequenceType.ReducedEffect]: \"reduced-effect\",\n        [ConsequenceType.ComplicationMinor]: \"complication-minor\",\n        [ConsequenceType.ComplicationMajor]: \"complication-major\",\n        [ConsequenceType.ComplicationSerious]: \"complication-serious\",\n        [ConsequenceType.LostOpportunity]: \"lost-opportunity\",\n        [ConsequenceType.WorsePosition]: \"worse-position\",\n        [ConsequenceType.InsightHarm1]: \"harm-insight-1\",\n        [ConsequenceType.InsightHarm2]: \"harm-insight-2\",\n        [ConsequenceType.InsightHarm3]: \"harm-insight-3\",\n        [ConsequenceType.InsightHarm4]: \"harm-insight-4\",\n        [ConsequenceType.ProwessHarm1]: \"harm-prowess-1\",\n        [ConsequenceType.ProwessHarm2]: \"harm-prowess-2\",\n        [ConsequenceType.ProwessHarm3]: \"harm-prowess-3\",\n        [ConsequenceType.ProwessHarm4]: \"harm-prowess-4\",\n        [ConsequenceType.ResolveHarm1]: \"harm-resolve-1\",\n        [ConsequenceType.ResolveHarm2]: \"harm-resolve-2\",\n        [ConsequenceType.ResolveHarm3]: \"harm-resolve-3\",\n        [ConsequenceType.ResolveHarm4]: \"harm-resolve-4\",\n        [ConsequenceType.None]: \"\"\n    },\n    RollResultDescriptions: {\n        [Position.controlled]: {\n            [RollResult.critical]: \"You critically succeed from a controlled position!\",\n            [RollResult.success]: \"You fully succeed from a controlled position!\",\n            [RollResult.partial]: \"You partially succeed from a controlled position!\",\n            [RollResult.fail]: \"You fail from a controlled position!\"\n        },\n        [Position.risky]: {\n            [RollResult.critical]: \"You critically succeed from a risky position!\",\n            [RollResult.success]: \"You fully succeed from a risky position!\",\n            [RollResult.partial]: \"You partially succeed from a risky position!\",\n            [RollResult.fail]: \"You fail from a risky position!\"\n        },\n        [Position.desperate]: {\n            [RollResult.critical]: \"You critically succeed from a desperate position!\",\n            [RollResult.success]: \"You fully succeed from a desperate position!\",\n            [RollResult.partial]: \"You partially succeed from a desperate position!\",\n            [RollResult.fail]: \"You fail from a desperate position!\"\n        }\n    },\n    Colors: {\n        bWHITE: \"rgba(255, 255, 255, 1)\",\n        WHITE: \"rgba(200, 200, 200, 1)\",\n        bGREY: \"rgba(170, 170, 170, 1)\",\n        GREY: \"rgba(119, 119, 119, 1)\",\n        dGREY: \"rgba(68, 68, 68, 1)\",\n        BLACK: \"rgba(32, 32, 32, 1)\",\n        dBLACK: \"rgba(0, 0, 0, 1)\",\n        bGOLD: \"rgba(255,216, 44, 1)\",\n        GOLD: \"rgba(215,175,  0, 1)\",\n        dGOLD: \"rgba(165,134,  0, 1)\",\n        ddGOLD: \"rgba(103, 83,  0, 1)\",\n        bRED: \"rgba(255, 0, 0, 1)\",\n        RED: \"rgba(200, 0, 0, 1)\",\n        dRED: \"rgba(150,  0,  0, 1)\",\n        ddRED: \"rgba(50,  0,  0, 1)\",\n        bBLUE: \"rgba(   0,224,224, 1)\",\n        BLUE: \"rgba(52,213,213, 1)\",\n        dBLUE: \"rgba(0,118,118, 1)\",\n        ddBLUE: \"rgba(0, 77, 77, 1)\"\n    },\n    // ClockKeyPositions: {\n    //   elemSquareSize: 100,\n    //   0: {\n    //     keyDimensions: {width: 0, height: 0},\n    //     keyCenter: {x: 0, y: 0},\n    //     clocksCenter: {x: 0, y: 0},\n    //     clocksCenterDimensions: {width: 0, height: 0},\n    //     clocks: {}\n    //   },\n    //   1: {\n    //     keyDimensions: {width: 230, height: 836},\n    //     keyCenter: {x: 115, y: 418},\n    //     clocksCenter: {x: 111.011, y: 108.5},\n    //     clocksCenterDimensions: {width: 169, height: 169},\n    //     clocks: {\n    //       0: {x: 111.011, y: 108.5, size: 169}\n    //     }\n    //   },\n    //   2: {\n    //     keyDimensions: {width: 202, height: 625},\n    //     keyCenter: {x: 101, y: 312},\n    //     clocksCenter: {x: 101, y: 189},\n    //     clocksCenterDimensions: {width: 110, height: 290},\n    //     clocks: {\n    //       0: {x: 101, y: 99, size: 108},\n    //       1: {x: 101, y: 279, size: 108}\n    //     }\n    //   },\n    //   3: {\n    //     keyDimensions: {width: 280, height: 915},\n    //     keyCenter: {x: 140, y: 457},\n    //     clocksCenter: {x: 140, y: 169},\n    //     clocksCenterDimensions: {width: 242, height: 222},\n    //     clocks: {\n    //       0: {x: 140, y: 99, size: 108},\n    //       1: {x: 74, y: 211, size: 108},\n    //       2: {x: 206, y: 211, size: 108}\n    //     }\n    //   },\n    //   4: {\n    //     keyDimensions: {width: 376, height: 1140},\n    //     keyCenter: {x: 188, y: 570},\n    //     clocksCenter: {x: 188, y: 185},\n    //     clocksCenterDimensions: {width: 284, height: 282},\n    //     clocks: {\n    //       0: {x: 188, y: 99, size: 108}, // yTop = 45\n    //       1: {x: 101, y: 185, size: 108},\n    //       2: {x: 275, y: 185, size: 108},\n    //       3: {x: 188, y: 273, size: 108} // yBottom = 327\n    //     }\n    //   },\n    //   5: {\n    //     keyDimensions: {width: 376, height: 1140},\n    //     keyCenter: {x: 188, y: 570},\n    //     clocksCenter: {x: 188, y: 185},\n    //     clocksCenterDimensions: {width: 284, height: 384},\n    //     clocks: {\n    //       0: {x: 188, y: 99, size: 108}, // yTop = 45\n    //       1: {x: 101, y: 185, size: 108},\n    //       2: {x: 275, y: 185, size: 108},\n    //       3: {x: 188, y: 273, size: 108},\n    //       4: {x: 188, y: 452, size: 108} // yBottom = 506\n    //     }\n    //   },\n    //   6: {\n    //     keyDimensions: {width: 376, height: 1140},\n    //     keyCenter: {x: 188, y: 570},\n    //     clocksCenter: {x: 188, y: 391},\n    //     clocksCenterDimensions: {width: 284, height: 692},\n    //     clocks: {\n    //       0: {x: 188, y: 99, size: 108}, // yTop = 45\n    //       1: {x: 101, y: 185, size: 108},\n    //       2: {x: 275, y: 185, size: 108},\n    //       3: {x: 188, y: 273, size: 108},\n    //       4: {x: 188, y: 452, size: 108},\n    //       5: {x: 188, y: 683, size: 108} // yBottom = 737\n    //     }\n    //   }\n    // },\n    Loadout: {\n        selections: [\n            { value: \"Light\", display: \"Light\" },\n            { value: \"Normal\", display: \"Normal\" },\n            { value: \"Heavy\", display: \"Heavy\" }\n        ],\n        levels: [\"BITD.Light\", \"BITD.Normal\", \"BITD.Heavy\", \"BITD.Encumbered\", \"BITD.OverMax\"]\n    },\n    AttributeTooltips: {\n        [AttributeTrait.insight]: \"<p>Resists consequences from <strong>deception</strong> or <strong>understanding</strong></p>\",\n        [AttributeTrait.prowess]: \"<p>Resists consequences from <strong>physical strain</strong> or <strong>injury</strong></p>\",\n        [AttributeTrait.resolve]: \"<p>Resists consequences from <strong>mental strain</strong> or <strong>willpower</strong></p>\"\n    },\n    ShortAttributeTooltips: {\n        [AttributeTrait.insight]: \"vs. <strong>deception</strong> or <strong>(mis)understanding</strong>\",\n        [AttributeTrait.prowess]: \"vs. <strong>physical strain</strong> or <strong>injury</strong>\",\n        [AttributeTrait.resolve]: \"vs. <strong>mental strain</strong> or <strong>willpower</strong>\"\n    },\n    ShortActionTooltips: {\n        [ActionTrait.hunt]: \"carefully track a target\",\n        [ActionTrait.study]: \"scrutinize details and interpret evidence\",\n        [ActionTrait.survey]: \"observe the situation and anticipate outcomes\",\n        [ActionTrait.tinker]: \"fiddle with devices and mechanisms\",\n        [ActionTrait.finesse]: \"employ dexterity or subtle misdirection\",\n        [ActionTrait.prowl]: \"traverse skillfully and quietly\",\n        [ActionTrait.skirmish]: \"entangle a target in melee so they can't escape\",\n        [ActionTrait.wreck]: \"unleash savage force\",\n        [ActionTrait.attune]: \"open your mind to the ghost field or channel nearby electroplasmic energy through your body\",\n        [ActionTrait.command]: \"compel swift obedience\",\n        [ActionTrait.consort]: \"socialize with friends and contacts\",\n        [ActionTrait.sway]: \"influence someone with guile, charm, or argument\"\n    },\n    ActionTooltips: {\n        [ActionTrait.hunt]: \"<p>When you <strong>Hunt</strong>, you carefully track a target.</p><ul><li>You might follow a person or discover their location.</li><li>You might arrange an ambush.</li><li>You might attack with precision shooting from a distance.</li></ul><ul><li>You could try to wield your guns in a melee <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.study]: \"<p>When you <strong>Study</strong>, you scrutinize details and interpret evidence.</p><ul><li>You might gather information from documents, newspapers, and books.</li><li>You might do research on an esoteric topic.</li><li>You might closely analyze a person to detect lies or true feelings.</li></ul><ul><li>You could try to understand a pressing situation <em>(but <strong>Surveying</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.survey]: \"<p>When you <strong>Survey</strong>, you observe the situation and anticipate outcomes.</p><ul><li>You might spot telltale signs of trouble before it happens.</li><li>You might uncover opportunities or weaknesses.</li></ul><ul><li>You might detect a person's motives or intentions <em>(but <strong>Studying</strong> might be better)</em>.</li><li>You could try to spot a good ambush point <em>(but <strong>Hunting</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.tinker]: \"<p>When you <strong>Tinker</strong>, you fiddle with devices and mechanisms.</p><ul><li>You might create a new gadget or alter an existing item.</li><li>You might pick a lock or crack a safe.</li><li>You might disable an alarm or trap.</li><li>You might turn the sparkcraft and electroplasmic devices around the city to your advantage.</li></ul><ul><li>You could try to control a vehicle with your tech-savvy <em>(but <strong>Finessing</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.finesse]: \"<p>When you <strong>Finesse</strong>, you employ dexterity or subtle misdirection.</p><ul><li>You might pick someone's pocket.</li><li>You might handle the controls of a vehicle or direct a mount.</li><li>You might formally duel an opponent with graceful fighting arts.</li></ul><ul><li>You could try to leverage agility in a melee <em>(but <strong>Skirmishing</strong> might be better)</em>.</li><li>You could try to pick a lock <em>(but <strong>Tinkering</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.prowl]: \"<p>When you <strong>Prowl</strong>, you traverse skillfully and quietly.</p><ul><li>You might sneak past a guard or hide in the shadows.</li><li>You might run and leap across the rooftops.</li><li>You might attack someone from hiding with a back-stab or blackjack.</li></ul><ul><li>You could try to waylay a victim during combat <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.skirmish]: \"<p>When you <strong>Skirmish</strong>, you entangle a target in melee so they can't escape.</p><ul><li>You might brawl or wrestle with them.</li><li>You might hack and slash.</li><li>You might seize or hold a position in battle.</li></ul><ul><li>You could try to fight in a formal duel <em>(but <strong>Finessing</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.wreck]: \"<p>When you <strong>Wreck</strong>, you unleash savage force.</p><ul><li>You might smash down a door or wall with a sledgehammer.</li><li>You might use an explosive to do the same.</li><li>You might use chaos or sabotage to create distractions or overcome obstacles.</li></ul><ul><li>You could try to overwhelm an enemy with sheer force in battle <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.attune]: \"<p>When you <strong>Attune</strong>, you open your mind to the ghost field or channel nearby electroplasmic energy through your body.</p><ul><li>You might communicate with a ghost or understand aspects of spectrology.</li><li>You might peer into the echo of Doskvol in the ghost field.</li></ul><ul><li>You could try to perceive beyond sight in order to better understand your situation <em>(but <strong>Surveying</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.command]: \"<p>When you <strong>Command</strong>, you compel swift obedience.</p><ul><li>You might intimidate or threaten to get what you want.</li><li>You might lead a gang in a group action.</li></ul><ul><li>You could try to persuade people by giving orders <em>(but <strong>Consorting</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.consort]: \"<p>When you <strong>Consort</strong>, you socialize with friends and contacts.</p><ul><li>You might gain access to resources, information, people, or places.</li><li>You might make a good impression or win someone over with charm and style.</li><li>You might make new friends or connect with your heritage or background.</li></ul><ul><li>You could try to direct allies with social pressure <em>(but <strong>Commanding</strong> might be better)</em>.</li></ul>\",\n        [ActionTrait.sway]: \"<p>When you <strong>Sway</strong>, you influence someone with guile, charm, or argument.</p><ul><li>You might lie convincingly.</li><li>You might persuade someone to do what you want.</li><li>You might argue a case that leaves no clear rebuttal.</li></ul><ul><li>You could try to trick people into affection or obedience <em>(but <strong>Consorting</strong> or <strong>Commanding</strong> might be better)</em>.</li></ul>\"\n    },\n    ActionTooltipsGM: {\n        [ActionTrait.hunt]: \"<p>When you <strong>Hunt</strong>, you carefully track a target.</p><ul><li>You might follow a person or discover their location.</li><li>You might arrange an ambush.</li><li>You might attack with precision shooting from a distance.</li></ul><ul><li>You could try to wield your guns in a melee <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul><hr><ul><li>How do you hunt them down?</li><li>What methods do you use?</li><li>What do you hope to achieve?</li></ul>\",\n        [ActionTrait.study]: \"<p>When you <strong>Study</strong>, you scrutinize details and interpret evidence.</p><ul><li>You might gather information from documents, newspapers, and books.</li><li>You might do research on an esoteric topic.</li><li>You might closely analyze a person to detect lies or true feelings.</li></ul><ul><li>You could try to understand a pressing situation <em>(but <strong>Surveying</strong> might be better)</em>.</li></ul><hr><ul><li>What do you study?</li><li>What details or evidence do you scrutinize?</li><li>What do you hope to understand?</li></ul>\",\n        [ActionTrait.survey]: \"<p>When you <strong>Survey</strong>, you observe the situation and anticipate outcomes.</p><ul><li>You might spot telltale signs of trouble before it happens.</li><li>You might uncover opportunities or weaknesses.</li></ul><ul><li>You might detect a person's motives or intentions <em>(but <strong>Studying</strong> might be better)</em>.</li><li>You could try to spot a good ambush point <em>(but <strong>Hunting</strong> might be better)</em>.</li></ul><hr><ul><li>How do you survey the situation?</li><li>Is there anything special you're looking out for?</li><li>What do you hope to understand?</li></ul>\",\n        [ActionTrait.tinker]: \"<p>When you <strong>Tinker</strong>, you fiddle with devices and mechanisms.</p><ul><li>You might create a new gadget or alter an existing item.</li><li>You might pick a lock or crack a safe.</li><li>You might disable an alarm or trap.</li><li>You might turn the sparkcraft and electroplasmic devices around the city to your advantage.</li></ul><ul><li>You could try to control a vehicle with your tech-savvy <em>(but <strong>Finessing</strong> might be better)</em>.</li></ul><hr><ul><li>What do you tinker with?</li><li>What do you hope to accomplish?</li></ul>\",\n        [ActionTrait.finesse]: \"<p>When you <strong>Finesse</strong>, you employ dexterity or subtle misdirection.</p><ul><li>You might pick someone's pocket.</li><li>You might handle the controls of a vehicle or direct a mount.</li><li>You might formally duel an opponent with graceful fighting arts.</li></ul><ul><li>You could try to leverage agility in a melee <em>(but <strong>Skirmishing</strong> might be better)</em>.</li><li>You could try to pick a lock <em>(but <strong>Tinkering</strong> might be better)</em>.</li></ul><hr><ul><li>What do you finesse?</li><li>What's graceful or subtle about this?</li><li>What do you hope to achieve?</li></ul>\",\n        [ActionTrait.prowl]: \"<p>When you <strong>Prowl</strong>, you traverse skillfully and quietly.</p><ul><li>You might sneak past a guard or hide in the shadows.</li><li>You might run and leap across the rooftops.</li><li>You might attack someone from hiding with a back-stab or blackjack.</li></ul><ul><li>You could try to waylay a victim during combat <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul><hr><ul><li>How do you prowl?</li><li>How do you use the environment around you?</li><li>What do you hope to achieve?</li></ul>\",\n        [ActionTrait.skirmish]: \"<p>When you <strong>Skirmish</strong>, you entangle a target in melee so they can't escape.</p><ul><li>You might brawl or wrestle with them.</li><li>You might hack and slash.</li><li>You might seize or hold a position in battle.</li></ul><ul><li>You could try to fight in a formal duel <em>(but <strong>Finessing</strong> might be better)</em>.</li></ul><hr><ul><li>How do you skirmish with them?</li><li>What combat methods do you use?</li><li>What do you hope to achieve?</li></ul>\",\n        [ActionTrait.wreck]: \"<p>When you <strong>Wreck</strong>, you unleash savage force.</p><ul><li>You might smash down a door or wall with a sledgehammer.</li><li>You might use an explosive to do the same.</li><li>You might use chaos or sabotage to create distractions or overcome obstacles.</li></ul><ul><li>You could try to overwhelm an enemy with sheer force in battle <em>(but <strong>Skirmishing</strong> might be better)</em>.</li></ul><hr><ul><li>What do you wreck?</li><li>What force do you bring to bear?</li><li>What do you hope to accomplish?</li></ul>\",\n        [ActionTrait.attune]: \"<p>When you <strong>Attune</strong>, you open your mind to the ghost field or channel nearby electroplasmic energy through your body.</p><ul><li>You might communicate with a ghost or understand aspects of spectrology.</li><li>You might peer into the echo of Doskvol in the ghost field.</li></ul><ul><li>You could try to perceive beyond sight in order to better understand your situation <em>(but <strong>Surveying</strong> might be better)</em>.</li></ul><hr><ul><li>How do you open your mind to the ghost field?</li><li>What does that look like?</li><li>What energy are you attuning to?</li><li>How are you channeling that energy?</li><li>What do you hope the energy will do?</li></ul>\",\n        [ActionTrait.command]: \"<p>When you <strong>Command</strong>, you compel swift obedience.</p><ul><li>You might intimidate or threaten to get what you want.</li><li>You might lead a gang in a group action.</li></ul><ul><li>You could try to persuade people by giving orders <em>(but <strong>Consorting</strong> might be better)</em>.</li></ul><hr><ul><li>Who do you command?</li><li>How do you do it—what's your leverage here?</li><li>What do you hope they'll do?</li></ul>\",\n        [ActionTrait.consort]: \"<p>When you <strong>Consort</strong>, you socialize with friends and contacts.</p><ul><li>You might gain access to resources, information, people, or places.</li><li>You might make a good impression or win someone over with charm and style.</li><li>You might make new friends or connect with your heritage or background.</li></ul><ul><li>You could try to direct allies with social pressure <em>(but <strong>Commanding</strong> might be better)</em>.</li></ul><hr><ul><li>Who do you consort with?</li><li>Where do you meet?</li><li>What do you talk about?</li><li>What do you hope to achieve?</li></ul>\",\n        [ActionTrait.sway]: \"<p>When you <strong>Sway</strong>, you influence someone with guile, charm, or argument.</p><ul><li>You might lie convincingly.</li><li>You might persuade someone to do what you want.</li><li>You might argue a case that leaves no clear rebuttal.</li></ul><ul><li>You could try to trick people into affection or obedience <em>(but <strong>Consorting</strong> or <strong>Commanding</strong> might be better)</em>.</li></ul><hr><ul><li>Who do you sway?</li><li>What kind of leverage do you have here?</li><li>What do you hope they'll do?</li></ul>\"\n    },\n    ActionVerbs: {\n        [ActionTrait.hunt]: \"hunts\",\n        [ActionTrait.study]: \"studies\",\n        [ActionTrait.survey]: \"surveys\",\n        [ActionTrait.tinker]: \"tinkers\",\n        [ActionTrait.finesse]: \"finesses\",\n        [ActionTrait.prowl]: \"prowls\",\n        [ActionTrait.skirmish]: \"skirmishes\",\n        [ActionTrait.wreck]: \"wrecks\",\n        [ActionTrait.attune]: \"attunes\",\n        [ActionTrait.command]: \"commands\",\n        [ActionTrait.consort]: \"consorts\",\n        [ActionTrait.sway]: \"sways\"\n    },\n    ActionPastVerbs: {\n        [ActionTrait.hunt]: \"hunted\",\n        [ActionTrait.study]: \"studied\",\n        [ActionTrait.survey]: \"surveyed\",\n        [ActionTrait.tinker]: \"tinkered\",\n        [ActionTrait.finesse]: \"finessed\",\n        [ActionTrait.prowl]: \"prowled\",\n        [ActionTrait.skirmish]: \"skirmished\",\n        [ActionTrait.wreck]: \"wrecked\",\n        [ActionTrait.attune]: \"attuned\",\n        [ActionTrait.command]: \"commanded\",\n        [ActionTrait.consort]: \"consorted\",\n        [ActionTrait.sway]: \"swayed\"\n    },\n    TraumaTooltips: {\n        Cold: \"You're not moved by emotional appeals or social bonds.\",\n        Haunted: \"You're often lost in reverie, reliving past horrors, seeing things.\",\n        Obsessed: \"You're enthralled by one thing: an activity, a person, an ideology.\",\n        Paranoid: \"You imagine danger everywhere; you can't trust others.\",\n        Reckless: \"You have little regard for your own safety or best interests.\",\n        Soft: \"You lose your edge; you become sentimental, passive, gentle.\",\n        Unstable: \"Your emotional state is volatile. You can instantly rage, or fall into despair, act impulsively, or freeze up.\",\n        Vicious: \"You seek out opportunities to hurt people, even for no good reason.\",\n        Chaotic: \"You've become so detached from the living that inhibitions fall away, leaving you impulsive and unpredictable.\",\n        Destructive: \"You are easily angered by reminders of all you've lost, and can lash out violently against the trappings of the living world.\",\n        Furious: \"Your ravaged soul is fertile kindling for rage, and your fury is easily ignited.\",\n        Obsessive: \"Your wants and desires become fixations and compulsions, driving you to achieve them at any cost.\",\n        Territorial: \"You see some place as yours: Trespassers are dealt with, and even guests must respect your claim.\",\n        Savage: \"When moved to anger or violence, you act with cruelty and feral malevolence.\",\n        Clanking: \"Your frame has developed a persistent metallic clang with each step, making stealth difficult.\",\n        Leaking: \"You continuously leak oil, leviathan blood, distilled electroplasm or some other potentially-dangerous substance.\",\n        Fixated: \"You have become fixated on a function of your choice, and lose all memory of your humanity when you pursue it.\",\n        Smoking: \"Your frame exudes a constant miasma of acrid, foul-smelling smoke.\",\n        Sparking: \"Electroplasmic energy erupts in arcing sparks from joints and junctions throughout your frame.\",\n        Ruthless: \"You lose any sense of humanity when indulging your Vice or pursuing your most important goal.\",\n        Secretive: \"Knowledge has become so precious to you, that even your closest allies are on a need-to-know basis.\"\n    },\n    EdgeTooltips: {\n        Fearsome: \"<p>The cohort is terrifying in aspect and reputation.</p>\",\n        Independent: \"<p>The cohort can be trusted to make good decisions and act on their own initiative in the absence of direct orders.</p>\",\n        Loyal: \"<p>The cohort can't be bribed or turned against you. </p>\",\n        Tenacious: \"<p>The cohort won't be deterred from a task.</p>\",\n        Nimble: \"<p>The vehicle handles easily. Consider this an <strong>assist</strong> for tricky maneuvers.</p>\",\n        Simple: \"<p>The vehicle is easy to repair. Remove all of its <strong>Harm</strong> during <strong>downtime</strong></p>\",\n        Sturdy: \"<p>The vehicle keeps operating even when <strong>Broken</strong>.</p>\",\n        \"Arrow-Swift\": \"<p>Your pet gains <strong>Potency</strong> when tracking or fighting the supernatural.</p><p>It can move extremely quickly, outpacing any other creature or vehicle.</p>\",\n        \"Ghost Form\": \"<p>Your pet gains <strong>Potency</strong> when tracking or fighting the supernatural.</p><p>It can transform into electroplasmic vapor as if it were a spirit.</p>\",\n        \"Mind Link\": \"<p>Your pet gains <strong>Potency</strong> when tracking or fighting the supernatural.</p><p>You and your pet can share senses and thoughts telepathically.</p>\"\n    },\n    FlawTooltips: {\n        Principled: \"<p>The cohort has an ethic or values that it won't betray.</p>\",\n        Savage: \"<p>The cohort is excessively violent and cruel.</p>\",\n        Unreliable: \"<p>The cohort isn't always available, due to other obligations, stupefaction from their vices, etc.</p>\",\n        Wild: \"<p>The cohort is drunken, debauched, and loud-mouthed.</p>\",\n        Costly: \"<p>The vehicle costs <strong>1 Coin</strong> per <strong>downtime</strong> to keep it in operation.</p>\",\n        Distinct: \"<p>The vehicle has memorable features. Take <strong>+1 Heat</strong> when you use it on a score.</p>\",\n        Finicky: \"<p>The vehicle has quirks that only one person understands. When operated without them, it has <strong>-1 Quality</strong>.</p>\"\n    },\n    QualityDescriptors: [\n        \"Poor\",\n        \"Adequate\",\n        \"Good\",\n        \"Excellent\",\n        \"Superior\",\n        \"Impeccable\",\n        \"Legendary\"\n    ],\n    ForceDescriptors: [\n        \"Weak\",\n        \"Moderate\",\n        \"Strong\",\n        \"Serious\",\n        \"Powerful\",\n        \"Overwhelming\",\n        \"Devastating\"\n    ],\n    VehicleDescriptors: [\n        \"A Vehicle?\",\n        \"A Vehicle\",\n        \"A Respectable Vehicle\",\n        \"A Respected Vehicle\",\n        \"A Precision-Built Vehicle\",\n        \"A Powerful, Advanced Vehicle\",\n        \"A Uniquely Strong, Extremely Advanced Vehicle\"\n    ],\n    PetDescriptors: [\n        \"A Weak Hunting Pet\",\n        \"A Hunting Pet\",\n        \"A Strong Hunting Pet\",\n        \"A Serious Hunting Pet\",\n        \"A Powerful Hunting Pet\",\n        \"An Overwhelmingly Powerful Hunting Pet\",\n        \"A Devastating Hunting Pet\"\n    ],\n    AreaExamples: [\n        \"a closet\",\n        \"a small room\",\n        \"a large room\",\n        \"several rooms\",\n        \"a small building\",\n        \"a large building\",\n        \"a city block\"\n    ],\n    ScaleExamples: [\n        \"(1 or 2 members)\",\n        \"(3 - 6 members)\",\n        \"(~12 members)\",\n        \"(~20 members)\",\n        \"(~40 members)\",\n        \"(~80 members)\",\n        \"(~160 members)\"\n    ],\n    ScaleSizes: [\n        \"A Few \",\n        \"A Small Gang of \",\n        \"A Gang of \",\n        \"A Large Gang of \",\n        \"A Small Army of \",\n        \"An Army of \",\n        \"A Massive Army of \"\n    ],\n    DiceOddsStandard: [\n        { crit: 0, success: 2.8, partial: 22.2, fail: 75 },\n        { crit: 0, success: 16.7, partial: 33.3, fail: 50 },\n        { crit: 2.8, success: 27.8, partial: 44.4, fail: 25 },\n        { crit: 7.4, success: 34.7, partial: 45.4, fail: 12.5 },\n        { crit: 13.2, success: 38.6, partial: 42, fail: 6.3 },\n        { crit: 19.6, success: 40.2, partial: 37.1, fail: 3.1 },\n        { crit: 26.3, success: 40.2, partial: 31.9, fail: 1.6 },\n        { crit: 33, success: 39.1, partial: 27.1, fail: 0.8 },\n        { crit: 39.5, success: 37.2, partial: 22.9, fail: 0.4 },\n        { crit: 45.7, success: 34.9, partial: 19.2, fail: 0.2 },\n        { crit: 51.5, success: 32.3, partial: 16.1, fail: 0.1 },\n        { crit: 56.9, success: 29.6, partial: 13.4, fail: 0 },\n        { crit: 61.9, success: 26.9, partial: 11.2, fail: 0 },\n        { crit: 66.3, success: 24.3, partial: 9.3, fail: 0 },\n        { crit: 70.4, success: 21.8, partial: 7.8, fail: 0 },\n        { crit: 74, success: 19.5, partial: 6.5, fail: 0 },\n        { crit: 77.3, success: 17.3, partial: 5.4, fail: 0 },\n        { crit: 80.2, success: 15.3, partial: 4.5, fail: 0 },\n        { crit: 82.7, success: 13.5, partial: 3.8, fail: 0 },\n        { crit: 85, success: 11.9, partial: 3.1, fail: 0 },\n        { crit: 87, success: 10.4, partial: 2.6, fail: 0 }\n    ],\n    DiceOddsResistance: [\n        [0, 2.8, 8.3, 13.9, 19.4, 25, 30.6],\n        [0, 16.7, 16.7, 16.7, 16.6, 16.7, 16.7],\n        [2.8, 27.8, 25, 19.4, 13.9, 8.3, 2.8],\n        [7.4, 34.7, 28.3, 17.1, 8.8, 3.2, 0.5],\n        [13.2, 38.6, 28.5, 13.5, 5, 1.2, 0.1],\n        [19.6, 40.2, 27, 10.1, 2.7, 0.4, 0],\n        [26.3, 40.2, 24.7, 7.2, 1.4, 0.1, 0]\n    ],\n    ExperienceClues: {\n        Scoundrel: [\n            \"You expressed your beliefs, drives, heritage, or background.\",\n            \"You struggled with issues from your vice or traumas during the session.\"\n        ],\n        Crew: [\n            \"You contended with challenges above your current station.\",\n            \"You bolstered your crew's reputation, or developed a new one.\",\n            \"You expressed the goals, drives, inner conflict, or essential nature of the crew.\"\n        ]\n    },\n    GatherInfoQuestions: {\n        Cutter: [\n            \"How can I hurt them?\",\n            \"Who's most afraid of me?\",\n            \"Who's most dangerous here?\",\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"Are they telling the truth?\",\n            \"What's really going on here?\"\n        ],\n        Hound: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What are they really feeling?\",\n            \"Where are they vulnerable?\",\n            \"Where did [X] go?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ],\n        Leech: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"Are they telling the truth?\",\n            \"What can I tinker with here?\",\n            \"What might happen if I [X]?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ],\n        Lurk: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What should I look out for?\",\n            \"What's the best way in?\",\n            \"Where can I hide here?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ],\n        Slide: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"Are they telling the truth?\",\n            \"What are they really feeling?\",\n            \"What do they really care about?\",\n            \"How can I blend in here?\",\n            \"What's really going on here?\"\n        ],\n        Spider: [\n            \"What do they want most?\",\n            \"What should I look out for?\",\n            \"Where's the leverage here?\",\n            \"How can I discover [X]?\",\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What's really going on here?\"\n        ],\n        Whisper: [\n            \"What is arcane or weird here?\",\n            \"What echoes in the ghost field?\",\n            \"What is hidden or lost here?\",\n            \"What do they intend to do?\",\n            \"What drives them to do this?\",\n            \"How can I reveal [X]?\",\n            \"What's really going on here?\"\n        ],\n        Ghost: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What are they really feeling?\",\n            \"What should I lookout for?\",\n            \"Where's the weakness here?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ],\n        Hull: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What are they really doing?\",\n            \"What should I lookout for?\",\n            \"Where's the weakness here?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ],\n        Vampire: [\n            \"What do they intend to do?\",\n            \"How can I get them to [X]?\",\n            \"What are they really feeling?\",\n            \"What should I lookout for?\",\n            \"Where's the weakness here?\",\n            \"How can I find [X]?\",\n            \"What's really going on here?\"\n        ]\n    },\n    Playbooks: {\n        Cutter: {\n            \"system.experience_clues\": [\n                \"You addressed a challenge with violence or coercion.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"How can I hurt them?\",\n                \"Who's most afraid of me?\",\n                \"Who's most dangerous here?\",\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"Are they telling the truth?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Battleborn\"\n        },\n        Hound: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/hound-trans.svg\",\n            \"system.tagline\": \"A Deadly Sharpshooter & Tracker\",\n            // \"system.acquaintances_name\": \"Deadly Friends & Rivals\",\n            \"system.friends_name\": \"Deadly Friends\",\n            \"system.rivals_name\": \"Deadlier Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.insight.hunt.value\": 2,\n                \"system.attributes.insight.survey.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with tracking or violence.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What are they really feeling?\",\n                \"Where are they vulnerable?\",\n                \"Where did [X] go?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Sharpshooter\"\n        },\n        Leech: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/leech-trans.svg\",\n            \"system.tagline\": \"A Saboteur & Technician\",\n            // \"system.acquaintances_name\": \"Clever Friends & Rivals\",\n            \"system.friends_name\": \"Clever Friends\",\n            \"system.rivals_name\": \"Cleverer Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.insight.tinker.value\": 2,\n                \"system.attributes.prowess.wreck.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with technical skill or mayhem.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"Are they telling the truth?\",\n                \"What can I tinker with here?\",\n                \"What might happen if I [X]?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Alchemist\"\n        },\n        Lurk: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/lurk-trans.svg\",\n            \"system.tagline\": \"A Stealthy Infiltrator & Burglar\",\n            // \"system.acquaintances_name\": \"Shady Friends & Rivals\",\n            \"system.friends_name\": \"Shady Friends\",\n            \"system.rivals_name\": \"Shadier Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.prowess.prowl.value\": 2,\n                \"system.attributes.prowess.finesse.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with stealth or evasion.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What should I look out for?\",\n                \"What's the best way in?\",\n                \"Where can I hide here?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Infiltrator\"\n        },\n        Slide: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/slide-trans.svg\",\n            \"system.tagline\": \"A Subtle Manipulator & Spy\",\n            // \"system.acquaintances_name\": \"Sly Friends & Rivals\",\n            \"system.friends_name\": \"Sly Friends\",\n            \"system.rivals_name\": \"Slyer Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.resolve.sway.value\": 2,\n                \"system.attributes.resolve.consort.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with deception or influence.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"Are they telling the truth?\",\n                \"What are they really feeling?\",\n                \"What do they really care about?\",\n                \"How can I blend in here?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Rook's Gambit\"\n        },\n        Spider: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/spider-trans.svg\",\n            \"system.tagline\": \"A Devious Mastermind\",\n            // \"system.acquaintances_name\": \"Shrewd Friends & Rivals\",\n            \"system.friends_name\": \"Shrewd Friends\",\n            \"system.rivals_name\": \"Very Shrewd Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.resolve.consort.value\": 2,\n                \"system.attributes.insight.study.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with calculation or conspiracy.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they want most?\",\n                \"What should I look out for?\",\n                \"Where's the leverage here?\",\n                \"How can I discover [X]?\",\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Foresight\"\n        },\n        Whisper: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/whisper-trans.svg\",\n            \"system.tagline\": \"An Arcane Adept & Channeler\",\n            // \"system.acquaintances_name\": \"Strange Friends & Rivals\",\n            \"system.friends_name\": \"Strange Friends\",\n            \"system.rivals_name\": \"Stranger Rivals\",\n            \"system.starting_stats.chargen\": {\n                \"system.attributes.resolve.attune.value\": 2,\n                \"system.attributes.insight.study.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You addressed a challenge with knowledge or arcane power.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice or traumas during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Reckless\", \"Soft\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What is arcane or weird here?\",\n                \"What echoes in the ghost field?\",\n                \"What is hidden or lost here?\",\n                \"What do they intend to do?\",\n                \"What drives them to do this?\",\n                \"How can I reveal [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.suggested_ability\": \"Compel\"\n        },\n        Ghost: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/ghost-trans.svg\",\n            \"system.tagline\": \"A Vengeful Disembodied Spirit\",\n            \"system.acquaintances_name\": \"Enemies & Rivals\",\n            \"system.starting_stats.add\": {\n                \"system.attributes.insight.hunt.value\": 1,\n                \"system.attributes.prowess.prowl.value\": 1,\n                \"system.attributes.resolve.attune.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You exacted vengeance upon those whom you deem deserving.\",\n                \"You expressed your outrage or anger, or settled scores from your heritage, or background.\",\n                \"You struggled with issues from your need or glooms during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Chaotic\", \"Destructive\", \"Furious\", \"Obsessive\", \"Territorial\", \"Savage\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What are they really feeling?\",\n                \"What should I lookout for?\",\n                \"Where's the weakness here?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.auto_abilities\": [\"Ghost Form\"]\n        },\n        Hull: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/hull-trans.svg\",\n            \"system.tagline\": \"An Animated Spark-Craft Frame\",\n            \"system.acquaintances_name\": \"Master\",\n            \"system.starting_stats.add\": {\n                \"system.attributes.prowess.skirmish.value\": 1,\n                \"system.attributes.resolve.attune.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You fulfilled your functions despite difficulty or danger.\",\n                \"You suppressed or ignored your former human beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your wear during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Clanking\", \"Leaking\", \"Fixated\", \"Smoking\", \"Sparking\", \"Unstable\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What are they really doing?\",\n                \"What should I lookout for?\",\n                \"Where's the weakness here?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.auto_abilities\": [\"Automaton\"]\n        },\n        Vampire: {\n            \"system.bgImg\": \"systems/eunos-blades/assets/icons/class-icons/vampire-trans.svg\",\n            \"system.tagline\": \"An Animated Undead Body\",\n            \"system.acquaintances_name\": \"Dark Servants\",\n            \"system.starting_stats.add\": {\n                \"system.attributes.insight.hunt.value\": 1,\n                \"system.attributes.prowess.prowl.value\": 1,\n                \"system.attributes.prowess.skirmish.value\": 1,\n                \"system.attributes.resolve.attune.value\": 1,\n                \"system.attributes.resolve.command.value\": 1,\n                \"system.attributes.resolve.sway.value\": 1\n            },\n            \"system.experience_clues\": [\n                \"You displayed your dominance or slayed without mercy.\",\n                \"You expressed your beliefs, drives, heritage, or background.\",\n                \"You struggled with issues from your vice, traumas, or strictures during the session.\"\n            ],\n            \"system.trauma_conditions\": [\"Cold\", \"Haunted\", \"Obsessed\", \"Paranoid\", \"Ruthless\", \"Secretive\", \"Unstable\", \"Vicious\"],\n            \"system.gather_info_questions\": [\n                \"What do they intend to do?\",\n                \"How can I get them to [X]?\",\n                \"What are they really feeling?\",\n                \"What should I lookout for?\",\n                \"Where's the weakness here?\",\n                \"How can I find [X]?\",\n                \"What's really going on here?\"\n            ],\n            \"system.auto_abilities\": [\"Undead\"]\n        }\n    },\n    ClockSizes: [1, 2, 3, 4, 5, 6, 8, 10, 12],\n    ActorTypes: [\n        BladesActorType.pc,\n        BladesActorType.npc,\n        BladesActorType.crew,\n        BladesActorType.faction\n    ],\n    ItemTypes: [\n        BladesItemType.ability,\n        BladesItemType.background,\n        BladesItemType.clock_keeper,\n        BladesItemType.cohort_gang,\n        BladesItemType.cohort_expert,\n        BladesItemType.crew_ability,\n        BladesItemType.crew_reputation,\n        BladesItemType.crew_playbook,\n        BladesItemType.crew_upgrade,\n        BladesItemType.feature,\n        BladesItemType.gm_tracker,\n        BladesItemType.heritage,\n        BladesItemType.gear,\n        BladesItemType.playbook,\n        BladesItemType.preferred_op,\n        BladesItemType.stricture,\n        BladesItemType.vice,\n        BladesItemType.project,\n        BladesItemType.ritual,\n        BladesItemType.design,\n        BladesItemType.location,\n        BladesItemType.score\n    ],\n    SimpleItemTypes: [\n        BladesItemType.background,\n        BladesItemType.crew_reputation,\n        BladesItemType.feature,\n        BladesItemType.heritage,\n        BladesItemType.preferred_op,\n        BladesItemType.stricture\n    ],\n    Attribute: [\n        AttributeTrait.insight,\n        AttributeTrait.prowess,\n        AttributeTrait.resolve\n    ],\n    Action: {\n        [AttributeTrait.insight]: [ActionTrait.hunt, ActionTrait.study, ActionTrait.survey, ActionTrait.tinker],\n        [AttributeTrait.prowess]: [ActionTrait.finesse, ActionTrait.prowl, ActionTrait.skirmish, ActionTrait.wreck],\n        [AttributeTrait.resolve]: [ActionTrait.attune, ActionTrait.command, ActionTrait.consort, ActionTrait.sway]\n    },\n    Vices: [\n        Vice.Faith,\n        Vice.Gambling,\n        Vice.Luxury,\n        Vice.Obligation,\n        Vice.Pleasure,\n        Vice.Stupor,\n        Vice.Weird,\n        Vice.Worship,\n        Vice.Living_Essence,\n        Vice.Life_Essence,\n        Vice.Electroplasmic_Power\n    ]\n};\n// #endregion\n// #region RANDOMIZER DATA\nconst Randomizers = {\n    NPC: {\n        heritage: [\n            \"Akorosi\",\n            \"Akorosi\",\n            \"Akorosi\",\n            \"Akorosi\",\n            \"Akorosi\",\n            \"Akorosi\",\n            \"Dagger Islander\",\n            \"Iruvian\",\n            \"Severosi\",\n            \"Skovlander\",\n            \"Skovlander\",\n            \"Tycherosi\"\n        ],\n        background: [\n            \"Academic\",\n            \"Academic\",\n            \"Academic\",\n            \"Labor\",\n            \"Labor\",\n            \"Labor\",\n            \"Labor\",\n            \"Law\",\n            \"Law\",\n            \"Law\",\n            \"Military\",\n            \"Military\",\n            \"Military\",\n            \"Military\",\n            \"Military\",\n            \"New Money\",\n            \"New Money\",\n            \"Old Money\",\n            \"Old Money\",\n            \"Politics\",\n            \"Politics\",\n            \"Trade\",\n            \"Trade\",\n            \"Trade\",\n            \"Underworld\",\n            \"Underworld\",\n            \"Underworld\",\n            \"Underworld\",\n            \"Underworld\",\n            \"Weird\"\n        ],\n        gender: [\n            \"M\",\n            \"M\",\n            \"M\",\n            \"M\",\n            \"F\",\n            \"F\",\n            \"F\",\n            \"U\",\n            \"X\"\n        ],\n        appearance: [\n            \"Athletic\",\n            \"Beard\",\n            \"Bony\",\n            \"Chiseled\",\n            \"Crippled / Prosthetic\",\n            \"Cute\",\n            \"Dark\",\n            \"Delicate\",\n            \"Disfigured / Maimed\",\n            \"Elegant\",\n            \"Fair\",\n            \"Glasses / Monocle\",\n            \"Handsome\",\n            \"Large\",\n            \"Long Hair\",\n            \"Lovely\",\n            \"Old\",\n            \"Plain\",\n            \"Plump\",\n            \"Rough\",\n            \"Scarred\",\n            \"Sexy\",\n            \"Shaved Bald\",\n            \"Short\",\n            \"Slim\",\n            \"Stooped\",\n            \"Stout\",\n            \"Strange\",\n            \"Striking\",\n            \"Stylish\",\n            \"Tall\",\n            \"Tattooed\",\n            \"Weathered\",\n            \"Wig\",\n            \"Wild\",\n            \"Wiry\",\n            \"Worn\",\n            \"Young\"\n        ],\n        goal: [\n            \"Achievement\",\n            \"Authority\",\n            \"Change\",\n            \"Chaos / Destruction\",\n            \"Control\",\n            \"Cooperation\",\n            \"Freedom\",\n            \"Happiness\",\n            \"Infamy / Fear\",\n            \"Justice\",\n            \"Knowledge\",\n            \"Love\",\n            \"Pleasure\",\n            \"Power\",\n            \"Prestige / Fame\",\n            \"Respect\",\n            \"Revenge\",\n            \"Wealth\"\n        ],\n        method: [\n            \"Alchemy\",\n            \"Arcane\",\n            \"Blackmail\",\n            \"Chaos\",\n            \"Commerce\",\n            \"Espionage\",\n            \"Hard Work\",\n            \"Law / Politics\",\n            \"Manipulation\",\n            \"Negotiation\",\n            \"Sabotage\",\n            \"Strategy\",\n            \"Study\",\n            \"Subterfuge\",\n            \"Teamwork\",\n            \"Theft\",\n            \"Threats\",\n            \"Violence\"\n        ],\n        profession: [\n            \"Advocate\",\n            \"Apiarist\",\n            \"Architect\",\n            \"Artist\",\n            \"Author\",\n            \"Bailiff\",\n            \"Baker\",\n            \"Baker\",\n            \"Baker\",\n            \"Banker\",\n            \"Barber\",\n            \"Barber\",\n            \"Barber\",\n            \"Blacksmith\",\n            \"Blacksmith\",\n            \"Blacksmith\",\n            \"Bounty Hunter\",\n            \"Brewer\",\n            \"Brewer\",\n            \"Brewer\",\n            \"Butcher\",\n            \"Butcher\",\n            \"Butcher\",\n            \"Captain\",\n            \"Carpenter\",\n            \"Carpenter\",\n            \"Carpenter\",\n            \"Cartwright\",\n            \"Cartwright\",\n            \"Cartwright\",\n            \"Chandler\",\n            \"Chandler\",\n            \"Chandler\",\n            \"Clerk\",\n            \"Clerk\",\n            \"Clerk\",\n            \"Clockmaker\",\n            \"Cobbler\",\n            \"Cobbler\",\n            \"Cobbler\",\n            \"Composer\",\n            \"Cooper\",\n            \"Cooper\",\n            \"Cooper\",\n            \"Courtesan\",\n            \"Criminal\",\n            \"Criminal\",\n            \"Criminal\",\n            \"Cultivator\",\n            \"Cultivator\",\n            \"Cultivator\",\n            \"Diplomat\",\n            \"Driver\",\n            \"Driver\",\n            \"Driver\",\n            \"Dyer\",\n            \"Dyer\",\n            \"Dyer\",\n            \"Embroiderer\",\n            \"Embroiderer\",\n            \"Embroiderer\",\n            \"Explorer\",\n            \"Fishmonger\",\n            \"Fishmonger\",\n            \"Fishmonger\",\n            \"Furrier\",\n            \"Glass Blower\",\n            \"Goat Herd\",\n            \"Goat Herd\",\n            \"Goat Herd\",\n            \"Gondolier\",\n            \"Gondolier\",\n            \"Gondolier\",\n            \"Guard\",\n            \"Guard\",\n            \"Guard\",\n            \"Jailer\",\n            \"Jeweler\",\n            \"Journalist\",\n            \"Leatherworker\",\n            \"Leatherworker\",\n            \"Leatherworker\",\n            \"Leech\",\n            \"Locksmith\",\n            \"Magistrate\",\n            \"Mason\",\n            \"Mason\",\n            \"Mason\",\n            \"Merchant\",\n            \"Merchant\",\n            \"Merchant\",\n            \"Messenger\",\n            \"Messenger\",\n            \"Messenger\",\n            \"Musician\",\n            \"Physicker\",\n            \"Plumber\",\n            \"Printer\",\n            \"Rail Jack\",\n            \"Roofer\",\n            \"Roofer\",\n            \"Roofer\",\n            \"Ropemaker\",\n            \"Ropemaker\",\n            \"Ropemaker\",\n            \"Rug Maker\",\n            \"Rug Maker\",\n            \"Rug Maker\",\n            \"Sailor\",\n            \"Sailor\",\n            \"Sailor\",\n            \"Scholar\",\n            \"Scribe\",\n            \"Servant\",\n            \"Servant\",\n            \"Servant\",\n            \"Shipwright\",\n            \"Shipwright\",\n            \"Shipwright\",\n            \"Soldier\",\n            \"Sparkwright\",\n            \"Spirit Warden\",\n            \"Steward\",\n            \"Tailor\",\n            \"Tailor\",\n            \"Tailor\",\n            \"Tanner\",\n            \"Tanner\",\n            \"Tanner\",\n            \"Tax Collector\",\n            \"Tinkerer\",\n            \"Tinkerer\",\n            \"Tinkerer\",\n            \"Treasurer\",\n            \"Vendor\",\n            \"Vendor\",\n            \"Vendor\",\n            \"Weaver\",\n            \"Weaver\",\n            \"Weaver\",\n            \"Whisper\",\n            \"Woodworker\",\n            \"Woodworker\",\n            \"Woodworker\"\n        ],\n        trait: [\n            \"Arcane\",\n            \"Arrogant\",\n            \"Artistic\",\n            \"Bold\",\n            \"Brash\",\n            \"Brave\",\n            \"Calculating\",\n            \"Calm\",\n            \"Candid\",\n            \"Careless\",\n            \"Cautious\",\n            \"Cavalier\",\n            \"Charming\",\n            \"Cold\",\n            \"Commanding\",\n            \"Compassionate\",\n            \"Confident\",\n            \"Connected\",\n            \"Cooperative\",\n            \"Creative\",\n            \"Cruel\",\n            \"Cultured\",\n            \"Daring\",\n            \"Defiant\",\n            \"Dishonest\",\n            \"Dramatic\",\n            \"Elitist\",\n            \"Enigmatic\",\n            \"Enthusiastic\",\n            \"Erudite\",\n            \"Experienced\",\n            \"Fierce\",\n            \"Flexible\",\n            \"Friendly\",\n            \"Gracious\",\n            \"Greedy\",\n            \"Haunted\",\n            \"Insightful\",\n            \"Kind\",\n            \"Melancholy\",\n            \"Moody\",\n            \"Obsessive\",\n            \"Paranoid\",\n            \"Patient\",\n            \"Popular\",\n            \"Principled\",\n            \"Proud\",\n            \"Quiet\",\n            \"Reckless\",\n            \"Respected\",\n            \"Ruthless\",\n            \"Sadistic\",\n            \"Savage\",\n            \"Secretive\",\n            \"Shrewd\",\n            \"Sincere\",\n            \"Sneaky\",\n            \"Sophisticated\",\n            \"Strange\",\n            \"Stylish\",\n            \"Subtle\",\n            \"Suspicious\",\n            \"Tough\",\n            \"Vain\",\n            \"Vengeful\",\n            \"Vicious\",\n            \"Visionary\",\n            \"Volatile\",\n            \"Weird\",\n            \"Wise\"\n        ],\n        interests: [\n            \"Alchemy, medicine\",\n            \"Antiques, artifacts, curios\",\n            \"Arcane books, rituals\",\n            \"Architecture, furnishings\",\n            \"Church of Ecstasy\",\n            \"Cooking, gardening\",\n            \"Craft (leatherwork, etc.)\",\n            \"Demon lore, legends\",\n            \"Drugs, essences, tobacco\",\n            \"Essences, alchemy\",\n            \"Exploration, adventure\",\n            \"Fine arts, opera, theater\",\n            \"Fine clothes, jewelry, furs\",\n            \"Fine food, restaurants\",\n            \"Fine whiskey, wine, beer\",\n            \"Forgotten gods\",\n            \"Gadgets, new technology\",\n            \"Gambling, cards, dice\",\n            \"History, legends\",\n            \"Horses, riding\",\n            \"Hunting, shooting\",\n            \"Lovers, romance, trysts\",\n            \"Music, instruments, dance\",\n            \"Natural philosophy\",\n            \"Painting, drawing, sculpture\",\n            \"Parties, social events\",\n            \"Path of Echoes\",\n            \"Pets (birds, dogs, cats)\",\n            \"Pit-fighting, duels\",\n            \"Poetry, novels, writing\",\n            \"Politics, journalism\",\n            \"Pre-cataclysm legends\",\n            \"Ships, boating\",\n            \"Spectrology, electroplasm\",\n            \"Weapons collector\",\n            \"Weeping Lady, charity\"\n        ],\n        quirk: [\n            \"A fraud. Some important aspect is fabricated.\",\n            \"Bigoted against culture / belief / social class.\",\n            \"Black sheep / outcast from family or organization.\",\n            \"Blind to flaws in friends, allies, family, etc.\",\n            \"Celebrity. Popularized in print / song / theater.\",\n            \"Concerned with appearances, gossip, peers.\",\n            \"Cursed, haunted, harassed by spirits or demon.\",\n            \"Deeply traditional. Opposed to new ideas.\",\n            \"Devoted to their family.\",\n            \"Drug / alcohol abuser. Often impaired by their vice.\",\n            \"Extensive education on every scholarly subject.\",\n            \"Has chronic illness that requires frequent care.\",\n            \"Holds their position due to blackmail.\",\n            \"Holds their position to spy for another faction.\",\n            \"In prison or under noble's house arrest.\",\n            \"Inherited their position. May not deserve / want it.\",\n            \"Intense, unreasonable phobia or loathing.\",\n            \"Involved with war crimes from the Unity War.\",\n            \"Is blindly faithful to an ideal, group, or tradition.\",\n            \"Keeps detailed journals, notes, records, ledgers.\",\n            \"Leads a double life using cover identity.\",\n            \"Married into important / powerful family.\",\n            \"Massive debts (to banks / criminals / family)\",\n            \"Once hollowed, then restored. Immune to spirits.\",\n            \"Proud of heritage, traditions, native language.\",\n            \"Reclusive. Prefers to interact via messengers.\",\n            \"Relies on council to make decisions.\",\n            \"Revolutionary. Plots against the Imperium.\",\n            \"Scandalous reputation (deserved or not).\",\n            \"Secretly (openly?) controlled by possessing spirit.\",\n            \"Serves a demon's agenda (knowingly or not).\",\n            \"Spotless reputation. Highly regarded.\",\n            \"Superstitious. Believes in signs, magic numbers.\",\n            \"Surrounded by sycophants, supplicants, toadies.\",\n            \"Visionary. Holds radical views for future.\",\n            \"Well-traveled. Connections outside Doskvol.\"\n        ],\n        style: {\n            male: [\n                \"Apron\",\n                \"Cane\",\n                \"Collared Shirt\",\n                \"Crutches\",\n                \"Eelskin Bodysuit\",\n                \"Face Mask\",\n                \"Fitted Leggings\",\n                \"Heavy Cloak\",\n                \"Heavy Gloves\",\n                \"Hide & Furs\",\n                \"Hood & Veil\",\n                \"Hooded Coat\",\n                \"Knit Cap\",\n                \"Leathers\",\n                \"Long Coat\",\n                \"Long Scarf\",\n                \"Loose Silks\",\n                \"Mask & Robes\",\n                \"Rough Tunic\",\n                \"Sharp Trousers\",\n                \"Short Cloak\",\n                \"Slim Jacket\",\n                \"Soft Boots\",\n                \"Suit & Vest\",\n                \"Suspenders\",\n                \"Tall Boots\",\n                \"Tatters\",\n                \"Thick Greatcoat\",\n                \"Tool Belt\",\n                \"Tricorn Hat\",\n                \"Uniform\",\n                \"Waxed Coat\",\n                \"Wheelchair\",\n                \"Wide Belt\",\n                \"Work Boots\"\n            ],\n            female: [\n                \"Apron\",\n                \"Cane\",\n                \"Crutches\",\n                \"Eelskin Bodysuit\",\n                \"Face Mask\",\n                \"Fitted Dress\",\n                \"Fitted Leggings\",\n                \"Heavy Cloak\",\n                \"Heavy Gloves\",\n                \"Hide & Furs\",\n                \"Hood & Veil\",\n                \"Hooded Coat\",\n                \"Knit Cap\",\n                \"Leathers\",\n                \"Long Coat\",\n                \"Long Scarf\",\n                \"Loose Silks\",\n                \"Mask & Robes\",\n                \"Rough Tunic\",\n                \"Sharp Trousers\",\n                \"Short Cloak\",\n                \"Skirt & Blouse\",\n                \"Slim Jacket\",\n                \"Soft Boots\",\n                \"Suspenders\",\n                \"Tall Boots\",\n                \"Tatters\",\n                \"Thick Greatcoat\",\n                \"Tool Belt\",\n                \"Uniform\",\n                \"Waxed Coat\",\n                \"Wheelchair\",\n                \"Wide Belt\",\n                \"Work Boots\"\n            ]\n        },\n        name_title: [\n            \"Adept\",\n            \"Archivist\",\n            \"Captain\",\n            \"Charter\",\n            \"Scrivener\"\n        ],\n        name_first: {\n            male: [\n                \"Abel\",\n                \"Abenthy\",\n                \"Adric\",\n                \"Airic\",\n                \"Alabaster\",\n                \"Alastair\",\n                \"Aldo\",\n                \"Alen\",\n                \"Aleph\",\n                \"Ambrose\",\n                \"Amosen\",\n                \"Andal\",\n                \"Andrel\",\n                \"Anton\",\n                \"Aquilla\",\n                \"Aradan\",\n                \"Aram\",\n                \"Archibald\",\n                \"Archie\",\n                \"Arden\",\n                \"Arliden\",\n                \"Arlyn\",\n                \"Armand\",\n                \"Arquo\",\n                \"Arrell\",\n                \"Arvus\",\n                \"Asher\",\n                \"Aurelio\",\n                \"Benedict\",\n                \"Bolster\",\n                \"Brace\",\n                \"Bran\",\n                \"Brance\",\n                \"Branon\",\n                \"Bricks\",\n                \"Brock\",\n                \"Brutus\",\n                \"Caius\",\n                \"Carro\",\n                \"Casian\",\n                \"Cato\",\n                \"Cavelle\",\n                \"Cedric\",\n                \"Chance\",\n                \"Chauncey\",\n                \"Cid\",\n                \"Clave\",\n                \"Cliff\",\n                \"Cornelius\",\n                \"Cross\",\n                \"Crowl\",\n                \"Cym\",\n                \"Cyrus\",\n                \"Declan\",\n                \"Del\",\n                \"Drav\",\n                \"Drazhan\",\n                \"Drem\",\n                \"Edlun\",\n                \"Edmund\",\n                \"Edrom\",\n                \"Edwin\",\n                \"Elan\",\n                \"Elend\",\n                \"Elias\",\n                \"Elodin\",\n                \"Ephrim\",\n                \"Erasmus\",\n                \"Eremon\",\n                \"Ethan\",\n                \"Everitt\",\n                \"Feldspar\",\n                \"Fero\",\n                \"Finn\",\n                \"Fisher\",\n                \"Galen\",\n                \"Gallahad\",\n                \"Garner\",\n                \"Gilbert\",\n                \"Glint\",\n                \"Gnik\",\n                \"Gregalos\",\n                \"Grey\",\n                \"Greyson\",\n                \"Grifter\",\n                \"Grine\",\n                \"Gristofer\",\n                \"Hadrian\",\n                \"Hagran\",\n                \"Hammond\",\n                \"Hix\",\n                \"Holtz\",\n                \"Hugo\",\n                \"Iden\",\n                \"Irton\",\n                \"Isaac\",\n                \"Ivellios\",\n                \"Jabari\",\n                \"Jericho\",\n                \"Jerod\",\n                \"Kazimir\",\n                \"Kellan\",\n                \"Kelvyn\",\n                \"Kelyr\",\n                \"Khafra\",\n                \"Kobb\",\n                \"Kristov\",\n                \"Kyrilu\",\n                \"Lael\",\n                \"Lafayette\",\n                \"Laudius\",\n                \"Lawrence\",\n                \"Leif\",\n                \"Lem\",\n                \"Lenny\",\n                \"Logan\",\n                \"Lucas\",\n                \"Lucius\",\n                \"Lysander\",\n                \"Milos\",\n                \"Mord\",\n                \"Morketh\",\n                \"Morlan\",\n                \"Myre\",\n                \"Narcus\",\n                \"Nehi\",\n                \"Noggs\",\n                \"Norton\",\n                \"Obel\",\n                \"Obelas\",\n                \"Octavius\",\n                \"Odelay\",\n                \"Orem\",\n                \"Orlan\",\n                \"Orth\",\n                \"Orton\",\n                \"Pavel\",\n                \"Perceval\",\n                \"Percival\",\n                \"Peregrine\",\n                \"Phin\",\n                \"Phineas\",\n                \"Porto\",\n                \"Preston\",\n                \"Primo\",\n                \"Quess\",\n                \"Quill\",\n                \"Rafe\",\n                \"Rasmus\",\n                \"Raul\",\n                \"Resh\",\n                \"Rias\",\n                \"Ring\",\n                \"Rivallo\",\n                \"Rodmund\",\n                \"Roethe\",\n                \"Roose\",\n                \"Roric\",\n                \"Sethla\",\n                \"Silas\",\n                \"Sindri\",\n                \"Snitch\",\n                \"Sol\",\n                \"Solomon\",\n                \"Sprig\",\n                \"Stavrul\",\n                \"Stellan\",\n                \"Stev\",\n                \"Sym\",\n                \"Tacitus\",\n                \"Tarn\",\n                \"Taylor\",\n                \"Thackeray\",\n                \"Thaddeus\",\n                \"Thane\",\n                \"Thelian\",\n                \"Theo\",\n                \"Theron\",\n                \"Thurston\",\n                \"Timoth\",\n                \"Tisk\",\n                \"Tocker\",\n                \"Tristero\",\n                \"Ulric\",\n                \"Vask\",\n                \"Veleris\",\n                \"Ventaro\",\n                \"Virgil\",\n                \"Vond\",\n                \"Wax\",\n                \"Wayne\",\n                \"Weaver\",\n                \"Wester\",\n                \"Winsley\"\n            ],\n            female: [\n                \"Adaire\",\n                \"Adelaide\",\n                \"Adella\",\n                \"Adroit\",\n                \"Ailen\",\n                \"Aina\",\n                \"Akilah\",\n                \"Albinia\",\n                \"Althaea\",\n                \"Alyosha\",\n                \"Ansa\",\n                \"Arabella\",\n                \"Arwyl\",\n                \"Ashlyn\",\n                \"Avora\",\n                \"Brena\",\n                \"Brenna\",\n                \"Calienthe\",\n                \"Camilla\",\n                \"Candor\",\n                \"Candra\",\n                \"Carissa\",\n                \"Cascabel\",\n                \"Casslyn\",\n                \"Castille\",\n                \"Celeste\",\n                \"Chen\",\n                \"Claret\",\n                \"Clementine\",\n                \"Constance\",\n                \"Cordelia\",\n                \"Corille\",\n                \"Corsica\",\n                \"Cyrene\",\n                \"Dahlia\",\n                \"Daphnia\",\n                \"Delia\",\n                \"Dena\",\n                \"Denna\",\n                \"Desmona\",\n                \"Dolores\",\n                \"Drenna\",\n                \"Edie\",\n                \"Eira\",\n                \"Elsie\",\n                \"Emeline\",\n                \"Etta\",\n                \"Fela\",\n                \"Felicity\",\n                \"Galenica\",\n                \"Galina\",\n                \"Gitta\",\n                \"Gloria\",\n                \"Gwen\",\n                \"Hedy\",\n                \"Hella\",\n                \"Helles\",\n                \"Henrietta\",\n                \"Iduna\",\n                \"Iona\",\n                \"Isa\",\n                \"Isabella\",\n                \"Iskra\",\n                \"Isolde\",\n                \"Jasna\",\n                \"Jaxi\",\n                \"Joan\",\n                \"Juno\",\n                \"Kamelin\",\n                \"Kari\",\n                \"Koli\",\n                \"Lauria\",\n                \"Lenia\",\n                \"Leona\",\n                \"Leyva\",\n                \"Lieu\",\n                \"Lilith\",\n                \"Lin\",\n                \"Lizete\",\n                \"Lorette\",\n                \"Lucella\",\n                \"Lynthia\",\n                \"Lyra\",\n                \"Maia\",\n                \"Maiathah\",\n                \"Maie\",\n                \"Mara\",\n                \"Marasi\",\n                \"Marielda\",\n                \"Marisol\",\n                \"Marris\",\n                \"Mira\",\n                \"Naria\",\n                \"Nasha\",\n                \"Octavia\",\n                \"Odrienne\",\n                \"Olivia\",\n                \"Ora\",\n                \"Ordenna\",\n                \"Oressia\",\n                \"Orsella\",\n                \"Pardenna\",\n                \"Penelope\",\n                \"Penny\",\n                \"Phoebe\",\n                \"Polonia\",\n                \"Pravda\",\n                \"Prudence\",\n                \"Quelenna\",\n                \"Raisa\",\n                \"Redji\",\n                \"Remira\",\n                \"Rey\",\n                \"Riven\",\n                \"Runa\",\n                \"Sabina\",\n                \"Sabinia\",\n                \"Sabrina\",\n                \"Sadeh\",\n                \"Sahar\",\n                \"Selma\",\n                \"Sesereth\",\n                \"Severea\",\n                \"Silaqui\",\n                \"Skannon\",\n                \"Sprig\",\n                \"Stabitha\",\n                \"Syra\",\n                \"Tabitha\",\n                \"Talitha\",\n                \"Tamsyn\",\n                \"Tasi\",\n                \"Terra\",\n                \"Tesslyn\",\n                \"Thava\",\n                \"Thena\",\n                \"Tiff\",\n                \"Una\",\n                \"Vaurin\",\n                \"Veretta\",\n                \"Vesna\",\n                \"Vestine\",\n                \"Vey\",\n                \"Victoria\",\n                \"Vin\",\n                \"Vita\",\n                \"Volette\",\n                \"Vorka\",\n                \"Wander\",\n                \"Ylva\",\n                \"Zahra\",\n                \"Zaida\",\n                \"Zamira\",\n                \"Zarya\"\n            ]\n        },\n        name_surname: [\n            \"Abberwick\",\n            \"Adelbury\",\n            \"Adleton\",\n            \"Aloro\",\n            \"Alsa\",\n            \"Ankhayat\",\n            \"Arran\",\n            \"Ashton\",\n            \"Ashweather\",\n            \"Athanoch\",\n            \"Axelrod\",\n            \"Backworth\",\n            \"Barrow\",\n            \"Basran\",\n            \"Black\",\n            \"Blackford\",\n            \"Blackpool\",\n            \"Blackthorne\",\n            \"Bluff\",\n            \"Boden\",\n            \"Booker\",\n            \"Boulder\",\n            \"Bowman\",\n            \"Braeside\",\n            \"Bramble\",\n            \"Braum\",\n            \"Bray\",\n            \"Breakiron\",\n            \"Bristle\",\n            \"Brocken\",\n            \"Brogan\",\n            \"Bromley\",\n            \"Burnsides\",\n            \"Caebrek\",\n            \"Cartwright\",\n            \"Carver\",\n            \"Childermass\",\n            \"Claw\",\n            \"Clelland\",\n            \"Clemont\",\n            \"Clermont\",\n            \"Cobblecarver\",\n            \"Coleburn\",\n            \"Combe\",\n            \"Comber\",\n            \"Crofty\",\n            \"Cunningham\",\n            \"Daava\",\n            \"Dal\",\n            \"Dalmore\",\n            \"Danfield\",\n            \"Drawlight\",\n            \"Drigg\",\n            \"Dunvil\",\n            \"Elmore\",\n            \"Eveningeyes\",\n            \"Evensteps\",\n            \"Eventide\",\n            \"Everpenny\",\n            \"Fairplay\",\n            \"Farros\",\n            \"Fellwater\",\n            \"Fogg\",\n            \"Gatcombe\",\n            \"Glasseye\",\n            \"Goldsworth\",\n            \"Grave\",\n            \"Graythwaite\",\n            \"Greysteel\",\n            \"Grine\",\n            \"Haig\",\n            \"Half-Off\",\n            \"Havelton\",\n            \"Havenhorst\",\n            \"Hectares\",\n            \"Helker\",\n            \"Helles\",\n            \"Hellyers\",\n            \"Hemme\",\n            \"Hightower\",\n            \"Hightown\",\n            \"Highwater\",\n            \"Hill\",\n            \"Hitchcock\",\n            \"Innerwick\",\n            \"Jayan\",\n            \"Jeduin\",\n            \"Kardera\",\n            \"Karstas\",\n            \"Keel\",\n            \"Kempt\",\n            \"Kessarin\",\n            \"Kinclaith\",\n            \"King\",\n            \"Lake\",\n            \"Larriston\",\n            \"Leake\",\n            \"Lomond\",\n            \"Longstaff\",\n            \"Lorewood\",\n            \"Maroden\",\n            \"Mayson\",\n            \"Merriweather\",\n            \"Michter\",\n            \"Mindwell\",\n            \"Morcombe\",\n            \"Morriston\",\n            \"Mortimer\",\n            \"Netherton\",\n            \"Night\",\n            \"Nighteyre\",\n            \"Nightly\",\n            \"Noctoft\",\n            \"Notherhome\",\n            \"Orchard\",\n            \"Orchid\",\n            \"Path\",\n            \"Peak\",\n            \"Pegg\",\n            \"Penderyn\",\n            \"Pond\",\n            \"Pool\",\n            \"Prichard\",\n            \"Raines\",\n            \"Ravenglass\",\n            \"Ravenwood\",\n            \"Reigns\",\n            \"Reyes\",\n            \"Reynes\",\n            \"Rhodes\",\n            \"Riverford\",\n            \"Robel\",\n            \"Rowan\",\n            \"Sable\",\n            \"Sage\",\n            \"Salkara\",\n            \"Salos\",\n            \"Sevoy\",\n            \"Shilbottle\",\n            \"Shillmoor\",\n            \"Shook\",\n            \"Skelkallan\",\n            \"Skora\",\n            \"Slane\",\n            \"Song\",\n            \"Steadystep\",\n            \"Stoutale\",\n            \"Stovestoker\",\n            \"Strange\",\n            \"Strangford\",\n            \"Strathmill\",\n            \"Sunder\",\n            \"Sunderland\",\n            \"Swiftwhistle\",\n            \"Tailor\",\n            \"Tallfellow\",\n            \"Templeton\",\n            \"Tenpenny\",\n            \"Tevilton\",\n            \"Thistle\",\n            \"Thrysus\",\n            \"Thurston\",\n            \"Tinmouth\",\n            \"Tower\",\n            \"Tristé\",\n            \"Tyrconnell\",\n            \"Vale\",\n            \"Valentine\",\n            \"Veldaire\",\n            \"Venture\",\n            \"Walund\",\n            \"Warren\",\n            \"Waters\",\n            \"Wecker\",\n            \"Welker\",\n            \"Wend\",\n            \"Wharver\",\n            \"Whythe\",\n            \"Woodall\"\n        ],\n        name_alias: [\n            \"Bell\",\n            \"Birch\",\n            \"Bird\",\n            \"Bliss\",\n            \"Bricks\",\n            \"Bug\",\n            \"Chime\",\n            \"Coil\",\n            \"Cricket\",\n            \"Cross\",\n            \"Crow\",\n            \"Echo\",\n            \"Flint\",\n            \"Frog\",\n            \"Frost\",\n            \"Goods\",\n            \"Grip\",\n            \"Gunner\",\n            \"Hammer\",\n            \"Hook\",\n            \"Ink\",\n            \"Junker\",\n            \"Mist\",\n            \"Moon\",\n            \"Nail\",\n            \"Needle\",\n            \"Ogre\",\n            \"Pool\",\n            \"Ring\",\n            \"Ruby\",\n            \"Silver\",\n            \"Skinner\",\n            \"Song\",\n            \"Spur\",\n            \"Tackle\",\n            \"Thistle\",\n            \"Thorn\",\n            \"Tick\",\n            \"Tick-Tock\",\n            \"Tock\",\n            \"Trick\",\n            \"Twelves\",\n            \"Vixen\",\n            \"Whip\",\n            \"Wicker\"\n        ],\n        name_suffix: [\n            \"Jr.\",\n            \"Sr.\",\n            \"III\",\n            \"IV\"\n        ]\n    },\n    GM: {\n        Bargains: [\n            { name: \"Infected Wound\", category: \"Character Effect\", effect: \"The next time you Recover from Harm, your Physicker is at -1d.\" },\n            { name: \"Infected Wound\", category: \"Character Effect\", effect: \"The next time you Recover from Harm, your Physicker is at -1d.\" },\n            { name: \"Infected Wound\", category: \"Character Effect\", effect: \"The next time you Recover from Harm, your Physicker is at -1d.\" },\n            { name: \"It's Mine Now\", category: \"Character Effect\", effect: \"You discover a small item that belongs to a rival. What is it? Who used to own it? How does this change things for you?\" },\n            { name: \"It's Mine Now\", category: \"Character Effect\", effect: \"You discover a small item that belongs to a rival. What is it? Who used to own it? How does this change things for you?\" },\n            { name: \"It's Mine Now\", category: \"Character Effect\", effect: \"You discover a small item that belongs to a rival. What is it? Who used to own it? How does this change things for you?\" },\n            { name: \"Mine By Blood\", category: \"Character Effect\", effect: \"You discover evidence of the death of a family member during the Score. Who is it? How did they die? How does this change things for your character?\" },\n            { name: \"Mine By Blood\", category: \"Character Effect\", effect: \"You discover evidence of the death of a family member during the Score. Who is it? How did they die? How does this change things for your character?\" },\n            { name: \"Mine By Blood\", category: \"Character Effect\", effect: \"You discover evidence of the death of a family member during the Score. Who is it? How did they die? How does this change things for your character?\" },\n            { name: \"Mine By Name\", category: \"Character Effect\", effect: \"You discover an envelope addressed to you during the Score. What is in it? Who left it here for you to find? How does this change things for your character?\" },\n            { name: \"Mine By Name\", category: \"Character Effect\", effect: \"You discover an envelope addressed to you during the Score. What is in it? Who left it here for you to find? How does this change things for your character?\" },\n            { name: \"Mine By Name\", category: \"Character Effect\", effect: \"You discover an envelope addressed to you during the Score. What is in it? Who left it here for you to find? How does this change things for your character?\" },\n            { name: \"Mine By Rights\", category: \"Character Effect\", effect: \"You discover a small item from your past during the Score. What is it? What does it mean that it's here? Does this change things for your character?\" },\n            { name: \"Mine By Rights\", category: \"Character Effect\", effect: \"You discover a small item from your past during the Score. What is it? What does it mean that it's here? Does this change things for your character?\" },\n            { name: \"Mine By Rights\", category: \"Character Effect\", effect: \"You discover a small item from your past during the Score. What is it? What does it mean that it's here? Does this change things for your character?\" },\n            { name: \"Not Paying Attention\", category: \"Character Effect\", effect: \"Uncheck one of the XP triggers already marked for your character for this Score.\" },\n            { name: \"Not Paying Attention\", category: \"Character Effect\", effect: \"Uncheck one of the XP triggers already marked for your character for this Score.\" },\n            { name: \"Shadow From the Past\", category: \"Character Effect\", effect: \"Your intel missed that someone from your past is associated with the target of the Score. Who is it, and how does that change things for you?\" },\n            { name: \"Shadow From the Past\", category: \"Character Effect\", effect: \"Your intel missed that someone from your past is associated with the target of the Score. Who is it, and how does that change things for you?\" },\n            { name: \"Shadow From the Past\", category: \"Character Effect\", effect: \"Your intel missed that someone from your past is associated with the target of the Score. Who is it, and how does that change things for you?\" },\n            { name: \"Thicker than Blood\", category: \"Character Effect\", effect: \"Your intel missed that one of your family members is associated with the target of the Score. How does that change things for you?\" },\n            { name: \"Thicker than Blood\", category: \"Character Effect\", effect: \"Your intel missed that one of your family members is associated with the target of the Score. How does that change things for you?\" },\n            { name: \"Thicker than Blood\", category: \"Character Effect\", effect: \"Your intel missed that one of your family members is associated with the target of the Score. How does that change things for you?\" },\n            { name: \"Why'd It Have To Be...\", category: \"Character Effect\", effect: \"The room you're in triggers a phobia that the Crew didn't know about before. Describe the phobia and take 2 Stress.\" },\n            { name: \"Why'd It Have To Be...\", category: \"Character Effect\", effect: \"The room you're in triggers a phobia that the Crew didn't know about before. Describe the phobia and take 2 Stress.\" },\n            { name: \"Why'd It Have To Be...\", category: \"Character Effect\", effect: \"The room you're in triggers a phobia that the Crew didn't know about before. Describe the phobia and take 2 Stress.\" },\n            { name: \"Demonic Guest\", category: \"Crew Effect\", effect: \"A demonic presence has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Demonic Guest\", category: \"Crew Effect\", effect: \"A demonic presence has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Fracturing Faction\", category: \"Crew Effect\", effect: \"If your Hold is Strong, reduce it to Weak. If your Hold is Weak, reduce your Rep to zero.\" },\n            { name: \"Lesson Not Learned\", category: \"Crew Effect\", effect: \"Uncheck one of the XP triggers already marked for your crew for this Score.\" },\n            { name: \"Lesson Not Learned\", category: \"Crew Effect\", effect: \"Uncheck one of the XP triggers already marked for your crew for this Score.\" },\n            { name: \"Otherworldly Guest\", category: \"Crew Effect\", effect: \"A scion of one of the Old Gods has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Otherworldly Guest\", category: \"Crew Effect\", effect: \"A scion of one of the Old Gods has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Rebellious Faction\", category: \"Crew Effect\", effect: \"A new crew has taken possession of one of your Claims, and will have to be dealt with in Free Play.\" },\n            { name: \"Spectral Guest\", category: \"Crew Effect\", effect: \"A ghostly presence has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Spectral Guest\", category: \"Crew Effect\", effect: \"A ghostly presence has appeared in your Lair and will need to be dealt with during Free Play.\" },\n            { name: \"Turncoat\", category: \"Crew Effect\", effect: \"One of your Cohorts leaves your crew and joins a rival.\" },\n            { name: \"Double-Crossed\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Flipped result.\" },\n            { name: \"Double-Crossed\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Flipped result.\" },\n            { name: \"Double-Crossed\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Flipped result.\" },\n            { name: \"Easily Identified\", category: \"Downtime Effect\", effect: \"You left something behind that is easily traced to you. Choose either +2 Heat and −2 Rep, or +1 Heat and −1 Rep.\" },\n            { name: \"Easily Identified\", category: \"Downtime Effect\", effect: \"You left something behind that is easily traced to you. Choose either +2 Heat and −2 Rep, or +1 Heat and −1 Rep.\" },\n            { name: \"Easily Identified\", category: \"Downtime Effect\", effect: \"You left something behind that is easily traced to you. Choose either +2 Heat and −2 Rep, or +1 Heat and −1 Rep.\" },\n            { name: \"High Profile\", category: \"Downtime Effect\", effect: \"This Score gains +2 Heat.\" },\n            { name: \"High Profile\", category: \"Downtime Effect\", effect: \"This Score gains +2 Heat.\" },\n            { name: \"High Profile\", category: \"Downtime Effect\", effect: \"This Score gains +2 Heat.\" },\n            { name: \"Most Wanted\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, you are the target of an additional Arrest result.\" },\n            { name: \"Most Wanted\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, you are the target of an additional Arrest result.\" },\n            { name: \"Project Setback\", category: \"Downtime Effect\", effect: \"Mark one less Clock segment the first time you work on a Long-Term Project.\" },\n            { name: \"Project Setback\", category: \"Downtime Effect\", effect: \"Mark one less Clock segment the first time you work on a Long-Term Project.\" },\n            { name: \"Project Setback\", category: \"Downtime Effect\", effect: \"Mark one less Clock segment the first time you work on a Long-Term Project.\" },\n            { name: \"Quelle Horreur!\", category: \"Downtime Effect\", effect: \"You suffer nightmares for a week. −1d to all Downtime Actions after this Score.\" },\n            { name: \"Quelle Horreur!\", category: \"Downtime Effect\", effect: \"You suffer nightmares for a week. −1d to all Downtime Actions after this Score.\" },\n            { name: \"Shortchanged\", category: \"Downtime Effect\", effect: \"This Score's payoff is −2 Coin.\" },\n            { name: \"Shortchanged\", category: \"Downtime Effect\", effect: \"This Score's payoff is −2 Coin.\" },\n            { name: \"Shortchanged\", category: \"Downtime Effect\", effect: \"This Score's payoff is −2 Coin.\" },\n            { name: \"Supply Challenges\", category: \"Downtime Effect\", effect: \"The next time you pay Coin for an Acquire Asset roll, you must pay 3 instead of 2 Coin per Tier.\" },\n            { name: \"Supply Challenges\", category: \"Downtime Effect\", effect: \"The next time you pay Coin for an Acquire Asset roll, you must pay 3 instead of 2 Coin per Tier.\" },\n            { name: \"Supply Delays\", category: \"Downtime Effect\", effect: \"Suffer -1d to your next Acquire Asset roll.\" },\n            { name: \"Supply Delays\", category: \"Downtime Effect\", effect: \"Suffer -1d to your next Acquire Asset roll.\" },\n            { name: \"Supply Delays\", category: \"Downtime Effect\", effect: \"Suffer -1d to your next Acquire Asset roll.\" },\n            { name: \"Tastes Like Ashes\", category: \"Downtime Effect\", effect: \"The next time you indulge your Vice, only clear half as much Stress (rounded down) as normal.\" },\n            { name: \"Tastes Like Ashes\", category: \"Downtime Effect\", effect: \"The next time you indulge your Vice, only clear half as much Stress (rounded down) as normal.\" },\n            { name: \"Thrice-Named\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Demonic Notice result.\" },\n            { name: \"Thrice-Named\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Demonic Notice result.\" },\n            { name: \"Thrice-Named\", category: \"Downtime Effect\", effect: \"After the normal Entanglement roll and result, your Crew takes an additional Demonic Notice result.\" },\n            { name: \"Warden's Attention\", category: \"Downtime Effect\", effect: \"+4 Heat (instead of the normal +2 Heat) if there is a death during this Score.\" },\n            { name: \"Warden's Attention\", category: \"Downtime Effect\", effect: \"+4 Heat (instead of the normal +2 Heat) if there is a death during this Score.\" },\n            { name: \"We Want a Bigger Take!\", category: \"Downtime Effect\", effect: \"The gang wants a bigger piece of the action. −2 Coin to Payoff for each Cohort used in this Score.\" },\n            { name: \"We Want a Bigger Take!\", category: \"Downtime Effect\", effect: \"The gang wants a bigger piece of the action. −2 Coin to Payoff for each Cohort used in this Score.\" },\n            { name: \"Weekend Getaway\", category: \"Downtime Effect\", effect: \"If you indulge your Vice after this Score, you automatically overindulge.\" },\n            { name: \"Weekend Getaway\", category: \"Downtime Effect\", effect: \"If you indulge your Vice after this Score, you automatically overindulge.\" },\n            { name: \"Weekend Getaway\", category: \"Downtime Effect\", effect: \"If you indulge your Vice after this Score, you automatically overindulge.\" },\n            { name: \"What's Our Take?\", category: \"Downtime Effect\", effect: \"The gang wants a bigger piece of the action. −1 Coin to Payoff for each Cohort used in this Score.\" },\n            { name: \"What's Our Take?\", category: \"Downtime Effect\", effect: \"The gang wants a bigger piece of the action. −1 Coin to Payoff for each Cohort used in this Score.\" },\n            { name: \"What's Our Take?\", category: \"Downtime Effect\", effect: \"The gang wants a bigger piece of the action. −1 Coin to Payoff for each Cohort used in this Score.\" },\n            { name: \"Accelerating Plans\", category: \"Faction Relationship Effect\", effect: \"A rival faction advances one of its Clocks by two before your next Score.\" },\n            { name: \"Accelerating Plans\", category: \"Faction Relationship Effect\", effect: \"A rival faction advances one of its Clocks by two before your next Score.\" },\n            { name: \"Accelerating Plans\", category: \"Faction Relationship Effect\", effect: \"A rival faction advances one of its Clocks by two before your next Score.\" },\n            { name: \"Escalating Tensions\", category: \"Faction Relationship Effect\", effect: \"A faction of your choice that is unfriendly to your crew moves one step towards War.\" },\n            { name: \"Escalating Tensions\", category: \"Faction Relationship Effect\", effect: \"A faction of your choice that is unfriendly to your crew moves one step towards War.\" },\n            { name: \"Forgiveness or Vengeance?\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts got in a fight with an neutral Cohort. Choose −2 Rep and +1 faction relationship, or +2 Rep and −1 faction relationship.\" },\n            { name: \"Forgiveness or Vengeance?\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts got in a fight with an neutral Cohort. Choose −2 Rep and +1 faction relationship, or +2 Rep and −1 faction relationship.\" },\n            { name: \"Forgiveness or Vengeance?\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts got in a fight with an neutral Cohort. Choose −2 Rep and +1 faction relationship, or +2 Rep and −1 faction relationship.\" },\n            { name: \"Hot-Headed Cohort\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts picked a fight with an allied Cohort. Pay 2 Coin, lose 2 Rep, or −1 faction relationship.\" },\n            { name: \"Hot-Headed Cohort\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts picked a fight with an allied Cohort. Pay 2 Coin, lose 2 Rep, or −1 faction relationship.\" },\n            { name: \"Hot-Headed Cohort\", category: \"Faction Relationship Effect\", effect: \"During the Score, one of your Cohorts picked a fight with an allied Cohort. Pay 2 Coin, lose 2 Rep, or −1 faction relationship.\" },\n            { name: \"Mixed Messages\", category: \"Faction Relationship Effect\", effect: \"A faction of your choice that is friendly to your crew moves one step towards Neutral.\" },\n            { name: \"Mixed Messages\", category: \"Faction Relationship Effect\", effect: \"A faction of your choice that is friendly to your crew moves one step towards Neutral.\" },\n            { name: \"Mutual Defense\", category: \"Faction Relationship Effect\", effect: \"A friendly Faction goes to War with a neutral Faction. Either join their War, or they move to −1 on the relationship chart.\" },\n            { name: \"Mutual Defense\", category: \"Faction Relationship Effect\", effect: \"A friendly Faction goes to War with a neutral Faction. Either join their War, or they move to −1 on the relationship chart.\" },\n            { name: \"Tensions Spread\", category: \"Faction Relationship Effect\", effect: \"One Neutral Faction moves a step towards War, and another Neutral Faction moves a step towards Ally.\" },\n            { name: \"Tensions Spread\", category: \"Faction Relationship Effect\", effect: \"One Neutral Faction moves a step towards War, and another Neutral Faction moves a step towards Ally.\" },\n            { name: \"Tensions Spread\", category: \"Faction Relationship Effect\", effect: \"One Neutral Faction moves a step towards War, and another Neutral Faction moves a step towards Ally.\" },\n            { name: \"The Walls Have Ears\", category: \"Faction Relationship Effect\", effect: \"A friendly faction hears you did a Score against their ally. −1 to that faction's relationship rating.\" },\n            { name: \"The Walls Have Ears\", category: \"Faction Relationship Effect\", effect: \"A friendly faction hears you did a Score against their ally. −1 to that faction's relationship rating.\" },\n            { name: \"The Walls Have Ears\", category: \"Faction Relationship Effect\", effect: \"A friendly faction hears you did a Score against their ally. −1 to that faction's relationship rating.\" },\n            { name: \"The Walls Have Eyes\", category: \"Faction Relationship Effect\", effect: \"A friendly faction hears you did a Score against their ally. −1 to both factions' relationship ratings.\" },\n            { name: \"The Walls Have Eyes\", category: \"Faction Relationship Effect\", effect: \"A friendly faction hears you did a Score against their ally. −1 to both factions' relationship ratings.\" },\n            { name: \"...and Into the Fire\", category: \"Immediate Effect\", effect: \"You are ambushed by an assassin or bounty hunter. Start a 4-Clock, 'Elite Ambusher' to overcome this new foe.\" },\n            { name: \"...and Into the Fire\", category: \"Immediate Effect\", effect: \"You are ambushed by an assassin or bounty hunter. Start a 4-Clock, 'Elite Ambusher' to overcome this new foe.\" },\n            { name: \"A Familiar Face\", category: \"Immediate Effect\", effect: \"You recognize a contact of your choice among the rivals you are running the Score against.\" },\n            { name: \"A Familiar Face\", category: \"Immediate Effect\", effect: \"You recognize a contact of your choice among the rivals you are running the Score against.\" },\n            { name: \"A Familiar Face\", category: \"Immediate Effect\", effect: \"You recognize a contact of your choice among the rivals you are running the Score against.\" },\n            { name: \"Accidental Discharge\", category: \"Immediate Effect\", effect: \"A weapon or item you are carrying loudly discharges and needs to be reloaded before it can be used.\" },\n            { name: \"Accidental Discharge\", category: \"Immediate Effect\", effect: \"A weapon or item you are carrying loudly discharges and needs to be reloaded before it can be used.\" },\n            { name: \"Accidental Discharge\", category: \"Immediate Effect\", effect: \"A weapon or item you are carrying loudly discharges and needs to be reloaded before it can be used.\" },\n            { name: \"All or Nothing\", category: \"Immediate Effect\", effect: \"If you fail this roll, you cannot resist the effects of that failure.\" },\n            { name: \"All or Nothing\", category: \"Immediate Effect\", effect: \"If you fail this roll, you cannot resist the effects of that failure.\" },\n            { name: \"All or Nothing\", category: \"Immediate Effect\", effect: \"If you fail this roll, you cannot resist the effects of that failure.\" },\n            { name: \"Bishop's Gambit\", category: \"Immediate Effect\", effect: \"If you are not in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Bishop's Gambit\", category: \"Immediate Effect\", effect: \"If you are not in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Bishop's Gambit\", category: \"Immediate Effect\", effect: \"If you are not in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Brute Force Method\", category: \"Immediate Effect\", effect: \"You noisily break a weapon of your choice while attempting this Action, even if it is not a combat Action.\" },\n            { name: \"Brute Force Method\", category: \"Immediate Effect\", effect: \"You noisily break a weapon of your choice while attempting this Action, even if it is not a combat Action.\" },\n            { name: \"Brute Force Method\", category: \"Immediate Effect\", effect: \"You noisily break a weapon of your choice while attempting this Action, even if it is not a combat Action.\" },\n            { name: \"Clear the Board\", category: \"Immediate Effect\", effect: \"If you succeed at this roll, clear or fill a Score Clock of your choice. If you fail the roll, you Trauma out of the scene.\" },\n            { name: \"Clear the Board\", category: \"Immediate Effect\", effect: \"If you succeed at this roll, clear or fill a Score Clock of your choice. If you fail the roll, you Trauma out of the scene.\" },\n            { name: \"Devil's Exchange\", category: \"Immediate Effect\", effect: \"You gain the normal +1d to this roll, but suffer −1d to your next Action, and cannot take a Devil's Bargain to offset it.\" },\n            { name: \"Devil's Exchange\", category: \"Immediate Effect\", effect: \"You gain the normal +1d to this roll, but suffer −1d to your next Action, and cannot take a Devil's Bargain to offset it.\" },\n            { name: \"Devil's Exchange\", category: \"Immediate Effect\", effect: \"You gain the normal +1d to this roll, but suffer −1d to your next Action, and cannot take a Devil's Bargain to offset it.\" },\n            { name: \"Ghostly Attention\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, a ghost in the area notices you and begins stalking you.\" },\n            { name: \"Ghostly Attention\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, a ghost in the area notices you and begins stalking you.\" },\n            { name: \"Ghostly Attention\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, a ghost in the area notices you and begins stalking you.\" },\n            { name: \"Gimcrack Gear\", category: \"Immediate Effect\", effect: \"Whatever weapon or tool you are using is cheaply made and breaks whether the roll succeeds or not.\" },\n            { name: \"Gimcrack Gear\", category: \"Immediate Effect\", effect: \"Whatever weapon or tool you are using is cheaply made and breaks whether the roll succeeds or not.\" },\n            { name: \"Gimcrack Gear\", category: \"Immediate Effect\", effect: \"Whatever weapon or tool you are using is cheaply made and breaks whether the roll succeeds or not.\" },\n            { name: \"Gone Rogue\", category: \"Immediate Effect\", effect: \"You cannot accept an Assist for the rest of this Score.\" },\n            { name: \"Gone Rogue\", category: \"Immediate Effect\", effect: \"You cannot accept an Assist for the rest of this Score.\" },\n            { name: \"Hunter Becomes Hunted\", category: \"Immediate Effect\", effect: \"You've been so preoccupied with the obstacles in front of you that you didn't notice the rival lining up a shot behind you.\" },\n            { name: \"Hunter Becomes Hunted\", category: \"Immediate Effect\", effect: \"You've been so preoccupied with the obstacles in front of you that you didn't notice the rival lining up a shot behind you.\" },\n            { name: \"Hunter Becomes Hunted\", category: \"Immediate Effect\", effect: \"You've been so preoccupied with the obstacles in front of you that you didn't notice the rival lining up a shot behind you.\" },\n            { name: \"I Know I Packed It!\", category: \"Immediate Effect\", effect: \"You must immediately check off 1 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"I Know I Packed It!\", category: \"Immediate Effect\", effect: \"You must immediately check off 1 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"I Know I Packed It!\", category: \"Immediate Effect\", effect: \"You must immediately check off 1 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"I Know I Packed Them!\", category: \"Immediate Effect\", effect: \"You must immediately check off 2 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"I Know I Packed Them!\", category: \"Immediate Effect\", effect: \"You must immediately check off 2 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"I Know I Packed Them!\", category: \"Immediate Effect\", effect: \"You must immediately check off 2 Load to no effect, representing equipment you've misplaced.\" },\n            { name: \"Jangled Nerves\", category: \"Immediate Effect\", effect: \"For the rest of the Score, all rolls to Resist generate +1 Stress.\" },\n            { name: \"Jangled Nerves\", category: \"Immediate Effect\", effect: \"For the rest of the Score, all rolls to Resist generate +1 Stress.\" },\n            { name: \"Jangled Nerves\", category: \"Immediate Effect\", effect: \"For the rest of the Score, all rolls to Resist generate +1 Stress.\" },\n            { name: \"Just a Little Spark\", category: \"Immediate Effect\", effect: \"A lamp or candle gets knocked over, catching a curtain or rug on fire. Start a Clock: 'Building is on Fire'.\" },\n            { name: \"Just a Little Spark\", category: \"Immediate Effect\", effect: \"A lamp or candle gets knocked over, catching a curtain or rug on fire. Start a Clock: 'Building is on Fire'.\" },\n            { name: \"Just a Little Spark\", category: \"Immediate Effect\", effect: \"A lamp or candle gets knocked over, catching a curtain or rug on fire. Start a Clock: 'Building is on Fire'.\" },\n            { name: \"King's Gambit\", category: \"Immediate Effect\", effect: \"If you fail at this roll, you are immune to any Harm; but you have a zero rating to your next Action.\" },\n            { name: \"King's Gambit\", category: \"Immediate Effect\", effect: \"If you fail at this roll, you are immune to any Harm; but you have a zero rating to your next Action.\" },\n            { name: \"King's Gambit\", category: \"Immediate Effect\", effect: \"If you fail at this roll, you are immune to any Harm; but you have a zero rating to your next Action.\" },\n            { name: \"Knight's Gambit\", category: \"Immediate Effect\", effect: \"If you are in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Knight's Gambit\", category: \"Immediate Effect\", effect: \"If you are in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Knight's Gambit\", category: \"Immediate Effect\", effect: \"If you are in combat, gain +2d for this roll instead of the standard +1d; but you can roll no more than 1d for your next Action.\" },\n            { name: \"Knuckle Buster\", category: \"Immediate Effect\", effect: \"Whether this Action succeeds or not, you accidentally inflict level 1 Harm on your hand, 'Busted Knuckles.'\" },\n            { name: \"Knuckle Buster\", category: \"Immediate Effect\", effect: \"Whether this Action succeeds or not, you accidentally inflict level 1 Harm on your hand, 'Busted Knuckles.'\" },\n            { name: \"Knuckle Buster\", category: \"Immediate Effect\", effect: \"Whether this Action succeeds or not, you accidentally inflict level 1 Harm on your hand, 'Busted Knuckles.'\" },\n            { name: \"Now or Never\", category: \"Immediate Effect\", effect: \"If you fail this roll, you lose this opportunity and cannot retry it for this Score.\" },\n            { name: \"Now or Never\", category: \"Immediate Effect\", effect: \"If you fail this roll, you lose this opportunity and cannot retry it for this Score.\" },\n            { name: \"Now or Never\", category: \"Immediate Effect\", effect: \"If you fail this roll, you lose this opportunity and cannot retry it for this Score.\" },\n            { name: \"Out of the Frying Pan...\", category: \"Immediate Effect\", effect: \"Things are about to go from bad to worse. Start a 4-Clock, 'Surprise Reinforcements'.\" },\n            { name: \"Out of the Frying Pan...\", category: \"Immediate Effect\", effect: \"Things are about to go from bad to worse. Start a 4-Clock, 'Surprise Reinforcements'.\" },\n            { name: \"Out of the Frying Pan...\", category: \"Immediate Effect\", effect: \"Things are about to go from bad to worse. Start a 4-Clock, 'Surprise Reinforcements'.\" },\n            { name: \"Overextended\", category: \"Immediate Effect\", effect: \"Your next Action automatically has reduced Effect.\" },\n            { name: \"Overextended\", category: \"Immediate Effect\", effect: \"Your next Action automatically has reduced Effect.\" },\n            { name: \"Overextended\", category: \"Immediate Effect\", effect: \"Your next Action automatically has reduced Effect.\" },\n            { name: \"Pawn's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Armor during this Score. You cannot accept this bargain if you already have used Load for Armor.\" },\n            { name: \"Pawn's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Armor during this Score. You cannot accept this bargain if you already have used Load for Armor.\" },\n            { name: \"Pawn's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Armor during this Score. You cannot accept this bargain if you already have used Load for Armor.\" },\n            { name: \"Plan C...\", category: \"Immediate Effect\", effect: \"Things are not going according to plan. Flashbacks cost +1 Stress for the rest of the Score.\" },\n            { name: \"Plan C...\", category: \"Immediate Effect\", effect: \"Things are not going according to plan. Flashbacks cost +1 Stress for the rest of the Score.\" },\n            { name: \"Queen's Gambit\", category: \"Immediate Effect\", effect: \"You automatically succeed at this Action as if you rolled a 6; but you have a zero rating to your next Action.\" },\n            { name: \"Queen's Gambit\", category: \"Immediate Effect\", effect: \"You automatically succeed at this Action as if you rolled a 6; but you have a zero rating to your next Action.\" },\n            { name: \"Queen's Gambit\", category: \"Immediate Effect\", effect: \"You automatically succeed at this Action as if you rolled a 6; but you have a zero rating to your next Action.\" },\n            { name: \"Quicksilver Poisoning\", category: \"Immediate Effect\", effect: \"Used in electroplasmic containers and devices, you get a noseful of quicksilver vapor, suffering level 1 Harm, 'Silverlung' which starts a 4-Clock Project to heal.\" },\n            { name: \"Quicksilver Poisoning\", category: \"Immediate Effect\", effect: \"Used in electroplasmic containers and devices, you get a noseful of quicksilver vapor, suffering level 1 Harm, 'Silverlung' which starts a 4-Clock Project to heal.\" },\n            { name: \"Quicksilver Poisoning\", category: \"Immediate Effect\", effect: \"Used in electroplasmic containers and devices, you get a noseful of quicksilver vapor, suffering level 1 Harm, 'Silverlung' which starts a 4-Clock Project to heal.\" },\n            { name: \"Rook's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Unusual or Scary Weapons this Score. You cannot accept this bargain if you already have used Load for these.\" },\n            { name: \"Rook's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Unusual or Scary Weapons this Score. You cannot accept this bargain if you already have used Load for these.\" },\n            { name: \"Rook's Gambit\", category: \"Immediate Effect\", effect: \"You cannot use Load for Unusual or Scary Weapons this Score. You cannot accept this bargain if you already have used Load for these.\" },\n            { name: \"Shot Nerves\", category: \"Immediate Effect\", effect: \"For the rest of the Score, all rolls to Resist generate +2 Stress.\" },\n            { name: \"Shot Nerves\", category: \"Immediate Effect\", effect: \"For the rest of the Score, all rolls to Resist generate +2 Stress.\" },\n            { name: \"Turned Around\", category: \"Immediate Effect\", effect: \"You lose track of your position. Start a 4-Clock, 'Where Am I?' You must use Actions looking for your Crew to rejoin them.\" },\n            { name: \"Turned Around\", category: \"Immediate Effect\", effect: \"You lose track of your position. Start a 4-Clock, 'Where Am I?' You must use Actions looking for your Crew to rejoin them.\" },\n            { name: \"Turned Around\", category: \"Immediate Effect\", effect: \"You lose track of your position. Start a 4-Clock, 'Where Am I?' You must use Actions looking for your Crew to rejoin them.\" },\n            { name: \"Unsure Footing\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, you loose your footing and fall prone after this Action.\" },\n            { name: \"Unsure Footing\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, you loose your footing and fall prone after this Action.\" },\n            { name: \"Unsure Footing\", category: \"Immediate Effect\", effect: \"Whether you succeed in this roll or not, you loose your footing and fall prone after this Action.\" },\n            { name: \"Worse than We thought\", category: \"Immediate Effect\", effect: \"A Clock of your choice that is running for this Score is either advanced or set back by two segments (whichever is worse for the Crew).\" },\n            { name: \"Worse than We thought\", category: \"Immediate Effect\", effect: \"A Clock of your choice that is running for this Score is either advanced or set back by two segments (whichever is worse for the Crew).\" },\n            { name: \"You're All On Your Own\", category: \"Immediate Effect\", effect: \"After this roll, you cannot offer to Assist on anyone else's roll for the rest of the Score.\" },\n            { name: \"You're All On Your Own\", category: \"Immediate Effect\", effect: \"After this roll, you cannot offer to Assist on anyone else's roll for the rest of the Score.\" },\n            { name: \"You're All On Your Own\", category: \"Immediate Effect\", effect: \"After this roll, you cannot offer to Assist on anyone else's roll for the rest of the Score.\" },\n            { name: \"Death Will Not Stop Me\", category: \"Long-Term Effect\", effect: \"The ghost of someone you killed is driven to take you with it. Start a 12-Clock, 'Spectral Vengence'\" },\n            { name: \"That's Enough of That\", category: \"Long-Term Effect\", effect: \"Someone whose goals are affected by this Score is going to focus on you now. Start a 8-Clock, 'Cold Vengence'\" },\n            { name: \"That's Enough of That\", category: \"Long-Term Effect\", effect: \"Someone whose goals are affected by this Score is going to focus on you now. Start a 8-Clock, 'Cold Vengence'\" },\n            { name: \"The Last Straw\", category: \"Long-Term Effect\", effect: \"You've royally pissed off someone with real clout in the city. Start a 12-Clock, 'Furious Vengence'\" },\n            { name: \"You'll Pay For This\", category: \"Long-Term Effect\", effect: \"Someone hurt by this Score will come back to collect what's owed. Start a 6-Clock, 'Petty Vengence'\" },\n            { name: \"You'll Pay For This\", category: \"Long-Term Effect\", effect: \"Someone hurt by this Score will come back to collect what's owed. Start a 6-Clock, 'Petty Vengence'\" },\n            { name: \"You'll Pay For This\", category: \"Long-Term Effect\", effect: \"Someone hurt by this Score will come back to collect what's owed. Start a 6-Clock, 'Petty Vengence'\" },\n            { name: \"Dalgomur, the Heart of the Storm\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 12-Clock labeled 'The Heart of the Storm' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Dalgomur, the Heart of the Storm\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 12-Clock labeled 'The Heart of the Storm' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Ulf Ironborn, the Skovlan Agitator\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 4-Clock labeled 'Skovlander Uprising' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Ulf Ironborn, the Skovlan Agitator\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 4-Clock labeled 'Skovlander Uprising' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Urumbar, the Closed Eye\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start an 8-Clock labeled 'The Closed Eye' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Urumbar, the Closed Eye\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start an 8-Clock labeled 'The Closed Eye' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Vaskani, the Crossroads Demon\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 6-Clock labeled 'The Crossroads Demon' and set it to one. If the Clock is already active, advance it by one.\" },\n            { name: \"Vaskani, the Crossroads Demon\", category: \"Mandatory Effect\", effect: \"If one is not already active for the crew, start a 6-Clock labeled 'The Crossroads Demon' and set it to one. If the Clock is already active, advance it by one.\" }\n        ],\n        Obstacles: [\n            {\n                name: \"Centipedes\",\n                category: \"Animal Guards\",\n                desc: \"Centipedes the length of a forearm are almost noiseless. If they bite, their toxin causes living flesh to blacken and die, leading to amputation if the poison isn't countered. People tend to scream when bit.\",\n                questions: [\n                    \"Were the centipedes brought in as guardians, or are they a local nuisance?\",\n                    \"There are many different breeds, how will you describe the appearance of yours?\",\n                    \"Do they have a nasty local nickname?\"\n                ],\n                modsHarder: [\n                    \"When one attacks it releases a scent that enrages others nearby, so they tend to swarm.\",\n                    \"They are excellent swimmers, and they hunt in bog-like areas under the surface.\"\n                ],\n                modsEasier: [\n                    \"They are bright yellow and red, and hiss before striking, giving all the warning possible.\",\n                    \"All the guardians and neighbors carry the antidote, the local apothecary knows what you need.\"\n                ]\n            },\n            {\n                name: \"Great Cats\",\n                category: \"Animal Guards\",\n                desc: \"One or more great cats slink through the shadows. They like to attack from high places. Their fur mottles to match the colors and tones and textures around them.\",\n                questions: [\n                    \"Did the current owners bring them in, or are they inherited from a previous owner?\",\n                    \"Do they stay on the estate, or go hunting in the local neighborhood?\"\n                ],\n                modsHarder: [\n                    \"The cats are trained to alert guards (or wear charm jewelry to alert supernatural guardians) when they detect intruders with their keen senses.\",\n                    \"Massive old trees draped with moss, or many ledges and overlooks, provide the cats cover.\"\n                ],\n                modsEasier: [\n                    \"There is only one, with a regular feeding time and place.\",\n                    \"The cats are well fed and lazy, mostly for show unless provoked.\"\n                ]\n            },\n            {\n                name: \"Hunting Spiders\",\n                category: \"Animal Guards\",\n                desc: \"These lightning-fast nightmares are about twenty pounds and three feet across, built like jumping spiders and loaded with paralytic venom.\",\n                questions: [\n                    \"Were these spiders bred for a decadent aristocrat, or warped to this impossible size by an insane whisper?\",\n                    \"Can they survive away from a spirit well?\",\n                    \"What noise do they make?\",\n                    \"How do they smell?\"\n                ],\n                modsHarder: [\n                    \"They are mostly trained, their handler using a slide whistle to give orders to hunt, attack, withdraw, or guard.\",\n                    \"The color of the stone, the shape of the underbrush, the leaf litter--everything matches the spider color scheme and hides its movement.\"\n                ],\n                modsEasier: [\n                    \"Little lasting harm at first; paralyzed prey is dragged back to a lair and webbed up. You have a day or so to rescue the prey before the spider injects acid into the web bundle so it can drink its victim.\",\n                    \"The poison is weak and easy to resist, requiring several successful bites to put a human down.\"\n                ]\n            },\n            {\n                name: \"Mastiff Pack\",\n                category: \"Animal Guards\",\n                desc: \"A pack of mastiffs have run of the guarded area when it is not in more public use. They only respond to their masters, who have special tunics, whistles, and gloves. They kill anyone or anything else.\",\n                questions: [\n                    \"What is their heraldry?\",\n                    \"How many mastiffs are in the pack?\",\n                    \"Are they trained well enough to ignore poisoned meat or live animal distractions?\"\n                ],\n                modsHarder: [\n                    \"Each one is precious to the site owner, who will tirelessly seek vengeance if they are hurt.\",\n                    \"The pack masters are elite veterans with firearms and excellent tracking and hunting skills.\"\n                ],\n                modsEasier: [\n                    \"The equipment is properly installed, its vulnerable parts behind the energy curtain, directly guarding what needs protecting.\",\n                    \"The lightning walls attract loose spirits, intruders may also have to contend with confused ghosts.\"\n                ]\n            },\n            {\n                name: \"Venomous Snakes\",\n                category: \"Animal Guards\",\n                desc: \"Venomous snakes have lairs prepared for them in the guarded area.\",\n                questions: [\n                    \"How fast acting is their venom?\",\n                    \"How aggressive are they?\",\n                    \"Is their hide camouflage for hunting, or bright to warn away predators?\",\n                    \"Are there only a few big ones, or many small snakes?\",\n                    \"Do the site guardians feed them, or can they find enough vermin on their own?\"\n                ],\n                modsHarder: [\n                    \"Knee-deep plants and elevation shifts intentionally make it difficult to see snakes.\",\n                    \"Other guardians have a side business in selling venom and meat and hides. They have venom blowdarts and poisoned daggers.\"\n                ],\n                modsEasier: [\n                    \"The snakes dislike a certain whistle tone. Let out a blast occasionally and they'll stay away.\",\n                    \"A former employee knows how guardians got around the site with minimal risk of snakes.\"\n                ]\n            },\n            {\n                name: \"Armor Hosts\",\n                category: \"Ghostly Guards\",\n                desc: \"Guardian spirits are able to inhabit a crystal melded to each suit of armor in a guarded area. When melded, the spirit can control the armor. Spirits use the armor to attack intruders.\",\n                questions: [\n                    \"Were the suits of armor built for this purpose, or retrofitted by a spirit trafficker?\",\n                    \"Are the guardian spirits loyal, or were they stripped of their will by a ritual or other power?\",\n                    \"Are the suits visibly paranormal?\"\n                ],\n                modsHarder: [\n                    \"A single powerful (relatively sane) spirit can flit from armor to armor, backed up by two slave spirits. The guardian can form an electroplasmic face in the helmet to sneer at intruders.\",\n                    \"A swarm of spirits are eager to take their turn in armor. When one tires another drops in.\",\n                    \"Ceaseless patrol.\"\n                ],\n                modsEasier: [\n                    \"The ghost(s) that animate the armor are murderous and difficult to control.\",\n                    \"The guardians can play a chime to recall them to a restraining prism.\",\n                    \"The suits of armor are old, battered, and prone to physical failure.\"\n                ]\n            },\n            {\n                name: \"Coldrooms\",\n                category: \"Ghostly Guards\",\n                desc: \"The defended area is kept cold. Body heat registers like a plume of blood in the water. Ghosts flood living meat with cold, gorging on body heat, becoming more visible as their outlines swirl with life-blood.\",\n                questions: [\n                    \"Were they created by ritually starving victims to death in the defended space?\",\n                    \"Were they stolen from the site of a massive horrific disaster?\",\n                    \"Does a spirit trafficker maintain the wards on the space?\"\n                ],\n                modsHarder: [\n                    \"A dead whisper leads them, countering defensive charms and magic, sniffing out breath even if heat is concealed, dueling any supernatural defense.\",\n                    \"The guarded area is powerfully warded and underground where temperature is easy to maintain.\"\n                ],\n                modsEasier: [\n                    \"The guarded area is vulnerable to weather conditions. It is sharp in the cold, but almost dormant in the heat.\",\n                    \"A relatively simple spirit bane charm can keep them at bay if created in tune with the site.\"\n                ]\n            },\n            {\n                name: \"Cursed Treasure\",\n                category: \"Ghostly Guards\",\n                desc: \"Treasures are infused with a haunting spirit. Anyone touching the treasure will be cursed, dreaming the crimes of the ghost and attracting anger and distaste from strangers. Friends become uncomfortable and suspicious around the cursed scoundrel.\",\n                questions: [\n                    \"Were those sacrificed to make the haunts loyal, serving past death, or punished by undeath?\",\n                    \"Is the treasure marked as cursed?\"\n                ],\n                modsHarder: [\n                    \"The haunting is so deadly that it drives most victims to suicide within a week. Resourceful scoundrels with access to spirit traffickers have days to somehow break the hold. Others are doomed.\",\n                    \"Electroplasmic poisoning begins, and within a week the scoundrel will become a vampire.\"\n                ],\n                modsEasier: [\n                    \"All the bad luck waiting in the wings (unfinished clocks from foes, poorly protected stashes, jilted lovers, false identities) go wrong in quick succession. Then the curse is over.\",\n                    \"A competent occultist can break the curse as a down time project with a four segment clock.\"\n                ]\n            },\n            {\n                name: \"Darkrooms\",\n                category: \"Ghostly Guards\",\n                desc: \"The defended area is dark. The ragged ghosts hate light. They shriek horribly as they attack light sources with slapping leathery hands, like bat wings. Intruders may glimpse their luminous fangs.\",\n                questions: [\n                    \"Were these ghosts placed here intentionally, or are they the result of some horror that left a print in the Ghost Field?\",\n                    \"Is this defense maintained, or passive?\"\n                ],\n                modsHarder: [\n                    \"Another guardian lurks in the dark and takes advantage of the distraction to steal from intruders, perhaps killing them too.\",\n                    \"The ghosts are aggressive, pushing intruders. Surroundings include long drops, spikes, mazes, or other hazards difficult to navigate in darkness.\"\n                ],\n                modsEasier: [\n                    \"While annoying, they do no real damage, and forewarned scoundrels may prepare unbreakable light sources or supernatural dark vision.\",\n                    \"There is enough ambient light to see.\"\n                ]\n            },\n            {\n                name: \"Dynastic Hive\",\n                category: \"Ghostly Guards\",\n                desc: \"Ancestors have been ritually infused into the defense site, it is a dynastic holding. The spirits are old, and insane, but strategically placed to act out their madness in the most damaging way.\",\n                questions: [\n                    \"Did the family get special permission to harbor ghosts?\",\n                    \"Do they have connections to limmers?\",\n                    \"Are spirits tied to leviathan bone shards?\",\n                    \"Are they moving pictures, or conversationalists with clues?\"\n                ],\n                modsHarder: [\n                    \"The ghosts are legally protected, like landmarks or artwork. Damaging them is a serious crime.\",\n                    \"Some of the more powerful or canny ghosts are still somewhat sane collaborators with the site owners.\"\n                ],\n                modsEasier: [\n                    \"They are out of control, and few dare to enter the site now (or it is abandoned.)\",\n                    \"They will not harm family members (but may not react well to hostages.)\"\n                ]\n            },\n            {\n                name: \"Hunting Ghostpack\",\n                category: \"Ghostly Guards\",\n                desc: \"A group of weaponized ghosts haunts the defended area. They are capable of scouting to find intruders, descending on them with lethal force.\",\n                questions: [\n                    \"Do they appear as a pack with a mounted hunter, spectral hounds, and a ghostly horn call?\",\n                    \"Or an armored warband?\",\n                    \"Shapeless lethal electroplasmic stalkers?\",\n                    \"Are the wounds they inflict bloody cuts, or hard frostbite?\",\n                    \"Is their area surrounded with runes that let them see into the material world?\"\n                ],\n                modsHarder: [\n                    \"The ghost leader feels all life force in its hunting ground, knowing its location.\",\n                    \"The hunt can only rise when certain conditions like anniversaries, moon phases, etc. are met. However, they have a treasure that can only be taken from them when they manifest.\"\n                ],\n                modsEasier: [\n                    \"The attack is purely psychological, killing with supernatural fear. The effect can be resisted.\",\n                    \"They are summoned and directed by a command artifact like a hunting horn or special weapon. If someone else tunes to the weapon, control (and its obligations) may shift to a new bearer.\"\n                ]\n            },\n            {\n                name: \"Possession Gate\",\n                category: \"Ghostly Guards\",\n                desc: \"If an intruder breaks a clearly marked seal, the intruder is attacked by a possessing spirit that takes on the traits of the most strong-willed, brutal person the seal-breaker ever killed. The possessing spirit and the seal-breaker struggle for control. This counts as a harm.\",\n                questions: [\n                    \"Is the possessing spirit a ghost, or a shape-shifting construct made by an expert that makes a shape out of something in the target?\",\n                    \"If an innocent triggers the trap, what form does the spirit take then?\"\n                ],\n                modsHarder: [\n                    \"The only way to be free is to die, undergo electroplasmic surgery while dead, and be revived. Otherwise the curse is protected by the victim's life force.\",\n                    \"The haunting spirit tries to take possession once a day or so, sending the host into a blackout and acting out vicious crimes against allies, loved ones, and bluecoats.\"\n                ],\n                modsEasier: [\n                    \"The condition can be reduced with a resist roll, but still is likely a 6 segment clock to clear.\",\n                    \"The curse haunt would rather have a host ally than kill its victim, and may bargain for shared control.\"\n                ]\n            },\n            {\n                name: \"Spirit-Infused Art\",\n                category: \"Ghostly Guards\",\n                desc: \"Art works are haunted by spirits that are capable of spying. They observe their area, and may be able to murmur about what they see to a guardian.\",\n                questions: [\n                    \"Was art repurposed to host spirits, or was it created for them and around them?\",\n                    \"Is the art mosaics, portraits, statues, or some other form?\",\n                    \"How sane and coherent are the spirits?\",\n                    \"How loyal are they?\",\n                    \"Do they have the power to attack intruders?\"\n                ],\n                modsHarder: [\n                    \"One or more guardians has a signet ring tuned to the haunted art pieces, and can hear what they whisper as they spy.\",\n                    \"The ghosts inhabiting the art can move from one piece to another, following intruders or retreating to report.\"\n                ],\n                modsEasier: [\n                    \"One spirit per art piece, and each spirit has its own unbalanced personality.\",\n                    \"Unhinged art is violent, so it has to be shrouded or restrained when guardians go through the defended area.\"\n                ]\n            },\n            {\n                name: \"Starving Fog\",\n                category: \"Ghostly Guards\",\n                desc: \"The guarded area is in a clinging cold fog. Fog draws energy from those breathing in it until it manifests shadows that increase target fear, which feeds it more. Eventually it can manifest a killing shape.\",\n                questions: [\n                    \"What do intruders in the fog see when it reflects their fears?\",\n                    \"Are there sound effects, smells, and sounds, or just fleeting glimpses and silhouettes?\",\n                    \"Does it project hallucinations or trigger memories?\"\n                ],\n                modsHarder: [\n                    \"The fog strengthens the Ghost Field, making ghosts within it more powerful.\",\n                    \"The fog can move, summoned or controlled by other guardians to provide backup or help search.\"\n                ],\n                modsEasier: [\n                    \"The fog is generated by an artifact. If the artifact is neutralized so is the fog.\",\n                    \"Those with the proper energy keyed amulet or other trinket are invisible to the fog.\"\n                ]\n            },\n            {\n                name: \"Sweat Nectar\",\n                category: \"Ghostly Guards\",\n                desc: \"The defended area is kept hot. Sweat tastes like nectar to swarming ghosts, who dehydrate targets into mummies. The stolen life force and moisture flows to prepared corpses, so ghosts can ride them again.\",\n                questions: [\n                    \"Were they created by dehydrating sacrifices to death in the defended space?\",\n                    \"Were they gathered from outside the lightning walls to stand guard here?\",\n                    \"Does a spirit trafficker maintain the wards on the space?\"\n                ],\n                modsHarder: [\n                    \"Many prepared corpses are stashed in unexpected places, bursting into combat when rejuvenated.\",\n                    \"Once they rise, the desiccated spirit-ridden corpses will chase intruders until they can't.\"\n                ],\n                modsEasier: [\n                    \"Only a few corpses are left to revive.\",\n                    \"The site is difficult to keep hot enough to extract the necessary sweat from intruders.\"\n                ]\n            },\n            {\n                name: \"Dartus Weed\",\n                category: \"Supernatural Plants\",\n                desc: \"When something moves near a tangled bank of dartus weed, the vines flex, flicking barbed tips towards the source of motion within arm's reach. The darts are paralytic; a target will pass out for about an hour.\",\n                questions: [\n                    \"Do they have a distinctive flower or smell?\",\n                    \"What is the aftertaste of the poison's effect?\"\n                ],\n                modsHarder: [\n                    \"Hounds with chemically toughened hides patrol the weed banks, brutally killing intruders.\",\n                    \"Weed banks are cultivated strategically, flanking important doorways or draped over arborwalks, straggling along verges.\"\n                ],\n                modsEasier: [\n                    \"The weeds are young. Darts can be stopped with thick leather.\",\n                    \"Weed banks are out of the way of defended valuables, but too close to very annoyed neighbors who may hold a grudge.\"\n                ]\n            },\n            {\n                name: \"Dreamspore Shrooms\",\n                category: \"Supernatural Plants\",\n                desc: \"Placed on the ceiling, they drizzle sandy spores when they sense motion below. Victims hallucinate, heightening subconscious emotion (so they are very mellow, or super anxious, or filled with rage, etc.).\",\n                questions: [\n                    \"Were these intended to be a site defense?\",\n                    \"Did they instead serve a religious or recreational function?\",\n                    \"Are there special techniques for harvesting them, perhaps selling them to alchemists?\"\n                ],\n                modsHarder: [\n                    \"A more intense strain, these can knock out those who succumb, and give them vivid dreams for several hours.\",\n                    \"They are placed near other guardians as well as hazards like a steep drop or running water.\"\n                ],\n                modsEasier: [\n                    \"Other guardians come here recreationally, their effectiveness reduced.\",\n                    \"The spores are weak and easier to resist.\"\n                ]\n            },\n            {\n                name: \"Floormesh\",\n                category: \"Supernatural Plants\",\n                desc: \"Flat vines grow together to make flooring. Connected below is the bulb, covered in venomous spikes. Anyone heavier than a child will fall through. Blood and rot feed the floormesh.\",\n                questions: [\n                    \"Have site defenders put carpet over the flat vines to further hide the threat?\",\n                    \"What colors, textures, and patterns does this version have?\",\n                    \"How dangerous is the venom?\"\n                ],\n                modsHarder: [\n                    \"The building's architecture assumes use of floormesh, the carpets are woven to look like floormesh so the guardians don't have to cover the actual pits.\",\n                    \"The mesh itself has venomous thorns in it, so stepping on it or falling through poisons the target.\"\n                ],\n                modsEasier: [\n                    \"The pit is not cleaned, the area near it stinks heavily of corpserot. The mesh sags visibly.\",\n                    \"Floormesh is mostly hung like tapestries, living decorations, rather than forming pit traps.\"\n                ]\n            },\n            {\n                name: \"Ghost Crystal Topiary\",\n                category: \"Supernatural Plants\",\n                desc: \"Ghost crystals are worked into the roots of fancifully trimmed bushes. Ghosts may be able to inhabit the bushes and make them move. This gardening curiosity can be weaponized.\",\n                questions: [\n                    \"Is this a currently maintained garden, or one that is overgrown and abandoned?\",\n                    \"Who provides the necessary skilled care to create or maintain the topiary?\",\n                    \"Is there a theme to the sculptures?\"\n                ],\n                modsHarder: [\n                    \"Certain of the most powerful bushes can uproot and move around like living green golems driven by electroplasmic energy.\",\n                    \"The bushes hardly move, but the powerful energies of the crystals make ghosts much more coherent and powerful in the garden.\"\n                ],\n                modsEasier: [\n                    \"Left unprotected at one point, the garden was raided by thieves after the ghost crystals. Few crystals are left in the shaggy bushes.\",\n                    \"Incompetent handling has drained most of the power from the crystals.\"\n                ]\n            },\n            {\n                name: \"Keenshrooms\",\n                category: \"Supernatural Plants\",\n                desc: \"These fist-sized mushrooms let out a keening wail when light comes within about thirty feet.\",\n                questions: [\n                    \"What do they look like?\",\n                    \"Is their smell distinctive?\",\n                    \"Are they good eating?\"\n                ],\n                modsHarder: [\n                    \"They are strategically placed to surprise intruders; inside doors, on ceilings, in alcoves, behind statues.\",\n                    \"Masses of keenshrooms have been allowed to coat walls or fill rooms, and their keen is strong enough to deafen or kill.\"\n                ],\n                modsEasier: [\n                    \"The keenshrooms were placed too close to trafficked paths inside or outside the defended site. Constant false alarms dull vigilance.\",\n                    \"Too far from site defenders, their keens are seldom investigated.\"\n                ]\n            },\n            {\n                name: \"Murder Tree\",\n                category: \"Supernatural Plants\",\n                desc: \"The willow tree grew around bones wired to it, spirit crystals studded in its bark, and leviathan blood at its roots. lt is dimly self-aware. It senses and hates life, whipping and clubbing any who approach.\",\n                questions: [\n                    \"How do guardians move around the tree?\",\n                    \"Suggestions include knowing passwords, having enchanted amulets, or attuning to its blind spots. How many guard the site?\",\n                    \"Who had the expertise to cultivate this living weapon, how long ago?\"\n                ],\n                modsHarder: [\n                    \"The chorus of semi-aware spirits that fuel the tree are enslaved by one domineering will. The tree is as coherent as a person.\",\n                    \"Multiple murder trees are connected by roots and share knowledge with each other (and any other site guardians.)\"\n                ],\n                modsEasier: [\n                    \"No one can communicate with the murder tree, or control it, so it is isolated from other defenses.\",\n                    \"The tree sleeps most of the time, and it is difficult to rouse it to fighting fury.\"\n                ]\n            },\n            {\n                name: \"Snatchweed\",\n                category: \"Supernatural Plants\",\n                desc: \"It grows in fresh water, lengthening its long winding tendrils almost to the surface. When touched, it snatches and pulls, coiling down to the bottom and holding for a few minutes before relaxing back up.\",\n                questions: [\n                    \"Is their growth boosted supernaturally, and can you see faces reflecting from the Ghost Field beneath their fronds?\",\n                    \"Are the locals aware of the threat, willing to talk about it?\"\n                ],\n                modsHarder: [\n                    \"Snatchweed is cultivated in areas where intruders must enter the water to get past other obstacles.\",\n                    \"The bottom of the water has two foot spikes, victims are pulled down onto them.\"\n                ],\n                modsEasier: [\n                    \"A sign warns of the hazard, as required by law.\",\n                    \"This particular breed of snatchweed recoils from salt; put enough on the surface and tendrils recoil.\"\n                ]\n            },\n            {\n                name: \"Thirstclimber\",\n                category: \"Supernatural Plants\",\n                desc: \"The vines are red, and when flesh touches them (even through leather) the vine draws blood to the surface in alarming quantities. The vines are slippery, and almost impossible to grasp with wet hands.\",\n                questions: [\n                    \"Are the vines clearly visible to those who can see in the Ghost Field?\",\n                    \"Do the vines cause damage that must be healed, or does the blood only flow when they are nearby?\"\n                ],\n                modsHarder: [\n                    \"The site has guard creatures that track by scent and are drawn to attack things that smell bloody.\",\n                    \"Thirstclimber is cultivated at the mid-point of a really difficult climb.\"\n                ],\n                modsEasier: [\n                    \"Annoyed locals keep it trimmed back on outside walls periodically in spite of the guardian's threats.\",\n                    \"Guards know the ingredients to make a special paste, and the symbol to paint on skin with it, to protect from the plant's effects. A former guard might share the secret.\"\n                ]\n            },\n            {\n                name: \"Thirsty Thorns\",\n                category: \"Supernatural Plants\",\n                desc: \"Strategically placed thornbushes grow on walls and serve as decorations. They live on blood. They only flower if something dies on them; the bigger the life, the more impressive the bloom.\",\n                questions: [\n                    \"Do they feed on radiant light?\",\n                    \"Are they along the interior walls, lining the walks, and climbing walls outside?\",\n                    \"Are there thorns inside, along windows or protecting secret doors?\"\n                ],\n                modsHarder: [\n                    \"The thorns are poisonous, inflicting some condition on those who fail to resist.\",\n                    \"Possibilities include sleep, death by choking, blinding blood from the eyes, or paralysis.\",\n                    \"The thorns are considered a gardening achievement, with some fame and support as local culture.\"\n                ],\n                modsEasier: [\n                    \"A custom amulet tuned to their life energy turns the thorns away, allowing its bearer to push through them unharmed. A site defender may have one, or one could be made.\",\n                    \"They are old and brittle, dying by inches and neglected.\"\n                ]\n            },\n            {\n                name: \"Vine Curtains\",\n                category: \"Supernatural Plants\",\n                desc: \"Curtains of vines connect back to a radiant root that has grown semi­aware, fed on rogue spirits. If touched, the vines slither and writhe to entangle, hoist, and bundle the target for a guardian to find.\",\n                questions: [\n                    \"What do the vines look like?\",\n                    \"Do they use their scent to attract or repel?\",\n                    \"Where is the root relative to the curtain?\"\n                ],\n                modsHarder: [\n                    \"Many curtains and roots of different sizes (some quite big) connect back to a central bulb somewhere in the defense site.\",\n                    \"The vines also have a contact poison that makes their target go limp for 10-60 minutes.\"\n                ],\n                modsEasier: [\n                    \"The site owner does not have legal permission to have the vine curtains, so they are only used inside.\",\n                    \"The vine curtains grow wild and the lazy site owner does not keep them trimmed back, so other guards must stay away from them.\"\n                ]\n            },\n            {\n                name: \"Caul Piercers\",\n                category: \"Traps\",\n                desc: \"Piercers are designed to puncture whoever touches them. They pierce the energy caul of the character's life force in the Ghost Field. This causes a harm condition that worsens or costs stress every down time cycle until the caul can be mended (6 segment project.) Interpret as needed.\",\n                questions: [\n                    \"Do the piercers resemble knives, nails, or thorn-like carvings?\",\n                    \"What sadistic expert crafted these dire traps?\",\n                    \"If pried out of their settings, how long do they retain potency?\"\n                ],\n                modsHarder: [\n                    \"Those affected will trail life energy like a wounded fish bleeding in the water; demons and ghosts alike will investigate the scent.\",\n                    \"They are worked into important doorknobs, strategic ledges, and concealed flooring.\"\n                ],\n                modsEasier: [\n                    \"They all look alike and are similarly placed, relying on surprise to be effective.\",\n                    \"They are only on the main treasure.\"\n                ]\n            },\n            {\n                name: \"Collapsing Ceilings\",\n                category: \"Traps\",\n                desc: \"If triggered, this trap drops a mass of stone. That seals off the threatened area, and crushes anyone tampering with its defenses.\",\n                questions: [\n                    \"Who put valuables behind a trap that could seal them away for good?\",\n                    \"How old is this defense, and who takes care of it?\",\n                    \"What warning signs tip off an intruder that continuing is dangerous?\"\n                ],\n                modsHarder: [\n                    \"Hidden mechanisms can raise the block back up to the ceiling, so the trap can be reused (or defeated remotely.)\",\n                    \"More than one block falls; the first one cuts off escape, then death seems inevitable.\"\n                ],\n                modsEasier: [\n                    \"The stone dropped long ago. Site guardians or intruders have developed ways to climb over it or get past it. Other blocks may still be untriggered, but some of them are no longer dangerous.\",\n                    \"More like a mine collapse, difficult to control and possible to tunnel past.\"\n                ]\n            },\n            {\n                name: \"Combination or Trick\",\n                category: \"Traps\",\n                desc: \"Various portals and defenses of the site are protected by combination locks or riddles to solve. Lockpicks will not work against them, though finesse may solve them eventually.\",\n                questions: [\n                    \"Are there a series of combination locks expressing a religious or eccentric worldview?\",\n                    \"Are there picture arranging puzzles, or unusual  keys  to go in sculpture locks?\",\n                    \"Are the locks mechanical or supernatural?\"\n                ],\n                modsHarder: [\n                    \"Powerful runic work or enslaved ghosts make the obstacle difficult to smash or trick--the right combination or object must be used to bypass it.\",\n                    \"Clues and needed items are spread across a large estate, or multiple estates.\"\n                ],\n                modsEasier: [\n                    \"The combination or solution to the puzzle is in a scholarly work, and can be found or bought ahead of time.\",\n                    \"The solutions are painfully obvious to someone with the right upbringing and background.\"\n                ]\n            },\n            {\n                name: \"Contact Needles\",\n                category: \"Traps\",\n                desc: \"Small needles are worked into contact surfaces and poisoned, to deter intruders. They may be on doorknobs, seat backs or cushions, doorframes, stair treads, ledges, beds—anywhere, really.\",\n                questions: [\n                    \"Are the needles easily visible if you look for them, or camouflaged?\",\n                    \"Are they retractable if you know what you're doing?\",\n                    \"What kind of poison is on them?\",\n                    \"Will the victim sleep, freeze, die, or hallucinate?\"\n                ],\n                modsHarder: [\n                    \"The needles are only corporeal to those who touch them without wearing a certain amulet. Important site guardians are immune to the needles.\",\n                    \"Anything important or at an unguarded entry point is going to be festooned with needles.\"\n                ],\n                modsEasier: [\n                    \"They are not well maintained. Many have snapped off, and few retain much poison.\",\n                    \"They are only on the most important objects or the most useful trap objects (like a chair for guests.)\"\n                ]\n            },\n            {\n                name: \"Excellent Locks\",\n                category: \"Traps\",\n                desc: \"Beyond simple security, these locks are works of art. They are higher potency than they would normally be. Also, they are equipped with poison needle traps, or pick breakers, or redundancies.\",\n                questions: [\n                    \"Who put in these superior locks, and for what reason?\",\n                    \"Are the locks designed to defeat entry, or actively punish intruders?\",\n                    \"Do the specialized keys have a distinctive look, like two flanges?\",\n                    \"Is there a master key?\"\n                ],\n                modsHarder: [\n                    \"Everything is locked, and all the locks are good. Somebody had a real lock problem.\",\n                    \"The locks involve supernatural components, like hidden keyholes or paralyzing energy.\"\n                ],\n                modsEasier: [\n                    \"The locks are in poor repair, of variable quality after indifferent maintenance and many intrusion attempts.\",\n                    \"Very fancy locks, but they are padlocks, and bolt cutters can circumvent the problem.\"\n                ]\n            },\n            {\n                name: \"Murder Holes\",\n                category: \"Traps\",\n                desc: \"Intruders go past one door, into a hallway or small room, and the door closes behind them. Arrow slits open in the walls, and slots in the ceiling allow boiling oil to be poured down. Intruders are trapped and vulnerable. These are often in doors through defenses.\",\n                questions: [\n                    \"Was the original site builder often under siege?\",\n                    \"Are the murder holes obvious or concealed?\"\n                ],\n                modsHarder: [\n                    \"Murder holes are automated with self- slamming doors and pre-boiling oil, so a few defenders can trap and/or kill many intruders.\",\n                    \"The whole layout is built with many murder hole areas to deter invasion.\"\n                ],\n                modsEasier: [\n                    \"The walls are wooden, and determined captives can break through to face their attackers.\",\n                    \"This area does not have enough staff to monitor intruders and make best use of murder holes.\"\n                ]\n            },\n            {\n                name: \"Pit Traps\",\n                category: \"Traps\",\n                desc: \"The defended site has pit traps in strategic places. They are between 10 and 40 feet deep.\",\n                questions: [\n                    \"Do they have slick sides?\",\n                    \"Are there spikes at the bottom?\",\n                    \"Are the covers mechanized, or flimsy boards and carpets, grass turf, or leaves over canvas?\",\n                    \"Are the sides stone, earth, or clay?\"\n                ],\n                modsHarder: [\n                    \"Fist sized tunnels connect pits. Predatory creatures (crabs, snakes, spiders, rats) scurry to devour victims.\",\n                    \"Once someone falls into the pit the covers close again, and will not open until unlocked.\"\n                ],\n                modsEasier: [\n                    \"The pits drop into a lower area, mostly abandoned except for predators. It is possible to find a way out.\",\n                    \"The pits are mostly open and filled with junk.\"\n                ]\n            },\n            {\n                name: \"Retractable Spikes\",\n                category: \"Traps\",\n                desc: \"Spring-loaded spears or racks of spears launch at intruders. They can come from the side, behind, ahead, below, or above.\",\n                questions: [\n                    \"Are the defenses standardized to protect guardians, or random to confuse intruders?\",\n                    \"Are they in an area that site defenders use, or in an isolated off-limits area?\",\n                    \"How long have they been in use, and how often are they maintained?\"\n                ],\n                modsHarder: [\n                    \"After doing their killing work, they retract, and the launch points are not obvious.\",\n                    \"The spears are slathered with some toxin, further affecting the victim.\"\n                ],\n                modsEasier: [\n                    \"The mechanisms are not well maintained. Sometimes they don't work, and when they do, there is a screech and they are a bit slow.\",\n                    \"The spears are designed to pin an intruder in place, to be interrogated and punished, rather than to kill outright.\"\n                ]\n            },\n            {\n                name: \"Secret Doors & Spyholes\",\n                category: \"Traps\",\n                desc: \"Guardians are well trained in the use of numerous secret doors and hidden passages with spyholes. They can attack from unexpected directions, escape without a trace, and watch intruders unobserved.\",\n                questions: [\n                    \"Was this site built by a spy, or a cult, or a paranoid aristocrat?\",\n                    \"Are there consistent tells, a code built into the decor and architecture, or must all secrets be known individually?\"\n                ],\n                modsHarder: [\n                    \"Ongoing rearrangement and construction means old information from plans or people ages out fast.\",\n                    \"Supernatural locks and keys mean that triggers and spyholes and seams may not be visible in the material world at all.\"\n                ],\n                modsEasier: [\n                    \"Frequent use has made secret doors easier to spot. Poor baffling of lights may reveal spyholes in use.\",\n                    \"Current residents are only aware of some secrets; intruders may use back ways to elude security.\"\n                ]\n            },\n            {\n                name: \"Shock Grips\",\n                category: \"Traps\",\n                desc: \"One or more contact points are connected to energy so they will badly shock anyone who touches them. These could be doorknobs, chest lids, floor plates, ladders, and so on.\",\n                questions: [\n                    \"Are they powered by batteries or enslaved ghosts?\",\n                    \"Does the site have legal permission to use them?\",\n                    \"How loud is the shock?\",\n                    \"How do site guardians avoid getting shocked?\"\n                ],\n                modsHarder: [\n                    \"The shock grips are numerous and concealed, connected to their energy source through the Ghost Field.\",\n                    \"The shock is designed to stop the heart and kill the victim (possibly setting hair on fire.)\"\n                ],\n                modsEasier: [\n                    \"The shock grips are connected to control boxes and energy sources by cables.\",\n                    \"Shock grips are marked by a rune, and shiny, and also give out a palpable hum of energy. They are easy to detect.\"\n                ]\n            },\n            {\n                name: \"Brutal Sadists\",\n                category: \"Twisted Guards\",\n                desc: \"Only brutal sadists are hired on as guards. They have permission to play with captured intruders.\",\n                questions: [\n                    \"Is the owner of the protected property aware of this cultural rule, or are guards hired by an employee?\",\n                    \"Do they share cultural roots (slaughterhouse workers, leviathan hunters, soldiers, city guards, etc)?\",\n                    \"How do the neighbors feel about their occasional scandals?\"\n                ],\n                modsHarder: [\n                    \"Several of them are skilled in both torture and interrogation; they extract secrets from intruders. A side business in blackmail helps them avoid legal trouble.\",\n                    \"They are hardened veterans, exceptionally tough and dangerous. They aim to incapacitate.\"\n                ],\n                modsEasier: [\n                    \"Their ugly tactics and poorly chosen victims have earned them (and their employer) enemies in lots of unexpected places.\",\n                    \"They really, really like to drink.\"\n                ]\n            },\n            {\n                name: \"Close-Knit Guard Network\",\n                category: \"Twisted Guards\",\n                desc: \"Guards are only hired by referral. Failure results in punishment for both the guard and the sponsor. Their loyalty is tested many ways before and after they are hired.\",\n                questions: [\n                    \"Do they favor bastards of the employer?\",\n                    \"Are they connected to one military unit?\",\n                    \"Are they refugees from another place?\",\n                    \"Do they come from a single neighborhood?\",\n                    \"Does punishment extend to their families?\"\n                ],\n                modsHarder: [\n                    \"They are connected to a larger sponsoring organization that would seek vengeance if they are attacked or insulted, and also offer them favors.\",\n                    \"They speak in code and have passwords that include safewords and warnings.\"\n                ],\n                modsEasier: [\n                    \"Nepotism has pulled in some really incompetent guards.\",\n                    \"Endless drama from working with family and friends.\"\n                ]\n            },\n            {\n                name: \"Compulsive Detail Focus\",\n                category: \"Twisted Guards\",\n                desc: \"Only a certain type is hired; a type that checks every lock and every dark corner. Schedules are strict, thoroughness is a guarantee, and they seem unable to cut corners or skip steps. Everything is by the book.\",\n                questions: [\n                    \"Are they altered to be like this, or just screened for a mindset?\",\n                    \"What are the detailed parts of the defended site that need this kind of attention?\",\n                    \"How does their gear reflect this fussy attention to detail?\"\n                ],\n                modsHarder: [\n                    \"There are other elements of the defended site that require their focus, like a pattern of stepping over tiles to avoid triggering traps or complex combination locks or dozens of cells with dangerous prisoners.\",\n                    \"They are trusted with specialty items like firearms or charms because they are responsible with them.\"\n                ],\n                modsEasier: [\n                    \"Everyone knows that they fall apart if things deviate from the pattern, like distractions or chaos.\",\n                    \"The locals pick on them when they are off duty, teasing them for their compulsions. They have enemies, and could use friends.\"\n                ]\n            },\n            {\n                name: \"Convict Public Service\",\n                category: \"Twisted Guards\",\n                desc: \"Due to prison overcrowding, some criminals are sentenced to indentured service to a noble to work off their debt to society. This site's guardian uses criminals as guards, under the stern eye of professionals.\",\n                questions: [\n                    \"Are casualties high due to danger from intruders or other site defenses?\",\n                    \"Is the patron benevolent and trying to rehabilitate criminals, or using them as disposable fodder?\",\n                    \"How do the convicts like this place?\"\n                ],\n                modsHarder: [\n                    \"Serving here is a known post among criminals, both a resume builder and networking site.\",\n                    \"Angering these guards could bring consequences from unexpected directions in the criminal underworld.\",\n                    \"Hand picked as the hardest and deadliest, these criminal guards are canny and tough.\"\n                ],\n                modsEasier: [\n                    \"Convicts are eager to assist anyone with enough Coin or pull to secure their pardon and freedom.\",\n                    \"The convicts are bullied and sullen, as much a hindrance to defenders as a defense themselves.\"\n                ]\n            },\n            {\n                name: \"Demonic Mutations\",\n                category: \"Twisted Guards\",\n                desc: \"About a quarter of the guards have been mutated by contact with demonic essence. They are strong, and their senses are sharp.\",\n                questions: [\n                    \"Do they share one demon patron?\",\n                    \"Did they become guards to gain this power?\",\n                    \"Are they worshippers or mercenaries?\",\n                    \"Did they volunteer or are they victims?\",\n                    \"What element is their demonic affinity?\"\n                ],\n                modsHarder: [\n                    \"They share a supernatural connection and can sense when other demonic guards are in trouble.\",\n                    \"They are highly resistant to normal damage. They may be vulnerable to supernatural attacks or a specific allergy (silver, garlic, salt, etc.) Or, they may be resistant to supernatural attacks instead.\"\n                ],\n                modsEasier: [\n                    \"They become physically impressive, but their minds are lost to incoherent lusts and fury.\",\n                    \"The rest of the staff resent or fear the demonic guards. Loyalty and morale are low among mundane employees.\"\n                ]\n            },\n            {\n                name: \"Enchanted Prosthetics\",\n                category: \"Twisted Guards\",\n                desc: \"Guards are all amputees with at least one prosthetic. Each prosthetic tunes to its owner. The prosthetics can stun on contact.\",\n                questions: [\n                    \"Are the false limbs the work of one genius?\",\n                    \"Are they part of a collection?\",\n                    \"Were they made for this use?\",\n                    \"Is a ghost bound to each?\",\n                    \"Are they scientific, with batteries?\",\n                    \"Are they powered by the bearer's life force?\"\n                ],\n                modsHarder: [\n                    \"All guards have some adept training and spirit bane charms, alert against supernatural forces.\",\n                    \"Veteran guards have learned to tune to their prosthetics to get an additional effect, like life detection or firing energy blasts.\"\n                ],\n                modsEasier: [\n                    \"Only one use between recharges.\",\n                    \"The guards are mostly old or broken, relying on reputation and supernatural energy to be effective.\"\n                ]\n            },\n            {\n                name: \"Feral Pen\",\n                category: \"Twisted Guards\",\n                desc: \"Some areas of the defended site have free-range maniacs. Destitute and wretched beggars are treated as guard dogs, expected to attack intruders and draw attention to anything unusual.\",\n                questions: [\n                    \"Does the guarded site pretend to be charitable, or a madhouse, or a prison?\",\n                    \"What philosophy leads to treating people this way?\",\n                    \"How do the city authorities feel about the site?\",\n                    \"Religious authorities?\",\n                    \"Does the site feed into the Ghost Field in an unusual way?\"\n                ],\n                modsHarder: [\n                    \"Most of the feral guards are killers, possibly haunted, and extremely dangerous.\",\n                    \"This pet project is as much art and religion as defense, and has support from a variety of decadent aristocrats in positions of power.\"\n                ],\n                modsEasier: [\n                    \"The rest of the site guards hate the feral pen and ignore it as best they can.\",\n                    \"It is as much prison hospice as guard dog kennel. Its victims are weak, sick, and starving.\"\n                ]\n            },\n            {\n                name: \"Fighting School\",\n                category: \"Twisted Guards\",\n                desc: \"An onsite training school focuses on the lifestyle and skill of a school of fighting. Site defenders are part of a group identity with specialty training.\",\n                questions: [\n                    \"Is the school's focus on dueling, a martial art, commando training, or something else?\",\n                    \"What is their crest, uniform, motto, and lore?\",\n                    \"What sort of training space do they have?\"\n                ],\n                modsHarder: [\n                    \"The school itself is an impressive fortress or defense.\",\n                    \"The school has an impressive alumni network that visits occasionally and would avenge wrongs to the honor of the school.\"\n                ],\n                modsEasier: [\n                    \"This is an off-site shrine or expansion, where they send troublemakers and those they can't eject for political or financial reasons.\",\n                    \"Leadership is riddled with rivalries and power struggles. Outsiders know some details.\"\n                ]\n            },\n            {\n                name: \"Performance Enhancers\",\n                category: \"Twisted Guards\",\n                desc: \"Guards have ready access to drugs. Some of the drugs enhance performance.\",\n                questions: [\n                    \"Do the drugs give them a burst of combat effectiveness?\",\n                    \"Are the drugs recreational, making them popular with a customer base that pays well and owes favors?\",\n                    \"Who provides them with drugs?\"\n                ],\n                modsHarder: [\n                    \"As dealers, the guards are difficult to bribe or intimidate, as they have money and prestige.\",\n                    \"Guards can medicate flexibly, with concoctions to enhance perception (even to see the supernatural,) gain combat prowess, or heal.\"\n                ],\n                modsEasier: [\n                    \"Their peddling of illegal drugs has made enemies among bluecoats and inspectors.\",\n                    \"The guards are junkies. Their employer uses addiction to control them, keeping them near the edge. They are often distractible or unconscious.\"\n                ]\n            },\n            {\n                name: \"Zealots\",\n                category: \"Twisted Guards\",\n                desc: \"Guards share a religion that binds them together and makes them resistant to intimidation or corruption.\",\n                questions: [\n                    \"Do they worship one of the Forgotten Gods? The Church of the Ecstasy of the Flesh? Weeping Lady?\",\n                    \"Have they sworn oaths?\",\n                    \"What does religion require them to hate, or to love?\"\n                ],\n                modsHarder: [\n                    \"The defended site includes a shrine or temple. Violating the site angers offended worshippers.\",\n                    \"Serving as a site guardian is part of a religious duty. Unexpectedly seasoned warriors or important people may serve as lowly guards for a time.\"\n                ],\n                modsEasier: [\n                    \"Mandatory prayer times, unclean objects or places left uninspected, and restricted areas may create holes in security.\",\n                    \"Enemies of their religion may offer help to embarrass, discredit, or injure the zealots.\"\n                ]\n            },\n            {\n                name: \"Ghostport Lock\",\n                category: \"Weird Tech\",\n                desc: \"Keys are tuned to locks that cannot be picked by normal means, or bypassed without whisper expertise. Their access point is in the Ghost Field until the key is present.\",\n                questions: [\n                    \"Are these locks modem scientific triumphs, or old arcane defenses?\",\n                    \"Does he key look like a key, or does it look like a missing decoration, or a gem?\",\n                    \"Is the key physical, or energy, like living blood of the right family?\"\n                ],\n                modsHarder: [\n                    \"The locks are hidden and trapped. Messing with the lock could hollow the intruder (tearing the spirit out of the body) or other unpleasantness.\",\n                    \"The precise location of the lock must be known, and it is not near what it is locking.\"\n                ],\n                modsEasier: [\n                    \"The ghostport lock has been a fad several times in Duskwall. Each time, there was some mass production, and a key to a similar lock might work with a little help.\",\n                    \"The owner may have stiffed a whisper locksmith on the fee, or otherwise offended the expert, who is knowledgeable and disgruntled.\"\n                ]\n            },\n            {\n                name: \"Lightning Walls\",\n                category: \"Weird Tech\",\n                desc: \"Runic energy twisting technology can make pylons that project a curtain of energy between them. The glowing walls are transparent, but crippling to touch and lethal to pass through. They stop projectiles.\",\n                questions: [\n                    \"Does the site have the technology legally, or is it stolen?\",\n                    \"Maybe cobbled together from leftovers by a mad alchemist?\",\n                    \"Is it on all the time (expensive to fuel) or only if the alarm is raised?\",\n                    \"Where are the fuel cells kept?\"\n                ],\n                modsHarder: [\n                    \"The equipment is properly installed, its vulnerable parts behind the energy curtain, directly guarding what needs protecting.\",\n                    \"The lightning walls attract loose spirits, intruders may also have to contend with confused ghosts.\"\n                ],\n                modsEasier: [\n                    \"The walls guard a few key access points, but there are multiple ways around.\",\n                    \"The walls are installed poorly, so their machinery is vulnerable from the outside while it is on. If no other guards are present, they can be wrecked.\"\n                ]\n            },\n            {\n                name: \"Panopticon\",\n                category: \"Weird Tech\",\n                desc: \"Special crystal lenses transmit their sight through the Ghost Field to mirrors in a central location. From one place, a guardian can monitor views all over the defended site.\",\n                questions: [\n                    \"Is this new industrial alchemical technology, or an ancient enchanted construction?\",\n                    \"Does the current owner know how to get the most functionality out of it?\",\n                    \"Who maintains the system?\"\n                ],\n                modsHarder: [\n                    \"The lenses are hidden in mirror frames, statues, and other decor. They are difficult to spot.\",\n                    \"The lenses can see into the Ghost Field as well, observing ghosts or occult work, and life force.\"\n                ],\n                modsEasier: [\n                    \"The guardians watching the mirrors are somewhat lax.\",\n                    \"Over time, many lenses have not been replaced or repaired. Views are limited.\"\n                ]\n            },\n            {\n                name: \"Shadow Lanterns\",\n                category: \"Weird Tech\",\n                desc: \"Guards are equipped with lanterns that detect shadows of recent life force as well as shedding light.\",\n                questions: [\n                    \"Are the lanterns traditional lantern shape, or a glowing ball, or something else?\",\n                    \"Does an expert keep the guardians supplied, or is their supply jealously guarded?\",\n                    \"Does it cost the guards something to activate the lanterns?\",\n                    \"Will the lanterns work if taken off-site?\"\n                ],\n                modsHarder: [\n                    \"Guards are trained to tune into the life force energy to also hear conversations of the life shadows. Guards can tune into the life force energy to know the owner's current location, if in the defended area.\",\n                    \"Untended lanterns can be set to transmit detection of a life force to a nearby guardian.\"\n                ],\n                modsEasier: [\n                    \"The lanterns can be rendered blind by properly tuning a spiritbane charm while near one.\",\n                    \"Every sunrise wipes all traces of past life forces, and they only work at night.\"\n                ]\n            },\n            {\n                name: \"Shadow Rooms\",\n                category: \"Weird Tech\",\n                desc: \"The Ghost Field sometimes remembers rooms or entire neighborhoods that no longer exist in the material world. Some defended sites hide treasures in these spaces that can only be accessed if you knowhow.\",\n                questions: [\n                    \"How are colors different in these shadow rooms?\",\n                    \"Is there a smell or sound that lingers?\",\n                    \"How does it feel to step out of the material world?\",\n                    \"What natural laws work differently here, like fire not flickering?\"\n                ],\n                modsHarder: [\n                    \"The access point to the shadow rooms is an enchanted lock, its location is known and guarded.\",\n                    \"The shadow rooms are only connected to the material world a few times a year, or less.\"\n                ],\n                modsEasier: [\n                    \"Transitioning from the material world to the shadow rooms involves certain proscribed movements; cross the courtyard three times, then back down stairs with eyes closed (for example.) Too many people know the formula.\",\n                    \"The current site owners do not know these rooms exist.\"\n                ]\n            }\n        ],\n        NPCs: [\n            {\n                name: \"Arturo Montastic\",\n                type: \"npc\",\n                concept: \"Addicted Gambler\",\n                arena: \"New Money\",\n                description: \"He is impossibly lucky. He wins enough at games of chance to pay for his addictions, and to treat the consequences (transfusions, transplants, cutting-edge treatments.) His relationships are intense but brief. He often loses everything, but then wins it all back and more. He has owned epic treasures many times.\",\n                notes: \"Risk-averse collectors cannot bear his cavalier attitude on winning and losing priceless art. He does not truly appreciate his treasures, and should not be trusted with them. Losers can take their losses hard.\"\n            },\n            {\n                name: \"Baron Kelyr Strathmill\",\n                type: \"npc\",\n                concept: \"Hardened Industrialist\",\n                arena: \"Old Money\",\n                description: \"His family has controlled the docks for many generations. They quietly destroy competition, and get lucrative city contracts to re-develop blighted areas if the money slows down. Graceful, educated, and pleasant, he is ruthless as barbed steel under a cultured veneer. He is proud of his estate's gardens.\",\n                notes: \"Competition doesn't like being crippled. He often hires outsiders for the dirtiest work, and his victims often hire outsiders to get revenge.\"\n            },\n            {\n                name: \"Baroness Thena Hellyers\",\n                type: \"npc\",\n                concept: \"Hazy Art Patron\",\n                arena: \"Old Money\",\n                description: \"Thena is one of the least emotionally scarred survivors in her weird family. She is a leading light in the art world. She is patron to many artists and her criticism and evaluation drives a significant element of Duskwall's art scene. Whispers have noted she has an unusual connection to the Ghost Field.\",\n                notes: \"Sometimes she hires outsiders to sort out one of her artists' problems. She has a private gallery that she updates with her current trending tastes—those in the art market need to know what's in it.\"\n            },\n            {\n                name: \"Calvin Dannos\",\n                type: \"npc\",\n                concept: \"Eerie Assassin\",\n                arena: \"Underworld\",\n                description: \"The Inkvein was a cabal of seven anonymous assassins, named for their maps of the canals. If one of them was identified as a member, the other six were sworn to kill the outed assassin. Dannos was outed a decade ago, and he killed the other members and their undying founder. Now he IS Inkvein.\",\n                notes: \"Easily bored, he prefers interesting challenges to high paying or easy kills. Of course, many bereaved or power hungry individuals want him dead.\"\n            },\n            {\n                name: \"Commissioner Naria Haig\",\n                type: \"npc\",\n                concept: \"Political Matchmaker\",\n                arena: \"City Law\",\n                description: \"She exudes a plump grandmotherly innocence, but she is one of the sharpest politicians in Duskwall. She supervises over the merging of unexpected allies and the schism of monolithic interests. She cares about one thing—the good of Duskwall as a whole. She is Chair of the Ethics Oversight Committee.\",\n                notes: \"Always playing a bigger game, she uses outsiders to manage errands whose purpose they cannot see. Those she outmaneuvers tend to want to get back at her with violence.\"\n            },\n            {\n                name: \"Doc Sarnin\",\n                type: \"npc\",\n                concept: \"Lecherous Leech\",\n                arena: \"Underworld\",\n                description: \"Doc can keep life in you if you're alive (or recently dead) when you get to him. His extreme methods are often horrifying. Still, his concoctions can crush ghosts, re-attach limbs, and more. The Crows, a tough crew, protect him. They give him victims for his \\\"needs,\\\" which are emotional, physical, and scientific.\",\n                notes: \"Sometimes the Crows hire outsiders to go after rare components or victims for Doc. He has many, many enemies who want to either steal him and force him to serve them, or punish him.\"\n            },\n            {\n                name: \"Doctor Ixit Crichelle\",\n                type: \"npc\",\n                concept: \"Elegant Spook\",\n                arena: \"Old Money\",\n                description: \"Crechelle calls himself an Oneiric Master. He interprets dreams for a fee. He enters them, alters them, and moves through veils to understand truths and secrets the dreamer may not grasp. If he touches a target, or one of their possessions, he may enter their dreams. He appears feeble, but his mind is deadly.\",\n                notes: \"Aristocratic patrons invite him to parties. He needs a person's possession to see into their dreams; he pays for objects to visit some people's dreams. Victims will pay to free themselves .\"\n            },\n            {\n                name: \"Dr. Hansel Kryvanntic\",\n                type: \"npc\",\n                concept: \"Brilliant Scientist\",\n                arena: \"Foreign\",\n                description: \"He is Severosi, bow-legged and wild-haired. His work on electroplasmic poisoning and mutation in animals and humans is ground-breaking. Fleeing persecution because of his ethically questionable methods back in Severos, he found a more open-minded scientific community in Duskwall.\",\n                notes: \"His research has applications in art, medicine, and war. Those with sufficient resources to further his studies want to control him. He has hurt a lot of people, over time, so he has many enemies.\"\n            },\n            {\n                name: \"Dr. Yerial Crabbskidditch\",\n                type: \"npc\",\n                concept: \"Sleazy Lawyer\",\n                arena: \"New Money\",\n                description: \"He firmly believes those who are wealthy should not be pestered with the law. No matter what you do, if you have means you can arrange for an alternate story that favors you. Deaths, frauds, robberies, and other crimes can be reduced to a few fines. He throws money at problems until they disappear.\",\n                notes: \"He routinely hires outsiders to destroy evidence, intimidate witnesses, compel confessions, and so forth. He has countless enemies, both those seeking justice and former clients who ran out of money.\"\n            },\n            {\n                name: \"Duvrel the Snake\",\n                type: \"npc\",\n                concept: \"Cunning Smuggler\",\n                arena: \"Foreign\",\n                description: \"She is Tycherosian, with the eyes and horns of a goat. Snake tattoos coil around her arms. Exotic drugs from the Dagger Isles flow through her distribution network in Duskwall. She hires outsiders to remove stubborn people while she has an alibi, or to retrieve drugs misplaced at incriminating locations.\",\n                notes: \"Inspectors have orders from the Spirit Wardens to take her alive, to study her uncanny ability to flex with the Ghost Field for supernatural stealth.\"\n            },\n            {\n                name: \"Dylayzia Finchester\",\n                type: \"npc\",\n                concept: \"Fashionable Whisper\",\n                arena: \"New Money\",\n                description: \"Her exotic looks, tattoos, and bright green eyes draw attention. She popularized thigh-high buckled leather boots and spirit bane chokers. Her opinions echo in drawing rooms across the city. People enjoy her feud with the Church of the Ecstasy of the Flesh.\",\n                notes: \"Wealthy figures in the fashion world pay top win for sneak peeks at her clothing designs. Her opinions inflame many enemies­-especially the Church. She hires outsiders to get rare components for her rituals.\"\n            },\n            {\n                name: \"Emeline Coleburn\",\n                type: \"npc\",\n                concept: \"Weary Regulator\",\n                arena: \"City Law\",\n                description: \"She inspects buildings and reports to the Duskwall Council whether they are sound, and whether they serve the purpose listed on the owner's taxation form. She is front-line in the tug-of-war between criminals, politicians, and nobles. She no longer cares about the greater good. Now it's about kickbacks.\",\n                notes: \"She takes the path of least resistance in her evaluations, so people pay to make their preference easier and other roads harder. She hires outsiders for off-the-books communication with pushy customers.\"\n            },\n            {\n                name: \"Eric the White\",\n                type: \"npc\",\n                concept: \"Vigilante Rebel\",\n                arena: \"Foreign\",\n                description: \"The War of Skovlan Unity is over, but this slender maniac with a brushy beard can't let it go. He plans to destroy the government and turn Duskwall into a Skovlan colony to punish them for the destructive war. He wants to discredit and disrupt the government at every turn.\",\n                notes: \"He targets gavernment officials as high up as he can reach, hoping to cause enough trouble to make the government vulnerable to change. He has gathered zealots, and he uses outsiders for disposable work.\"\n            },\n            {\n                name: \"Gi Aniru Ga of Sultha\",\n                type: \"npc\",\n                concept: \"Sacrificing Cultist\",\n                arena: \"Supernatural\",\n                description: \"She worships the Gaping Maw, the Runnel of Life, the Cosmic Thirst. She builds a cult, teaching them to hunt and conduct rituals. Then she moves on. Witnesses uneasily describe her supernatural abilities, including shapeshifting, flight, killing people by attacking their shadows, and so on.\",\n                notes: \"Bereaved relatives, rival cultists, and law enforcers all want her stopped. She hires outsiders to threaten, misdirect, or kill law enforcement. Determined inspectors crush cults she trained, need help to catch her.\"\n            },\n            {\n                name: \"Holtz Clermont\",\n                type: \"npc\",\n                concept: \"Reformed Clerk\",\n                arena: \"City Law\",\n                description: \"He used to be a forger. After he served stint in prison, some respectable family friends got him a position as City Clerk for the whole district. He manages correspondence for permit requests and official notices. When corrupt people inside and outside the system need to adjust evidence, they come to him.\",\n                notes: \"Jilted clients can be threatening, leading him to take steps to adjust their attitude by hiring outside help. He's smarter than he looks, and knows how to back people off. He also might know too much.\"\n            },\n            {\n                name: \"Inspector Lorette Salkha\",\n                type: \"npc\",\n                concept: \"Crusading Inspector\",\n                arena: \"City Law\",\n                description: \"She needs allies in her hopeless quest to clean up the city. Corruption is everywhere, crime runs rampant, and the bluecoats serve the powerful (on both sides of the law.) Some tragedy in her past propels her into a suicidal effort to restore \\\"rule of law.” Her peers muse it is a shame she will die young.\",\n                notes: \"She could be helpful if she focuses on the right bad guys—your enemies. She can't be bought, so maybe someone needs her killed (or otherwise neutralized.)\"\n            },\n            {\n                name: \"Jemma Dropkick\",\n                type: \"npc\",\n                concept: \"Feminist Vigilante\",\n                arena: \"Underworld\",\n                description: \"She is a legend in the Seven Shallows neighborhood. She attacks men who abuse women. She survives because she has friends—a few bluecoats, a gang of thugs, and a grateful public. She carefully plans attacks to hurt abusers. Lf her victims abuse again, they are mutilated, packed like luggage, and shipped out of town.\",\n                notes: \"Many powerful men would pay for revenge on Jemma. Sometimes she hires outsiders to help out.\"\n            },\n            {\n                name: \"Kheldaria Whinnich\",\n                type: \"npc\",\n                concept: \"Implacable Developer\",\n                arena: \"New Money\",\n                description: \"She has a vision for developing the Crow's Foot district. It will be divided between businesses, estates, and parks. To realize her vision, she has been selectively buying real estate all around the city, bartering for land in Crow's Foot, and using whatever persuasion is needed to convince owners to sell to her.\",\n                notes: \"She has an estate where she stores induce­ments of all sorts, a variety of treasure designed to persuade owners to sell in exchange for what they want most. They say you could find almost anything there.\"\n            },\n            {\n                name: \"Lady Ashlyn Tyrconnel\",\n                type: \"npc\",\n                concept: \"Decadent Duelist\",\n                description: \"For centuries, aristocrats of Duskwall have learned the Tyrconnel Method of swordplay and self defense. The Tyrconnel family produces countless public servants and warriors—but also a share of scoundrels. Ashlyn's trademark suite of moves is to duel, win, bed someone, and drink to unconsciousness.\",\n                notes: \"You're hired to join the spy game in the Tyrconnel family. Or, someone is targeting her. Either way. Watch your back. Outsiders in the games of nobles are uniformly expendable.\"\n            },\n            {\n                name: \"Lady Candra Dunvil\",\n                type: \"npc\",\n                concept: \"Corrupt Fixer\",\n                arena: \"Old Money\",\n                description: \"Her family built Ironhook Prison. Her wealth is built on generations of shady deals with incarcerated aristocrats and business owners. She sees the world as a rigged game and has contempt for anyone who finds corruption shocking or fixable. She is vain, practical, and ruthless.\",\n                notes: \"She hires outsiders to carry out promises she made to inmates. Her family has casually wrecked reputations and lives over centuries, and that leaves a trail of vengeance seekers.\"\n            },\n            {\n                name: \"Lady Polonia Brogan\",\n                type: \"npc\",\n                concept: \"Desirable Dowry\",\n                arena: \"Old Money\",\n                description: \"She's ugly, smelly, stupid, and rude--and also the key to the Brogan fortune. Her lucky spouse will have access to massive wealth and infrastructure among professional builders and shipwrights of Duskwall. Only her aunt, CECILIA DURWITHE, looks out for her best interests with sharp disapproval.\",\n                notes: \"Brogan hires outsiders to punish those who slight her, or to investigate potential partners. She collects fake wills rogues have planted during assassination attempts, trying to leave her fortune to usurpers .\"\n            },\n            {\n                name: \"Lord Branon Kinclaith\",\n                type: \"npc\",\n                concept: \"Romantic Horseman\",\n                arena: \"Old Money\",\n                description: \"Branon looks like a hero from a legendary story. He manages the family's stables, the finest horses in Duskwall (where horses are a rare luxury.) His tumultuous trysts with both men and women are common knowledge. Business suffers from his impulsive romantic gestures, but benefits from his charm.\",\n                notes: \"Branon sometimes refuses to sell horses, or breed them, if he dislikes the buyer. Some buyers want access to horseflesh anyway. If his horses are attacked, he hires outsiders to get revenge.\"\n            },\n            {\n                name: \"Lord Bulward Skinnester\",\n                type: \"npc\",\n                concept: \"Greedy Banker\",\n                arena: \"New Money\",\n                description: \"This portly curmudgeon does a brisk trade in real estate titles, both lending and foreclosing. He is acutely aware of the value of properties and how neighbors affect value. He takes particular glee in foreclosing on aristocracy and setting up the newly rich in ancient estates.\",\n                notes: \"Sometimes he hires outsiders to solve problems that his hired bluecoats and bribed councilmen cannot manage. He collects sculpture by Duskwall artists. He has ruined the lives of many formerly influential people.\"\n            },\n            {\n                name: \"Lord Orlan Booker\",\n                type: \"npc\",\n                concept: \"Insulated Mastermind\",\n                arena: \"Old Money\",\n                description: \"Ennui is a danger to the wealthy. Booker fills his days by gathering intelligence and planning heists, then selling the plans to ambitious gangs that lack his patience, experience, resources, and insight. Twice a month he goes to the opera, and meets those who have arranged to purchase a score.\",\n                notes: \"Sometimes things go wrong, and it is natural to blame the planner and want revenge. Sometimes a target wants to punish those who acted against them, even if the act was planning.\"\n            },\n            {\n                name: \"Master Slen Dallicore\",\n                type: \"npc\",\n                concept: \"Protective Guilder\",\n                arena: \"New Money\",\n                description: \"Master Dallicore is the Guildmaster for the Docker's Guild. They move all cargo on and off ships, boats, and gondolas. Their role is protected by law, as are the fees they charge. The guild uses low-level violence to discourage non-guild laborers and smugglers. However, some challenges require proper scoundrels.\",\n                notes: \"Dallicore is not above hiring outsiders to punish powerful patrons of smugglers or illegal dock workers. His position of power also gives him access to rare antiquities, both purchased and acquired.\"\n            },\n            {\n                name: \"Minister Fourteen\",\n                type: \"npc\",\n                concept: \"Grungy Fixer\",\n                arena: \"Underworld\",\n                description: \"The blind Skovlander holds court on the docks, moving from one basement to another. He favors baggy shirts, stained vests, shiny jewelry, and fraying lace. He often acts through his massive bodyguard Severen and his weedy messenger Torok.\",\n                notes: \"He is connected in the Skovlander refugee community, and in Skovlan. For a price (either wealth or an errand) he will share information about Skovlanders. He often hires outsiders to handle sensitive tasks.\"\n            },\n            {\n                name: \"Moonslider the Third\",\n                type: \"npc\",\n                concept: \"Eccentric Artist\",\n                arena: \"New Money\",\n                description: \"She feels moon phases. Her family put her in an asylum for a decade. Later, she won her freedom and inherited the family bootmaking fortune. She makes art. She tries to communicate her moon feelings. She uses oil paint, glass blowing, sculpture, song, and dance in multimedia recitals and art pieces.\",\n                notes: \"Her family bought nice things before they all died and she inherited them; she ignores most of it. She needs expensive equipment and supplies for her bizarre art shows.\"\n            },\n            {\n                name: \"Officer Milos Penderyn\",\n                type: \"npc\",\n                concept: \"Corrupt Bailiff\",\n                arena: \"City Law\",\n                description: \"Milos has access to trial evidence, and to prisoners awaiting trial. He can't get people out, but he can silence them. He has a network of corrupt peers, judges, bluecoats, and others so he can trade favors to accomplish the impossible. Huge and greasy, he is built like a bull and he enjoys the scent of fear.\",\n                notes: \"Controlling Milos could mean protecting or killing someone in bluecoat custody. An endless stream of people want revenge on him, and a more select group would like to control or use him.\"\n            },\n            {\n                name: \"Officer Veleris Walund\",\n                type: \"npc\",\n                concept: \"Heroic Bluecoat\",\n                description: \"There are actually songs about him. He is very popular. Veleris is a skilled orator (though he retreats into modesty) and a canny judge of character and situations. (He insists he just tries to do the right thing.) His opinion is influential in his district. He is trusted to guard valuables. His moustaches are his pride and joy.\",\n                notes: \"He has no family, and he seems to be an idealist. Some try to persuade him, others try to threaten him. Threats don't seem to work. He has been known to quietly hire outsiders to get justice.\"\n            },\n            {\n                name: \"Pebbler\",\n                type: \"npc\",\n                concept: \"Demon Spy\",\n                arena: \"Supernatural\",\n                description: \"This earth demon looks like a fat man built around a boulder gut, leaking sand from joints. It is able to see and hear through sand, earth, and stone within a range of miles. It works with non-cultists voluntarily, selling information in exchange for raids into the rare areas protected from its prying.\",\n                notes: \"Dozens of powerful people want Pebbler banished or robbed. However, the demon is a peerless information exchange, valuable even if it is difficult to control.\"\n            },\n            {\n                name: \"Saithernon\",\n                type: \"npc\",\n                concept: \"Exotic Fence\",\n                arena: \"Underworld\",\n                description: \"He drapes his python, DELGRAAZ, around his neck. He wears a turban with a jewel on it. He is willing to buy almost anything, no matter how strange. He also knows what you need, sometimes before you know you need it. His bazaar unfurls below the Kennington market in an abandoned gondola dock.\",\n                notes: \"He pays people to get things for him, then sells them at tremendously inflated prices to those desperate to have them. This can cause hurt feelings among the desperate.\"\n            },\n            {\n                name: \"Serlevica the Brander\",\n                type: \"npc\",\n                concept: \"Spy Whisper\",\n                arena: \"Underworld\",\n                description: \"Gaunt and frizzed, this foul-smelling Whisper has a secret ritual that allows her to control and see through rats she brands. She sells her services as a spy or site guardian. She has survived by retreating into slums and sewers when threatened, and striking from the shadows until it is safe to emerge again.\",\n                notes: \"She is closely tied to the information marketplace, buying and selling secrets. She often hires outsiders to deal with her enemies through theft or violence, and she is in turn a frequent target.\"\n            },\n            {\n                name: \"Sir Mournseller\",\n                type: \"npc\",\n                concept: \"Anarchist Ghost\",\n                arena: \"Supernatural\",\n                description: \"This ghost possesses old men from the Draymach Asylum, breaking them out to find and hire scoundrels for obscure tasks with no independent purpose. Examples include killing an insignificant chandler or stealing a specific stone from a wall in a noble's estate. Payment is the location of hidden treasure.\",\n                notes: \"A decade ago, an astute inspector began picking out the connection between errands, seeing a very long and very dangerous game to unseat the city's rulers emerging.\"\n            },\n            {\n                name: \"Sir Olen Llanwold\",\n                type: \"npc\",\n                concept: \"Piratical Industrialist\",\n                arena: \"New Money\",\n                description: \"He is thin and nervous, easy to underestimate. He specializes in stripping foes of their assets and taking over their operations. His father was a butler, and he grew up hating aristocrats. He understands power structures and corrupts retainers. His top agent, Ellsfielder, is a beautiful and ruthless woman.\",\n                notes: \"Many ruined aristocrats (and their allies) hate Danwold passionately. He does not hesitate to use his assets, legal and otherwise, to defend himself and cripple his foes. He hires outsiders through proxies.\"\n            },\n            {\n                name: \"Sir Tocker Farros\",\n                type: \"npc\",\n                concept: \"Pragmatic Councilman\",\n                arena: \"City Law\",\n                description: \"Sometimes the law works, and sometimes it doesn't. Regardless, the Council must rule and there must be order. Sir Farros ensures the districts he serves do not get too far out of hand before lawless elements are curbed. One way or another. He looks like an affable grandfather, but he has a dark past.\",\n                notes: \"Sir Farros uses inspectors or scoundrels, politicians or housemaids—anyone who will get the job done. He has an endless list of enemies who feel he wronged them, and want revenge. His agents are disposable.\"\n            },\n            {\n                name: \"SLOPSPATTER\",\n                type: \"npc\",\n                concept: \"Canal Hull\",\n                arena: \"Supernatural\",\n                description: \"This hull learned to consume spirits and bolster its strength with theirs. It cannibalizes machinery and rummages in wrecked boats for parts. It has gondola prow shoulder guards and helm, and strange banded armor made of water-logged wood over intricate mechanical parts. It fears destruction.\",\n                notes: \"It assassinates targets, with its body or by possessing machines near them. It hunts whispers, leeches, and scholars, stealing their knowledge and killing them. Their allies want revenge.\"\n            },\n            {\n                name: \"Syla DuTorrivestria\",\n                type: \"npc\",\n                concept: \"Famous Connoisseur\",\n                arena: \"Foreign\",\n                description: \"This mysterious Iruvian hides behind a veil. For years, she has been the final word on Duskwall delicacies. She specializes in evaluating high-end cuisine (including spore wines and cooking with leviathan blood.) She stays in the public eye with racy politics and a string of scandalous romances.\",\n                notes: \"She must keep any real competitors for her fame weakened and embarrassed, and she has countless enemies. Everyone \\\"knows\\\" she is an Iruvian spy.\"\n            },\n            {\n                name: \"The Honorable Telia Cray\",\n                type: \"npc\",\n                concept: \"Stern Prosecutor\",\n                arena: \"City Law\",\n                description: \"She's old, she's sour, and she has a reputation for jailing Duskwall's criminals. As thin and hard as an iron poker, she relentlessly pursues her cases, bending the law with a passionate hatred of scoundrels. She runs a special unit of Inspectors dedicated to investigating her cases, run by INSPECTOR ULEK.\",\n                notes: \"If she is taking a case personally ( as she often does) she may hire outsiders to acquire or create evidence. She also conduds a brutal war of counter-intelligence against rogues looking to free their associates.\"\n            },\n            {\n                name: \"The Wooden Judge\",\n                type: \"npc\",\n                concept: \"Haunted Puppet\",\n                arena: \"Underworld\",\n                description: \"This knee-high ventriloquist dummy looks like a caricature of a grim Judge. It is supernaturally animated. The puppet appears unexpectedly, interrupting a scoundrel's routine by offering jobs in a squeaky voice. He pays by revealing the location of hidden caches of ancient coin.\",\n                notes: \"Many angry victims want to know who pulls the strings of the Wooden Judge. The puppet often hires fresh talent for dubious work.\"\n            },\n            {\n                name: \"Theodore Lysander\",\n                type: \"npc\",\n                concept: \"Bard Pimp\",\n                arena: \"Underworld\",\n                description: \"Elegant and charismatic, this well-dressed man runs the Tenpenny Court Network. He manages prostitutes and their customers, his personal connections and charm monetized. He is also a skilled composer and performer, often seen at the Worldsedge Theater in Crow's Foot.\",\n                notes: \"He is a skilled networker. He takes the safety of his friends seriously, and is protedive of his employees, to the point of using blackmail to force powerful patrons to back off.\"\n            },\n            {\n                name: \"Chief Prichard\",\n                type: \"npc\",\n                description: \"The head Overseer of the Ministry of Provisions in Duskwall. Manages the workers and food allotments for the city districts.\",\n                district: \"Barrowcleft\",\n                traits: [\n                    \"calculating\",\n                    \"confident\",\n                    \"calm\"\n                ]\n            },\n            {\n                name: \"Lord Strangford\",\n                type: \"npc\",\n                description: \"Operates one of the largest leviathan hunter fleets, serves on the City Council and is a high-ranking member of the secret order within the Church of Ecstasy.\",\n                district: \"Brightstone\",\n                traits: [\n                    \"secretive\",\n                    \"calculating\",\n                    \"arrogant\"\n                ]\n            },\n            {\n                name: \"Hutton\",\n                type: \"npc\",\n                description: \"A Skovlander refugee and former soldier, now the leader of an anarchist revolutionary movement, bent on forcing the government to acknowledge Skovlander rights in the Empire.\",\n                district: \"Charhollow\",\n                traits: [\n                    \"brave\",\n                    \"compassionate\",\n                    \"wise\"\n                ]\n            },\n            {\n                name: \"Lady Drake\",\n                type: \"npc\",\n                description: \"A magistrate who is \\\"reasonable\\\" when it comes to street crime, so long as the offender's purse is sufficient.\",\n                district: \"Charterhall\",\n                traits: [\n                    \"flexible\",\n                    \"shrewd\",\n                    \"subtle\"\n                ]\n            },\n            {\n                name: \"Master Slane\",\n                type: \"npc\",\n                description: \"A notorious factory foreman known for excessive and cruel punishments for the smallest infractions. Many attempts have been made on his life, but all have failed. Some say he's a devil.\",\n                district: \"Coalridge\",\n                traits: [\n                    \"cold\",\n                    \"cruel\",\n                    \"sadistic\"\n                ]\n            },\n            {\n                name: \"Sergeant Lochlan\",\n                type: \"npc\",\n                description: \"The senior Bluecoat squad leader in the district, reporting to Captain Dunvil. Lochlan is flexible and reasonable, taking bribes and payoffs when she can; enforcing the law and making examples when necessary.\",\n                district: \"Crow's Foot\",\n                traits: [\n                    \"shrewd\",\n                    \"tough\",\n                    \"commanding\"\n                ]\n            },\n            {\n                name: \"Chief Helker\",\n                type: \"npc\",\n                description: \"One of the most influential senior Dockers. Helker has a lot of sway at the docks, and if you cross him, you might find your cargo tossed into the drink—and possibly you along with it.\",\n                district: \"The Docks\",\n                traits: [\n                    \"cautious\",\n                    \"greedy\",\n                    \"vengeful\"\n                ]\n            },\n            {\n                name: \"Master Krocket\",\n                type: \"npc\",\n                description: \"An unsavory, greasy-haired, scarecrow of a man who runs the snarling pack of vicious dogs used by Ironhook to track down escapees and sniff out contraband and tunnels. His dog-handlers can be found around the labor camp and all about Dunslough, using their status with the prison for favors and bribes.\",\n                district: \"Dunslough\",\n                traits: [\n                    \"cruel\",\n                    \"greedy\",\n                    \"ruthless\"\n                ]\n            },\n            {\n                name: \"Jira\",\n                type: \"npc\",\n                description: \"A dealer of fine weapons from the Dagger Isles. Greatly respected by many street toughs in The Dusk—a \\\"jira blade\\\" is a status symbol that many aspire to.\",\n                district: \"Nightmarket\",\n                traits: [\n                    \"bold\",\n                    \"tough\",\n                    \"confident\"\n                ]\n            },\n            {\n                name: \"Levyra\",\n                type: \"npc\",\n                description: \"A medium who invites clients to bring ghosts in bottles to posses her so they can share a few final words before the ghost is \\\"freed\\\" (Levyra hands it off to the waiting Spirit Wardens nearby).\",\n                district: \"Silkshore\",\n                traits: [\n                    \"weird\",\n                    \"daring\",\n                    \"dishonest\",\n                    \"\"\n                ]\n            },\n            {\n                name: \"Mother Narya\",\n                type: \"npc\",\n                description: \"Runs the Arms of the Weeping Lady charity house.\",\n                district: \"Six Towers\",\n                traits: [\n                    \"kind\",\n                    \"patient\",\n                    \"gracious\"\n                ]\n            },\n            {\n                name: \"Maestro Helleren\",\n                type: \"npc\",\n                description: \"Senior composer and conductor of the Spiregarden Theater, premiere performance venue for the elite of the city.\",\n                district: \"Whitecrown\",\n                traits: [\n                    \"sincere\",\n                    \"dramatic\",\n                    \"vain\"\n                ]\n            },\n            {\n                name: \"Hester Vale\",\n                type: \"npc\",\n                description: \"Matriarch of the oldest farm family. The living embodiment of \\\"tough but fair.\\\"\",\n                district: \"Barrowcleft\",\n                traits: [\n                    \"proud\",\n                    \"fierce\",\n                    \"suspicious\"\n                ]\n            },\n            {\n                name: \"Commander Bowmore\",\n                type: \"npc\",\n                description: \"Chief Officer of the Watch in Brightstone. Bowmore's family financed Bowmore Bridge centuries ago and now holds many positions of power.\",\n                district: \"Brightstone\",\n                traits: [\n                    \"proud\",\n                    \"principled\",\n                    \"connected\"\n                ]\n            },\n            {\n                name: \"Briggs\",\n                type: \"npc\",\n                description: \"The owner of a merchant stall at Charhollow market, cover for a network of gossips, spies, and code-smiths among the working class people of the district, selling their services to those who need them.\",\n                district: \"Charhollow\",\n                traits: [\n                    \"secretive\",\n                    \"sneaky\",\n                    \"cautious\"\n                ]\n            },\n            {\n                name: \"Lord Penderyn\",\n                type: \"npc\",\n                description: \"Chief Scholar of the Archive of Echoes, authorized by the Emperor to keep a collection of ancient ghosts trapped in spirit bottles, to be consulted in cases where knowledge from the distant past would benefit the operation of the Imperial government. Lord Penderyn also consults the spirits on his own volition, forming the rebellious Path of Echoes society for other elites and nobles who seek communion with the spectral realm.\",\n                district: \"Charterhall\",\n                traits: [\n                    \"reckless\",\n                    \"strange\",\n                    \"obsessive\"\n                ]\n            },\n            {\n                name: \"Belle Brogan\",\n                type: \"npc\",\n                description: \"A Skovlander factory worker who's been gaining popularity as a potential union organizer. It's only a matter of time before a factory boss tries make an example of her.\",\n                district: \"Coalridge\",\n                traits: [\n                    \"charming\",\n                    \"confident\",\n                    \"bold\"\n                ]\n            },\n            {\n                name: \"Lewit, Jol, Myra, Reyf\",\n                type: \"npc\",\n                description: \"Bluecoat constables; run an extortion racket.\",\n                district: \"Crow's Foot\",\n                traits: [\n                    \"arrogant\",\n                    \"vain\",\n                    \"volatile\"\n                ]\n            },\n            {\n                name: \"Tris\",\n                type: \"npc\",\n                description: \"A legendary tattooist who only inks those that have looked upon a leviathan and lived to tell the tale. Getting a tattoo from Tris is a rite of passage for everyone who hunts the demons of the void sea.\",\n                district: \"The Docks\",\n                traits: [\n                    \"artistic\",\n                    \"popular\",\n                    \"insightful\"\n                ]\n            },\n            {\n                name: \"Vandra\",\n                type: \"npc\",\n                description: \"A deathlands scavenger that survived six runs and was pardoned. She knows the landscape beyond the barrier very well—but few can make sense of her haunted mumblings.\",\n                district: \"Dunslough\",\n                traits: [\n                    \"haunted\",\n                    \"wise\",\n                    \"daring\"\n                ]\n            },\n            {\n                name: \"Leclure\",\n                type: \"npc\",\n                description: \"A purveyor of personal luxuries (soaps, hair oils, perfume, fine silks) who dabbles in fortune telling. Some say her that drowned lover is a ghost that whispers secrets in her ear.\",\n                district: \"Nightmarket\",\n                traits: [\n                    \"shrewd\",\n                    \"tough\",\n                    \"commanding\"\n                ]\n            },\n            {\n                name: \"Helene\",\n                type: \"npc\",\n                description: \"The elegant and mysterious proprietor of the Silver Stag Casino. People say she would have been a queen of Severos had she lived in the old days before the Empire.\",\n                district: \"Silkshore\",\n                traits: [\n                    \"cultured\",\n                    \"charming\",\n                    \"secretive\"\n                ]\n            },\n            {\n                name: \"Chef Roselle\",\n                type: \"npc\",\n                description: \"One of the best cooks in the city, still operating the legendary Golden Plum restaurant—worth the trip into the haunted streets of Six Towers.\",\n                district: \"Six Towers\",\n                traits: [\n                    \"creative\",\n                    \"insightful\",\n                    \"friendly\"\n                ]\n            },\n            {\n                name: \"Lady Freyla\",\n                type: \"npc\",\n                description: \"Regarded by some as the finest sommelier in the Empire. She serves only the most deserving at the Emperor's Cask.\",\n                district: \"Whitecrown\",\n                traits: [\n                    \"erudite\",\n                    \"cultured\",\n                    \"charming\"\n                ]\n            },\n            {\n                name: \"Mara Keel\",\n                type: \"npc\",\n                description: \"A former smuggler who's gone into hiding among the farm laborers of Barrowcleft.\",\n                district: \"Barrowcleft\",\n                traits: [\n                    \"quiet\",\n                    \"secretive\",\n                    \"patient\"\n                ]\n            },\n            {\n                name: \"Rolan Wott\",\n                type: \"npc\",\n                description: \"An influential magistrate who handles property, endowments, and financial cases. Famous for his extravagant parties.\",\n                district: \"Brightstone\",\n                traits: [\n                    \"stylish\",\n                    \"elitist\",\n                    \"shrewd\"\n                ]\n            },\n            {\n                name: \"Corben\",\n                type: \"npc\",\n                description: \"An ex-military Skovlander on the lam for crimes against the empire.\",\n                district: \"Charhollow\",\n                traits: [\n                    \"tough\",\n                    \"reckless\",\n                    \"candid\"\n                ]\n            },\n            {\n                name: \"Hopper\",\n                type: \"npc\",\n                description: \"A drug addict, whisper, and all-around weirdo who perches on rooftops in the district. Hopper claims to see \\\"ghost rails\\\" and \\\"spirit trains\\\" originating deep beneath Coalridge, stretching beyond the horizon.\",\n                district: \"Coalridge\",\n                traits: [\n                    \"weird\",\n                    \"visionary\",\n                    \"enthusiastic\"\n                ]\n            },\n            {\n                name: \"Mardin Gull\",\n                type: \"npc\",\n                description: \"Owner and operator of the Leaky Bucket public house. Mardin was the leader of the Crows many years ago, before Roric and Lyssa, and now enjoys a comfortable retirement out of the scoundrel life.\",\n                district: \"Crow's Foot\",\n                traits: [\n                    \"charming\",\n                    \"experienced\",\n                    \"respected\"\n                ]\n            },\n            {\n                name: \"Mordis\",\n                type: \"npc\",\n                description: \"A strange merchant which hides its true appearance beneath many layers of robes and hoods. Also fences occult and arcane stolen goods, no questions asked.\",\n                district: \"Nightmarket\",\n                traits: [\n                    \"secretive\",\n                    \"insightful\",\n                    \"arcane\"\n                ]\n            },\n            {\n                name: \"Madame Tesslyn\",\n                type: \"npc\",\n                description: \"Operates the Red Lamp brothel, the oldest and most respected institution of its sort in the city.\",\n                district: \"Silkshore\",\n                traits: [\n                    \"confident\",\n                    \"insightful\",\n                    \"enthusiastic\"\n                ]\n            },\n            {\n                name: \"Flint\",\n                type: \"npc\",\n                description: \"A spirit trafficker who trades out of a condemned manor house.\",\n                district: \"Six Towers\",\n                traits: [\n                    \"weird\",\n                    \"calculating\",\n                    \"suspicious\"\n                ]\n            }\n        ],\n        Scores: [\n            {\n                name: \"Accidental Death\",\n                category: \"Secret Dirty Work\",\n                desc: \"Not only must the target die, the target must not know how death came. If by some misfortune the ghost of the victim is interrogated, it must not have any special knowledge. There is a ritual and an amulet for the assassins to ensure secrecy. No one living or dead can know who did this deed.\",\n                narrative: \"By the time the crew knows the job, there is a better than even chance their knowledge is too much risk and their employer plans to kill them. They might want some leverage.\"\n            },\n            {\n                name: \"Bayer's Train Heist\",\n                category: \"Misplaced Fortune\",\n                desc: \"Bayer was a rail jack fired for being drunk. Over years, he built a crew with one mission in mind--robbing a train. When lruvia completed negotiations with Akoros to buy an unprecedented mass of leviathan blood to pour into industrialization, Bayer's crew hit the train carrying the payment, sabotaging a bridge. Rescuers found the train in the canyon, but no gold--an impossible feat. Bayer's crew vanished.\",\n                narrative: \"An Iruvian ingot stamped with the year \\\"802\\\" will attract attention.\"\n            },\n            {\n                name: \"Bellweather Architectural Plans\",\n                category: \"Historical Curiosity\",\n                desc: \"The Duskwall Archives have the sanitized blueprints of the Bellweather Crematorium on file. The original plans were drawn by a Spirit Warden driven mad by an internal rift, so he haunted himself. He drew peculiar plans with occult underpinnings, and those original drawings were interpreted by architects.\",\n                narrative: \"Are there coded secrets in the original plans that reveal a repellant secret or ominous threat? Or are the plans the scribbling of a madman? Either way, some people would pay top coin to get a good look.\"\n            },\n            {\n                name: \"Book of Walls\",\n                category: \"Historical Curiosity\",\n                desc: \"Long ago, a nameless rogue cultivated a mass of bloodworms in a wall. He wrote a book with their blood. The words were nonsense, but strangely affecting; if the reader tuned in to them, and held the book, the reader could walk through a wall. Spirit Wardens ruined the book with holy smoke.\",\n                narrative: \"A legend, or is there truth to it? Walking through walls is a neat trick, and the book may hold the key to learning it. It is sought by a wide variety of the curious—scholars, collectors, and scoundrels.\"\n            },\n            {\n                name: \"Censer Mace of Udoch\",\n                category: \"Religious Object\",\n                desc: \"The head of this ornately carved mace opens on hinges so incense can be put inside to wisp as the mace swings. The haft has a recipe carved into it, instructions to make special incense out of bone and rare sap and unguents. If that incense bums in the mace, it can destroy ghosts or demons with a single hit.\",\n                narrative: \"This was a founding artifact of the Church of the Ecstasy of the Flesh. If it were returned, they would gain a fresh following from critics who feel the church cannot protect against supernatural threats.\"\n            },\n            {\n                name: \"Charter of Crows\",\n                category: \"Historical Curiosity\",\n                desc: \"This gauntlet is made out of crow beaks. Each beak is carved with arcane symbols. Consulting Whispers officially report it does not have any power in the Ghost Field. It was made by the Spirit Warden who first tamed the deathseeker crows; he claimed it was a treaty that guaranteed their service.\",\n                narrative: \"Spirit Wardens lost this gauntlet decades ago, but they want it back. The idea it is a treaty with the deathseeker crows is probably nonsense. They can't take that chance.\"\n            },\n            {\n                name: \"Combination Harpsichord\",\n                category: \"Weird Scholarship\",\n                desc: \"TARNALI was a Whisper composer who built a special harpsichord. When two tones are played, often a third \\\"ghost\\\" tone can be heard. By attaching the tuning pegs to crystals and runes, Tarnali built a harpsichord that could interact with the Ghost Field through calculated progressions of played tones.\",\n                narrative: \"This effort is intensely interesting to those who want to find doors hidden in the Ghost Field, draw or repel what lurks Behind the Mirror, or develop more portable tonal energies for non-Whispers .\"\n            },\n            {\n                name: \"Dyvik's Chaser Mask\",\n                category: \"Weird Artifact\",\n                desc: \"This silvery face mask has the word “Elekthiaron” etched along its inner edge. When the word is spoken, the personality of the one touching the mask is pulled into it. The personality that was in the mask goes in the body. If the one in the body doesn't touch the mask once a week, madness threatens.\",\n                narrative: \"Has someone been using the mask to pose as someone else? How long has that been going on? Is there someone in the mask that needs rescuing? Was the mask used to cheat biological death?\"\n            },\n            {\n                name: \"Evardian's Song Folios\",\n                category: \"Weird Scholarship\",\n                desc: \"Four leather-bound volumes, full of musical notation with heavily annotated margins. The \\\"music\\\" is supposed to be transcribed and translated leviathan song. Legend suggests if the music is played correctly, it can drive humans insane with visions of the demon-haunted deep.\",\n                narrative: \"Aristocrats will collect anything. Scholars go to great lengths for research material. Cultists may find religious significance in the folios. (Owning the folios is against the law.)\"\n            },\n            {\n                name: \"Falheim's Prod\",\n                category: \"Historical Curiosity\",\n                desc: \"This ragged pole with a spear and a silver-cable loop was the first prototype of what became the lightning hook. It doesn't work very well, but it was the first historically known charged object that could consistently interact with the Ghost Field.\",\n                narrative: \"Apparently this bit of history is an important prestige piece in the turbulent intrigues of a number of underground cults led by Whispers. The city government would also like to display it in a museum.\"\n            },\n            {\n                name: \"Fang of Ibiria\",\n                category: \"Religious Object\",\n                desc: \"This brutal stiletto has a green stone in the pommel, and a runic symbol on the blade. The blade transforms electroplasm into a mutagen. The longer the blade is in a victim, the more monstrous the victim becomes. A cut gives nightmares, minutes give mutations, hours or days create a real monster.\",\n                narrative: \"Cultists want this blade so they can make or become monsters.\"\n            },\n            {\n                name: \"Goblet of Eletrachtian\",\n                category: \"Weird Artifact\",\n                desc: \"The silver and gold cup is big enough to hold with two hands, crusted with obsidian stones. The owner puts a drop of a demon's blood in the goblet with certain other liquids, and conducts a ritual. For days afterwards (maybe longer) the owner can see anything the demon uses remote vision to view, just by watching the surface's illusory reflections.\",\n                narrative: \"There are many legends about the creation of the goblet, and the fate of the Whisper who first energized it. Rumor suggests the Duskwall Council entrusted the goblet to a certain family for safekeeping.\"\n            },\n            {\n                name: \"Hollow Shroud\",\n                category: \"Religious Object\",\n                desc: \"The Church of the Ecstasy of the Flesh clergy wrapped the funeral shroud around a heretic, then conducted a ritual that severed the heretic's connection to the body, cutting the spirit loose as a ghost. The shroud transferred the spirit of a faithful but sickly member into the heretic's body. New life!\",\n                narrative: \"The Shroud was stolen almost twenty years ago, and rumors suggest it has been used in debased rituals to summon demons or enflesh echoes of the Forgotten Gods.\"\n            },\n            {\n                name: \"Idol of the Sleeping Lion\",\n                category: \"Religious Object\",\n                desc: \"The hefty iron statue depicts a devilfish-headed humanoid, cloaked in wings. Its presence influences human dreams, so they drift through the ink-black sea but can perceive their surroundings. Sacrificing to the statue gives a cultist a cosmic infection, involving psychic ability and mutations.\",\n                narrative: \"The statue has been retrieved by officers of the law several times, and destroyed several times more. Again and again, it emerges in the heart of fresh tragedy, baleful and singular.\"\n            },\n            {\n                name: \"Ink Fleece\",\n                category: \"Family Heirloom\",\n                desc: \"Long ago, Captain Manarill claimed he could prove that leviathans had fur, or fleece. He brought back a swatch of curling fur as big as a bedspread. He claimed to have harvested it from a leviathan's skin. The mantle served as a symbol of the Manarill family's heritage of exploration and danger. But it was stolen.\",\n                narrative: \"Does it do more than represent heritage? What dreams might one have while wrapped in it? Might a wealthy Whisper pay more for it than the family that owned it? Who took it?\"\n            },\n            {\n                name: \"Kasavaraya Tea Set\",\n                category: \"Family Heirloom\",\n                desc: \"When the Immortal Emperor visited Akoros four centuries ago, he used this tea set with the patriarch of the Kasavaraya family. They are still one of the most decorated and entrenched military families in Duskwall. Their tea set is a symbol of Duskwall's prominence. However, a saucer and a cup are missing.\",\n                narrative: \"This stuff is priceless, literally, so negotiating a price for its return is tricky. If you could find the missing pieces, or forge them adequately, they would be great hostages to ajfed the family's behavior.\"\n            },\n            {\n                name: \"Kidnap The Heir\",\n                category: \"Secret Dirty Work\",\n                desc: \"People are keys that fit into estate locks. They can be turned to open the way to lots of money. You might be taking a child to ransom back to the guardian, or you might be getting someone out of the way so a more distant heir can inherit. This is about controlling where the money goes.\",\n                narrative: \"How harsh does the employer want this to be? Kid gloves treatment, or is the plan to kill the heir when it is all over? How much input will the employer accept from the hired help? Is the plan already in place?\"\n            },\n            {\n                name: \"Krogs Broken Heart\",\n                category: \"Misplaced Fortune\",\n                desc: \"Krog was a savage from the Dagger Isles, pressed into service on a hunting ship. He eventually owned a small fleet. He was old when he fell in love with a young woman who robbed him. Heartbroken, he took the rest of his treasure aboard his last hunting ship, Heartsong, and scuttled her in the harbor.\",\n                narrative: \"Whispers like to brag they found a way under the waves to find the wealth. Gracmaas the Pirate claimed to have recovered it all to his hidden lair—before he was killed.\"\n            },\n            {\n                name: \"Limptwitch's Stash\",\n                category: \"Misplaced Fortune\",\n                desc: \"Limptwitch was a Whisper who interrogated ghosts to find the location of hidden treasure. He was famous for his Grotto, the place where he stored all his salvaged wealth. Many factions tried to get his treasure, but he never gave up the secret. Then he was jailed and hanged. The Grotto was never found.\",\n                narrative: \"Did a cellmate in prison hear muttered hints as to its location? Maybe a Whisper has clues based on where he left his mark in the sewers. Has someone finally found a real lead?\"\n            },\n            {\n                name: \"Mark of the Void\",\n                category: \"Religious Object\",\n                desc: \"It is an eerie black disk of leviathan bone, about the size of a dinner plate but five times as thick. The bone is carved with a strange circular pattern with rays cutting through it. The primitive artwork was polished, and silver inlaid in the pattern, by a decadent nobleman.\",\n                narrative: \"Impressionable people admit the disk whispers to them, they hear the Back of the Mirror when it the disk is near. Many cults see this disk as a conduit to clearer communication with their supernatural patrons.\"\n            },\n            {\n                name: \"Naladicha's Cartography\",\n                category: \"Historical Curiosity\",\n                desc: \"The famous cartographer Naladicha died, and his ghost was woven into a spirit anchor connected to a pen on a wire. The drooping pen scribbled nonstop, dipping to indicate a page turn. Two books were filled with scribbles before the pen stilled. These lines and shapes may be maps of the Ghost Field.\",\n                narrative: \"One consulting Whisper reported that when she attuned to the books using an expensive and difficult ritual, the maps became luminous and four dimensional, revealing lost secrets in Duskwall.\"\n            },\n            {\n                name: \"Norscye's Lament\",\n                category: \"Famous Jewel\",\n                desc: \"This ruby has been set in a series of weapons for the last three centuries. One estimate was that the gem had participated in upwards of a thousand deaths. Legend suggests that the ruby can hold a single ghost, surviving the destruction of the body, bound to the gem until it chooses another guest.\",\n                narrative: \"While the gemstone is priceless because of its unnatural clarity, it is also possible that an important ghost might be inside, and might choose to speak to a Whisper or a blood relative.\"\n            },\n            {\n                name: \"Orb Of Sellivas\",\n                category: \"Weird Artifact\",\n                desc: \"This fist-sized golden orb tunes to one bearer at a time, though it may respond to others. If commanded, it can release a steady light that radiates in the material world and the Ghost Field, revealing what is hidden. The radiation can also draw or repel ghosts and demons.\",\n                narrative: \"The Sellivas order of witches wrote their research journals in an ink that can only be read by the light of the Orb. If someone had the Orb and the \\\"blank\\\" book, they could crack ancient secrets.\"\n            },\n            {\n                name: \"Plant Evidence\",\n                category: \"Secret Dirty Work\",\n                desc: \"Someone needs to be found guilty of doing something. For that to work out, you need evidence, put in the wrong place at the wrong time. To manage that, you need proper scoundrels.\",\n                narrative: \"Do you know what the target will be accused of doing? Are you to lead the authorities to the evidence? Must someone be seduced before a hidden witness? Are the scoundrels making evidence, or using what they're given? What if they could do better? Must the evidence fool a court, or a powerful individual?\"\n            },\n            {\n                name: \"Plasmic Blade Flail\",\n                category: \"Weird Artifact\",\n                desc: \"This weapon can slay ghosts and demons. It appears to be a gladius stitched with runes. Once the bearer attunes to the weapon, it can disconnect into vertebrate-like wedges connected by a steely central cable. The blade-whip is flexible and simmering with energy. It can reform into a straight blade at will.\",\n                narrative: \"Only five of these flails ever existed. One is carried by the Spirit Warden assigned to the Immortal Emperor's defense. The rest are the stuff of legends.\"\n            },\n            {\n                name: \"Remote Writer\",\n                category: \"Weird Artifact\",\n                desc: \"This little book has a peculiar occult symbol on the cover. If an object is placed between the covers for a full 24 hours, then the book will transcribe any conversation happening in earshot of the object until reset. When the book reaches the end, the writing starts over on the first page, clearing pages as it goes.\",\n                narrative: \"The book provides remote reading, eavesdropping of a sort. A target's favorite pen or lucky coin can become the broadcaster, and determined spies can copy the magic book writing so they don't lose it.\"\n            },\n            {\n                name: \"Rylaria's Shield\",\n                category: \"Family Heirloom\",\n                desc: \"Rylaria Graefwold was a soldier who gained title and wealth. She wrote her life's story on the back of the shield she used to save a general. Later generations added to the family story. The shield represents the family's honor. It was lost at sea when their first leviathan hunting ship was wrecked. Or was it?\",\n                narrative: \"Now the family is wealthy, and this artifact would be important to them. Does it have a secret in code?\"\n            },\n            {\n                name: \"Skovlan Scrip\",\n                category: \"Misplaced Fortune\",\n                desc: \"A dense lockbox filled with paper money issued by the Akorosian government to pay soldiers quelling the Skovlander Insurrection. The scrip can be exchanged for coins or services in Duskwall. Scrip is basically untraceable.\",\n                narrative: \"Some of the military supply that got lost during the war. Does the stashs location implicate a corrupt official or other thief?\"\n            },\n            {\n                name: \"Sonurian Ghost Key\",\n                category: \"Family Heirloom\",\n                desc: \"The Sonuria family had mansions in the area that is now the Seven Shallows slum. They created a vault for the protected dead, and for their mundane treasures. The only way in is for a family member to present the Sonurian Ghost Key before the hidden location of the vault in the Ghost Field. The key has been lost for decades.\",\n                narrative: \"That key could be hidden anywhere. If it were found, either a family member could be recruited to open the door, or the key could be sold to the family. What does the key look like? What is inside the vault?\"\n            },\n            {\n                name: \"Soultrap Carnelian\",\n                category: \"Famous Jewel\",\n                desc: \"This semi-precious stone was carved by the Whisper Ichralia. She suffocated people with hot wax and bound their fresh ghosts in wax seals on scrolls or letters with the Soultrap. When the seal was broken, the insane ghost attacked the opener and anyone nearby.\",\n                narrative: \"The Spirit Wardens destroyed this object decades ago. Didn't they? Maybe someone else made another one, or maybe the original survived.\"\n            },\n            {\n                name: \"Steal Blackmail\",\n                category: \"Secret Dirty Work\",\n                desc: \"Secrets must be protected. If they come out, people can get hurt, ruined, killed, and so on. You are hired to adjust the circle of people who can prove something. Will it be bigger? Or smaller?\",\n                narrative: \"Do you know what information you're after, or is that secret from you? If you have a chance, will you peek at it? Are you targeting a blackmailer to remove their hold, or getting evidence to give a blackmailer? Is the evidence to be destroyed? Do you plan to do as you are told?\"\n            },\n            {\n                name: \"Terrorize\",\n                category: \"Secret Dirty Work\",\n                desc: \"People can be stubborn, to the point where only fear can unseat their decision. Maybe they feel independent and need to reminded that they need protection. Maybe they feel safe and need to be reminded they are not untouchable.\",\n                narrative: \"Are you supposed to be someone in particular, like a random street thug or rival's employee or bluecoat? How far can the terror go? Do you need to trash a home, or maybe converse with a loved one?\"\n            },\n            {\n                name: \"The Emerald Well\",\n                category: \"Famous Jewel\",\n                desc: \"This depthless gem is a chilly pinhole between the material world and the Ghost Field. It provides energy to Whispers and attracts ghosts. The Emerald Well was protected by the Church of the Ecstasy of the Flesh, but a thief stole it decades ago. It is a hotspot for supernatural activity. Disaster flows in its wake.\",\n                narrative: \"This is one of the few objects pursued by demons, Whispers, inspectors, clergy, and collectors. Scholars suggest demons may be able to turn it inside out, creating a fresh gate to incarnate more demons.\"\n            },\n            {\n                name: \"The Hellwhisper Ring\",\n                category: \"Weird Scholarship\",\n                desc: \"The ring is made of tiny bits of bone wired together. It must be worn for at least a day per year of the bearer's life before it begins to work. When placed on a source of information, the ring sifts it until the ring speaks the information's \\\"language.\\\" The bearer can see through riddles, read arcane texts, and break code with ease.\",\n                narrative: \"Legend says 32 demons voluntarily gave some of their bone to be part of this ring, and it was released among humans to cause chaos through greater understanding.\"\n            },\n            {\n                name: \"The Helsman Inheritance\",\n                category: \"Misplaced Fortune\",\n                desc: \"The final will and testament of the clan's patriarch included a 24 hour locked-house condition. Survivors would split the inheritance. Darayl Helsman left the house at the end of the time with a small bag. Explorers found nothing but corpses in the house, the inheritance was gone. Darayl was found dead the next day, the bag gone. The city locked the house and guards against trespassers.\",\n                narrative: \"Surely Darayl hid the inheritance in the Ghost Field. Find the ghost key and lock in the house, and get it all! Or, did someone else already get it?\"\n            },\n            {\n                name: \"The Key Lens\",\n                category: \"Weird Scholarship\",\n                desc: \"The round frame has forty special lenses hinged on its rim. The lenses can layer over each other, flip out past the frame, rotate to take advantage of the angles inside the ground crystal, and take translucent colored filters. Their inventor, VLAS HALDAK, said he had found \\\"the key.\\\" He died of shock, the lens on his work table.\",\n                narrative: \"Legends vary. It can see into the Ghost Field, it can see into people, it allows reading demonic texts, it can see the way into ghost neighborhoods, etc. Needs a Whisper to use properly.\"\n            },\n            {\n                name: \"The Leviathan's Eye\",\n                category: \"Famous Jewel\",\n                desc: \"This sapphire turns impossibly black if dipped in leviathan blood. If the still-bloody stone is pressed against a seer's forehead, the sensitive can see what the ocean sees, looking above the waves or probing the deeps. The gem used to be passed around between leviathan hunter captains, but has since been lost.\",\n                narrative: \"One expert said using the Eye was as close as a human could get to a demon seeing through its elemental affinity, and that it began a slow change in the individual who was exposed to its power.\"\n            },\n            {\n                name: \"The Tabissera Diary\",\n                category: \"Weird Scholarship\",\n                desc: \"Warden Khalana Uress was the Head Confessor of the Spirit Wardens. She recorded secrets that were only for the use of the order using a book code, coordinates that pointed to words in a specific book. Without that book, the code cannot be cracked. Daring thieves took the book, then lost it.\",\n                narrative: \"Fakes come on the market all the time. Only the Spirit Warden leadership know what the book looked like, and they aren't telling. What is the Diary about?\"\n            },\n            {\n                name: \"The Thousand Facet Diamond\",\n                category: \"Famous Jewel\",\n                desc: \"This gem is the elegant centerpiece on the back of a peculiar clockwork gauntlet. A seer can use the gauntlet to travel into the Ghost Field while retaining physical presence, or possibly even other dimensions. Each use burns out some of the diamond facets. The device is reported to have a mind of its own.\",\n                narrative: \"Ever since its theft from the Adelairde family, the gauntlet has surfaced only in rumors of especially daring heists or mind-shattering experiments.\"\n            },\n            {\n                name: \"Whitecrown Signet Ring\",\n                category: \"Family Heirloom\",\n                desc: \"The Whitecrown family schismed in the wake of the theft of the matriarch's signet ring over two centuries ago. They fell from being players in the intrigues around the throne to bickering over dwindling family holdings. Their wealth and influence is low, but not beyond recall.\",\n                narrative: \"If the ring resurfaced, elements of the feud might put aside their differences and reunite. Besides, legends suggest a ghost matriarch is bound to the ring, and she knows their secrets.\"\n            }\n        ]\n    }\n};\nconst ClockKey_SVGDATA = {\n    1: {\n        height: 836,\n        width: 230,\n        paths: [\n            \"M217.017,123.52c-1.6-0.8-2.84-1.44-4.1-2.04c-1.12-0.53-2.26-1.04-3.42-1.51 c-1.05-0.43-2.18-0.68-3.18-1.19c-0.89-0.45-1.23-1.23-1.2-2.36c0.09-4.48-0.07-8.97,0.05-13.45c0.08-3.31-0.83-6.47-1.14-9.72 c-0.01-0.14-0.09-0.28-0.14-0.42c-0.57-2.01-1.2-4.01-1.69-6.04c-0.45-1.85-0.75-3.74-1.11-5.61 c-0.012-0.043-0.023-0.085-0.035-0.127c-0.6-1.69-1.348-3.353-1.825-5.083c-0.46-1.66-0.68-3.38-1.03-5.07 c-0.04-0.24-0.16-0.47-0.25-0.7c-0.49-1.32-0.98-2.65-1.47-3.97c-0.55-1.44-0.93-2.97-1.69-4.28c-0.79-1.35-0.65-3.03,0.61-4.19 c0.43-0.39,0.85-0.85,1.08-1.36c0.57-1.3,1.35-2.62,1.44-3.97c0.08-1.11-0.46-3.08-1.14-3.29c-1.58-0.47-3.49-0.42-5.1,0.03 c-1.41,0.4-2.59,1.63-4.07,2.62c-1.15-1.18-2.43-2.41-3.6-3.75c-0.41-0.47-0.43-1.29-0.82-1.78c-0.67-0.84-1.56-1.5-2.23-2.33 c-0.18-0.22-0.08-0.9,0.13-1.16c0.85-1.02,1.78-1.97,2.71-2.92c2.18-2.22,4.37-4.45,6.57-6.65c0.85-0.86,1.78-1.64,2.63-2.5 c1.16-1.17,2.38-2.29,3.37-3.59c0.66-0.88,0.89-2.07,1.42-3.06c0.86-1.63,0.01-3.02-0.68-4.31c-0.23-0.43-1.4-0.4-2.15-0.48 c-0.69-0.08-1.4,0.02-2.09-0.02c-1.71-0.11-3.14,0.17-4.52,1.47c-1.22,1.14-2.96,1.74-4.44,2.62c-0.98,0.59-1.89,1.31-2.88,1.88 c-2.02,1.17-4.2,2.11-6.07,3.47c-1.12,0.81-2.16,1.18-3.49,1.4c-1.28,0.22-2.44,1.1-3.7,1.59c-0.58,0.23-1.72,0.49-1.82,0.3 c-0.91-1.63-2.75-1.79-4.03-2.77c-0.33-0.25-0.58-0.62-0.93-0.82c-1.11-0.64-2.26-1.22-3.38-1.85c-1.48-0.83-2.94-1.7-4.42-2.53 c-0.93-0.53-1.83-1.24-2.84-1.5c-1.37-0.35-2.24-1.96-3.89-1.5c-0.08,0.03-0.19-0.02-0.29-0.04c-1.97-0.58-3.94-1.16-5.91-1.73 c-0.28-0.08-0.76-0.02-0.84-0.18c-0.89-1.7-2.8-1.2-4.1-1.6c-2.83-0.87-5.94-0.87-8.94-1.22c-0.39-0.04-1.05,0.06-1.14-0.13 c-0.79-1.56-2.21-1.01-3.4-1.05c-2.09-0.08-2.68-0.62-2.72-2.65c-0.01-0.84-0.1-1.69-0.24-2.51c-0.16-0.88-0.54-1.72-0.62-2.59 c-0.13-1.24-0.03-2.49-0.11-3.73c-0.06-0.88-0.61-1.45-1.5-1.13c-0.79,0.28-1.59,0.72-2.21,1.28c-1.48,1.36-2.85,2.84-4.29,4.25 c-1.1,1.08-2.08,2.06-3.81,2.55c-1.54,0.44-2.99,1.69-4.63,2.42c-1.79,0.8-3.28,2.25-5.44,2.13c-0.44-0.02-1.16-0.02-1.28,0.22 c-0.7,1.36-1.94,0.82-2.98,0.97c-0.49,0.07-0.99,0.11-1.47,0.24c-1.92,0.49-3.84,0.98-5.75,1.52c-1.74,0.49-3.51,0.95-5.19,1.61 c-1.92,0.74-3.67,1.99-5.63,2.46c-1.64,0.38-3.01,1.13-4.51,1.72c-0.99,0.39-2.52,0.38-3.43-0.13c-1.93-1.09-4.28-1.09-6.03-2.54 c-0.22-0.19-0.67-0.12-1.02-0.13c-0.9-0.02-1.79-0.02-2.69-0.02c-1.37,0.01-2.19,0.72-2.36,2.15c-0.09,0.78-0.06,1.59-0.09,2.38 c-0.01,0.35,0.11,0.87-0.06,1.02c-1.68,1.35-0.89,3.24-1.18,4.9c-0.16,0.88-0.56,1.8-1.1,2.51c-0.75,0.99-1.76,1.79-2.61,2.72 c-1.02,1.1-1.99,2.26-2.99,3.39c-1.49,1.67-2.96,3.37-4.5,5c-1.36,1.45-2.81,2.83-4.2,4.25c-0.16,0.17-0.19,0.46-0.31,0.67 c-0.74,1.29-1.39,2.64-2.25,3.84c-0.89,1.25-2.63,1.86-2.72,3.75c-0.02,0.38-0.57,0.73-0.86,1.11c-0.37,0.49-0.79,0.96-1.07,1.5 c-0.73,1.39-1.26,2.89-2.1,4.21c-1.08,1.71-2.25,3.34-2.65,5.38c-0.07,0.32-0.39,0.6-0.57,0.91c-0.21,0.34-0.45,0.67-0.59,1.05 c-0.43,1.21-0.72,2.48-1.24,3.65c-0.79,1.76-1.75,3.45-2.6,5.19c-1.27,2.6-2.74,5.13-3.69,7.85c-0.5,1.45-0.18,3.23-0.08,4.85 c0.05,0.7,0.68,1.37,0.69,2.06c0.06,6.07,0.06,12.15,0.01,18.23c0,0.71-0.37,1.44-0.63,2.13c-0.35,0.95-1.04,1.85-1.09,2.8 c-0.07,1.31-1.04,1.92-1.62,2.82c-0.91,1.43-2.71,1.9-3.59,3.51c-1.01,1.85-0.94,3.91,0.46,5.41c1.17,1.24,2.59,0.75,3.93,0.97 c1.41,0.22,3.01,0.26,4.12,0.99c1.11,0.74,1.87,2.16,2.5,3.43c0.77,1.56,1.35,3.24,1.8,4.92c0.67,2.5,0.94,5.12,2.32,7.4 c0.56,0.92,1.03,1.9,1.52,2.87c0.51,1.03,0.96,2.09,1.48,3.11c0.56,1.09,1.13,2.18,1.77,3.22c0.29,0.48,0.84,0.8,1.16,1.26 c0.61,0.87,1.11,1.82,1.71,2.69c0.32,0.47,0.83,0.81,1.16,1.27c0.93,1.3,1.79,2.65,2.73,3.95c0.31,0.43,0.83,0.69,1.15,1.11 c0.52,0.69,0.89,1.51,1.44,2.16c0.41,0.48,1.1,0.72,1.54,1.18c1.57,1.66,3,3.46,4.65,5.03c1.3,1.26,2.91,2.18,4.25,3.4 c1.99,1.84,3.82,3.85,5.81,5.7c0.51,0.47,1.42,0.47,1.99,0.9c0.95,0.71,1.78,1.59,2.88,2.59c-0.72,0.66-1.63,1.5-2.55,2.33 c-0.78,0.7-1.61,1.34-2.34,2.07c-1.54,1.55-3.05,3.13-4.54,4.73c-1.24,1.32-2.6,2.56-3.6,4.05c-0.6,0.91-1.1,1.85-1.89,2.63 c-1.23,1.21-1.21,4.03,0.24,4.66c1.03,0.45,2.61,0.53,3.57,0.03c1.41-0.72,2.76-0.5,4.14-0.57c1.93-0.09,3.89,0.02,5.8-0.21 c1.19-0.14,2.33-0.75,3.46-1.2c0.49-0.19,0.89-0.6,1.38-0.76c0.46-0.16,1.13,0.06,1.45-0.21c2.19-1.82,5.18-1.79,7.53-3.48 c1.41-1.01,3.25-2.21,5.36-2.06c0.28,0.02,0.58-0.29,0.88-0.44c0.42-0.22,0.85-0.61,1.29-0.62c3.43-0.04,6.86,0,10.3,0.03 c0.38,0,0.99-0.01,1.11,0.21c0.64,1.13,1.69,0.85,2.63,0.91c1.1,0.06,2.24-0.13,3.27,0.14c2.96,0.79,5.9,1.59,9,1.58 c6.02-0.03,12.05,0.27,18.01-0.93c0.82-0.17,1.69-0.08,2.52-0.24c1.04-0.2,2.05-0.52,3.14-0.81c0.13,0.6,0.21,0.79,0.21,0.98 c0.01,8.226,0.03,16.462,0.01,24.699c-0.001,0.368-0.217,0.882-0.515,1.099c-0.676,0.493-1.572,0.71-2.176,1.273 c-1.37,1.26-2.6,2.68-3.92,4c-0.73,0.73-1.61,1.32-2.31,2.08c-0.98,1.06-0.96,2.42-0.9,3.78c0.07,1.95,0.64,2.62,2.59,2.67 c1.712,0.061,3.434,0.019,5.146,0.03c1.112,0.007,2.014,0.908,2.024,2.02c0.06,6.72,0.08,13.44,0.15,20.16 c0.019,1.205-0.537,1.936-1.437,2.533c-0.23,0.153-0.451,0.318-0.644,0.516c-1.605,1.643-3.165,3.308-4.789,4.931 c-0.63,0.64-1.57,1.05-2.01,1.79c-1.29,2.14-3.22,3.55-5.3,4.69c-2.51,1.38-2.76,1.58-2.61,4.33c0.09,1.65,1.84,3.48,3.41,3.17 c1.82-0.35,3.74-0.85,5.26-1.85c0.77-0.51,1.38-0.68,2.16-0.71c0.95-0.04,1.9-0.01,2.84-0.01c2.59,0.01,3.03,0.46,3.03,3.1 c-0.01,31.18-0.02,62.36-0.04,93.55c0,2.88-0.13,5.78,0.03,8.66c0.16,2.8,0.67,5.58,0.91,8.39c0.15,1.83,0.08,3.68,0.15,5.52 c0.02,0.42,0.14,0.85,0.29,1.25c0.23,0.58,0.66,1.12,0.75,1.72c0.13,0.93-0.34,2.21,0.13,2.78c1.82,2.18-0.35,4.04-0.21,6.04 c0.01,0.2-0.21,0.41-0.31,0.62c-0.53,1.08-1.43,2.14-1.49,3.24c-0.21,4.27-0.19,8.56-0.19,12.84 c-0.01,51.9,0.01,103.81-0.05,155.71c0,4.36-0.54,8.71-0.84,13.06c-0.03,0.34-0.19,0.66-0.31,0.98c-0.25,0.69-0.73,1.36-0.74,2.05 c-0.12,5.68-0.07,11.36-0.23,17.03c-0.11,3.65-0.78,7.31-0.68,10.95c0.12,4.59-0.27,9.16,0.58,13.82 c0.85,4.63,0.19,9.53,0.21,14.31c0.01,1-0.27,2.32,0.24,2.92c1.2,1.39,0.69,2.89,0.79,4.35c0.03,0.33-0.22,0.7-0.37,1.03 c-0.25,0.55-0.55,1.06-0.76,1.62c-0.17,0.44-0.2,0.93-0.36,1.38c-0.47,1.36-0.97,2.72-1.45,4.08c-0.11,0.31-0.11,0.7-0.3,0.94 c-1.58,2-2.33,4.36-2.52,6.8c-0.23,3.07-0.06,6.17-0.08,9.26c-0.02,3.62,0.05,7.24,0.93,10.78c0.07,0.3,0.39,0.56,0.42,0.86 c0.13,1.29,0.2,2.59,0.29,3.88c-0.91,0.05-1.84,0.23-2.72,0.09c-0.66-0.1-1.24-0.71-1.91-0.9c-1.83-0.53-3.81,1.69-3.74,3.17 c0.1,2.16,0.3,4.33,1.59,6.15c1.14,1.6,2.44,3.09,3.73,4.57c1.18,1.36,2.64,2.45,2.25,4.66c-0.47,2.6-0.66,5.25-1.01,8.26 c-4.52,0.25-8.9,0.65-13.3,0.72c-8.65,0.13-17.32,0.08-25.98,0.13c-0.58,0-1.24-0.02-1.74,0.22c-1.03,0.49-1.92,1.28-2.97,1.7 c-1.85,0.75-3.77,1.31-5.65,1.96c-0.22,0.07-0.42,0.22-0.63,0.32c-1.16,0.57-2.28,1.38-3.51,1.64c-1.03,0.21-1.79,0.61-2.49,1.28 c-0.2,0.19-0.4,0.5-0.62,0.51c-1.14,0.08-2.03,0.39-2.85,1.34c-0.63,0.73-1.75,1.04-2.67,1.49c-1.72,0.84-3.48,1.61-5.18,2.49 c-1.48,0.77-3.04,1.49-4.33,2.53c-1.49,1.21-2.68,2.8-4.09,4.14c-0.84,0.79-1.75,1.75-2.79,2.02c-1.46,0.39-2.97,0.34-4.52,0.83 c-2.05,0.64-4.39,0.08-6.57,0.95c-1.38,0.54-3.25-0.48-4.4,1.21c-0.07,0.1-0.38,0.03-0.58,0.05c-2.5,0.25-4.95-0.04-7.53,0.73 c-3.19,0.97-6.74,0.74-10.14,1.08c-0.59,0.06-1.36,0.23-1.7,0.63c-0.83,1.02-0.42,3.75,0.69,4.4c0.91,0.54,2,0.82,3.05,1.07 c0.66,0.15,1.4-0.06,2.08,0.05c1.68,0.29,3.67-0.91,5.01,1.05c0.07,0.1,0.38,0.06,0.58,0.07c4.87,0.2,9.72,0.09,14.61,0.8 c4.38,0.64,8.94-0.01,13.42,0.18c3.03,0.13,5.86-0.88,8.82-1.09c0.14-0.01,0.35-0.06,0.4-0.15c0.61-1.3,1.84-0.85,2.85-1.06 c0.57-0.11,1.2-0.3,1.65-0.65c0.83-0.64,1.45-1.63,2.35-2.1c2.5-1.32,4.56-3.31,7.19-4.45c1-0.43,1.58-0.43,2.51,0.04 c0.62,0.31,1.68,0.25,2.33-0.08c1.06-0.53,1.88-0.64,2.74,0.22c0.76,0.76,1.53,1.51,2.34,2.23c1.14,1.02,2.41,1.91,3.46,3.02 c1.04,1.08,1.85,2.38,2.78,3.56c1.11,1.4,4.49,1.72,5.94,0.58c1.29-1.01,1.57-2.52,1.85-3.97c0.24-1.24,0.03-2.49,0.68-3.78 c0.9-1.75,1.39-2.39,3.41-2.36c2.29,0.02,4.58,0.1,6.87,0.11c1.04,0.01,1.62,0.52,1.84,1.5c0.31,1.31,0.45,2.68,0.96,3.9 c0.36,0.85,1.11,1.71,1.91,2.16c1.23,0.7,4.69-0.66,5.09-2.01c0.53-1.73,1.15-3.6,1-5.35c-0.24-2.82,1.44-4.54,2.89-6.43 c0.3-0.39,1.44-0.68,1.72-0.45c1.45,1.23,3.45,2.17,3.18,4.62c-0.06,0.64,0.09,1.3,0.02,1.94c-0.31,3.01-0.68,6.01-0.98,9.02 c-0.08,0.86-0.01,1.74-0.01,2.77c1.08-0.07,1.88-0.05,2.64-0.18c1.12-0.2,2.2-0.62,3.32-0.73c1.38-0.13,2.78-0.05,4.18-0.04 c1.86,0.01,2.13,0.24,1.82,2.07c-0.17,1-0.42,2.39-1.12,2.8c-1.1,0.65-0.86,1.44-0.87,2.24c-0.05,2.1-0.03,4.19-0.01,6.28 c0.01,0.44,0,1.19,0.2,1.26c1.41,0.53,0.81,1.71,0.98,2.64c0.17,0.9,0.34,1.81,0.64,2.66c0.39,1.08-0.23,3.51-1.19,3.75 c-1.67,0.43-3.39,0.66-5.09,0.99c-1.84,0.36-3.67,0.72-5.5,1.11c-0.22,0.05-0.4,0.28-0.61,0.39c-0.43,0.23-0.85,0.56-1.3,0.63 c-0.594,0.081-1.208,0.05-1.82,0.036c-1.386-0.033-2.643-0.905-3.075-2.222c-0.613-1.87-0.822-3.704-0.936-5.614 c-0.03-0.33-0.6-0.59-0.79-0.96c-0.43-0.85-1.13-1.77-1.07-2.62c0.07-0.98,1.05-1.44,2.19-1.38c0.81,0.04,1.64-0.21,2.44-0.43 c0.59-0.16,1.12-0.55,1.72-0.69c0.52-0.12,1.09-0.06,1.63-0.02c1.25,0.08,1.8-0.43,1.76-1.72c-0.05-1.89,0.01-3.78-0.01-5.68 c-0.01-1.66-0.83-2.55-2.56-2.57c-3.84-0.04-7.67-0.02-11.5,0.02c-1.16,0.01-1.74,0.7-1.85,1.83c-0.05,0.54-0.08,1.09-0.24,1.6 c-0.48,1.6-1.38,3.17-1.45,4.78c-0.08,1.83-0.74,3.01-2.08,4.1c-0.83,0.67-1.56,0.79-2.23,0.04c-1.08-1.22-2.09-2.51-3.04-3.83 c-1.06-1.48-1.88-3.17-3.08-4.51c-0.91-1.03-1.92-2.41-3.7-1.84c-0.51,0.17-0.93,0.69-1.44,0.79c-2.58,0.46-4.33,2.33-6.35,3.7 c-2.13,1.45-4.2,2.53-6.93,2.33c-3.17-0.24-6.37-0.07-9.55-0.09c-0.4,0-0.93,0.1-1.16-0.1c-1.75-1.51-4.32-2.07-5.29-4.5 c-0.06-0.13-0.33-0.24-0.5-0.25c-2.1-0.1-3.95-1.56-6.16-1.07c-0.31,0.07-0.68-0.08-1.02-0.17c-0.9-0.25-1.8-0.73-2.71-0.75 c-4.62-0.08-9.25-0.03-13.88-0.05c-0.46,0-0.94-0.13-1.38-0.29c-0.63-0.24-1.23-0.8-1.85-0.81c-6.97-0.06-13.94-0.01-20.91-0.06 c-1.47-0.01-2.4,0.9-3.11,1.81c-1.58,2.02,0.43,5.8,3.19,6.29c1.71,0.31,3.41,0.64,5.12,0.96c0.19,0.04,0.49,0.05,0.55,0.17 c0.65,1.18,1.78,0.83,2.77,0.94c2.9,0.31,5.78,0.66,8.67,1c0.103,0.019,0.206,0.038,0.308,0.057c2.154,0.545,4.296,1.193,6.481,1.6 c1.241,0.232,2.507,0.15,3.769,0.183c0.284,0.007,0.568,0.119,0.821,0.24c0.62,0.28,1.22,0.6,1.83,0.9 c1.33,0.65,2.68,1.25,3.98,1.96c0.4,0.22,0.6,0.76,0.96,1.06c1.45,1.23,2.93,2.41,4.37,3.64c0.97,0.82,1.92,1.67,2.84,2.54 c1.98,1.86,3.98,3.71,5.89,5.64c1.72,1.72,3.46,3.45,4.97,5.36c1.54,1.93,3.34,2.52,5.79,2.51c18.47-0.08,36.94-0.01,55.4,0.02 c2.17,0,4.19,0.14,5.7-2.14c1.09-1.64,2.99-2.73,4.39-4.2c0.74-0.77,1.1-1.87,1.77-2.73c0.68-0.88,1.47-1.69,2.3-2.45 c1.56-1.45,2.81-3.12,3.91-4.94c0.46-0.76,1.51-1.22,1.86-2.01c0.76-1.74,1.56-3.38,3.08-4.61c0.42-0.34,0.88-0.97,0.86-1.44 c-0.08-1.47,0.99-2.28,1.57-3.39c0.75-1.42,1.61-2.73,1.52-4.59c-0.21-4.42-0.08-8.86-0.05-13.29c0-0.61,0.19-1.23,0.35-1.83 c0.14-0.49,0.55-0.98,0.49-1.43c-0.39-3,0.95-5.77,1.1-8.7c0.01-0.2,0.23-0.39,0.34-0.59c0.26-0.47,0.56-0.92,0.78-1.41 c0.59-1.37,1.1-2.77,1.75-4.11c0.19-0.39,0.85-0.54,1.1-0.93c1.25-1.87,2.56-3.71,3.58-5.7c0.73-1.41,1.8-2.83,1.37-4.6 c-0.1-0.41-0.44-1.03-0.73-1.07c-2.3-0.28-4.43-1.46-6.87-1.09c-1.41,0.21-2.88,0.03-4.32,0.03c-2.22,0-2.56-0.51-2.76-2.74 c-0.2-2.19,1.03-4.66-1.1-6.53c-0.08-0.07-0.02-0.29-0.04-0.44c-0.26-2.65,0.17-5.27-0.75-7.99c-0.82-2.44,0.02-5.23-0.93-7.92 c-0.87-2.51,0.15-5.31-1.06-8.11c-1.14-2.64-0.76-5.92-1.16-8.91c-0.31-2.31,0.38-4.77-0.96-6.94c-0.31-0.5-0.91-0.93-1-1.46 c-0.41-2.24-0.68-4.5-1.01-6.76c-0.32-2.2-0.65-4.4-0.99-6.6c-0.03-0.19-0.09-0.47-0.23-0.53c-1.21-0.55-0.86-1.61-0.88-2.55 c-0.25-12.95,0.26-25.89-0.76-38.84c-0.645-8.159-0.207-16.407-0.21-24.606c0-0.326,0.03-0.655,0.132-0.964 c0.498-1.505,1.628-2.909,1.808-4.439c0.32-2.74,0.57-5.52,0.82-8.26c0.521-5.744,0.168-11.569,0.15-17.363 c-0.001-0.411-0.054-0.823-0.201-1.207c-0.519-1.358-1.356-2.643-1.619-4.039c-0.5-2.67-0.7-5.39-1.02-8.09 c-0.04-0.39-0.08-0.79-0.07-1.19c0.07-3.15-0.3-6.32,0.69-9.42c0.41-1.29-0.17-2.87,1.22-3.88c0.1-0.07,0.06-0.37,0.06-0.57 c0.04-8.32,0.08-16.64,0.08-24.96c0-0.43-0.28-0.88-0.45-1.31c-0.19-0.46-0.56-0.9-0.58-1.36c-0.48-11.05,0.53-22.1-0.75-33.17 c-0.77-6.68-0.15-13.52-0.19-20.29c-0.02-4.13-0.15-8.26-0.15-12.39c-0.01-44.063-0.01-88.115,0-132.178 c0-0.883,0.011-1.77,0.117-2.647c0.323-2.687-0.394-5.417,0.813-8.095c0.54-1.2,0.09-2.85,0.14-4.29c0.01-0.42,0.12-0.86,0.28-1.25 c0.26-0.62,0.63-1.2,0.88-1.82c0.14-0.36,0.1-0.78,0.19-1.16c0.48-2.02,1-4.03,1.44-6.05c0.25-1.17-0.47-2.63,1.09-3.39 c0.11-0.05,0.1-0.36,0.11-0.56c0.28-4.51,0.31-9,0.88-13.53c0.7-5.49,0.44-11.15,0.13-16.71c-0.31-5.55,1.18-10.95,0.94-16.46 c-0.02-0.62,0-1.25,0-1.92c0.98-0.1,1.74-0.1,2.45-0.27c0.7-0.17,1.35-0.53,2.03-0.75c1.92-0.62,2.45-1.33,2.42-3.39 c0-0.43-0.07-0.86-0.12-1.48h-4.97c-1.98-0.01-2.64-0.7-2.65-2.73c-0.01-0.75,0.05-1.5-0.01-2.25c-0.53-6.86,1.3-13.97-2.06-20.55 c0.49-2.24-1.35-4.79,0.96-6.8c1.23-1.08,2.27-2.42,3.62-3.33c1.23-0.83,2.52-1.47,3.3-2.84c0.8-1.42,2.89-2.31,4.31-1.95 c1.05,0.28,2.12,0.53,3.13,0.92c2.26,0.86,4.46,1.89,6.75,2.65c0.94,0.32,2.23,0.47,3.05,0.06c1.77-0.89,2.89-2.77,3.34-4.51 c0.76-2.92,0-5.91-1.12-8.69c-0.5-1.24-0.4-1.92,0.76-2.43c1.71-0.75,3.37-1.59,5.07-2.37c2.07-0.95,3.93-2.43,6.34-2.56 c0.29-0.02,0.55-0.33,0.84-0.5c0.37-0.23,0.78-0.65,1.14-0.63c1.59,0.13,3.06-0.23,4.74,0.92c1.61,1.11,4.13,0.99,6.27,1.19 c1.93,0.17,2.82-0.82,3-2.78c0.04-0.43,0.26-0.88,0.47-1.28c0.39-0.75,1.16-1.46,1.2-2.22c0.07-1.42,0.75-3-1.6-3.85 c-1.72-0.61-2.93-2.52-4.52-3.62c-1.38-0.96-2.98-1.6-4.73-2.51c0.24-0.6,0.46-1.24,0.75-1.85c0.82-1.72,1.67-3.42,2.49-5.13 c0.34-0.73,0.5-1.6,1.01-2.17c1.42-1.63,1.98-3.64,2.79-5.55c0.36-0.87,0.45-1.99,1.06-2.59c1.09-1.06,1.52-2.34,1.98-3.69 c0.29-0.85,0.66-1.68,1.09-2.46c0.51-0.93,1.33-1.73,1.67-2.7c0.81-2.39,2.14-3.18,4.45-2.38c0.31,0.1,0.7,0.11,1.03,0.04 c1.17-0.22,2.36-0.41,3.5-0.76c1.24-0.38,2.44-0.9,3.62-1.43c0.21-0.08,0.37-0.5,0.37-0.77 C217.026,126.28,217.017,124.66,217.017,123.52z M143.507,186.1c-0.82,0.65-1.72,0.95-2.7,1.06c-9.15,3.4-19.04,5.26-29.37,5.26 c-46.57,0-84.32-37.75-84.32-84.32c0-46.56,37.75-84.31,84.32-84.31c46.56,0,84.31,37.75,84.31,84.31 C195.747,143.31,174.167,173.48,143.507,186.1z\",\n            \"M214.327,133.65c-1.07-0.77-2.58-1.24-3.21-2.27c-2.25-3.6-6.31-7.65-5.88-11.05 c1.52-12.04-0.33-23.52-2.8-35.1c-1.17-5.49-2.18-10.99,4.72-14.06c1.08-0.48,1.88-3.13,1.63-4.57c-0.19-1.07-2.16-2.19-3.55-2.64 c-6.7-2.14-12.98-4.88-17.4-10.69c-8.86-11.65-19.24-21.69-32.64-27.85c-6.64-3.05-11.86-6.24-11.09-14.54 c0.07-0.78-0.31-1.64-0.64-2.4c-1.25-2.84-2.56-5.66-3.84-8.48c-2.09,2.6-4.15,5.23-6.27,7.81c-1.41,1.73-2.68,4.5-4.41,4.85 c-5.32,1.1-10.85,1.76-16.28,1.67c-10.63-0.18-20.99,1.14-30.97,4.67c-7.85,2.78-15.14,3.77-22.72-1.31 c-3.42-2.29-8.09-2.69-13.48-4.35c1.1,3.41,1.68,5.25,2.3,7.08c2.66,7.87,2.9,14.94-4.11,21.28c-9.76,8.83-16.78,19.74-21.74,31.96 c-3.43,8.43-7.09,16.77-10.4,25.25c-0.69,1.77-0.76,4.07-0.31,5.93c1.61,6.58,3.4,13.13,5.43,19.59c3.09,9.77,5.6,19.86,9.93,29.08 c3.68,7.83,9.58,14.63,14.68,22.14c-0.79,0.96-2.1,2.1-2.8,3.53c-1.36,2.82-2.37,5.81-3.53,8.72c3.12,0.11,6.55,1.11,9.29,0.15 c8.09-2.86,14.4-0.35,20.54,4.73c2.39,1.98,2.05,3.36,0.46,5.32c-5.83,7.15-10.71,15.15-18.99,20.06 c-0.98,0.57-0.82,3.05-1.18,4.65c1.4,0.24,3.08,1.12,4.16,0.63c10.45-4.67,20.76-9.67,31.2-14.38c6.31-2.84,12.43-5.88,19.84-5.85 c10.42,0.05,20.84-1.07,31.26-1.7c1.76-0.11,3.51-0.28,5.42-0.43c0.16,1.54,0.36,2.51,0.36,3.49 c-0.02,59.51,0.09,119.02-0.28,178.52c-0.04,6.76-2.01,13.66-6.63,19.46c-5.78,7.26-11.13,14.88-16.46,22.49 c-0.72,1.03-0.2,2.93-0.26,4.43c1.3-0.02,2.66,0.24,3.87-0.09c5.76-1.56,11.47-3.28,18.14-5.22c0.62,6.25,1.49,10.98,1.5,15.73 c0.13,47,0.21,94.01,0.09,141.01c-0.02,9.45-0.81,18.9-1.43,28.34c-0.51,7.62-1.87,15.22-1.81,22.82 c0.09,11.27,1.35,22.52,1.59,33.8c0.11,4.87-1.07,9.77-1.69,14.65c-0.95,7.5-2.36,14.98-2.73,22.51c-0.3,6.1,1.55,12.38,0.78,18.37 c-0.97,7.49-5.01,14.53-11.46,18.32c-5.29,3.13-12.04,4.52-18.29,5.09c-7.23,0.66-14.61-0.47-21.92-0.75 c-7.56-0.29-13.36-5.01-15.18-12.31c-0.24-0.97-0.97-2.04-1.79-2.6c-3.54-2.44-7.19-4.7-11.02-7.17 c-6.83,8.88-7.82,11.33-7.65,21.13c0.27,15.78,1.28,31.58,0.87,47.34c-0.19,7.12-0.36,13.84,2.91,20.27 c0.57,1.13,1.4,2.86,2.29,2.97c6.4,0.82,12.69,3.55,19.18-1.16c3.35-2.42,8.23-3.21,12.54-3.72c7.41-0.88,14.92-0.84,22.37-1.43 c4.08-0.32,7.49-1.9,7.64-6.78c0.16-4.95,2.49-7.46,7.41-7.25c1.26,3.22,2.35,6.35,3.73,9.34c0.48,1.05,1.56,2.34,2.55,2.54 c3.24,0.62,6.57,0.74,9.86,1.16c3.38,0.42,5.09-0.92,6.01-4.3c1.78-6.56,3.92-13.02,6.08-19.47c1.92-5.71,2.31-11.28-0.26-16.93 c-0.69-1.51-0.6-3.37-1.02-5.99c2.46,0.64,3.97,1.18,5.52,1.41c2.3,0.33,4.62,0.44,6.93,0.65c-0.07-2.7,0.5-5.64-0.37-8.06 c-1.39-3.88-4.05-7.3-5.6-11.14c-2.34-5.79-5.86-11.75-5.96-17.69c-0.58-35.66-0.34-71.34-0.33-107.01c0-1.81,0.12-3.68,0.57-5.42 c3.38-13.1,3.56-26.5,1.68-39.63c-1.53-10.75-1.54-20.97,1.15-31.44c1.09-4.23,1.29-8.84,1.02-13.23 c-1.21-19.88-3.7-39.73-3.94-59.61c-0.62-50.99-0.29-102-0.34-153.01c0-1.66-0.07-3.35,0.18-4.98c1.91-12.43,4.96-24.78,5.62-37.26 c1.28-24.01,3.36-48.15-1.87-72.06c-0.27-1.25,0.73-3.34,1.8-4.23c9.73-8.05,9.78-8,20.31-1.11c0.7,0.46,1.39,1.05,2.17,1.23 c2.36,0.55,6.51,1.85,6.85,1.21c1.35-2.54,2.6-5.99,1.92-8.6c-2.38-9.22-2.43-17.78,3.82-25.59c2.88-3.6,5.07-8.11,8.66-10.71 c4.75-3.45,10.65-5.28,15.88-8.13c2.41-1.3,5.32-2.92,6.4-5.17C220.707,136.36,216.637,135.31,214.327,133.65z M111.437,192.42 c-46.57,0-84.32-37.75-84.32-84.32c0-46.56,37.75-84.31,84.32-84.31c46.56,0,84.31,37.75,84.31,84.31 C195.747,154.67,157.997,192.42,111.437,192.42z\",\n            \"M216.086,109.69c-0.08-0.48,0.02-1-0.02-1.5c-0.07-0.95,0.16-2.22-0.36-2.76 c-0.73-0.76-2.03-0.97-3.07-1.46c-0.63-0.3-1.24-0.67-1.83-1.05c-0.53-0.33-1.08-0.65-1.53-1.07c-0.8-0.74-1.92-0.81-2.57-2.09 c-1.13-2.22-0.49-4.7-1.75-6.94c-1-1.8,0.07-4.32-0.91-6.51c-0.3-0.67,0.89-2,1.37-3.04c0.65-1.39,2.31-2.03,2.57-3.75 c0.12-0.81,0.64-1.61,1.15-2.28c1.78-2.38,1.16-5.33-1.31-6.02c-1.49-0.42-2.55-1.16-3.72-2.06c-1.21-0.92-2.77-1.49-4.25-1.92 c-1.54-0.44-2.15-1.61-2.84-2.79c-0.59-1.02-1.09-2.11-1.76-3.08c-0.71-1.02-1.59-1.93-2.47-2.98c0.35-0.13,0.74-0.16,0.86-0.35 c1.27-2.02,3.25-2,5.28-1.95c1.15,0.02,2.4,0.21,3.44-0.16c1.28-0.45,2.71-1.16,3.49-2.19c1.24-1.65-0.42-4.48-2.46-4.74 c-1.98-0.25-3.94-0.58-5.91-0.89c-0.18-0.03-0.34-0.15-0.51-0.22c-0.77-0.33-1.52-0.72-2.32-0.95c-0.57-0.16-1.22,0.01-1.79-0.13 c-2.14-0.53-4.24-1.43-6.41-1.61c-1.69-0.14-2.87-0.66-4.02-1.8c-1.28-1.26-2.82-2.26-4.1-3.52c-0.3-0.29-0.23-1.24,0-1.73 c0.44-0.91,1.54-0.97,2.32-1.44c1.74-1.05,3.29-2.45,4.89-3.74c0.52-0.42,1.31-0.9,1.38-1.42c0.19-1.46,0.06-2.96,0.06-4.5 c-2.54-0.33-4.95-0.67-7.38-0.94c-0.89-0.1-1.81-0.01-2.71-0.03c-0.34-0.01-0.68-0.07-1.01-0.16c-0.89-0.23-1.76-0.69-2.64-0.7 c-4.02-0.08-8.04-0.03-12.07-0.05c-0.42,0-1.11,0-1.23-0.23c-1.12-2.09-3.02-1.96-4.92-1.88c-1.14,0.04-1.8-0.46-2.06-1.62 c-0.27-1.22-0.34-2.76-1.12-3.54c-1.17-1.16-0.68-2.45-1.05-3.64c-0.33-1.08-0.81-2.76-1.52-2.93c-2.01-0.5-4.21-0.87-6.23,0.31 c-0.93,0.54-1.88,1.05-2.87,1.44c-1.21,0.48-2.61,0.61-3.7,1.27c-1.77,1.08-3.79,0.89-5.3,0.34c-1.38-0.5-2.66-0.56-4-0.68 c-0.75-0.06-1.5-0.02-2.23-0.16c-0.94-0.18-1.87-0.77-2.76-0.69c-1.9,0.18-3.03-0.91-3.97-2.14c-1.29-1.72-2.14-3.79-3.53-5.41 c-1.31-1.54-1.8-3.71-3.74-4.73c-0.49-0.26-0.96-0.67-1.48-0.73c-0.94-0.12-1.92-0.14-2.85,0c-0.59,0.08-1.26,0.41-1.66,0.85 c-0.55,0.59-0.75,1.49-1.3,2.07c-1.44,1.55-2.99,3-4.48,4.5c-0.13,0.12-0.12,0.38-0.22,0.55c-0.46,0.75-0.9,1.52-1.42,2.22 c-0.5,0.67-1.12,1.24-1.62,1.91c-0.48,0.62-0.79,1.38-1.31,1.96c-1.39,1.54-3.54,0.54-5.35,1.73c-2.13,1.39-5.14,1.6-7.81,1.92 c-2.43,0.29-4.97,0.32-7.37-0.06c-1.44-0.23-2.84-1.32-4.04-2.3c-1.44-1.18-2.57-2.71-4.77-2.47c-0.61,0.06-1.27-0.43-2.23-0.78 c-0.27,0.91-0.79,1.91-0.83,2.92c-0.13,3.22-0.1,6.44-0.1,9.66c0,0.72-0.13,1.16-0.84,1.66c-1.79,1.24-3.39,2.74-5.12,4.08 c-0.33,0.26-0.9,0.26-1.36,0.33c-0.69,0.1-1.75-0.09-2.02,0.28c-0.84,1.21-1.97,0.84-3.05,0.96c-0.53,0.06-1.05,0.27-1.56,0.43 c-1.41,0.44-2.79,0.98-4.23,1.32c-1.4,0.33-3.13-0.6-4.16,1.16c-0.06,0.1-0.38,0.07-0.58,0.08c-1.15,0.07-2.3,0.17-3.45,0.2 c-2.18,0.07-2.94,0.91-2.47,2.97c0.12,0.55,0.55,1.09,0.97,1.51c0.85,0.82,1.83,1.51,2.67,2.35c1.09,1.09,2.1,2.27,2.99,3.24 c-0.99,1.5-1.8,2.84-2.73,4.09c-0.62,0.83-1.51,1.47-2.09,2.32c-1.11,1.6-2.09,3.3-3.12,4.96c-0.31,0.5-0.73,0.96-0.93,1.51 c-0.5,1.33-2.38,2.73-3.8,2.76c-1.15,0.03-2.49-0.24-3.4,0.26c-1.3,0.71-2.55,0.65-3.86,0.66c-2.14,0.01-4.03,0.57-5.36,2.35 c-0.3,0.41-0.32,1.02-0.56,1.48c-0.7,1.31-0.46,3.54,0.67,4.44c0.88,0.71,1.97,1.17,2.86,1.87c0.75,0.58,1.24,1.6,2.06,1.97 c1.26,0.57,1.85,1.38,1.54,2.64c-0.41,1.68,0.4,3.44-0.77,5.14c-0.67,1,0.34,2.85-1.26,3.76c-0.08,0.04-0.05,0.28-0.06,0.43 c-0.07,1.2-0.32,2.3-0.72,3.49c-0.69,2.08-1.06,4.24-2.44,6.06c-1.06,1.41-1.99,2.97-2.99,4.37c-1.47,2.05-3.91,3.38-5.93,5.04 c-0.77,0.63-1.44,1.4-2.26,1.94c-2.24,1.47-2.4,4.44-0.52,6.31c1.02,1.02,2.11,0.63,3.19,0.81c0.52,0.08,1.08,0.08,1.56,0.28 c1.37,0.58,2.71,1.21,4.05,1.87c0.66,0.33,1.54,0.63,1.86,1.2c0.54,0.99,0.73,2.18,1.06,3.29c0.11,0.38,0.15,0.8,0.33,1.14 c0.54,0.96,1.26,1.84,1.67,2.85c1.1,2.69,0.84,5.73,2.18,8.41c0.66,1.31,0.76,2.91,1.15,4.37c0.3,1.13,0.34,2.53,1.05,3.3 c0.9,0.97,0.77,1.95,0.91,3c0.09,0.63,0.37,1.24,0.6,1.95c-0.55,0.45-1.38,0.87-1.82,1.55c-0.96,1.47-1.52,3.18-2.98,4.34 c-1.33,1.06-0.8,2.64-0.82,4.03c-0.02,1.27,1.61,3.18,2.84,3.32c3.02,0.36,6.04,0.64,9.06,0.96c0.33,0.04,0.81,0.04,0.95,0.24 c1,1.45,2.98,2.44,2.17,4.75c-0.11,0.31,0.39,0.78,0.39,1.18c0.02,1.32,0.11,2.68-0.17,3.95c-0.22,1.01-1.1,1.86-1.41,2.87 c-0.54,1.71,0.41,3.02,1.55,4.15c1.28,1.27,1.94,1.24,3.66,0.26c0.96-0.55,1.99-1.12,3.06-1.32c1.94-0.35,3.1,1.4,4.64,2.13 c1.17,0.55,2.17,1.43,3.34,1.98c1.51,0.72,3.1,1.19,4.05,2.8c0.33,0.57,1.26,0.78,1.9,1.19c0.6,0.38,1.4,0.7,1.69,1.26 c0.51,1.03,0.69,2.23,1.05,3.34c0.14,0.4,0.35,0.83,0.65,1.11c0.69,0.66,0.82,3.4,0.13,4.02c-1.03,0.92-1,1.59,0.01,2.49 c0.82,0.73,1.45,1.79,2.39,2.23c0.75,0.36,1.85,0.05,2.78-0.07c0.31-0.04,0.58-0.53,0.9-0.55c3.1-0.24,5.89-1.34,8.58-2.84 c0.3-0.16,0.95-0.17,1.14,0.03c0.76,0.82,2.02,1.28,1.69,2.88c-0.33,1.67,0.2,3.38-1.17,4.99c-1.23,1.45-2.01,3.39-2.64,5.23 c-0.38,1.12-0.54,2.67-0.05,3.67c1.2,2.45,4.7,2.61,6.65,0.57c0.81-0.86,1.69-1.67,2.6-2.42c0.67-0.55,1.47-0.95,2.18-1.46 c0.32-0.22,0.58-0.52,0.85-0.79c0.92-0.91,1.79-1.88,3.23-1.91c0.07-0.01,0.12-0.25,0.21-0.36c0.47-0.55,0.87-1.23,1.45-1.62 c1.52-1.02,3.11-1.93,4.71-2.83c0.26-0.15,0.74-0.13,1.03,0.01c0.92,0.44,2.1,0.77,2.65,1.53c1.27,1.72,2.45,3.58,3.25,5.55 c0.83,2.06,3.35,3.48,5.17,2.57c1.67-0.83,2.63-2.52,4.53-3.18c1.48-0.51,2.62-2,3.93-3.03c0.29-0.22,0.64-0.44,0.98-0.49 c2.46-0.4,4.93-0.75,7.39-1.13c0.2-0.03,0.4-0.06,0.58-0.14c2.21-1.02,3.32-0.31,3.32,2.12c0,14.19-0.05,28.38,0.05,42.57 c0.01,1.86-0.96,2.7-2.18,3.62c-1.74,1.29-3.51,2.55-5.17,3.94c-1.03,0.85-1.73,2.36-2.86,2.77c-2.07,0.74-3.5,2.3-5.3,3.36 c-0.78,0.46-2.38,1.3-1.52,2.46c0.73,0.98,1.51,2.42,3.29,2.29c1.75-0.12,3.52-0.01,5.28,0.04c0.36,0.01,0.79,0.11,1.07,0.32 c0.62,0.47,1.08,1.3,1.76,1.51c2.45,0.76,2.94,2.75,3.4,4.84c0.09,0.38,0.22,0.9,0.49,1.05c1.71,0.98,1.74,2.53,1.65,4.2 c-0.06,1.3,0.03,2.61,0.03,3.92c0,29.84,0.04,59.67-0.06,89.5c-0.01,2.31,0.88,4.73-0.96,7.07c-0.87,1.09-0.54,3.2-0.94,4.86 c-0.58,2.45-0.57,4.95-2.05,7.23c-0.78,1.21-0.76,2.94-1.11,4.44c-0.34,1.49-0.68,2.98-1.03,4.46c-0.03,0.13-0.14,0.34-0.23,0.35 c-1.15,0.18-0.88,1.09-0.84,1.76c0.05,0.94-0.27,1.83,0.87,2.72c0.82,0.63,0.83,2.35,1.12,3.6c0.4,1.74,0.73,3.51,1.09,5.26 c0.03,0.15,0.05,0.32,0.13,0.42c1.29,1.52,1.66,3.35,1.96,5.25c0.2,1.27,0.59,2.51,0.92,3.76c0.03,0.12,0.2,0.2,0.26,0.33 c0.28,0.55,0.77,1.11,0.79,1.68c0.09,3.17,0.09,6.34,0.08,9.51c-0.01,53.22-0.02,106.45-0.08,159.68c0,1.51,0.78,3.34-1.06,4.47 c-0.08,0.05-0.06,0.29-0.07,0.43c-0.29,3.58-0.58,7.16-0.86,10.73c-0.32,4.15-0.63,8.3-0.97,12.45c-0.03,0.37-0.26,0.73-0.4,1.09 c-0.22,0.55-0.64,1.11-0.63,1.66c0.01,2.21,0.17,4.31,0.9,6.56c0.95,2.95,0.48,6.31,0.89,9.51c0.6,4.76,0.19,9.64,0.22,14.47 c0,0.5-0.1,1.11,0.14,1.48c1.42,2.19,0.48,4.57,0.54,6.84c0.04,1.47-0.44,2.98-0.84,4.43c-0.28,0.99-0.67,2.02-1.29,2.82 c-0.83,1.08-1.77,2.01-1.64,3.52c0.05,0.49,0.15,1.21-0.11,1.46c-1.13,1.09-0.65,2.44-0.83,3.69c-0.31,2.06,0.16,4.04-0.82,6.24 c-0.96,2.19-0.26,5.14-0.16,7.75c0.02,0.5,0.87,0.95,0.93,1.47c0.29,2.77-0.03,5.53,0.85,8.32c0.65,2.07,0.26,4.49,0.21,6.75 c-0.04,2.22,0.51,4.38,0.15,6.66c-0.41,2.56-0.2,5.21-0.29,7.83c-0.01,0.43-0.02,1.12-0.27,1.26c-1.4,0.77-2.83,1.57-4.34,2.04 c-1.7,0.53-3.51,0.72-5.26,1.07c-0.15,0.02-0.35,0.06-0.42,0.16c-1.05,1.6-2.96,1.06-4.42,1.69c-1.82,0.79-3.98,0.8-5.99,1.16 c-0.29,0.05-0.67,0.1-0.83,0.3c-1.07,1.37-2.9,1.4-4.18,1.54c-2.35,0.25-4.8-0.49-7.21-0.82c-0.14-0.02-0.32-0.1-0.39-0.21 c-1.13-1.76-2.78-0.72-4.19-0.71c-0.45,0-0.86,0.75-1.36,0.9c-1.49,0.44-3.02,0.74-4.53,1.14c-0.22,0.06-0.35,0.43-0.57,0.58 c-0.67,0.47-1.36,1.26-2.06,1.29c-3.56,0.13-7.14,0.07-10.71,0.04c-0.34,0-0.71-0.21-1.04-0.37c-0.54-0.26-1.05-0.56-1.58-0.84 c-0.82-0.43-1.69-0.79-2.43-1.32c-0.47-0.34-0.64-1.1-1.12-1.39c-1.87-1.14-3.1-2.75-4.11-4.66c-0.29-0.55-1.05-1.17-1.64-1.22 c-2.71-0.22-5.54-0.58-7.69,1.72c-0.83,0.9-1.8,1.06-2.92,1.04c-0.38,0-0.87,0.04-1.14,0.26c-1.57,1.29-3.5,1.51-5.38,1.82 c-2.39,0.39-4.78,0.67-7.17,1.02c-0.22,0.03-0.39,0.29-0.61,0.39c-1.11,0.5-2.2,1.26-3.35,1.41c-2.09,0.25-3.01,0.98-2.64,3.04 c0.19,1.07,0.64,2.49,1.43,2.95c1.21,0.72,2.83,0.7,4.26,1.06c1.65,0.43,3.28,0.93,4.92,1.42c1.01,0.3,2.01,0.63,3.03,0.92 c1.88,0.54,3.74,1.35,5.66,1.53c3.04,0.28,6.13,0.18,9.19,0.18c13.52,0.02,27.05,0,40.57,0.04c1.41,0.01,3.03-0.62,4.13,0.94 c0.1,0.14,0.48,0.07,0.73,0.09c5.48,0.4,11.03-0.61,16.46,0.99c1.95,0.58,4.05,0.68,6.11,1c0.07,1.26,0.61,2.47-0.7,3.3 c-0.85,0.54-1.65,1.22-2.57,1.58c-2.2,0.85-4.44,1.57-6.68,2.32c-0.99,0.34-2.02,0.59-3.01,0.94c-1.67,0.58-3.32,1.21-4.98,1.82 c-0.23,0.09-0.44,0.21-0.66,0.31c-0.53,0.24-1.04,0.64-1.58,0.69c-5.18,0.48-10.35-0.17-15.61,0.68 c-5.76,0.93-11.79-0.18-17.64,1.1c-0.82,0.18-1.73-0.09-2.55,0.08c-1.8,0.37-3.61,0.77-5.32,1.42c-0.58,0.21-1.08,1.13-1.26,1.82 c-0.66,2.45,1.02,5.29,4.03,5.07c1.83-0.13,3.72,0.54,5.59,0.87c0.12,0.02,0.22,0.18,0.34,0.24c0.72,0.31,1.43,0.85,2.17,0.88 c2.51,0.11,5.03,0.09,7.54,0.03c1.18-0.03,2.56,0.41,3.33-1.08c0.07-0.15,0.56-0.11,0.86-0.11c5.22,0.01,10.44,0.02,15.66,0.05 c0.34,0,0.79,0,1,0.19c1.32,1.25,2.86,1.82,4.67,1.79c1.63-0.02,3.26,0.01,4.6,1.25c0.06,0.99-0.12,1.83-1.41,1.95 c-0.23,0.02-0.46,0.31-0.66,0.5c-1.32,1.33-2.56,2.77-3.99,3.98c-1.06,0.89-2.34,2.07-3.56,2.12c-2.5,0.1-4.06,2.03-6.3,2.6 c-1.31,0.34-2.46,1.45-3.98,1.52c-0.29,0.01-0.67,0.07-0.83,0.26c-1.11,1.31-2.62,1.66-4.2,1.76c-1.8,0.12-3.76-0.26-5.37,0.33 c-1.58,0.59-3.07,0.54-4.61,0.59c-1.96,0.05-3.92,0.02-5.88,0c-0.39,0-0.79-0.07-1.16-0.17c-0.83-0.22-1.64-0.59-2.48-0.71 c-2.61-0.36-5.24-0.64-7.85-0.96c-0.15-0.02-0.38-0.06-0.41-0.14c-0.54-1.36-1.74-0.98-2.71-0.99c-4.02-0.06-8.04-0.04-12.07-0.05 c-0.4,0-0.81,0-1.19-0.08c-1.18-0.25-2.34-0.57-3.51-0.81c-0.49-0.09-1.19,0.17-1.47-0.09c-1.49-1.32-3.25-0.64-4.88-0.82 c-0.45-0.05-1.2,0.06-1.3-0.14c-0.68-1.42-1.93-1.03-3.02-1.06c-2.06-0.05-5.27-2.58-6.24-4.39c-0.87-1.64-2.23-3.05-3.48-4.46 c-1.04-1.17-2.36-2.08-3.33-3.29c-0.87-1.07-1.16-2.84-2.21-3.49c-1.93-1.2-2.76-3.77-5.53-3.92c-0.11,0.08-0.58,0.28-0.75,0.63 c-0.28,0.54-0.63,1.29-0.45,1.77c0.48,1.3,1.57,2.45,1.78,3.76c0.36,2.21,2.01,3.73,2.59,5.88c0.45,1.67,1.26,3.48,2.41,5.08 c1.14,1.56,1.41,3.74,2.13,5.63c0.43,1.16,0.89,2.33,1.51,3.4c0.36,0.63,1.01,1.13,1.61,1.59c0.67,0.5,1.52,0.79,2.13,1.35 c0.78,0.7,1.25,1.83,2.11,2.32c1.81,1.02,4.06,1.07,5.77,2.38c0.07,0.06,0.21,0.06,0.3,0.04c2.43-0.53,4.36,1.08,6.06,2.12 c2,1.24,4.52,2.12,5.74,4.61c0.47,0.95,1.67,1.55,3.12,0.54c0.9-0.62,2.18-0.69,3.18-1.48c1.15-0.91,2.59-1.45,3.89-2.16 c0.34-0.18,0.65-0.55,0.97-0.56c2.21-0.07,4.53-0.5,6.59,0.05c1.65,0.44,3.29,0.44,4.91,0.75c3.34,0.63,6.68,1.23,10.11,1.01 c0.19-0.02,0.47-0.04,0.58,0.07c1.69,1.69,4.5-0.27,6.04,1.88c2.64-0.06,5.21,0.33,7.75,1.05c1.35,0.38,2.74,0.65,4.1,0.98 c0.13,0.03,0.21,0.2,0.34,0.27c1.18,0.58,2.33,1.28,3.57,1.7c1.36,0.47,2.81,0.68,4.22,1.01c0.12,0.03,0.22,0.16,0.34,0.24 c0.93,0.58,1.82,1.22,2.8,1.71c1.03,0.51,2.68,0.57,3.1,1.35c1.03,1.92,2.93,2.76,4.5,3.64c1.3,0.73,3.45,0.26,5.09-0.18 c0.46-0.12,0.44-2.05,0.6-3.16c0.06-0.34-0.03-0.71,0.02-1.05c0.29-1.88-1.12-3-1.84-4.46c-0.7-1.42-2.24-1.12-3.03-2.13 c-0.57-0.71-1.11-1.52-1.85-1.99c-1.99-1.26-4.2-2.07-5.98-3.79c-1.42-1.38-3.36-2.21-5.05-3.33c-0.53-0.36-0.97-0.86-1.6-1.43 c1.59-0.28,2.79-0.38,3.91-0.73c1.33-0.42,2.56-1.15,3.88-1.59c1.23-0.41,2.52-0.08,3.86-0.73c1.07-0.51,2.44-1.28,3.54-1.27 c4.9,0.06,9.87-1.42,14.74,0.77c1.85,0.84,4.1,0.89,6.19,1.08c2.2,0.2,4.42,0.08,6.63,0.19c1.39,0.07,2.87-0.36,3.15-1.52 c0.35-1.43-0.11-3.07-0.31-4.61c-0.05-0.35-0.43-0.86-0.75-0.94c-1.89-0.45-3.03-2.61-5.28-2.29c-0.29,0.05-0.76-0.44-0.98-0.79 c-0.55-0.87-1.04-1.78-1.46-2.72c-0.72-1.58-1.07-3.47-2.15-4.72c-1.03-1.21-1.01-2.65-1.64-3.91c-0.95-1.9,1.19-4.82,3.55-5.51 c1.64-0.47,2.56-1.92,3.11-3.23c0.56-1.3,1.48-2.16,2.47-2.65c1.95-1,3.13-2.23,2.85-4.48c-0.15-1.19,0.35-1.95,1.04-2.38 c1,0.29,1.75,0.57,2.54,0.71c0.68,0.12,1.65-0.21,2.05,0.15c1.42,1.25,3.06,0.73,4.59,0.79c1.64,0.07,2.82-1.17,2.72-2.83 c-0.14-2.32,0.71-4.76-1.17-6.9c-1.23-1.41-2.02-3.2-3.05-4.79c-0.22-0.34-0.72-0.52-0.87-0.87c-0.46-1.06-0.77-2.19-1.23-3.25 c-0.29-0.71-0.68-1.39-1.13-2.01c-1.1-1.56-2.04-3.14-1.53-5.37c1.49-0.04,2.78-0.09,3.89-1.32c1.1-1.21,1.2-2.49,1.25-3.92 c0.01-0.23,0.11-0.48,0.24-0.67c1.24-1.84,0.48-3.88,0.58-5.83c0.01-0.15-0.29-0.35-0.49-0.46c-1-0.56-2.03-1.05-3-1.64 c-0.5-0.3-0.84-0.89-1.35-1.13c-1-0.46-2.14-0.66-3.09-1.2c-0.51-0.28-0.94-1-1.07-1.59c-0.43-2.04-0.69-4.12-1.08-6.17 c-0.08-0.39-0.55-0.7-0.63-1.08c-0.19-0.93-0.56-2-0.26-2.78c0.2-0.56,1.73-1.24,2.07-1c1.34,0.91,2.76,0.55,4.13,0.75 c0.3,0.04,0.57,0.28,0.87,0.41c0.5,0.23,0.99,0.58,1.52,0.65c3.46,0.48,6.98-0.42,10.48,0.84c1.88,0.67,4.18,0.23,6.29,0.19 c0.47-0.01,1.28-0.37,1.34-0.69c0.2-1.06,0.29-2.2,0.09-3.25c-0.08-0.41-1.04-0.65-1.59-1c-0.18-0.12-0.3-0.34-0.49-0.47 c-1.59-1.12-3.47-1.86-4.58-3.59c-0.05-0.07-0.2-0.06-0.28-0.11c-0.71-0.43-1.45-0.81-2.11-1.31c-0.61-0.47-1.1-1.11-1.72-1.57 c-0.68-0.5-1.49-0.82-2.16-1.33c-0.65-0.49-1.14-1.21-1.81-1.67c-1.57-1.08-3.21-2.06-4.83-3.08c-0.55-0.35-1.1-0.73-1.69-1.01 c-0.82-0.38-1.8-0.53-2.49-1.06c-0.53-0.41-0.95-1.22-1.04-1.91c-0.29-2.18,0.44-4.47-0.96-6.53c-0.53-0.79-1.11-1.77-1.11-2.66 c-0.06-20.73-0.05-41.46-0.03-62.18c0-0.42,0.15-0.86,0.31-1.25c0.21-0.5,0.64-0.94,0.74-1.45c0.29-1.62,0.18-3.22,0.78-4.9 c0.83-2.34,0.88-4.99,1.09-7.52c0.17-1.95,0.05-3.92,0.11-5.88c0.01-0.47,0.2-0.93,0.37-1.38c0.2-0.51,0.68-0.99,0.69-1.49 c0.05-4.08,0.04-8.15,0.01-12.23c0-0.48-0.04-1.25-0.32-1.39c-0.99-0.49-0.7-1.33-0.78-2.08c-0.35-3.05-0.31-6.21-1.2-9.09 c-0.7-2.29-0.69-4.49-0.62-6.72c0.12-3.64-0.46-7.31,0.67-10.95c0.71-2.26,0.78-4.71,1.14-7.07c0.04-0.24,0.05-0.53,0.19-0.72 c1.27-1.67,1.08-3.79,1.66-5.67c0.44-1.39,0.1-3,0.26-4.5c0.1-0.93,0.2-2.16,0.8-2.68c1.42-1.23,1.05-2.71,1.11-4.18 c0.02-0.75,0.08-1.5,0.08-2.26c0-7.94,0-15.89-0.03-23.84c0-0.4-0.25-0.81-0.42-1.2c-0.21-0.5-0.6-0.97-0.64-1.48 c-0.1-1.3,0.06-2.63-0.09-3.92c-0.13-1.03-0.9-2.06-0.78-3.02c0.31-2.47-0.9-4.62-1.12-6.95c-0.02-0.22-0.23-0.41-0.33-0.63 c-0.25-0.52-0.62-1.03-0.7-1.58c-0.19-1.34,0.04-2.8-0.39-4.03c-0.8-2.24-1.62-4.42-1.62-6.84c0.01-17.65,0.01-35.31,0.01-52.97 c0-0.35,0.01-0.7,0-1.05c-0.02-1.05,0.41-1.5,1.54-1.48c2.96,0.07,5.93,0.14,8.89-0.02c1.36-0.08,2.79-0.5,3.99-1.12 c0.75-0.39,1.46-1.39,1.62-2.23c0.27-1.36,0.17-2.82,0.01-4.2c-0.06-0.53-0.66-1.12-1.16-1.45c-0.95-0.62-2-1.08-3.02-1.6 c-0.99-0.5-1.96-1.06-2.98-1.47c-1.78-0.73-3.61-1.35-5.4-2.06c-0.43-0.18-0.73-0.7-1.16-0.84c-2.24-0.68-2.37-0.81-2.37-3.03 c0.01-25.61,0-51.21,0.02-76.82c0-3.07,0.14-6.13,0.21-9.2c0.01-0.24,0.02-0.5,0.07-0.74c0.27-1.22,0.63-2.42,0.81-3.66 c0.37-2.55,0.64-5.13,0.97-7.69c0.02-0.18,0.12-0.4,0.26-0.51c1.25-1.01,1.6-2.31,1.7-3.89c0.22-3.29,0.67-6.56,1.04-9.84 c0.02-0.18,0.11-0.47,0.23-0.51c1.12-0.39,0.81-1.36,0.9-2.16c0.05-0.55-0.08-1.13,0.06-1.65c0.48-1.75,1.32-3.45,1.53-5.23 c0.29-2.37,0.65-4.96-0.01-7.16c-0.63-2.1-0.45-4.08-0.64-6.11c-0.06-0.75,0.14-1.67-0.22-2.22c-1.07-1.62-0.53-3.36-0.68-5.04 c-0.04-0.45,0-0.91,0-1.36c-0.04-11.77-0.07-23.54-0.12-35.32c0-0.74,0.31-1.64-0.76-2.05c-0.18-0.07-0.26-0.51-0.3-0.79 c-0.28-1.71-0.53-3.42-0.79-5.13c-0.02-0.14-0.04-0.34,0.04-0.43c0.85-1.09,1.42-2.52,3.18-2.48c0.48,0.01,1.01-0.1,1.45-0.3 c1.93-0.87,3.83-1.82,5.76-2.7c0.91-0.41,1.88-0.69,2.8-1.06c0.79-0.32,1.87-0.46,2.28-1.06c1.04-1.51,2.94-0.65,4.08-1.75 c0.2-0.2,0.94-0.09,1.27,0.13c1.02,0.68,1.91,1.57,2.95,2.21c0.97,0.6,2.05,1.01,3.11,1.45c0.77,0.32,1.57,0.54,2.6,0.88 c0.08-0.06,0.43-0.5,0.88-0.68c1.99-0.8,2.28-1.19,2.32-3.33c0.02-0.8-0.16-2.05,0.24-2.3c1.05-0.65,0.8-1.53,0.84-2.37 c0.1-1.85,0.1-3.71,0.2-5.57c0.02-0.46,0.14-1,0.42-1.35c1.19-1.48,2.43-2.92,3.72-4.33c1.85-2.02,3.76-3.98,5.62-5.99 c1.2-1.3,2.41-2.58,3.51-3.96c0.91-1.15,2.34-1.82,2.73-3.48c0.22-0.96,1.04-1.77,1.58-2.66c1.01-1.68,2.08-3.34,2.99-5.07 c0.86-1.63,1.53-3.36,2.33-5.01c0.12-0.24,0.55-0.48,0.82-0.47c0.85,0.06,1.7,0.23,2.56,0.36c1.64-0.37,3.34-0.64,5.04-0.61 c2.2,0.04,4.18-0.16,5.25-2.55c-0.42-0.66-0.75-1.53-1.37-2.07c-1.26-1.13-2.64-2.08-2.54-4.07c0.02-0.43-0.29-0.97-0.6-1.32 c-0.98-1.09-1.88-2.23-2.27-3.68c-0.25-0.92-0.45-1.85-0.7-2.92c0.1-0.16,0.47-0.49,0.53-0.87c0.41-2.81,0.64-5.66,1.19-8.44 c0.36-1.78,1.14-3.48,1.81-5.19c0.13-0.33,0.58-0.58,0.92-0.78c1.21-0.7,2.72-1.11,3.58-2.1c0.87-1,1.89-1.43,2.93-2.05 C215.346,112.2,216.377,111.28,216.086,109.69z M111.437,192.42c-46.57,0-84.32-37.75-84.32-84.32c0-46.56,37.75-84.31,84.32-84.31 c46.56,0,84.31,37.75,84.31,84.31C195.747,154.67,157.997,192.42,111.437,192.42z\",\n            \"M220.041,157.85c-0.55-1.59-1.99-2.91-3.19-4.22c-1.44-1.55-3.06-2.93-4.54-4.44 c-0.94-0.97-2.09-1.91-2.57-3.1c-0.71-1.75-2.03-2.69-3.39-3.77c-0.82-0.65-1.45-1.6-2.05-2.48c-0.5-0.74-0.65-1.96-1.31-2.31 c-1.12-0.62-0.92-1.41-0.84-2.26c0.08-0.9-0.07-2.1,0.44-2.6c0.78-0.78,0.7-1.59,0.82-2.45c0.08-0.56-0.1-1.25,0.16-1.69 c1.35-2.35-0.12-5.35,1.81-7.52c0.27-4.36,0.77-8.72,0.74-13.07c-0.02-4.6-0.55-9.19-0.86-13.78c-0.02-0.23-0.04-0.6-0.18-0.67 c-1.2-0.58-0.74-1.69-0.88-2.62c-0.3-2.03-0.62-4.06-0.94-6.09c-0.03-0.17-0.16-0.32-0.24-0.49c-0.24-0.54-0.6-1.06-0.69-1.62 c-0.13-0.75,0.01-1.54-0.06-2.3c-0.14-1.56,0.39-3.22-0.79-4.65c-0.22-0.28-0.2-1.14,0.05-1.36c1.19-1.08,1.96-2.58,3.68-3.18 c0.9-0.32,1.87-1.42,2.11-2.35c0.36-1.38,0.09-2.92,0.09-4.59c-1.73,0-3.3,0.02-4.87,0c-0.36-0.01-0.98-0.02-1.05-0.2 c-0.46-1.09-1.43-0.72-2.21-0.93c-0.6-0.16-1.47-0.3-1.69-0.73c-0.65-1.26-1.95-1.91-2.51-3.35c-0.54-1.39-1.94-2.48-3.06-3.6 c-1.57-1.58-3.29-3.01-4.82-4.63c-0.9-0.96-1.45-2.23-2.3-3.24c-1.37-1.63-3.13-2.84-3.93-5.04c-0.75-2.04-0.93-2.28,0.91-3.34 c1.13-0.65,2.46-1.26,3.14-2.27c0.61-0.91,1.38-1.33,2.18-1.58c1.22-0.36,1.87-1.27,2.04-2.22c0.26-1.52,0.07-3.12,0.07-4.65 c-0.7-0.18-1.53-0.16-1.73-0.5c-0.54-0.93-1.34-0.88-2.1-0.8c-2.26,0.22-4.43-0.1-6.81,0.91c-2.5,1.06-5.7,0.06-8.58,0.97 c-1.39,0.44-3.04,0.01-4.63-0.49c-1.72-0.54-3.23-1.39-4.81-2.12c-0.53-0.24-0.86-0.92-1.39-1.21c-1.65-0.91-3.34-1.75-5.03-2.58 c-1.13-0.55-2.27-1.12-3.46-1.5c-1.3-0.42-2.67-0.64-4.01-0.96c-0.12-0.03-0.2-0.18-0.32-0.25c-0.49-0.28-0.96-0.69-1.5-0.81 c-1.58-0.38-3.18-0.64-4.78-0.96c-0.14-0.02-0.31-0.04-0.39-0.13c-1.28-1.53-3.33-0.93-4.88-1.77c-0.54-0.3-1.16-0.25-1.76-0.8 c-0.74-0.69-1.95-0.86-2.95-1.27c-0.31-0.13-0.57-0.36-0.88-0.52c-1.82-0.91-2.44-3.41-4.85-3.63c-0.37-0.03-0.84-0.97-0.93-1.54 c-0.16-0.97-0.04-2-0.04-2.77c-1.29-1.4-2.71-1.66-4.31-1.5c-1.04,0.1-3.26,1.89-3.77,2.79c-0.68,1.21-0.49,3.06-2.5,3.4 c-0.54,0.1-1.02,0.85-1.41,1.39c-0.58,0.82-1.24,1.27-2.3,1.24c-2.01-0.06-4.03-0.04-6.04,0.02c-0.52,0.02-1.03,0.31-1.53,0.51 c-0.4,0.16-0.75,0.5-1.15,0.55c-3.09,0.4-6.2,0.74-9.3,1.11c-0.14,0.02-0.31,0.01-0.41,0.1c-1.74,1.46-4.05,1.26-6.01,1.52 c-2.02,0.27-3.57,1.32-5.4,1.82c-1.27,0.35-2.45,1.02-3.69,1.51c-2.06,0.82-4.13,1.61-6.2,2.4c-0.64,0.24-1.35,0.37-1.91,0.73 c-1.46,0.94-2.83,2.01-4.28,2.97c-1.07,0.72-2.2,1.37-3.31,2.04c-0.98,0.59-1.98,1.14-2.94,1.76c-0.49,0.32-0.89,0.79-1.38,1.11 c-0.56,0.35-1.41,0.47-1.71,0.95c-0.49,0.79-1.09,1.06-1.92,1.26c-0.56,0.14-1.09,0.61-1.52,1.04c-0.91,0.91-1.7,1.92-2.6,2.84 c-1.47,1.52-3.01,2.96-4.47,4.49c-1.04,1.1-1.94,2.34-2.99,3.42c-1.05,1.07-2.23,2.02-3.34,3.03c-0.16,0.15-0.42,0.34-0.42,0.49 c0.1,1.74-2.06,1.97-2.29,3.47c-1.95,0.29-1.67,2.42-2.79,3.49c-1.16,1.11-1.61,2.94-2.39,4.45c-0.36,0.68-0.62,1.51-1.17,1.98 c-0.96,0.81-1.45,1.74-1.52,2.96c-0.02,0.38-0.02,0.81-0.2,1.11c-0.84,1.45-1.74,2.87-2.62,4.29c-0.4,0.63-1.03,1.22-1.16,1.9 c-0.25,1.29-0.94,1.6-2.14,1.73c-2.53,0.27-5.17-0.85-7.62,0.97c-0.78,0.57-1.29,0.9-1.28,1.82c0.02,1.15,0.04,2.3,0.09,3.45 c0.01,0.28,0.02,0.64,0.18,0.82c0.91,1.01,1.87,1.99,2.82,2.97c0.3,0.31,0.66,0.56,0.92,0.89c0.54,0.7,0.91,1.58,1.57,2.11 c1.32,1.05,1.76,2.7,0.91,4.16c-0.19,0.32-0.31,0.7-0.37,1.07c-0.33,2.36-0.19,4.68-0.93,7.12c-1.04,3.39-0.76,7.19-0.99,10.82 c-0.084,1.3-0.028,2.609-0.004,3.91c0.006,0.347,0.042,0.913,0.113,1.253c0.215,1.031,0.607,2.038,0.712,3.077 c0.13,1.18,0.02,2.39,0.08,3.59c0.02,0.39,0.24,0.77,0.39,1.15c0.19,0.5,0.5,0.97,0.6,1.49c0.36,1.88,0.66,3.78,0.98,5.67 c0.02,0.14,0.04,0.36,0.12,0.39c1.31,0.58,0.79,1.78,0.95,2.74c0.08,0.47-0.04,1.09,0.21,1.4c1.07,1.27,0.76,2.98,1.64,4.41 c0.92,1.49,0.83,3.53,1.95,5.15c1.07,1.53,1.11,3.52,2.09,5.23c1.14,2,1.76,4.33,3.12,6.29c0.99,1.43,1.86,2.94,2.81,4.39 c0.43,0.64,1.05,1.17,1.38,1.86c0.32,0.66,0.52,1.46,0.46,2.17c-0.02,0.21-1.11,0.37-1.72,0.47c-0.89,0.14-2.03-0.1-2.64,0.37 c-1.27,0.99-2.58,1.6-4.16,1.75c-0.27,0.02-0.66,0.12-0.78,0.31c-0.74,1.2-2.18,0.94-3.19,1.62c-0.9,0.6-1.97,0.95-2.95,1.45 c-0.13,0.06-0.15,0.33-0.22,0.5c-0.29,0.61-0.57,1.22-0.88,1.88c0.22,0.14,0.66,0.26,0.73,0.49c0.44,1.56,1.62,1.71,2.95,1.69 c6-0.1,12,0.28,17.98-0.6c2.02-0.3,2.35-0.04,2.27,1.87c-0.01,0.33,0.33,0.65,0.42,1c0.28,1.08,0.93,2.18-0.3,3.18 c-0.72,0.59-1.28,1.39-1.97,2.04c-0.57,0.55-1.16,1.13-1.84,1.51c-1.53,0.85-3.29,1.33-4.37,2.87c-0.11,0.16-0.38,0.21-0.57,0.32 c-1.53,0.89-3.3,1.54-4.54,2.74c-1.67,1.63-4.03,1.83-5.72,3.3c-0.62,0.53-1.4,0.9-2.1,1.34c-0.35,0.22-0.68,0.57-1.05,0.64 c-1.67,0.33-2.61,1.81-2.12,3.47c0.38,1.29,2.05,1.63,3.29,1.08c1.5-0.67,2.83-2,4.72-1.6c0.23,0.05,0.48-0.03,0.71,0.01 c3.29,0.59,6.38-0.81,9.6-0.9c0.14,0,0.37-0.02,0.4-0.09c0.59-1.47,1.9-0.82,2.92-1.07c1.08-0.27,2.31-0.48,3.12-1.14 c1.34-1.1,3.01-1.42,4.43-1.52c2.07-0.14,3.55-1.64,5.54-1.71c0.53-0.02,1.04-0.3,1.55-0.46c0.45-0.14,0.92-0.22,1.33-0.43 c0.95-0.49,1.87-1.48,2.8-1.47c2.17,0.03,4.33,0.51,6.5,0.83c0.1,0.02,0.16,0.24,0.27,0.29c0.56,0.28,1.11,0.61,1.7,0.78 c1.28,0.37,2.98,0.25,3.8,1.06c1.41,1.37,3.24,0.88,4.73,1.73c0.92,0.53,2.42-0.25,3.25,1.05c0.11,0.17,0.55,0.21,0.82,0.18 c3.28-0.45,5.4,2.03,8.05,3.18c1.02,0.44,1.9,1.2,2.94,1.6c2.28,0.87,4.77,0.75,7.12,1.85c2.1,0.99,4.76,1.09,7.16,1.03 c6.72-0.19,13.49,0.95,20.17-0.71c1.13-0.28,2.39-0.08,3.58-0.17c0.39-0.02,0.78-0.21,1.15-0.37c0.47-0.21,0.91-0.6,1.39-0.67 c1.14-0.15,2.49,0.21,3.39-0.3c1.52-0.84,2.91-0.42,4.47-0.47c0.03,0.81,0.09,1.47,0.09,2.13v170.39c0,1.92,0.01,3.84-0.01,5.76 c0,0.42,0.03,1.13-0.17,1.22c-1.48,0.66-0.88,1.94-0.93,2.97c-0.1,1.67-0.15,3.36-0.02,5.03c0.14,1.95-0.76,4.1,1,5.79 c0.14,0.13,0.07,0.46,0.13,0.69c0.32,1.16,0.64,2.31,1,3.45c0.05,0.18,0.32,0.33,0.52,0.42c1.35,0.57,1.68,1.45,1.02,2.81 c-0.14,0.29-0.42,0.71-0.31,0.88c1.11,1.81,0.69,3.83,0.63,5.73c-0.1,2.98-0.59,5.94-0.76,8.93c-0.14,2.43-0.03,4.89-0.08,7.33 c-0.01,0.6,0.23,1.41-0.8,1.57c-0.12,0.02-0.28,0.37-0.29,0.57c-0.16,3.08-0.36,6.15-0.72,9.24c-0.59,4.97-0.21,10.05-0.21,15.09 c0,44.18,0.01,88.36,0,132.54c0,6.23-0.02,12.47-0.12,18.7c-0.03,1.37,0.13,2.67-0.79,4.12c-0.92,1.43-0.93,3.56-1.02,5.39 c-0.16,3.11-0.07,6.24-0.11,9.36c-0.01,0.51-0.02,1.4-0.24,1.47c-1.21,0.4-0.8,1.35-0.89,2.13c-0.08,0.62-0.03,1.28-0.26,1.84 c-1.03,2.54-0.86,5.31-0.25,7.71c0.44,1.74,0.41,3.39,0.61,5.08c0.09,0.71-0.17,1.75,0.22,2.08c1.12,0.97,0.85,2.16,0.86,3.3 c0.05,10.08,0.08,20.15,0.07,30.22c0,1.21,0.33,2.59-1.03,3.45c-0.18,0.11-0.18,0.53-0.24,0.8c-0.3,1.45-0.59,2.91-0.92,4.36 c-0.04,0.18-0.32,0.29-0.45,0.47c-0.23,0.34-0.53,0.68-0.61,1.06c-0.36,1.69-0.64,3.38-0.96,5.08c-0.02,0.13-0.03,0.36-0.11,0.39 c-1.37,0.57-0.82,1.77-0.87,2.73c-0.07,1.48,0.09,2.98-0.06,4.45c-0.07,0.64-0.56,1.58-1.07,1.74c-1.53,0.48-3.39-0.22-4.66,1.28 c-6.11,0.05-12.2-0.04-18.29,0.83c-3.57,0.51-7.27,0.09-10.91,0.11c-0.52,0-1.34-0.08-1.52,0.2c-0.88,1.4-2.2,0.79-3.34,0.85 c-1.68,0.09-3.36,0.01-5.03,0.03c-2.22,0.03-2.87,0.61-2.88,2.52c-0.01,1.74,1.56,3.66,3.06,3.67c2.44,0.02,4.89-0.03,7.33,0.03 c0.54,0.01,1.1,0.29,1.59,0.56c0.66,0.35,1.23,1.13,1.88,1.17c2.77,0.19,5.5,0.3,8.27,0.8c3.4,0.62,6.97,0.26,10.46,0.39 c1.31,0.04,2.77-0.51,3.81,0.86c0.13,0.16,0.55,0.11,0.83,0.16c1.98,0.31,3.97,0.57,5.93,0.94c1.09,0.21,2.13,0.61,3.19,0.93 c0.13,0.04,0.23,0.15,0.35,0.21c0.62,0.31,1.25,0.59,1.87,0.9c0.71,0.37,1.79,0.59,2.05,1.17c0.56,1.23,0.85,2.64,0.96,4.01 c0.19,2.53,0.15,5.07,0.25,7.61c0.01,0.38,0.22,0.77,0.39,1.12c0.21,0.43,0.67,0.83,0.68,1.24c0.06,2.54,0.03,5.08,0.03,8.02 c-1.66,0.18-3.24,0.45-4.82,0.5c-2.92,0.07-5.85,0-8.77,0.03c-0.79,0-1.59,0.13-2.49,0.22c0.04,1.62-0.73,3.04,0.83,4.49 c1.37,1.26,2.42,2.7,4.52,2.55c0.429-0.031,0.861,0.057,1.262,0.211c2.119,0.81,4.149,1.889,6.518,1.859 c2.647-0.022,3.007,0.673,2.932,3.776c-0.017,0.708,0.025,1.415,0.061,2.122c0.065,1.295-0.44,1.831-1.823,1.812 c-3.69-0.07-7.38-0.03-11.07,0c-0.56,0.01-1.42-0.02-1.62,0.29c-0.74,1.16-1.8,0.84-2.78,0.84c-2.78,0.02-5.56,0.01-8.34,0.01 c-2.64,0-5.27,0.06-7.9-0.01c-1.15-0.03-2.08,0.55-2.33,1.39c-0.7,2.4,0.27,5.56,3.59,5.63c1.2,0.02,2.77-0.38,3.51,0.22 c1.4,1.15,2.84,0.75,4.28,0.95c1.97,0.27,3.93,0.57,5.9,0.89c0.17,0.03,0.3,0.3,0.46,0.45c0.91,0.82,1.76,1.71,3.21,1.47 c0.49-0.09,1.07,0.16,1.57,0.35c0.51,0.19,0.95,0.66,1.45,0.73c3.2,0.43,6.4,0.78,9.69,1.16c0.04,0.17,0.13,0.39,0.14,0.62 c0.03,1.82,0.03,3.65,0.06,5.47c0.01,0.76-0.1,1.57,0.11,2.28c0.5,1.64,0.12,2.28-1.61,2.28c-4.12,0-8.24-0.01-12.36,0.02 c-0.7,0.01-1.77,0-2.02,0.4c-0.59,0.96-1.36,0.7-2.11,0.73c-1.81,0.07-3.64,0.04-5.44,0.19c-1.13,0.1-2.23,0.64-3.35,0.64 c-8.67,0.06-17.35,0.03-26.02,0.05c-0.66,0-1.71-0.04-1.89,0.3c-0.55,1.03-1.38,0.79-2.18,0.88c-1.31,0.17-2.07,1-2.12,2.29 c-0.1,2.71,1.38,4.42,4.05,4.64c0.66,0.06,1.34,0.06,2.01,0.06c11.59,0,23.19-0.04,34.79,0.04c2.11,0.01,4.23,0.53,6.34,0.84 c0.16,0.02,0.3,0.17,0.46,0.26c0.46,0.24,0.9,0.61,1.38,0.7c2.05,0.38,4.12,0.68,6.18,1.02c0.17,0.02,0.32,0.14,0.49,0.22 c0.59,0.27,1.16,0.71,1.77,0.77c1.78,0.18,2.26,0.55,2.18,2.39c-0.13,2.89,0.3,5.79-0.56,8.69c-0.54,1.82,0.44,4.02-1.28,5.61 c-1.07,0.99-1.03,2.72-2.45,3.52c-0.6,0.33-1.11,0.94-1.49,1.53c-0.84,1.31-1.52,2.72-2.37,4.02c-0.39,0.59-1.08,0.97-1.53,1.53 c-0.82,1.05-1.77,2.07-2.29,3.27c-0.73,1.7,0.72,3.6,2.56,3.61c1.2,0,2.39-0.07,3.59-0.14c0.28-0.01,0.76-0.06,0.79-0.18 c0.37-1.48,1.9-1.22,2.79-1.6c1.47-0.63,2.91-1.2,4.18-2.2c0.6-0.47,1.56-0.65,1.91-1.24c0.65-1.1,0.98-2.39,1.44-3.6 c0.17-0.43,0.37-0.84,0.5-1.28c0.4-1.41,0.82-2.81,1.14-4.24c0.15-0.69,0.22-1.46,0.08-2.14c-0.28-1.36,0.93-1.72,1.44-2.55 c0.84-1.38,1.53-1.33,2.36-0.08c0.04,0.06,0.18,0.09,0.27,0.09h5.12c-0.27-2.27,0.54-4.2-0.94-6.39c-1.18-1.72-2.35-3.95-2.25-6.37 c0.02-0.28-0.07-0.57-0.13-0.85c-0.31-1.36-0.62-2.72-0.98-4.33c4.5,0,8.43-0.01,12.35,0.02c0.27,0,0.59,0.24,0.78,0.46 c0.82,0.96,1.75,1.44,3.09,1.4c2.73-0.08,5.46,0.06,8.19,0.06c14.24,0.01,28.47,0,42.7,0c0.67,0,1.35,0.02,2.01-0.07 c0.32-0.05,0.75-0.28,0.88-0.55c0.69-1.38,1.24-2.78,1.07-4.42c-0.22-2-0.91-2.79-2.91-2.81c-2.59-0.03-5.17,0-7.76-0.03 c-0.4,0-0.82-0.09-1.21-0.22c-0.79-0.28-1.56-0.86-2.35-0.87c-4.08-0.1-8.15-0.05-12.22-0.06c-0.39,0-0.91,0.14-1.13-0.05 c-1.49-1.3-3.27-0.63-4.92-0.82c-1.42-0.16-3.03,0.59-4.17-0.93c-0.17-0.22-0.72-0.18-1.1-0.18c-1.29-0.03-2.58-0.02-3.86-0.03 c-0.63,0-1.49,0.23-1.83-0.09c-1.49-1.41-3.58-0.43-5.29-1.62c-1.47-1.03-3.79-0.13-5.71-1.05c-1.26-0.6-2.87,0.1-4.29-1.07 c-1.64-1.35-3.9-1.12-5.98-1.07c-1.17,0.02-1.96-0.78-2.01-1.96c-0.02-0.61,0-1.22,0-1.93c0.7-0.04,1.27-0.05,1.83-0.12 c0.31-0.04,0.62-0.16,0.9-0.3c0.48-0.24,0.93-0.73,1.42-0.78c3.66-0.32,7.33-0.56,10.99-0.82c0.05-0.01,0.1-0.01,0.15-0.01 c1.17-0.12,2.41-1.19,2.51-2.35c0.1-1.23,0.02-2.47,0.02-3.7c-1.73-0.36-3.3-0.9-4.9-0.98c-3.01-0.13-6.03,0-9.05,0.03 c-0.43,0-0.99-0.06-1.25,0.17c-1.07,0.95-2.32,0.59-3.51,0.66c-1.57,0.08-2.62-0.97-2.97-2.16c-0.34-1.18-0.19-2.67,0.24-3.85 c0.41-1.13,3.21-1.2,4.42-0.44c0.97,0.61,2.01,1.16,3.09,1.52c0.79,0.26,1.7,0.21,2.56,0.22c2.42,0.05,3.28-0.79,3.32-3.21 c0.02-1.15,0.11-2.31-0.02-3.45c-0.11-0.94-0.49-1.85-0.77-2.77c-0.35-1.1-0.72-2.18-1.14-3.45c0.69-0.05,0.96-0.09,1.24-0.09 c4.31-0.08,8.62-0.14,12.93-0.23c0.51-0.01,1.03-0.12,1.52-0.26c0.68-0.19,1.33-0.66,1.99-0.67c6.85-0.05,13.71-0.02,20.56-0.04 c0.71,0,1.61,0.13,2.1-0.23c1.18-0.87,2.44-0.56,3.67-0.62c1.29-0.05,2.6,0.05,3.87-0.13c0.76-0.11,1.42-0.83,2.18-0.93 c2.31-0.3,4.64,0.04,6.98-0.78c1.36-0.48,1.89-0.92,1.89-2.21c-0.01-1.05,0-2.09,0-3.07c-1.98-0.4-3.74-0.82-5.52-1.07 c-1.03-0.15-2.1-0.02-3.15-0.04c-0.33,0-0.87,0.04-0.95-0.13c-0.68-1.28-1.88-0.93-2.9-0.94c-4.36-0.05-8.72-0.02-13.08-0.03 c-0.42,0-0.84-0.06-1.25-0.16c-0.85-0.21-1.69-0.65-2.53-0.66c-3.74-0.08-7.48-0.04-11.22-0.07c-0.39,0-0.81-0.11-1.19-0.25 c-0.65-0.26-1.27-0.76-1.93-0.82c-1.661-0.151-3.335-0.019-5.007-0.073c-0.629-0.021-1.638-0.204-2.243-0.375 c-0.66-0.186-1.321-0.376-1.99-0.432c-1.57-0.13-3.16-0.02-4.74-0.05c-0.36,0-0.73-0.1-1.06-0.22c-0.75-0.28-1.46-0.83-2.21-0.87 c-2.29-0.12-4.62,0.13-6.89-0.13c-1-0.11-2.34-0.9-2.73-1.74c-0.4-0.87-0.13-2.37,0.4-3.27c0.641-1.095,1.837-1.878,2.791-2.802 c0.176-0.17,0.314-0.377,0.406-0.604c0.418-1.034,0.692-2.09,1.883-2.644c0.49-0.22,0.73-0.96,1.09-1.46 c0.58-0.8,1.01-1.83,1.79-2.34c1.34-0.86,2.7-1.8,4.39-2.05c0.94-0.14,2.19-0.41,2.65-1.07c0.83-1.21,2.16-0.98,3.16-1.63 c1.45-0.94,3.1-1.57,4.65-2.39c0.2-0.1,0.36-0.48,0.37-0.73c0.03-1.66,0.02-3.32,0.02-5.1c-1.93,0-3.73-0.2-5.46,0.05 c-1.77,0.26-3.54,0.82-5.19,1.53c-0.95,0.41-1.55,0.46-2.52,0.01c-1.67-0.76-3.21-2.09-5.31-1.62c-0.77,0.17-1.62,0.05-2.43,0.02 c-1.31-0.03-2.01-0.77-2.04-2.07c-0.03-1.1,0.24-2.39-0.24-3.26c-0.82-1.47-0.5-2.93-0.57-4.4c-0.07-1.35,0.57-1.94,1.93-1.96 c1.81-0.04,3.65,0.03,5.45-0.16c1.45-0.15,2.85-0.78,4.3-0.91c2.1-0.2,4.21-0.09,6.32-0.19c5.64-0.27,11.27-0.58,16.91-0.89 c0.29-0.01,0.59-0.18,0.87-0.31c0.46-0.22,0.9-0.66,1.36-0.68c2.87-0.12,5.74-0.18,8.61-0.21c1.86-0.01,3.49-0.46,4.72-1.98 c0.73-0.91,0.33-3.4-0.5-3.95c-1.54-1.02-3.21-0.87-4.89-0.91c-0.4-0.01-0.81-0.11-1.19-0.25c-0.76-0.27-1.48-0.83-2.23-0.85 c-3.214-0.102-6.428-0.038-9.642-0.061c-0.354-0.003-0.711-0.029-1.053-0.122c-0.859-0.234-1.683-0.63-2.544-0.697 c-1.48-0.12-2.97-0.01-4.46-0.04c-0.35,0-0.72-0.1-1.05-0.23c-0.7-0.28-1.36-0.79-2.07-0.87c-1.37-0.14-2.78,0.05-4.16-0.06 c-4.36-0.36-8.78,0.74-13.14-0.72c-1.01-0.34-1.88-0.84-2.7-1.35c-0.51-0.31-0.85-1.41-0.73-2.06c0.1-0.55,0.9-1.24,1.51-1.38 c1.69-0.39,3.52,0.23,5.11-1.2c0.68-0.6,1.73-0.79,2.03-1.87c0.46-1.59,0.03-3.2-1.02-4.15c-1.15-1.05-2.8-1.57-4.3-2.17 c-0.95-0.37-1.49-0.84-1.48-1.89c0.03-1.58,0.02-3.17-0.01-4.75c-0.01-0.57,0.08-1.42-0.24-1.65c-1.34-0.97-1.03-2.35-1.03-3.6 c-0.03-12.57-0.2-25.14,0.09-37.7c0.09-4.05-0.94-8.2,0.93-12.27c0.93-2.02,0.71-4.58,1.03-6.89c0.16-1.24-0.47-2.69,1-3.6 c0.14-0.09,0.09-0.54,0.09-0.83c0-4.12,0.01-8.25-0.02-12.37c0-0.41-0.16-0.82-0.29-1.22c-0.19-0.59-0.54-1.16-0.6-1.77 c-0.36-3.45-0.65-6.9-0.98-10.35c-0.03-0.31-0.24-0.6-0.38-0.89c-0.22-0.51-0.58-1-0.66-1.53c-0.24-1.69,0.47-3.51-0.81-5.07 c-0.19-0.23-0.19-0.89,0-1.1c1.13-1.21,0.66-2.69,0.81-4.07c0.03-0.33-0.01-0.85,0.17-0.94c1.18-0.61,0.78-1.71,0.9-2.64 c0.31-2.41,0.6-4.82,0.92-7.23c0.02-0.17,0.16-0.32,0.24-0.48c0.28-0.64,0.56-1.28,0.85-1.91c0.32-0.7,0.59-1.93,1-1.98 c1.63-0.19,2.43-1.42,3.43-2.35c1.11-1.02,1.99-2.29,3.34-3.88c1.88-0.27,4.43-0.62,6.97-0.99c0.244-0.035,0.634-0.127,0.864-0.214 c1.441-0.546,2.865-1.399,4.326-1.486c2.42-0.16,3.88-1.4,5.1-3.21c0.42-0.63,0.74-1.32,1.14-1.95c0.73-1.13,0.46-2.45-0.7-3.13 c-1.06-0.64-2.14-1.26-3.22-1.86c-0.79-0.43-1.66-0.72-2.39-1.23c-1.235-0.87-2.388-1.874-3.593-2.814 c-0.497-0.388-1.371-0.934-1.933-1.221c-0.971-0.497-1.952-0.974-2.934-1.465c-1-0.5-2.02-0.97-3.01-1.5 c-1.6-0.84-3.21-1.67-4.75-2.6c-0.37-0.23-0.71-0.84-0.72-1.29c-0.12-4.45-0.14-8.91-0.24-13.37c-0.01-0.63-0.24-1.27-0.47-1.87 c-0.4-1.04-1.01-2.01-1.27-3.07c-0.41-1.62-0.52-3.32-0.9-4.95c-0.19-0.8-1.03-1.52-1.04-2.28c-0.03-2.59-1.5-4.95-1.05-7.62 c0.23-1.35,0.07-2.78,0.01-4.17c-0.02-0.49-0.22-0.99-0.41-1.46c-0.18-0.47-0.63-0.91-0.64-1.37c-0.1-5.89-0.19-11.79-0.2-17.69 c-0.01-43.36-0.01-86.72,0.01-130.09c0-3.59,0.1-7.19,0.18-10.78c0-0.35,0.13-0.72,0.28-1.04c0.23-0.52,0.69-0.98,0.75-1.51 c0.14-1.13-0.01-2.31,0.15-3.44c0.21-1.41,0.24-3.06,1.01-4.12c1.23-1.69,0.93-3.66,1.6-5.44c0.86-2.26-0.54-4.93,1.14-7.29 c1.15-1.62,1.74-3.65,2.56-5.5c0.27-0.59,0.41-1.24,0.72-1.81c0.54-1.02,1.19-1.98,1.75-2.99c0.58-1.04,1.14-2.09,1.63-3.17 c0.67-1.52,2.22-1.88,3.43-2.66c0.92-0.59,2.03-0.89,3.04-1.36c1.51-0.69,3.02-1.38,4.5-2.12c0.5-0.26,1.18-0.59,1.33-1.04 c0.46-1.4,0.79-2.85,1.02-4.31c0.13-0.82-0.4-1.39-1.27-1.39c-3.26,0-6.51,0.03-9.77,0.06c-0.24,0-0.51,0-0.7,0.11 c-2.29,1.29-4.7,0.26-7.06,0.66c-0.05-0.53-0.1-0.81-0.1-1.1c0-8.53,0.13-17.08-0.04-25.61c-0.18-8.49,0.86-17.02-0.84-25.46 c-0.17-0.87-0.26-1.75-0.48-2.61c-0.13-0.53-0.56-0.99-0.63-1.51c-0.16-1.28,0.11-2.69-0.33-3.83c-0.93-2.37-0.35-3.87,2.08-4.61 c1.47-0.44,2.09-2.42,3.94-2.27c0.03,0,0.06-0.17,0.13-0.23c0.85-0.86,1.58-2.12,2.61-2.47c1.65-0.55,2.44-1.96,3.72-2.84 c0.98-0.67,1.86-1.5,2.82-2.2c0.62-0.46,1.31-0.81,1.96-1.23c0.66-0.42,1.31-0.86,1.95-1.31c0.27-0.2,0.49-0.46,0.76-0.67 c0.8-0.63,1.65-1.2,2.4-1.88c1.08-0.97,2.05-2.05,3.13-3.03c1.21-1.1,2.77-1.94,3.64-3.25c1.25-1.87,2.53-3.64,4.13-5.24 c1.47-1.47,2.88-3.08,3.97-4.84c0.72-1.18,2.37-1.65,2.4-3.29c0-0.06,0.14-0.14,0.22-0.16c1.32-0.35,2.61-0.84,3.95-1 c1.36-0.16,2.93-0.39,3.93,0.85c1.2,1.51,2.76,0.97,4.22,1.05c0.96,0.06,1.93,0.15,2.88,0.04c2.29-0.27,4.18,0.69,6.06,1.78 c0.68,0.4,1.4,0.75,2.09,1.13c0.92,0.51,1.83,1.03,2.85,1.6c0-0.01,0.07-0.17,0.19-0.27c0.97-0.86,2.45-1.54,2.79-2.6 C220.411,161.37,220.561,159.38,220.041,157.85z M111.437,192.42c-43.96,0-80.06-33.63-83.96-76.57c-0.27-0.72-0.3-1.53-0.18-2.4 c-0.12-1.77-0.18-3.55-0.18-5.35c0-46.56,37.75-84.31,84.32-84.31c46.56,0,84.31,37.75,84.31,84.31 C195.747,154.67,157.997,192.42,111.437,192.42z\",\n            \"M230.071,128.64c-0.15-1.08-0.7-2.04-2.08-2.04c-0.28,0-0.57-0.25-0.84-0.39 c-0.47-0.25-0.92-0.61-1.42-0.73c-1.45-0.36-2.93-0.61-4.39-0.92c-0.12-0.03-0.22-0.18-0.34-0.23c-0.69-0.31-1.37-0.67-2.09-0.89 c-0.5-0.15-1.09,0.01-1.58-0.15c-1.59-0.49-3.12-1.21-4.73-1.56c-0.84-0.18-1.56-0.25-1.9-1.1c-0.26-0.64-0.44-1.3-0.58-1.71 c-0.72-0.61-1.66-1-1.81-1.59c-0.47-1.97-0.84-4-0.92-6.01c-0.17-4.38-0.13-8.76-0.19-13.14c0-0.39,0.08-0.98-0.12-1.13 c-1.52-1.11-0.88-2.72-1.05-4.13c-0.09-0.72-0.04-1.47-0.24-2.16c-0.52-1.81-1.24-3.58-1.68-5.41c-0.47-1.99-0.71-4.03-1.05-6.05 c-0.02-0.15-0.03-0.35-0.12-0.41c-1.51-0.98-1.28-2.82-1.53-4.12c-0.44-2.32-1.97-4.02-2.61-6.16c-0.4-1.34-1.17-2.57-1.71-3.87 c-0.68-1.62-1.18-3.32-1.99-4.86c-0.81-1.54-2.08-2.85-2.84-4.42c-0.66-1.35-0.85-2.94-2.05-4.04c-0.1-0.09-0.05-0.51,0.07-0.66 c0.56-0.66,1.05-1.5,1.78-1.88c1.3-0.68,1.3-1.76,1.31-2.91c0.01-1.17-0.04-2.34,0.01-3.51c0.07-1.48-0.62-2.06-2.07-2.04 c-3.26,0.04-6.52,0.06-9.78-0.01c-0.7-0.02-1.46-0.33-2.05-0.72c-1.1-0.72-2.12-1.56-3.13-2.4c-0.54-0.45-0.96-1.03-1.48-1.5 c-0.43-0.39-0.99-0.65-1.4-1.06c-1.1-1.08-2.85-1.27-3.64-2.8c-0.26-0.51-0.8-0.93-1.31-1.26c-1.904-1.241-3.992-2.242-5.711-3.712 c-0.881-0.754-1.89-1.335-2.86-1.97c-0.607-0.397-1.054-1.111-1.699-1.348c-2.2-0.8-3.28-2.91-5.09-4.15 c-1.33-0.92-1.84-2.72-3.74-3.11c-0.83-0.18-1.88-1.09-2.14-1.89c-0.88-2.71-2.14-5.37-1.84-8.36c0.05-0.48,0.01-0.96,0.01-1.34 c-1.25-1.09-2.38-0.97-3.36,0.1c-0.89,0.97-1.57,2.15-2.54,3.02c-1.43,1.29-2.97,2.51-4.61,3.52c-0.69,0.42-1.38,0.67-2.02,1.31 c-0.9,0.89-2.2,1.64-3.43,1.85c-1.8,0.3-3.69,0.07-5.53,0.05c-0.18,0-0.48-0.07-0.53-0.18c-0.47-1.14-1.47-0.93-2.36-0.94 c-6.56-0.01-13.14-0.04-19.7,0.04c-1.54,0.02-3.04-0.25-4.58,0.97c-1.14,0.9-3.14,0.73-4.76,1.02c-2.09,0.36-4.19,0.69-6.29,1.07 c-0.19,0.03-0.33,0.28-0.53,0.39c-0.37,0.22-0.74,0.54-1.14,0.59c-2.19,0.29-4.26,0.71-6.23,1.94c-1.53,0.96-3.44,1.68-5.22,1.77 c-1.75,0.09-2.67,1.41-4.14,1.82c-1.55,0.42-2.99,0.65-4.48-0.1c-0.81-0.405-1.626-0.816-2.452-1.201 c-0.68-0.317-1.835-0.735-2.558-0.934c-1.54-0.425-3.106-0.796-4.66-1.225c-0.36-0.1-0.75-0.28-1-0.54 c-1.13-1.22-3.97-1.95-5.53-1.35c-0.17,0.06-0.44,0.21-0.43,0.31c0.02,1.69-0.44,3.69,0.31,4.96c0.62,1.05,0.67,1.93,0.85,2.94 c0.3,1.71,0.65,3.4,0.99,5.1c0.03,0.13,0.11,0.31,0.22,0.36c1.21,0.52,0.68,1.35,0.48,2.21c-2.65,0-5.23,0-7.8-0.01 c-0.24,0-0.59,0.01-0.69-0.13c-1.25-1.66-3.02-0.97-4.53-0.83c-0.67,0.07-1.56,1.09-1.79,1.86c-0.3,0.97-0.07,2.11,0.02,3.18 c0.03,0.3,0.32,0.68,0.6,0.85c0.79,0.49,1.63,0.88,2.41,1.29c0,1.61-0.25,3.18,0.06,4.61c0.44,1.98-0.79,3.3-1.41,4.84 c-0.37,0.91-1.12,1.68-1.74,2.48c-0.65,0.86-1.47,1.62-1.97,2.56c-1.056,1.961-2.123,3.875-3.665,5.518 c-0.045,0.048-0.085,0.103-0.115,0.162c-0.62,1.2-1.26,2.38-1.81,3.61c-0.52,1.15-0.65,2.41-1.51,3.5c-0.8,1-1.09,2.41-1.63,3.63 c-0.4,0.91-0.89,1.79-1.23,2.73c-0.65,1.77-0.53,3.74-1.91,5.36c-0.96,1.12-1.31,2.75-2.03,4.1c-0.74,1.37-1.69,2.45-3.49,2.5 c-1.86,0.04-3.37,1.92-3.6,3.77c-0.44,3.62,2.49,5.16,4.33,7.38c0.29,0.36,0.73,0.77,0.74,1.17c0.06,1.95,0,3.9-0.04,5.84 c0,0.27-0.16,0.53-0.27,0.79c-0.22,0.58-0.62,1.14-0.66,1.73c-0.1,1.31-0.05,2.63-0.02,3.94c0,0.38,0.07,0.77,0.19,1.13 c0.27,0.77,0.78,1.51,0.84,2.29c0.15,1.79,0.08,3.6,0.11,5.4c0.01,0.78-0.28,1.79,0.1,2.29c1.42,1.91,0.12,4.44,1.72,6.36 c0.72,0.86,0.64,2.41,0.9,3.65c0.5,2.35,1.18,4.66,1.83,6.96c0.68,2.41,2.51,4.36,2.52,7.02c0,0.81,0.91,1.59,1.32,2.43 c0.52,1.07,0.95,2.19,1.43,3.28c0.11,0.24,0.28,0.45,0.41,0.68c0.56,1,1.12,1.99,1.67,2.99c0.32,0.59,0.48,1.5,0.98,1.75 c1.39,0.69,1.07,2.22,1.83,3.18c0.47,0.6,0.82,1.29,1.25,1.92c0.26,0.37,0.56,0.71,0.83,1.08c0.52,0.72,1.09,1.41,1.54,2.17 c0.52,0.89,1.47,2.02,1.24,2.71c-0.31,0.91-1.5,1.63-2.46,2.18c-1.59,0.9-3.29,1.6-4.94,2.38c-0.45,0.21-0.9,0.41-1.35,0.63 c-0.95,0.47-1.92,0.92-2.85,1.45c-0.71,0.42-1.35,0.98-2.05,1.42c-0.99,0.63-2.06,1.14-3,1.82c-0.81,0.58-1.46,1.39-2.27,1.98 c-0.53,0.4-1.41,0.43-1.81,0.9c-0.87,1.04-1.78,2-2.43,3.31c-0.93,1.85-0.62,3.28,0.36,4.67c0.71,1,1.81,1.7,3.22,1.44 c2.79-0.51,5.68,0.59,8.47-0.8c1.08-0.54,2.59-0.18,3.9-0.27c0.42-0.02,1.09-0.02,1.21-0.26c0.52-1.03,1.44-0.76,2.26-0.9 c1.76-0.28,3.52-0.6,5.28-0.92c0.13-0.02,0.33-0.1,0.37-0.21c0.43-1.07,1.39-0.83,2.22-0.9c0.63-0.06,1.27-0.03,1.88-0.15 c2.21-0.43,4.39-1,6.61-1.36c1.77-0.29,3.57-0.02,5.09,0.93c1.33,0.83,2.43,2.06,4.19,1.92c0.07,0,0.14,0.24,0.25,0.32 c0.96,0.71,1.94,1.41,3.11,2.26c-0.03,0.78,0.72,2.01-0.9,2.62c-0.11,0.05-0.12,0.35-0.21,0.52c-0.68,1.31-1.35,2.63-2.06,3.93 c-0.41,0.75-0.86,1.47-1.32,2.17c-0.52,0.79-1.16,1.5-1.6,2.33c-0.46,0.86-0.7,1.84-1.11,2.73c-0.56,1.22-1.46,2.35-1.74,3.63 c-0.31,1.34-0.12,2.81-0.03,4.22c0.08,1.17,0.87,1.95,2,2.03c1.38,0.09,2.83,0.58,4.1-0.64c0.75-0.73,1.82-1.11,2.66-1.76 c0.66-0.5,1.45-1.08,1.73-1.8c0.87-2.3,2.93-3.51,4.48-5.18c0.47-0.51,1.29-0.68,1.83-1.15c1.39-1.22,2.56-2.77,4.1-3.71 c1.46-0.88,3.26-1.31,4.97-1.65c1.24-0.24,2.38,0.18,3.64,0.89c2.31,1.31,5.28,0.57,7.75,2.06c1.12,0.68,2.84,0.67,4.2,0.82 c2.23,0.25,4.29,0.73,6.53,1.79c-0.24,0.43-0.46,0.94-0.77,1.4c-0.4,0.57-0.99,1.05-1.28,1.67c-0.79,1.67-1.35,3.39-1.07,5.31 c0.19,1.25,2.23,3.39,3.42,3.12c1.23-0.27,2.54-0.81,3.48-1.62c1.48-1.28,2.63-2.93,4.01-4.33c1.1-1.12,2.36-2.08,3.53-3.12 c0.71-0.64,1.3-1.64,2.12-1.89c1.76-0.52,3.64-0.61,5.45-0.97c1.79-0.35,3.55,0.17,5.46-0.91c1.89-1.06,4.51-0.98,6.82-1.09 c2.82-0.13,2.63-0.62,2.63,2.59c0,57.42,0.02,114.83-0.06,172.25c0,4.23,0.83,8.54-0.79,12.73c-0.62,1.6-0.25,3.38-1,5.17 c-0.81,1.94-0.89,4.43-1.01,6.62c-0.34,6.56-0.12,13.14-0.11,19.72c0,0.48-0.12,1.18,0.15,1.41c1.43,1.27-0.05,3.62,1.8,4.67 c0.34,3.04,0.98,6.08,0.99,9.12c0.06,52.79,0.04,105.58,0.04,158.37c0,3.16,0,6.33-0.03,9.49c0,0.57-0.12,1.14-0.26,1.69 c-0.19,0.72-0.64,1.41-0.66,2.11c-0.11,3.56-0.11,7.11-0.16,10.67c-0.01,0.42-0.1,0.85-0.21,1.27c-0.2,0.8-0.52,1.58-0.66,2.4 c-0.17,0.95-0.16,1.93-0.31,2.89c-0.16,1.01-0.64,2.01-0.6,2.99c0.16,3.93,0.47,7.84,0.73,11.76c0.01,0.09,0.01,0.19,0.03,0.29 c0.02,0.09,0.03,0.25,0.09,0.26c1.53,0.52,1.01,1.83,1.01,2.84c0.04,8.82,0.12,17.63-0.03,26.45c-0.05,2.65,0.87,5.42-0.97,8.02 c-0.8,1.12-0.72,2.87-1.05,4.32c-0.05,0.23-0.17,0.43-0.26,0.64c-0.55,1.3-1.35,2.55-1.59,3.9c-0.47,2.59-1.33,5.12-1.07,7.86 c0.22,2.37-0.05,4.78,0.08,7.16c0.1,1.83,0.58,3.64,0.72,5.47c0.11,1.56-0.68,2.28-2.23,2.29c-2.87,0.02-5.74-0.01-8.61,0.03 c-0.6,0.01-1.54,0.04-1.74,0.4c-0.54,0.93-1.29,0.71-2.03,0.74c-1.89,0.09-3.92-0.26-5.63,0.33c-1.64,0.56-3.18,0.44-4.77,0.55 c-0.77,0.05-1.56,0-2.33,0.04c-0.39,0.03-0.99,0.03-1.1,0.25c-0.72,1.33-1.93,0.77-2.95,0.89c-0.68,0.07-1.56-0.12-1.99,0.24 c-1.51,1.3-3.91-0.13-5.14,1.79c-2.12-0.02-4.15,0.22-6.23,0.82c-1.96,0.56-2.12,0.32-2.18,2.44c-0.01,0.34-0.01,0.69,0,1.03 c0.06,1.68,2.24,2.98,3.84,2.46c2.01-0.65,4.08-1.5,6.15-1.56c7.1-0.21,14.21-0.12,21.31-0.12c0.47-0.01,0.99,0.07,1.4,0.28 c1.67,0.85,3.32,1.62,5.27,1.47c0.64-0.05,1.32,0.15,1.95,0.35c0.64,0.19,1.22,0.71,1.84,0.75c3.19,0.16,3.22,0.16,3.33,3.45 c0.02,0.47,0.05,1.22,0.31,1.34c2.07,0.98,1.89,2.8,1.64,4.51c-0.1,0.64-0.81,1.33-1.41,1.69c-0.29,0.17-1-0.36-1.53-0.56 c-0.43-0.16-0.87-0.4-1.32-0.42c-1.21-0.07-2.43-0.01-3.65-0.06c-0.4-0.01-0.97-0.03-1.18-0.29c-1.01-1.21-2.46-2.07-2.96-3.72 c-0.12-0.39-0.73-0.77-1.18-0.88c-0.64-0.15-1.36,0-2.03-0.08c-3.01-0.39-4.31,2.14-4.4,4.43c-0.18,4.77-0.13,9.54-0.14,14.31 c-0.01,2.82,2.03,4.69,4.86,4.52c0.33-0.03,0.71,0,1-0.14c0.39-0.2,0.79-0.49,1.05-0.84c0.57-0.81,0.87-2.08,1.62-2.43 c1.73-0.79,3.65-1.22,5.52-1.65c1.12-0.26,2.33-0.11,3.44-0.37c0.5-0.12,0.83-1.12,1.47-0.21c0.36,0.51,0.86,1.02,0.95,1.59 c0.16,0.95,0.03,1.94,0.06,2.91c0.02,0.73-0.3,1.6,0.72,2.02c0.1,0.04,0.07,0.87-0.06,0.92c-0.9,0.37-1.84,0.86-2.77,0.87 c-4.38,0.09-8.76-0.08-13.14,0.08c-4.25,0.15-8.48,0.6-12.73,0.93c-0.14,0.01-0.29,0.04-0.42,0.1c-0.18,0.06-0.46,0.13-0.49,0.24 c-0.27,1.05-1.1,0.74-1.78,0.78c-1.26,0.07-2.71-0.25-3.73,0.27c-1.56,0.79-3.07,0.49-4.61,0.6c-0.83,0.06-1.66-0.02-2.48,0.05 c-0.46,0.04-0.92,0.23-1.36,0.4c-0.57,0.22-1.11,0.68-1.66,0.69c-5.74,0.12-11.48,0.25-17.22,0.19c-2.94-0.03-5.8,0.32-8.66,0.89 c-1.92,0.38-3.87,0.56-5.81,0.84c-0.14,0.02-0.37,0.03-0.41,0.11c-0.64,1.38-1.89,0.79-2.91,0.91c-0.67,0.07-1.58-0.17-1.99,0.19 c-1.16,1-2.45,0.58-3.69,0.69c-0.83,0.07-1.68,0-2.47,0.2c-0.46,0.12-0.79,0.86-1.24,0.91c-2.91,0.37-5.84,0.62-8.76,0.91 c-0.15,0.01-0.35-0.02-0.43,0.06c-0.65,0.68-1.53,1.29-1.85,2.11c-0.31,0.78,0.21,1.51,0.84,2.36c1.3,1.76,2.87,2,4.54,1.69 c2.76-0.49,5.54,0.64,8.38-0.92c1.96-1.08,4.67-0.8,7.06-1.06c1.06-0.12,2.14-0.03,3.21-0.09c0.36-0.02,0.71-0.16,1.05-0.3 c0.57-0.23,1.13-0.71,1.7-0.71c7.2-0.09,14.42,0.25,21.57-0.98c0.95-0.16,1.86-0.79,2.8-0.8c8.27-0.06,16.54-0.03,24.81-0.02 c0.44,0,1.03-0.11,1.28,0.12c1.16,1.09,2.55,0.69,3.86,0.72c2.62,0.06,5.26-0.04,7.88,0.09c3.92,0.2,7.83,0.57,11.75,0.79 c0.98,0.06,1.1,0.61,1.1,1.33c0.03,2.39,0.05,4.78,0.05,7.16c-0.01,2.02-1.87,3.14-3.77,2.39c-0.95-0.37-1.99-0.7-2.98-0.7 c-10.76-0.06-21.51-0.02-32.27-0.07c-1.58-0.01-3.37,0.66-4.65-0.97c-0.08-0.09-0.27-0.11-0.41-0.13 c-2.93-0.32-5.86-0.62-8.79-0.95c-0.4-0.04-0.8-0.18-1.18-0.33c-0.57-0.24-1.13-0.77-1.69-0.77c-7.35-0.03-14.69,0-22.04,0.04 c-0.95,0-2.27,1.35-2.31,2.29c-0.03,0.86-0.1,1.62,1.01,2.08c0.65,0.27,0.96,1.53,1.59,1.68c1.92,0.48,3.91,0.63,5.87,0.93 c1.04,0.15,2.37-0.55,2.94,1.01c0.04,0.1,0.36,0.11,0.55,0.12c3.51,0.33,7.01,0.67,10.52,0.95c1.16,0.1,2.34,0.02,3.5,0.08 c0.4,0.02,0.79,0.25,1.19,0.39c0.5,0.18,1.01,0.52,1.52,0.53c2.43,0.06,4.86,0.01,7.3,0.06c0.65,0.01,1.3,0.23,1.94,0.4 c0.48,0.13,0.93,0.46,1.4,0.46c7.84,0.09,15.67,0.05,23.5,0.23c5.81,0.13,11.61,0.48,17.4,0.86c0.64,0.05,1.54,0.85,1.76,1.49 c0.49,1.43,1.55,2.76,1.15,4.45c-0.06,0.27,0.33,0.63,0.48,0.97c0.55,1.25,1.09,2.51,1.63,3.77c-0.137,0.184-0.17,0.23-0.307,0.414 c-0.944-0.093-1.899-0.132-2.823-0.294c-0.59-0.1-1.13-0.53-1.7-0.54c-6.96-0.1-13.91-0.14-20.87-0.22 c-1.08-0.01-2.29,0.4-3.09-0.88c-0.16-0.27-0.9-0.25-1.38-0.26c-1.6-0.03-3.21-0.01-4.82-0.01c-0.33-0.01-0.83,0.09-0.99-0.09 c-0.91-1.09-2.14-0.72-3.26-0.77c-1.26-0.05-2.53,0.01-3.79-0.02c-0.36-0.01-0.72-0.14-1.05-0.29c-0.58-0.25-1.11-0.75-1.7-0.82 c-2.88-0.32-5.74-0.13-8.66-0.74c-3.27-0.68-6.78-0.21-10.19-0.18c-0.48,0-1.14,0.2-1.4,0.55c-0.9,1.21,0.09,4.17,1.51,4.44 c2.01,0.39,4.05,0.6,6.08,0.87c0.72,0.1,1.84-0.1,2.09,0.29c0.78,1.21,1.85,0.74,2.83,0.84c0.92,0.1,2.04-0.16,2.7,0.29 c1.05,0.71,2.08,0.6,3.16,0.65c1.06,0.05,2.18-0.07,3.19,0.21c1.63,0.45,3.16,1.3,4.8,1.72c1.71,0.45,3.48,0.08,5.27,1.06 c1.43,0.78,3.44,0.32,5.23,0.91c2.13,0.71,4.5-0.02,6.83,0.88c2.46,0.95,5.22,0.01,8.01,1.07c3.13,1.19,6.86,0.81,10.33,1.12 c0.57,0.05,1.18,0.03,1.68,0.26c0.64,0.3,1.17,0.82,1.75,1.24c0.15-0.02,0.31-0.05,0.46-0.08c-0.1,1.18,0.17,2.59-0.39,3.5 c-0.86,1.38-2.53,1.97-4.19,2.02c-3.25,0.08-6.51,0.02-9.76,0.07c-1.86,0.03-2.68,0.94-2.66,2.81c0.01,0.93,1.47,3.14,2.4,3.36 c1.65,0.4,3.33,0.82,5.01,0.9c3.06,0.14,6.13,0.03,9.19,0.05c1.58,0,2.3,0.73,2.31,2.34c0.02,3.12,0.22,6.25-0.07,9.34 c-0.2,2.13,1.22,2.97,2.27,4.19c0.09,0.1,0.56,0.01,0.73-0.14c0.99-0.82,1.37-1.83,1.28-3.18c-0.06-1.03,0.45-2.08,0.6-3.13 c0.26-1.95-0.25-4.06,1.26-5.73c0.28-5.74,0.56-11.48,0.85-17.22c0.04-0.83,0.14-1.66,0.12-2.48c-0.08-3.46,0.65-6.86,0.83-10.28 c0.13-2.46-0.51-4.96-0.75-7.44c-0.12-1.26,0.28-2.76-0.28-3.74c-0.87-1.54-0.47-3.05-0.63-4.58c-0.05-0.53,0.01-1.07-0.06-1.6 c-0.05-0.37-0.12-0.96-0.36-1.06c-0.97-0.44-0.73-1.24-0.75-1.98c-0.04-1.8,0.39-3.78-0.24-5.34c-0.66-1.64-0.54-3.17-0.62-4.76 c-0.07-1.22-0.02-2.44-0.04-3.65c-0.01-0.44,0.04-1.1-0.2-1.26c-1.41-0.94-0.74-2.36-0.95-3.57c-0.24-1.44-0.63-2.87-0.69-4.32 c-0.07-1.59-0.67-3.32,0.58-4.74c0.21-0.24,0.92-0.42,1-0.32c0.42,0.54,0.88,1.15,1.01,1.8c0.31,1.52-0.14,3.06,1.03,4.58 c1.02,1.3,1.22,3.22,1.85,4.85c0.34,0.86,0.86,1.64,1.25,2.49c0.27,0.58,0.43,1.22,0.69,1.82c0.46,1.07,0.96,2.13,1.45,3.19 c0.52,1.12,1.04,2.24,1.56,3.35c0.41,0.87,1.05,1.69,1.2,2.59c0.41,2.58,0.73,5.18,0.87,7.78c0.17,3.21,0.12,6.43,0.19,9.64 c0.01,0.43-0.01,1.08,0.24,1.23c1.04,0.66,0.84,1.66,0.91,2.6c0.27,3.54-0.37,7.08,0.66,10.64c0.5,1.72,1.74,2.57,2.66,3.79 c0.16,0.21,0.75,0.19,1.12,0.12c0.62-0.12,2.42-2.53,2.46-3.18c0.51-8.75-0.35-17.53,0.71-26.29c0.41-3.38-0.31-6.91-0.58-10.36 c-0.09-1.15,0.49-2.57-1.1-3.24c-0.11-0.04-0.11-0.35-0.13-0.54c-0.3-2.81-0.59-5.62-0.9-8.42c-0.05-0.47-0.11-1.21-0.38-1.33 c-1.02-0.43-0.73-1.26-0.78-1.97c-0.08-1.11,0.3-2.53-0.25-3.27c-0.83-1.1-0.52-2.02-0.49-3.05c1.99-0.43,3.75-1.81,5.74-0.95 c0.39,2.88,0.85,5.69,1.14,8.52c0.23,2.29,1.01,4.26,2.89,5.63c0.45,0.33,1.22,0.47,1.77,0.35c0.76-0.15,1.45-0.63,2.3-1.03 c0-2.53-0.02-5.15,0.02-7.78c0.01-0.86-0.14-1.96,0.31-2.53c0.91-1.16,0.53-1.98-0.12-2.77c0.48-1.75,1.76-1.6,3.07-1.64 c6.71-0.25,13.42-0.57,20.13-0.87c0.19,0,0.39-0.03,0.58-0.06c2.915-0.587,5.795-1.362,8.816-1.146 c1.388,0.099,2.779,0.185,4.166,0.067c1.583-0.135,3.2,0.101,4.658-0.921c0.97-0.68,1.69-1.88,1.18-3.28 c-0.25-0.68-1.16-1.55-1.81-1.58c-5.95-0.3-11.92-0.12-17.83-1.11c-0.37-0.06-0.98-0.04-1.06-0.23c-0.47-1.12-1.42-0.85-2.25-0.88 c-1.79-0.07-3.78,0.4-5.34-0.22c-1.54-0.62-2.97-0.51-4.46-0.69c-4.45-0.53-9.09,1.2-13.37-1.14c-0.57-0.31-1.22-0.55-1.66-0.99 c-1.16-1.18-2.18-2.5-3.35-3.68c-1.89-1.9-3.88-3.71-5.77-5.62c-1.11-1.1-1.9-2.74-3.21-3.36c-1.71-0.81-2.94-1.96-4.27-3.2 c-1.45-1.36-3.25-2.35-5.13-3.67v-1.37c2.39,0.23,4.78-0.38,6.81,1.6c0.74,0.73,2.1,1.17,3.17,1.15c2.07-0.06,2.81-1.1,2.83-3.22 c0.012-1.029,0.105-2.072-0.135-3.065c-0.126-0.522-0.594-1.242-0.983-1.612c-0.994-0.944-2.204-1.718-2.982-2.803 c-1.18-1.62-2.71-2.7-4.3-3.8c-0.66-0.45-1.27-1.04-1.77-1.68c-0.62-0.77-1.01-1.75-1.67-2.48c-0.7-0.79-1.07-1.55-1.07-2.66 c0.04-25.52,0.02-51.03,0.09-76.55c0.01-2.45,0.54-4.89,0.86-7.33c0.02-0.2,0.28-0.36,0.38-0.56c0.51-1.02,1.37-2.03,1.42-3.07 c0.2-4.67,0.37-9.36,0.15-14.02c-0.23-4.6,0.89-9.24-0.91-13.86c-0.97-2.5-0.76-5.45-1.08-8.2c-0.06-0.53-0.12-1.06-0.22-1.59 c-0.17-0.92-0.53-1.84-0.54-2.75c0-1.6-0.1-3.16,0.52-4.8c0.54-1.42,0.41-3.2,0.21-4.77c-0.37-2.8,0.82-5.35,0.97-8.05 c0.01-0.14,0.05-0.36,0.14-0.4c1.26-0.61,0.84-1.8,0.99-2.79c0.06-0.43-0.11-1.04,0.12-1.27c1.46-1.45,0.73-3.5,1.61-5.25 c1.1-2.2-0.12-5.19,1.07-7.68c0.04-9.5,0.1-18.99,0.12-28.49c0-1.74,0.34-3.72-0.35-5.18c-0.85-1.83-0.55-3.56-0.74-5.33 c-0.04-0.36-0.16-0.73-0.31-1.07c-0.25-0.56-0.68-1.08-0.79-1.67c-0.37-2.01-0.64-4.05-0.95-6.07 c-0.018-0.064-0.035-0.126-0.053-0.19c-0.547-1.29-1.442-2.513-1.707-3.87c-0.47-2.46-0.88-4.98-0.88-7.47 c-0.04-51.72-0.02-103.44-0.05-155.15c0-2.24,0.68-3.89,2.54-5.13c0.81-0.53,1.5-1.26,2.19-1.96c1.11-1.12,2.13-2.32,3.27-3.39 c0.39-0.36,1.19-0.28,1.57-0.64c1.32-1.26,2.51-2.66,3.81-3.95c1.03-1.02,2.18-1.94,3.2-2.97c1.34-1.36,2.58-2.82,3.92-4.18 c1.21-1.22,2.62-2.26,3.72-3.58c1.17-1.4,2.28-2.77,4.14-3.27c0.14-0.04,0.24-0.28,0.35-0.43c1.26-1.87,1.11-3.98,0.97-6.07 c-0.02-0.38-0.44-0.97-0.78-1.06c-2.42-0.64-4.68,0.12-6.93,0.92c-0.29,1.52-1.89,1.12-2.8,1.7c-1.15,0.74-2.85,0.01-4.3,1.16 c-0.88,0.7-2.61,0.58-3.96,0.92c-1.74,0.44-3.32,1.03-4.92,2.07c-0.1-0.55-0.25-1.01-0.25-1.47c0-2.48-0.03-4.97,0.07-7.45 c0.23-5.62,0.14-11.24,0.73-16.88c0.56-5.39-0.01-10.89-0.04-16.34c-0.03-6.04,0.03-12.08-0.03-18.12 c-0.03-2.15,0.05-4.26-0.48-6.46c-0.76-3.17-0.78-6.51-1.2-9.77c-0.11-0.84-0.54-1.64-0.8-2.46c-0.06-0.22-0.15-0.54-0.04-0.67 c0.72-0.89,1.46-1.75,2.24-2.59c1.82-1.97,3.8-3.81,5.45-5.92c1.33-1.69,2.58-3.28,4.76-3.9c0.76-0.21,1.55-0.62,2.13-1.15 c1.19-1.11,2.12-2.36,3.81-3.06c1.74-0.72,3.12-2.32,4.64-3.56c0.41-0.33,0.73-0.78,1.16-1.07c2.04-1.42,4.11-2.79,6.15-4.21 c0.29-0.2,0.44-0.61,0.73-0.8c1.46-0.91,3.01-1.69,4.41-2.68c1.16-0.81,2.17-1.83,3.2-2.8c0.46-0.44,0.86-0.97,1.18-1.51 c0.4-0.68,0.54-1.55,1.06-2.09c1.159-1.21,1.822-2.544,1.82-4.222c0-0.258,0.046-0.516,0.159-0.747c0.97-1.97,2.06-3.9,2.95-5.92 c1.15-2.6,2.08-5.3,3.24-7.89c1.04-2.33,2.44-4.52,3.34-6.89c0.61-1.59,1.59-2.02,3.03-2.03c3.99-0.03,7.99-0.22,11.96,0.02 c2.25,0.14,3.79-1.49,5.85-1.66c0.717-0.051,1.424-0.522,2.077-0.886c0.846-0.472,1.672-0.976,2.476-1.516 c0.646-0.434,1.381-0.838,1.917-1.398C230.441,131.98,230.311,130.27,230.071,128.64z M111.437,192.42 c-46.57,0-84.32-37.75-84.32-84.32c0-46.56,37.75-84.31,84.32-84.31c46.56,0,84.31,37.75,84.31,84.31 C195.747,154.67,157.997,192.42,111.437,192.42z\"\n        ],\n        clocks: {\n            size: 169,\n            0: { x: 111.011, y: 108.5 }\n        }\n    },\n    2: {\n        height: 625.438,\n        width: 197.009,\n        path: \"M193.86,271.21c-2.234-2.626-5.64-4.792-8.929-5.835c-6.793-2.153-11.841,2.196-17.463,7.369 c-5.009-25.727-17.583-43.987-38.477-54.246l-18.909-21.56v-12l20.773-23.686c19.55-10.446,31.402-28.304,36.229-53.096 c5.622,5.174,10.67,9.523,17.463,7.369c3.289-1.043,6.695-3.208,8.929-5.835c4.877-5.734,3.879-14.302-1.542-19.605 c-6.442-6.301-13.569-5.549-24.852,3.382c-4.816-25.231-17.183-43.587-38.409-54.031h0.158c-1.506-0.732-3.056-1.394-4.625-2.025 c-2.997-1.25-6.144-2.365-9.463-3.327c0,0-0.527-0.089-1.457-0.217c-2.421-0.731-4.757-2.02-7.743-3.273 c2.103-2.282,3.255-3.455,4.321-4.703c5.176-6.057,4.821-14.978-0.792-20.538c-5.647-5.594-14.543-5.829-20.352-0.539 c-6.101,5.556-6.808,14.49-1.648,20.831c4.153,5.103,3.905,5.403-2.49,8.055c-1.793,0.744-3.604,1.465-5.417,2.187 c-10.281,3.032-16.092,6.929-22.875,12.001c-12.415,9.284-19.739,22.385-23.521,37.515c-0.673,2.693-2.08,5.2-3.437,8.492 c-2.262-2.122-3.424-3.284-4.661-4.36c-6.003-5.222-14.845-4.864-20.356,0.799c-5.544,5.698-5.778,14.673-0.534,20.534 c5.507,6.156,14.361,6.869,20.646,1.662c5.058-4.19,5.355-3.94,7.984,2.512c3.394,8.33,6.292,17.054,10.972,24.62 c6.032,9.752,14.303,16.873,24.096,21.915l21.601,23.357v12l-20.223,21.867c-10.232,5.068-18.855,12.348-25.091,22.43 c-4.68,7.566-7.578,16.29-10.972,24.62c-2.629,6.452-2.926,6.702-7.984,2.512c-6.285-5.206-15.139-4.493-20.646,1.662 c-5.243,5.861-5.01,14.837,0.534,20.534c5.511,5.663,14.352,6.021,20.356,0.799c1.237-1.076,2.399-2.238,4.661-4.36 c1.356,3.292,2.764,5.799,3.437,8.492c3.782,15.13,11.106,28.232,23.521,37.515c7.877,5.89,14.425,10.198,28.206,13.404 c1.38,0.321,2.787,0.579,4.201,0.789c0.031,27.796,0.06,69.604,0.085,105.236c0.009,13.829,0.018,26.73,0.026,37.518 c0,0.826-0.08,1.652-0.121,2.436c-3.447,0.597-4.58-0.495-4.682-4.511c-0.072-2.822-0.002-5.649-0.016-8.473 c-0.024-4.802-0.891-5.97-4.609-5.976c-14.432-0.022-28.864-0.01-43.295-0.009c-4.627,0-9.255,0.084-13.881-0.022 c-3.054-0.07-4.428,1.698-4.326,5.623c0.079,3.039,0.085,6.08-0.001,9.119c-0.111,3.933,1.27,5.674,4.317,5.646 c8.372-0.076,16.745-0.038,25.118-0.024c4.14,0.007,4.933,1.055,4.947,6.397c0.024,9.702,0.024,9.702-7.67,9.702 c-7.381-0.001-14.762-0.025-22.143,0.006c-3.558,0.015-4.54,1.209-4.551,5.611c-0.035,13.947-0.943,13.109,10.004,13.035 c6.61-0.045,13.22-0.032,19.83,0.002c3.528,0.018,4.463,1.226,4.534,5.638c0.17,10.455,0.17,10.455-8.056,10.455 c-7.271,0-14.542-0.024-21.813,0.01c-3.492,0.016-4.48,1.263-4.503,5.672c-0.067,12.642-0.701,12.243,9.397,12.129 c6.83-0.077,13.661-0.04,20.491-0.004c3.466,0.018,4.419,1.281,4.484,5.702c0.154,10.39,0.154,10.39-8.106,10.39 c-7.271,0-14.542-0.026-21.813,0.01c-3.447,0.017-4.439,1.296-4.452,5.736c-0.039,13.671-0.908,12.955,9.772,12.916 c17.076-0.063,34.152-0.012,51.227-0.02c4.329-0.002,5.098-1.02,5.1-6.63c0.001-1.977-0.037-3.956,0.007-5.931 c0.094-4.282,1.178-5.371,4.197-4.937c1.031,10.07,1.909,19.99,3.129,29.842c0.425,3.429,1.312,6.98,2.695,9.93 c1.2,2.56,3.388,5.993,5.16,6.013c1.744,0.02,4.469-3.383,5.098-5.954c2.029-8.292,4.037-16.802,4.667-25.395 c0.85-11.612,0.501-23.379,0.517-35.079c0.042-30.977,0.078-68.798,0.115-106.572c0.037-37.246,0.075-74.445,0.121-104.988 c3.105-0.304,5.045-0.635,5.045-0.635c29.872-8.658,46.55-29.062,52.338-59.383c11.283,8.931,18.409,9.683,24.852,3.382 C197.739,285.512,198.737,276.945,193.86,271.21z M44.186,100.381c0-29.823,24.177-54,54-54s54,24.177,54,54 c0,29.823-24.177,54-54,54S44.186,130.205,44.186,100.381z M98.186,334.381c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54 s54,24.177,54,54C152.186,310.205,128.009,334.381,98.186,334.381z\",\n        clocks: {\n            size: 108,\n            0: { x: 98.579, y: 280 },\n            1: { x: 98.579, y: 100 }\n        }\n    },\n    3: {\n        height: 915.936,\n        width: 277.634,\n        path: \"M263.752,257.836c-13.719,1.508,3.345-15.515,3.955-23.109l-0.113,0.113 c8.127-22.574,2.75-46.079-10.802-65.608c14.365-1.735,19.981-6.287,20.122-15.339c0.118-7.617-5.228-14.388-12.762-14.963 c-3.451-0.263-7.412,0.636-10.496,2.245c-6.369,3.324-6.896,10.001-7.248,17.67c-12.146-8.157-24.329-12.988-36.575-14.34 c-2.94-2.54-4.264-6.236-3.879-10.997c0.451-5.587,0.239-11.066-0.572-16.359c0.828-2.872,1.549-5.847,2.156-8.934 c5.672,5.174,10.766,9.523,17.62,7.369c3.319-1.043,6.755-3.208,9.009-5.835c4.921-5.734,3.914-14.302-1.556-19.605 c-6.5-6.301-13.69-5.549-25.075,3.382c-5.055-30.578-25.967-51.62-54.619-60.047c-2.447-0.732-4.807-2.023-7.825-3.278 c2.125-2.286,3.29-3.461,4.367-4.71c11.938-14.551-7.15-33.181-21.367-21.111c-6.165,5.565-6.879,14.513-1.665,20.864 c4.197,5.111,3.946,5.411-2.516,8.068c-1.812,0.745-3.642,1.467-5.474,2.19c-24.645,7.648-40.948,25.21-46.886,49.595 c-0.68,2.698-2.102,5.208-3.473,8.505c-2.286-2.125-3.461-3.29-4.71-4.367c-14.552-11.938-33.18,7.152-21.111,21.367 c5.565,6.165,14.513,6.879,20.864,1.665c4.71-3.867,5.338-3.944,7.487,1.123c-1.309,6.465-1.74,13.174-1.396,20.102 c0.3,6.03-1.497,10.097-5.356,12.617c-8.889,2.044-17.148,6.132-25.567,9.656c-6.448,2.691-6.837,2.656-7.484-3.926 c-0.804-8.178-7.636-14-15.931-13.576c-18.581,1.516-18.918,28.187-0.181,30.036c1.645,0.122,3.299,0.129,6.419,0.243 c-1.366,3.319-2.113,5.992-3.558,8.47c-3.428,5.74-6.123,11.683-7.912,17.811c-4.722,16.154-2.533,34.602,5.996,50.411 c1.801,5.691,8.569,13.392-1.603,12.903c-40,12.971,18.416,54.114,16.704,9.691c34.782,3.225,46.692,41.92,80.447,49.674 c7.963,2.791,11.179,6.671,12.046,13.724c0.012,3.241,0.01,6.503,0,9.829h-0.223c0,2.086,0,5.309,0,5.309s0.065,0.184-0.069,0.268 c-7.211-0.002-14.005-0.041-20.79,0.015c-4.483,0.037-6.154,1.09-6.592,4.667c-0.352,4.638-0.043,9.45-0.131,14.122 c0.062,5.274,1.49,6.69,6.861,6.724c6.999,0.045,13.998,0.011,21.721,0.011v5.671c-7.723,0-14.722-0.034-21.721,0.011 c-5.372,0.035-6.799,1.45-6.861,6.724c0.087,4.671-0.221,9.484,0.131,14.122c0.438,3.577,2.109,4.63,6.592,4.667 c6.785,0.056,13.579,0.017,20.79,0.015c0.134,0.084,0.279,0.175,0.069,0.268v5.406h0.599c0.031,3.784,0.031,7.619,0,12h-0.599 v4.809c0,0,0.065,0.184-0.069,0.268c-7.211-0.002-14.005-0.041-20.79,0.015c-4.483,0.037-6.154,1.09-6.592,4.667 c-0.352,4.638-0.043,9.45-0.131,14.122c0.062,5.274,1.49,6.69,6.861,6.724c6.999,0.045,13.998,0.011,21.721,0.011v5.671 c-7.723,0-14.722-0.034-21.721,0.011c-5.372,0.035-6.799,1.45-6.861,6.724c0.087,4.671-0.221,9.484,0.131,14.122 c0.438,3.577,2.109,4.63,6.592,4.667c6.785,0.056,13.579,0.017,20.79,0.015c0.134,0.084,0.279,0.175,0.069,0.268v4.906h0.599 c0.031,4.284,0.031,8.119,0,12h-0.599v5.309c0.211,0.092,0.065,0.184-0.069,0.268c-7.211-0.002-14.005-0.041-20.79,0.015 c-4.483,0.037-6.154,1.09-6.592,4.667c-0.352,4.638-0.043,9.45-0.131,14.122c0.062,5.274,1.49,6.69,6.861,6.724 c6.999,0.045,21.721,0.011,21.721,0.011v5.671c0,0-14.722-0.034-21.721,0.011c-5.372,0.035-6.799,1.45-6.861,6.724 c0.087,4.671-0.221,9.484,0.131,14.122c0.438,3.577,2.109,4.63,6.592,4.667c6.785,0.056,13.579,0.017,20.79,0.015 c0.134,0.084,0.279,0.175,0.457,0.268c0,1.594,4.559,168.228,4.51,209.286c-0.005,4.1,0.442,9.128,0.442,10.259 c-3.396,0-6.234,0.133-9.054-0.034c-3.499-0.206-5.37,1.456-6.735,4.558c-1.281,2.913-2.803,5.866-4.843,8.27 c-6.58,7.751-16.578,7.84-23.206,0.144c-2.209-2.565-3.736-5.81-5.169-8.932c-1.239-2.699-2.939-4.083-5.916-4.024 c-3.712,0.073-7.428,0.078-11.14-0.009c-3.163-0.074-4.936,1.432-6.143,4.306c-1.141,2.716-2.476,5.469-4.285,7.764 c-8.725,11.281-23.01,6.923-27.966-5.357c-1.496-5.628-5.039-7.274-10.521-6.767c-4.485,0.415-6.285,1.937-6.286,6.612 c-0.001,15.755-0.002,31.511-0.003,47.266c-0.001,16.376-0.012,32.752,0.006,49.127c0.004,3.646,2.039,5.706,5.586,5.765 c4.244-0.151,7.724,1.078,9.747-3.72c1.63-3.566,3.31-7.297,5.811-10.239c5.927-6.969,15.25-7.396,21.596-0.827 c2.91,3.012,4.885,7.078,6.716,10.936c1.245,2.623,2.748,3.896,5.573,3.857c3.96-0.055,7.925-0.102,11.882,0.027 c3.041,0.099,4.629-1.359,5.914-4.011c1.386-2.861,3.016-5.766,5.166-8.063c10.107-10.412,22.254-3.718,27.139,8.037 c1.337,2.907,3.18,4.141,6.281,4.034c3.442-0.119,6.891-0.027,10.523-0.027c1.065,5.652,2.167,11.021,3.856,16.453 c1.228,3.675,2.407,8.536,7.056,8.594c4.923,0.061,6.042-4.987,7.307-8.743c1.456-4.322,2.867-8.847,3.125-13.35 c0.728-12.721,1.152-25.477,1.174-38.219c0.19-111.404,0.292,50.177,0.366-61.227c0.003-5.129,0.201-18.49,0.201-22.46 c0-41.693,4.098-203.286,4.098-209.558c8.112,0,15.82-0.053,23.528,0.021c5.544,0.13,6.64-3.323,6.288-8.201 c0.033-3.547,0.038-7.095-0.007-10.642c-0.066-5.278-1.476-6.669-6.885-6.701c-7.529-0.044-23.121-0.011-23.121-0.011v-5.671 c0,0,15.592,0.033,23.121-0.011c5.408-0.032,6.819-1.423,6.885-6.701c0.044-3.547,0.04-7.095,0.007-10.642 c0.351-4.882-0.742-8.33-6.288-8.201c-7.707,0.073-15.416,0.021-22.724,0.021v-22.76c7.308,0,15.017-0.053,22.724,0.021 c5.544,0.13,6.64-3.323,6.288-8.201c0.033-3.547,0.038-7.095-0.007-10.642c-0.066-5.278-1.476-6.669-6.885-6.701 c-7.529-0.044-15.059-0.011-23.121-0.011v-5.671c8.062,0,15.592,0.033,23.121-0.011c5.408-0.032,6.819-1.423,6.885-6.701 c0.044-3.547,0.04-7.095,0.007-10.642c0.351-4.882-0.742-8.33-6.288-8.201c-7.707,0.073-15.416,0.021-22.724,0.021v-22.76 c7.308,0,15.017-0.053,22.724,0.021c5.544,0.13,6.64-3.323,6.288-8.201c0.033-3.547,0.038-7.095-0.007-10.642 c-0.066-5.278-1.476-6.669-6.885-6.701c-7.529-0.044-15.059-0.011-23.121-0.011v-5.671c8.062,0,15.592,0.033,23.121-0.011 c5.408-0.032,6.819-1.423,6.885-6.701c0.044-3.547,0.04-7.095,0.007-10.642c0.351-4.882-0.742-8.33-6.288-8.201 c-7.707,0.073-15.416,0.021-22.724,0.021v-13.831c0.379-7.638,5.186-13.149,13.162-15.825 c28.456-7.104,41.808-33.352,64.888-48.287c17.492-10.743,9.354,22.937,28.518,19.129 C282.127,286.309,282.455,259.681,263.752,257.836z M105.697,839.074c0.498,2.38,0.15,4.934-3.302,4.884 c-2.295-0.033-3.176,1.042-3.702,3.217c-0.26,1.076-1.713,2.383-2.793,2.559c-0.723,0.118-2.36-1.479-2.505-2.467 c-0.409-2.804-2.004-3.344-4.385-3.299c-3.709,0.07-7.424,0.116-11.131-0.006c-3.83-0.126-3.945,2.278-3.981,5.13 c-0.038,2.976,0.755,4.826,4.142,4.589c1.477-0.103,2.968,0.015,4.451-0.025c2.202-0.059,4.543-0.006,4.579,2.901 c0.039,3.187-2.477,3.119-4.78,3.068c-1.36-0.03-2.728,0.082-4.08-0.025c-3.258-0.257-4.5,1.312-4.272,4.425 c-0.041,4.353,1.027,8.028-4.883,7.506c-7.022,0.039-7.951,0.802-7.543-7.405c0.169-3.39-1.192-4.855-4.554-4.524 c-0.857,0.085-1.922,0.329-2.555-0.056c-1.2-0.729-2.156-1.861-3.213-2.825c1.006-1.017,1.944-2.121,3.057-3.004 c0.38-0.301,1.199-0.042,1.817-0.044c5.007-0.022,7.131-2.986,5.196-7.646c-0.392-0.945-1.974-1.785-3.11-1.944 c-3.651-0.437-7.442,0.158-11.117-0.121c-3.786-0.387-5.894,0.721-5.698,5.061c0.045,0.996-1.78,2.077-2.744,3.119 c-0.848-1.038-2.451-2.105-2.412-3.108c0.153-3.932-1.445-5.27-5.269-5.225c-1.017,0.012-2.491-1.899-2.973-3.215 c-0.52-1.421-0.127-3.18-0.126-4.791c0-5.24-0.002-5.268,5.3-5.954c2.366-0.306,3.023-1.787,2.927-3.889 c-0.098-2.143,0.268-4.425,2.848-4.073c1.034,0.141,2.342,2.528,2.49,3.998c0.282,2.788,1.314,4.039,4.131,3.976 c3.956-0.088,7.919-0.125,11.873,0.011c3.063,0.105,4.168-1.204,4.13-4.212c-0.036-2.816-0.326-5.041-3.916-4.755 c-2.559,0.203-4.468-0.474-4.367-3.527c0.095-2.865,2.016-3.344,4.358-3.173c2.898,0.212,3.849-1.243,3.979-4.019 c0.085-1.821,0.73-5.002,1.563-5.153c3.046-0.553,6.308-0.31,9.408,0.165c0.646,0.099,1.284,2.453,1.345,3.795 c0.224,4.967,0.374,5.207,5.401,5.214c1.361,0.002,2.929-0.422,4.027,0.116c1.271,0.623,2.94,2.09,2.942,3.194 c0.002,1.125-1.621,2.815-2.876,3.241c-1.665,0.565-3.667,0.223-5.518,0.132c-3.18-0.157-3.971,1.57-3.952,4.398 c0.019,2.703,0.495,4.64,3.783,4.569c3.956-0.085,7.916-0.055,11.873-0.012c2.165,0.024,3.322-0.763,3.826-3.068 c0.241-1.105,1.771-1.927,2.718-2.877c0.905,0.971,2.333,1.814,2.605,2.939c0.545,2.256,1.757,2.7,3.843,3.111 C108.401,831.102,105.035,835.914,105.697,839.074z M139.108,46c29.823,0,54,24.177,54,54c0,29.823-24.177,54-54,54 s-54-24.177-54-54C85.108,70.176,109.285,46,139.108,46z M19.108,212c0-29.823,24.177-54,54-54s54,24.177,54,54 c0,29.823-24.177,54-54,54S19.108,241.823,19.108,212z M144.944,857.898c-2.09,2.578-1.865,5.176-1.942,7.953 c-0.024,0.854,0.131,1.914-0.302,2.509c-2.403,3.147-3.159,2.809-5.436-0.185c-0.264-0.306-0.178-0.948-0.184-1.437 c-0.041-3.271,0.536-6.657-2.369-9.253c-0.531-0.475-0.479-1.605-0.957-3.425c1.21-1.271,2.47-3.306,4.294-4.333 c2.379-1.339,5.236-0.58,6.441,1.819C145.405,853.367,145.95,856.658,144.944,857.898z M144.996,807.941 c-2.224,2.677-1.877,5.438-1.992,8.318c-0.086,2.146-0.2,4.578-2.99,4.544c-2.765-0.034-2.874-2.475-2.933-4.614 c-0.08-2.895,0.543-5.919-2.179-8.193c-0.631-0.527-0.645-1.797-1.234-3.633c1.265-1.382,2.48-3.465,4.292-4.5 c2.341-1.338,5.233-0.649,6.476,1.731C145.382,803.404,145.991,806.744,144.996,807.941z M80.062,279.694 c17.171-3.582,56.234-25.446,59.296-50.487c5.518,22.114,30,48.729,61,48.729C162.77,319.773,120.431,321.28,80.062,279.694z M205.108,266c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54s54,24.177,54,54C259.108,241.823,234.932,266,205.108,266z\",\n        clocks: {\n            size: 108,\n            0: { x: 138.892, y: 100 },\n            1: { x: 72.892, y: 212 },\n            2: { x: 204.892, y: 212 }\n        }\n    },\n    4: {\n        height: 1041,\n        width: 368.697,\n        path: \"M365.949,178.882c-2.159-2.705-5.464-5.038-8.725-6.201c-7.211-2.57-12.634,1.794-18.155,7.261 c-1.008-3.182-1.811-5.292-2.346-7.468c-7.207-29.311-25.676-46.993-55.052-53.142c-3.565-0.746-4.337-2.365-5.721-5.525 c-10.917-24.928-15.917-32.928-31.863-49.408c-1.625-1.679-3.453-3.192-5.144-4.761c-15.909-14.758-20.909-17.758-43.492-26.71 c-1.882-0.746-3.781-1.782-6.866-3.302c2.349-1.876,3.694-2.659,4.662-3.772c4.695-5.397,4.837-13.436,0.452-19.014 c-5.3-6.742-15-7.806-21.456-2.354c-6.714,5.67-7.304,15.417-1.328,21.919c3.617,3.935,3.297,5.361-1.725,7.153 c-2.044,0.73-4.17,1.226-6.237,1.896c-12.766,4.137-23.255,11.604-31.918,21.798c-2.372,2.791-4.778,5.622-7.539,8.002 c-15.564,13.413-26.166,29.895-31.108,49.904c-0.68,2.752-1.741,4.084-4.825,4.54c-29.053,4.299-51.461,25.809-57.16,54.556 c-0.307,1.549-0.792,3.062-1.25,4.806c-11.35-8.302-18-8.998-24.401-2.862c-5.321,5.101-6.467,13.398-1.935,19.203 c2.036,2.608,5.192,4.836,8.302,6.005c7.137,2.683,12.59-1.579,17.735-6.353c0.583,1.299,1.01,1.874,1.096,2.496 c4.046,29.315,27.997,53.277,57.825,57.393c2.223,0.307,4.062,1.874,4.644,4.041c1.308,4.861,2.891,9.682,4.787,14.345 c9.432,23.198,28.811,38.203,45.823,55.084c5.104,5.065,11.204,9.197,17.156,13.308c5.563,3.842,7.792,8.391,7.788,15.456 c-0.129,188.254-0.004,308.508,0.065,496.762c0,0.102-0.005,0.205-0.006,0.307v41.241c-2.701,0.026-5.102,0.092-7.461-0.047 c-3.499-0.206-5.37,1.456-6.735,4.558c-1.282,2.913-2.803,5.866-4.844,8.27c-6.581,7.751-16.578,7.84-23.206,0.144 c-2.254-2.617-3.797-5.94-5.255-9.119c-1.087-2.369-3.472-3.882-6.078-3.833c-3.63,0.068-7.263,0.071-10.893-0.013 c-3.163-0.074-4.936,1.432-6.143,4.306c-1.141,2.716-2.476,5.469-4.285,7.764c-8.725,11.281-23.01,6.923-27.966-5.357 c-1.496-5.628-5.039-7.274-10.521-6.767c-4.485,0.415-6.285,1.937-6.286,6.612c-0.001,15.755-0.002,31.511-0.003,47.266 c-0.001,16.376-0.012,32.752,0.006,49.127c0.004,3.646,2.039,5.706,5.586,5.765c4.244-0.151,7.724,1.078,9.747-3.72 c1.63-3.566,3.31-7.297,5.811-10.239c5.927-6.969,15.25-7.396,21.596-0.827c2.91,3.012,4.885,7.078,6.716,10.936 c1.457,3.071,3.269,4.292,7.14,3.723c2.897-0.426,5.844-0.506,8.73-0.009c4.108,0.708,6.007-0.762,7.499-3.84 c1.386-2.861,3.016-5.766,5.166-8.063c10.107-10.412,22.254-3.718,27.139,8.037c1.337,2.907,3.181,4.141,6.281,4.034 c2.715-0.094,5.446-0.058,8.257-0.038v2.091c0.319,0.001,0.631,0.004,0.951,0.004c0.362,2.11,0.473,3.786,0.947,5.352 c2.41,7.972,4.19,16.244,7.596,23.773c3.168,7.005,9.289,6.901,12.709-0.011c2.932-5.925,5.134-12.395,6.525-18.868 c4.01-18.662,2.675-37.664,2.696-56.567c0.133-118.853,0.314,0.295,0.392-118.558c0.068-103.934,0.013-377.867,0.064-481.801 c0.001-2.781-0.281-6.125,1.073-8.24c4.886-7.634,8.978-15.851,18.168-20.058c5.139-2.352,9.257-7.045,13.652-10.893 c4.267-3.736,8.16-7.904,12.459-11.599c15.452-13.278,26.023-29.619,30.885-49.451c0.909-3.707,2.926-4.598,6.161-5.73 c8.764-3.067,17.943-5.775,25.742-10.598c14.82-9.164,23.822-23.162,28.263-40.071c0.703-2.678,1.909-5.223,2.991-8.122 c11.076,8.596,18.006,9.328,24.489,3.223C369.187,192.953,370.464,184.538,365.949,178.882z M146.765,952.539 c0.498,2.38,0.15,4.934-3.302,4.884c-2.294-0.033-3.176,1.042-3.702,3.217c-0.26,1.076-1.713,2.383-2.793,2.559 c-0.723,0.118-2.36-1.479-2.504-2.467c-0.409-2.804-2.004-3.344-4.384-3.299c-3.709,0.07-7.424,0.116-11.131-0.006 c-3.83-0.126-3.945,2.278-3.981,5.13c-0.038,2.976,0.755,4.826,4.142,4.589c1.477-0.103,2.968,0.015,4.451-0.025 c2.202-0.059,4.543-0.006,4.579,2.901c0.04,3.187-2.477,3.119-4.78,3.068c-1.36-0.03-2.728,0.082-4.08-0.025 c-3.258-0.257-4.5,1.312-4.272,4.425c-0.041,4.353,1.027,8.028-4.883,7.506c-7.022,0.039-7.951,0.802-7.542-7.405 c0.168-3.39-1.192-4.855-4.555-4.524c-0.857,0.085-1.922,0.329-2.555-0.056c-1.2-0.729-2.156-1.861-3.213-2.825 c1.006-1.017,1.944-2.121,3.057-3.004c0.379-0.301,1.199-0.042,1.817-0.044c5.007-0.022,7.131-2.986,5.197-7.646 c-0.393-0.945-1.975-1.785-3.11-1.944c-3.651-0.437-7.442,0.158-11.117-0.121c-3.786-0.387-5.894,0.721-5.698,5.061 c0.045,0.996-1.78,2.077-2.744,3.119c-0.848-1.038-2.451-2.105-2.412-3.108c0.153-3.932-1.445-5.27-5.269-5.225 c-1.017,0.012-2.491-1.899-2.973-3.215c-0.52-1.422-0.127-3.18-0.126-4.791c0.001-5.24-0.002-5.268,5.3-5.954 c2.366-0.306,3.023-1.787,2.927-3.889c-0.098-2.143,0.268-4.425,2.848-4.073c1.034,0.141,2.342,2.528,2.49,3.998 c0.282,2.788,1.314,4.039,4.131,3.976c3.956-0.088,7.919-0.125,11.872,0.011c3.063,0.105,4.168-1.204,4.13-4.212 c-0.035-2.816-0.326-5.041-3.916-4.755c-2.559,0.203-4.468-0.474-4.367-3.527c0.095-2.865,2.016-3.344,4.358-3.173 c2.898,0.212,3.849-1.243,3.979-4.019c0.085-1.821,0.73-5.002,1.563-5.153c3.046-0.553,6.308-0.31,9.408,0.165 c0.646,0.099,1.284,2.453,1.345,3.795c0.224,4.967,0.375,5.207,5.402,5.214c1.361,0.002,2.928-0.423,4.027,0.116 c1.272,0.623,2.94,2.09,2.943,3.194c0.002,1.125-1.621,2.815-2.876,3.241c-1.666,0.565-3.668,0.223-5.518,0.132 c-3.18-0.157-3.971,1.57-3.952,4.398c0.019,2.703,0.495,4.64,3.783,4.569c3.957-0.085,7.916-0.055,11.874-0.012 c2.166,0.024,3.322-0.763,3.826-3.068c0.242-1.105,1.771-1.927,2.718-2.877c0.905,0.971,2.333,1.814,2.605,2.939 c0.545,2.256,1.757,2.7,3.843,3.111C149.469,944.566,146.104,949.379,146.765,952.539z M252.621,98.898 c0.287-0.167,0.574-0.334,0.861-0.502c2.841,6.521,5.683,13.042,8.739,20.056c-4.719,1.002-8.414,1.787-12.443,2.642 C250.758,113.446,251.689,106.172,252.621,98.898z M184.136,46.188c29.823,0,54,24.177,54,54c0,29.823-24.177,54-54,54 s-54-24.177-54-54C130.136,70.365,154.313,46.188,184.136,46.188z M162.097,165.903c14.218,3.796,27.946,4.565,42.414-0.072 c-3.942,14.414-4.001,28.063,0.302,42.583c-14.189-3.96-27.779-4.487-42.527-0.062C166.547,193.78,166.444,180.286,162.097,165.903 z M114.049,99.643c0.292,0.134,0.583,0.269,0.875,0.403c1.095,7.133,2.19,14.267,3.378,22.01 c-3.852-0.843-7.747-1.695-12.458-2.726C108.69,112.502,111.369,106.072,114.049,99.643z M114.09,275.17 c-2.992-7.299-5.446-13.283-8.044-19.622c4.192-0.951,7.557-1.714,11.303-2.564C116.293,260.174,115.314,266.84,114.09,275.17z  M97.136,240.188c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54s54,24.177,54,54 C151.136,216.012,126.96,240.188,97.136,240.188z M190.317,961.816c-2.889,3.631-2.59,7.316-2.675,11.229 c-0.063,2.929-0.301,6.185-4.102,6.083c-3.718-0.099-3.92-3.373-3.912-6.266c0.01-3.961,0.532-7.956-2.966-11.069 c-0.843-0.75-0.86-2.433-1.653-4.938c1.737-1.842,3.427-4.577,5.876-5.996c3.218-1.864,7.078-0.801,8.743,2.361 C190.908,955.651,191.666,960.12,190.317,961.816z M190.377,894.286c-2.75,3.639-2.754,7.277-2.731,11.231 c0.017,2.954-0.303,6.162-3.967,6.219c-3.722,0.058-4.036-3.156-4.069-6.118c-0.044-3.915,0.729-7.982-2.898-11.07 c-0.855-0.728-0.902-2.408-1.792-5.047c1.877-1.885,3.726-5.163,6.313-5.925c2.41-0.711,6.606,0.411,8.177,2.279 C190.999,887.744,191.681,892.56,190.377,894.286z M190.399,830.196c-3.107,3.329-2.592,6.926-2.795,10.682 c-0.086,1.597-0.323,3.33-1.04,4.717c-1.41,2.725-4.298,2.744-5.822,0.114c-0.63-1.087-1.04-2.453-1.075-3.706 c-0.125-4.43,0.653-9.009-3.304-12.472c-0.62-0.543-0.572-1.852-0.833-2.806c-0.315-0.34-0.629-0.679-0.944-1.019 c2.103-2.244,3.85-5.571,6.413-6.415c2.391-0.788,6.184,0.324,8.392,1.933C192.319,823.355,192.864,827.555,190.399,830.196z  M184.136,328.188c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54s54,24.177,54,54 C238.136,304.012,213.96,328.188,184.136,328.188z M252.789,277.752c-0.265-0.133-0.531-0.265-0.796-0.398 c-1.015-8.257-2.029-16.515-3.086-25.115c4.167,0.862,8.324,1.721,13.585,2.809C259.162,262.841,255.975,270.297,252.789,277.752z  M271.136,240.188c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54c29.823,0,54,24.177,54,54 C325.137,216.012,300.96,240.188,271.136,240.188z\",\n        clocks: {\n            size: 108,\n            0: { x: 184.245, y: 100 },\n            1: { x: 97.245, y: 186 },\n            2: { x: 271.245, y: 186 },\n            3: { x: 184.245, y: 274 }\n        }\n    },\n    5: {\n        height: 1148.657,\n        width: 368.698,\n        path: \"M364.919,177.185c-5.856-6.593-15.147-6.888-21.897-0.694c-3.717,3.411-4.299,3.242-5.541-1.587 c-0.25-0.972-0.571-1.926-0.803-2.901c-6.223-26.032-22.396-42.736-47.523-51.238c-2.474-0.837-4.808-2.72-6.666-4.641 c-6.618-6.844-12.426-14.598-19.638-20.709c-7.25-6.144-14.426-11.753-15.964-21.863c-0.145-0.952-0.81-1.83-1.262-2.728 c-10.14-20.142-26.293-32.5-48.2-37.503c-2.572-0.587-5.014-1.743-8.025-2.817c1.316-1.702,1.86-2.531,2.526-3.247 c6.502-6.986,6.698-15.783,0.465-21.94c-5.785-5.714-15.027-5.762-20.84-0.11c-6.368,6.191-6.436,15.084,0.239,21.857 c2.991,3.035,1.728,4.561-1.167,5.98c-1.334,0.654-2.844,0.952-4.281,1.387c-24.857,7.514-40.936,23.712-48.399,48.654 c-0.748,2.499-2.69,4.83-4.561,6.77c-8.684,9.004-17.485,17.897-26.377,26.695c-1.782,1.764-3.95,3.591-6.269,4.287 c-27.272,8.186-44.245,25.906-50.386,53.864c-0.306,1.391-0.752,2.75-1.182,4.299c-11.942-8.326-18.43-8.891-24.733-2.424 c-5.16,5.294-6.085,13.716-1.351,19.24c2.253,2.629,5.655,4.841,8.962,5.874c6.77,2.115,12.009-1.8,16.717-6.757 c0.647,1.364,1.068,1.923,1.182,2.539c5.495,29.672,22.939,48.289,51.806,56.504c1.891,0.538,3.666,2.056,5.112,3.503 c8.725,8.731,17.397,17.519,25.942,26.426c1.755,1.83,3.532,4.061,4.227,6.423c5.507,18.702,16.574,32.696,33.076,43.228 c6.667,4.255,11.428,11.52,16.987,17.48c0.5,0.535,0.688,1.544,0.692,2.334c0.044,10.877,0.03,21.753,0.03,32.638 c-1.577,0.516-2.845,0.932-4.113,1.346c-17.135,5.597-30.511,16.033-39.024,31.952c-3.426,6.407-5.333,13.646-7.754,20.57 c-1.76,5.033-3.129,5.54-6.907,2.08c-2.706-2.478-6.172-4.068-9.837-4.235c-8.598-0.392-15.176,6.223-15.67,13.97 c-0.384,6.021,2.865,11.744,8.198,14.44c5.638,2.851,12.01,2.021,16.818-2.189c2.562-2.243,5.668-1.656,6.923,1.51 c1.187,2.993,1.799,6.229,3.124,9.149c2.549,5.62,4.886,11.444,8.247,16.568c9.497,14.478,39.422,28.018,39.422,28.018v28.542 c0,0-0.496,0.466-0.788,0.469c-5.522,0.049-11.045,0.088-16.568,0.095c-9.805,0.013-10.191,0.382-10.188,9.959 c0.001,2.347-0.002,4.695,0,7.042c0.008,7.059,1.061,8.147,7.942,8.157c6.643,0.01,13.286,0.002,20.223,0.002 c-0.115,2.368-0.198,4.098-0.292,6.035c-7.528,0-14.546,0.054-21.562-0.02c-3.56-0.037-6.383,2.854-6.323,6.415 c0.064,3.826-0.011,7.654,0.01,11.481c0.033,5.918,1.364,7.248,7.324,7.269c6.815,0.024,21.22,0.006,21.22,0.006v7.044 c0,0-14.435-0.017-21.108,0.005c-6.069,0.02-7.373,1.289-7.434,7.19c-0.028,2.682,0.18,5.38-0.039,8.044 c-0.443,5.389,0.07,10.039,6.912,10.524c-3.015,31.457-2.572,62.398,2.234,93.196c2.98,19.097,7.19,37.854,16.599,55.063 c1.443,2.639,2.397,5.924,2.406,8.914c0.209,63.543,0.251,127.087,0.325,190.631c0.002,1.795,0,3.59,0,5.442 c-5.238,0.679-7.397-1.369-7.347-5.986c0.035-3.185,0.024-6.371,0.006-9.557c-0.034-5.945-1.325-7.274-7.309-7.285 c-17.074-0.032-34.148-0.022-51.222-0.026c-11.718-0.003-23.435-0.029-35.153,0.013c-5.235,0.019-6.699,1.54-6.756,6.814 c-0.038,3.521-0.04,7.042,0.004,10.563c0.066,5.255,1.516,6.725,6.823,6.744c11.215,0.04,22.431,0.01,33.646,0.013 c11.868,0.003,11.868,0.005,11.75,11.912c-0.059,5.922-1.3,7.16-7.407,7.176c-12.22,0.031-24.439,0.018-36.659,0.029 c-7.054,0.006-8.155,1.08-8.167,7.935c-0.004,2.18-0.006,4.359,0.001,6.539c0.021,6.383,1.222,7.644,7.439,7.655 c11.048,0.02,22.096,0.002,33.144,0.006c11.791,0.005,11.791,0.008,11.648,12.012c-0.067,5.703-1.367,7.062-7.047,7.083 c-10.378,0.04-20.758,0.096-31.135-0.002c-15.122-0.144-14.146-0.478-14.047,14.132c0.038,5.646,1.377,6.992,7.074,7.008 c11.048,0.031,22.096,0.007,33.144,0.01c12.19,0.003,12.19,0.005,12.011,12.153c-0.083,5.597-1.413,6.924-7.187,6.944 c-10.211,0.034-20.423,0.089-30.633-0.001c-15.773-0.139-14.465-0.577-14.406,14.774c0.024,6.173,1.313,7.37,7.73,7.375 c13.726,0.011,27.452,0.005,41.179,0.003c14.898-0.002,29.796,0.018,44.694-0.027c5.339-0.016,6.767-1.487,6.831-6.742 c0.033-2.682-0.046-5.366,0.02-8.047c0.126-5.106,1.839-6.469,8.044-5.697c0,5.722-0.455,11.611,0.097,17.404 c1.078,11.308,2.634,22.631,8.667,32.623c3.709,6.143,9.563,5.816,12.753-0.612c2.984-6.015,5.833-12.625,6.409-19.174 c1.579-17.969,2.543-36.045,2.614-54.083c0.36-91.878,0.35-183.757,0.553-275.636c0.005-2.049,0.733-4.214,1.576-6.124 c3.369-7.639,7.748-14.934,10.257-22.833c11.421-35.946,13.433-72.997,11.755-110.391c-0.269-5.99-0.801-11.968-1.209-17.909 c7.452-1.534,7.775-1.945,7.779-9.588c0.001-2.515,0.011-5.03,0.007-7.545c-0.013-7.75-0.894-8.656-8.46-8.663 c-7.141-0.007-22.406-0.001-22.406-0.001v-7.045c0,0,16.742-0.048,24.561,0.019c4.359,0.038,6.392-2,6.312-6.351 c-0.071-3.855,0.016-7.712-0.019-11.568c-0.053-5.938-1.345-7.219-7.35-7.242c-7.485-0.029-22.504-0.007-22.504-0.007v-6.035 c0,0,15.454,0.033,22.967-0.011c5.362-0.031,6.803-1.454,6.876-6.683c0.049-3.52,0.028-7.042,0.018-10.563 c-0.019-6.708-1.157-7.881-7.7-7.895c-7.319-0.016-21.161-0.004-21.161-0.004v-28.963c0,0,51.319-18.506,51.418-58.803 c13.274,8.8,19.828,9.143,25.982,1.96c4.843-5.653,4.919-13.758,0.181-19.362c-6.121-7.24-12.687-6.904-26.259,1.909 c-5.709-30.27-22.672-50.541-52.587-59.137c0-11.198-0.038-22.249,0.053-33.298c0.01-1.247,0.394-2.826,1.206-3.677 c5.143-5.394,9.736-11.741,15.851-15.695c15.582-10.074,26.618-23.168,32.069-40.997c0.628-2.052,2.154-4.251,3.897-5.472 c12.064-8.448,22.297-18.658,30.858-30.639c1.235-1.728,3.009-3,5.027-3.661c25.276-8.284,41.218-25.241,47.865-51.029 c0.549-2.129,1.536-4.145,2.62-7.008c2.028,1.88,3.182,3.03,4.418,4.083c5.813,4.951,14.202,4.893,19.761-0.107 C369.847,192.788,370.428,183.388,364.919,177.185z M252.394,107.492c4.098,3.415,7.887,6.574,11.677,9.733 c-0.404,0.395-0.807,0.791-1.211,1.186c-4.169,0.785-8.338,1.57-13.15,2.476C250.666,116.112,251.516,111.872,252.394,107.492z  M184.406,46c29.823,0,54,24.177,54,54c0,29.823-24.177,54-54,54s-54-24.177-54-54C130.406,70.177,154.583,46,184.406,46z  M162.373,165.581c14.357,4.18,28.096,4.578,42.513,0.199c-4.092,14.47-3.946,28.113,0.227,42.523 c-14.26-4.037-27.868-4.509-42.273-0.152C166.659,193.831,166.896,180.189,162.373,165.581z M115.827,107.593 c1.197,5.466,2.101,9.598,3.149,14.382c-4.547-0.964-8.521-1.806-13.675-2.899C108.835,115.221,111.958,111.814,115.827,107.593z  M43.406,186c0-29.823,24.177-54,54-54s54,24.177,54,54c0,29.823-24.177,54-54,54S43.406,215.823,43.406,186z M115.278,265.909 c-3.402-3.626-6.248-6.661-9.67-10.309c4.662-1.06,8.192-1.862,12.324-2.801C117.071,257.051,116.27,261.011,115.278,265.909z  M238.406,453c0,29.823-24.177,54-54,54s-54-24.177-54-54s24.177-54,54-54S238.406,423.177,238.406,453z M184.406,328 c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54s54,24.177,54,54C238.406,303.823,214.23,328,184.406,328z M251.958,267.927 c-1.167-5.669-2.154-10.46-3.262-15.84c5.154,0.97,9.935,1.87,14.716,2.77c0.446,0.541,0.892,1.082,1.338,1.623 C260.673,260.129,256.595,263.778,251.958,267.927z M271.406,240c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54 c29.823,0,54,24.177,54,54C325.406,215.823,301.23,240,271.406,240z\",\n        clocks: {\n            size: 108,\n            0: { x: 184.245, y: 100 },\n            1: { x: 97.245, y: 186 },\n            2: { x: 271.245, y: 186 },\n            3: { x: 184.245, y: 274 },\n            4: { x: 184.245, y: 453 }\n        }\n    },\n    6: {\n        height: 1148.98,\n        width: 370.141,\n        path: \"M365.84,176.489c-5.689-5.831-14.774-6.109-20.983-0.642c-4.677,4.118-4.976,4.085-6.414-2.269 c-6.187-27.333-22.732-44.97-49.412-53.347c-1.887-0.593-3.769-2.168-4.983-3.788c-8.33-11.115-18.008-20.785-29.318-28.894 c-1.84-1.32-3.239-3.825-3.948-6.065c-8.013-25.306-24.804-41.278-50.453-47.985c-1.299-0.34-2.628-0.562-3.93-0.89 c-6.029-1.519-6.346-2.456-2.44-7.102c5.378-6.396,4.93-15.201-1.065-20.921c-5.702-5.442-14.806-5.447-20.582-0.013 c-6.006,5.651-6.507,14.545-1.066,20.88c0.962,1.12,2.36,1.865,5.102,3.969c-3.997,1.969-6.466,3.647-9.192,4.455 c-21.058,6.239-37.094,18.816-44.941,39.357c-3.899,10.207-9.562,17.625-17.758,24.394c-6.646,5.489-11.704,12.883-17.615,19.294 c-1.38,1.497-3.203,3.002-5.097,3.546c-28.343,8.127-45.563,26.507-51.567,55.389c-0.195,0.941-0.595,1.84-1.211,3.697 c-4.56-5.357-9.738-8.928-16.367-7.261c-3.226,0.811-6.599,2.778-8.897,5.184c-5.104,5.343-4.779,13.776,0.038,19.336 c6.068,7.004,12.02,6.721,25.619-1.458c0.72,3.007,1.322,5.896,2.106,8.735c7.133,25.831,23.797,42.127,49.404,49.659 c2.498,0.735,4.874,2.61,6.784,4.488c8.593,8.445,17.053,17.028,25.427,25.692c1.767,1.828,3.636,4.007,4.323,6.356 c5.597,19.138,16.997,33.318,33.994,43.913c6.567,4.094,11.118,11.439,16.51,17.374c0.48,0.528,0.534,1.578,0.536,2.386 c0.033,10.743,0.022,21.486,0.022,30.697c-9.552,5.427-18.816,9.569-26.776,15.469c-12.547,9.299-19.949,22.422-23.771,37.578 c-0.68,2.698-2.102,5.208-3.473,8.506c-2.286-2.126-3.461-3.29-4.711-4.367c-6.067-5.231-15.003-4.872-20.573,0.801 c-5.603,5.707-5.839,14.698-0.54,20.569c5.565,6.166,14.515,6.88,20.866,1.665c5.112-4.197,5.412-3.946,8.069,2.516 c3.43,8.344,6.359,17.082,11.089,24.661c8.379,13.426,21.019,21.894,36.078,26.785c1.434,0.466,3.551,2,3.587,3.097 c0.294,8.853,0.165,17.72,0.165,27.124c-7.476,0-14.485-0.043-21.493,0.014c-5.306,0.044-6.687,1.494-6.735,6.878 c-0.033,3.697-0.03,7.394-0.004,11.091c0.042,5.943,1.284,7.157,7.436,7.185c6.702,0.031,13.405,0.007,20.448,0.007 c0,2.034,0,5.598,0,5.598s-13.784-0.034-20.783,0.011c-5.372,0.035-6.799,1.45-6.861,6.724c-0.047,4.026,0.044,8.054-0.023,12.079 c-0.072,4.325,1.898,6.385,6.299,6.345c6.876-0.063,13.753,0.049,20.629,0.113c0.289,0.003,1.739,0.534,1.739,0.534v6.407 c0,0-14.692-0.032-21.682,0.01c-5.652,0.034-7.334,1.395-6.872,7.119c0.694,8.601-1.289,15.249-8.006,21.638 c-8.605,8.185-13.036,19.34-15.463,31.089c-1.309,6.335-2.096,6.555-6.889,2.398c-6.287-5.453-15.195-5.103-20.871,0.819 c-5.657,5.902-5.624,15.003,0.076,20.896c5.702,5.895,14.51,6.153,20.855,0.613c1.117-0.975,2.238-1.945,4.238-3.682 c1.129,2.807,2.274,4.924,2.843,7.186c4.769,18.938,15.137,33.728,31.864,44.051c1.736,1.072,3.27,3.377,3.775,5.392 c3.397,13.548,7.363,26.834,14.685,38.904c0.804,1.325,1.03,3.177,1.033,4.786c0.118,64.926,0.18,129.852,0.239,194.778 c0.001,0.981-0.122,1.963-0.184,2.894c-5.249,0.709-6.974-0.588-7.13-5.358c-0.109-3.352-0.003-6.71-0.024-10.065 c-0.036-5.705-1.357-7.092-7.019-7.099c-21.978-0.026-43.956-0.012-65.933-0.011c-7.046,0-14.094,0.1-21.138-0.026 c-4.635-0.083-6.728,2.003-6.589,6.633c0.109,3.639,0.121,7.278-0.002,10.917c-0.157,4.646,1.947,6.703,6.575,6.67 c12.75-0.09,25.501-0.045,38.251-0.028c6.305,0.008,7.513,1.253,7.533,7.599c0.038,11.525,0.038,11.526-11.68,11.525 c-11.24-0.001-22.481-0.03-33.722,0.007c-5.418,0.018-6.914,1.437-6.931,6.666c-0.053,16.568-1.437,15.572,15.235,15.484 c10.066-0.053,20.132-0.038,30.198,0.002c5.373,0.021,6.796,1.457,6.905,6.697c0.259,12.419,0.259,12.42-12.268,12.419 c-11.073,0-22.146-0.028-33.218,0.011c-5.319,0.019-6.822,1.501-6.857,6.738c-0.102,15.018-1.068,14.544,14.31,14.408 c10.401-0.092,20.803-0.047,31.205-0.005c5.279,0.022,6.729,1.522,6.828,6.773c0.234,12.342,0.234,12.342-12.345,12.342 c-11.073,0-22.146-0.031-33.218,0.012c-5.25,0.02-6.76,1.539-6.779,6.814c-0.06,16.24-1.382,15.39,14.882,15.343 c26.004-0.075,52.009-0.015,78.013-0.024c6.592-0.002,7.763-1.211,7.767-7.876c0.001-2.349-0.056-4.699,0.01-7.046 c0.144-5.087,1.794-6.38,6.391-5.865c1.57,11.962,2.907,23.747,4.765,35.449c0.647,4.073,1.998,8.292,4.104,11.797 c1.828,3.041,5.159,7.119,7.859,7.143c2.656,0.024,6.805-4.019,7.763-7.073c3.09-9.85,6.148-19.959,7.106-30.167 c1.295-13.794,0.763-27.772,0.787-41.671c0.158-91.433,0.238-182.866,0.46-274.299c0.006-2.499,0.844-5.29,2.131-7.444 c7.151-11.972,11.314-25.021,14.283-38.502c0.767-3.483,2.275-5.895,5.318-7.958c14.472-9.809,23.801-23.321,28.184-40.279 c0.711-2.753,1.981-5.361,3.281-8.798c2.096,1.947,3.257,3.114,4.508,4.173c6.274,5.312,15.319,4.747,20.867-1.276 c5.371-5.83,5.28-14.718-0.209-20.541c-5.593-5.933-14.657-6.313-20.861-0.875c-4.91,4.304-5.502,4.183-6.871-2.32 c-2.843-13.501-9.129-25.091-18.636-35.051c-1.059-1.109-1.624-3.064-1.703-4.662c-0.225-4.519-0.177-9.058-0.049-13.584 c0.13-4.584-1.863-6.712-6.52-6.641c-7.688,0.117-23.46,0.032-23.46,0.032v-7.081c0,0,15.513,0.035,23.187-0.012 c5.264-0.032,6.699-1.51,6.757-6.834c0.042-3.858,0.047-7.718-0.001-11.576c-0.066-5.278-1.476-6.669-6.885-6.701 c-7.529-0.044-22.059-0.011-22.059-0.011v-6.073c0,0,14.421,0.036,22.088-0.012c5.373-0.034,6.792-1.451,6.855-6.73 c0.048-4.026-0.055-8.054,0.028-12.079c0.089-4.361-1.944-6.374-6.308-6.332c-7.707,0.073-23.662,0.021-23.662,0.021 s0-18.743,0-28.6c29.397-8.459,46.462-28.621,52.535-59.535c5.681,5.182,10.784,9.539,17.649,7.382 c3.324-1.045,6.767-3.214,9.025-5.845c4.929-5.744,3.921-14.326-1.559-19.637c-6.511-6.312-13.714-5.558-25.117,3.388 c-5.85-30.371-22.706-50.809-52.896-59.482c0-11.328-1.021-22.855,0.356-34.088c0.927-7.564,7.385-13.291,13.943-17.092 c17.546-10.17,29.776-24.263,35.419-43.925c0.495-1.726,2.182-3.403,3.745-4.482c12.023-8.304,22.113-18.494,30.667-30.315 c1.255-1.734,3.402-3.24,5.446-3.923c25.095-8.384,41.101-25.168,47.682-50.873c0.553-2.159,1.517-4.212,2.638-7.26 c1.992,1.814,3.143,2.911,4.345,3.949c6.307,5.446,15.194,5.081,20.928-0.844C371.579,191.607,371.538,182.33,365.84,176.489z M253.55,107.072c4.157,3.613,7.747,6.732,11.337,9.852c-0.326,0.501-0.652,1.003-0.979,1.504 c-4.182,0.798-8.365,1.596-13.163,2.512C251.718,116.132,252.577,111.882,253.55,107.072z M185.289,45.98c29.823,0,54,24.177,54,54 c0,29.823-24.177,54-54,54s-54-24.177-54-54C131.289,70.157,155.466,45.98,185.289,45.98z M164.151,165.773 c13.581,4.334,27.363,4.22,41.777,0.199c-4.474,14.48-3.87,28.139,0.027,42.429c-14.232-4.098-27.748-4.399-41.531-0.444 c0.777-7.312,2.093-14.066,2.044-20.809C166.419,180.244,165.032,173.349,164.151,165.773z M116.538,107.809 c1.209,5.322,2.145,9.436,3.252,14.311c-4.762-1.06-8.731-1.943-13.791-3.07C109.65,115.157,112.775,111.823,116.538,107.809z M98.289,239.98c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54s54,24.177,54,54 C152.289,215.804,128.113,239.98,98.289,239.98z M115.949,265.97c-3.407-3.594-6.205-6.546-9.77-10.308 c5.012-1.059,8.587-1.815,12.604-2.664C117.803,257.484,116.976,261.266,115.949,265.97z M239.289,683.98c0,29.823-24.177,54-54,54 s-54-24.177-54-54s24.177-54,54-54S239.289,654.157,239.289,683.98z M239.289,452.98c0,29.823-24.177,54-54,54s-54-24.177-54-54 s24.177-54,54-54S239.289,423.157,239.289,452.98z M185.289,327.98c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54 s54,24.177,54,54C239.289,303.804,215.113,327.98,185.289,327.98z M253.079,268.69c-1.271-6.405-2.241-11.297-3.279-16.525 c5.356,1.047,10.057,1.966,16.634,3.251C261.644,260.177,257.764,264.034,253.079,268.69z M272.289,239.98 c-29.823,0-54-24.177-54-54c0-29.823,24.177-54,54-54c29.823,0,54,24.177,54,54C326.289,215.804,302.113,239.98,272.289,239.98z\",\n        clocks: {\n            size: 108,\n            0: { x: 185.128, y: 100 },\n            1: { x: 98.128, y: 186 },\n            2: { x: 272.128, y: 186 },\n            3: { x: 185.128, y: 274 },\n            4: { x: 185.128, y: 453 },\n            5: { x: 185.128, y: 684 }\n        }\n    }\n};\nconst SVGDATA = {\n    teeth: {\n        tall: {\n            viewBox: \"0 0 512 1540\",\n            paths: {\n                frame: \"M0,0v1540l512-244.2V0H0z M451,1263.5l-390,186V61h390V1263.5z\",\n                half: \"M0,0v748l512-244.2V0H0z\",\n                full: \"M0,0v1540l512-244.2V0H0z\"\n            }\n        },\n        med: {\n            viewBox: \"0 0 512 1540\",\n            paths: {\n                frame: \"M0,0v1388l512-395.6V0H0z M458,965.7L54,1278V53h404V965.7z\",\n                full: \"M0,0v1540l512-244.2V0H0z\"\n            }\n        },\n        short: {\n            viewBox: \"0 0 512 1540\",\n            paths: {\n                frame: \"M0,0v991l511.4-247L512,0H0z M470.5,715.2L41,922.6V40h430L470.5,715.2z\",\n                full: \"M0,0v991l511.4-247L512,0H0z\"\n            }\n        }\n    },\n    armor: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            heavy: \"M157.5,80.7c-20.6,13.7-46,22.5-69.4,26c6.8,48.9,26.1,84.1,46,97.8 c10.5,7.3,20.4,9,30.4,5.6c8.9-3.1,18.6-11,27.8-25.6C165.3,154.3,160.6,113.5,157.5,80.7L157.5,80.7z M354.5,80.8 c-3.1,32.8-7.8,73.6-34.7,103.8c9.1,14.6,18.9,22.5,27.8,25.6c10,3.4,19.8,1.7,30.4-5.6c19.8-13.7,39.1-48.8,45.9-97.7 C399.3,103.7,376,95.5,354.5,80.8L354.5,80.8z M254.4,67.9c-37.1,0-69.8,8.3-89.6,21c1.2,6.5,2.6,13,4.2,19.3 c19.2-8.2,50.3-16.7,85.4-16.7c35.2,0,66.3,8.5,85.4,16.7c1.7-6.3,3.1-12.8,4.2-19.3C324.2,76.2,291.5,67.9,254.4,67.9z M64.9,127.9l-47.7,45.5c29.8,37.2,63,56.8,86.5,58.7c1.1,0.1,2.3,0.1,3.3,0.2c1.8-7.6,4-15.1,6.5-22.3 C91.7,194.9,74.4,166.1,64.9,127.9L64.9,127.9z M447.1,127.9c-9.6,38.3-26.9,67-48.6,82c0,0-0.1,0-0.1,0.1 c2.5,7.3,4.7,14.7,6.5,22.3c1.1,0,2.2-0.1,3.4-0.2c23.4-1.9,56.8-21.5,86.5-58.7L447.1,127.9L447.1,127.9z M176,139.4 c5.7,12.2,13.1,23.3,22.9,32.8l6.4,6.2l-4.3,7.8c-2.3,4.1-4.6,8-7,11.7c40.8,15,85,14,124-0.2c-2.4-3.6-4.6-7.4-6.9-11.4l-4.3-7.8 l6.4-6.2c9.4-9.1,16.7-19.9,22.3-31.5C280.8,153.8,228.5,151.3,176,139.4L176,139.4z M401.7,243.6c0,0-3.7,38.1-22.9,76.1 l-121.7-32.7l-1.8-0.4l-1.8,0.4l-120.3,32.7c-19-38-22.7-76.1-22.7-76.1s12,3.8,19.5-18.7c10.7,3.2,22,3.3,32.8-0.4 c9.2-3.2,17.8-8.8,25.8-16.9c21.6,8.9,44.2,13.1,66.7,13.1c22.7,0,45.6-4.2,67.4-13.1c8,8,16.8,13.7,26.1,16.9 c10.9,3.7,22.3,3.6,33.1,0.4C389.6,247.4,401.7,243.6,401.7,243.6z M486.1,210.7c-25.4,24.2-52.1,38-76.2,40c-0.4,0-0.9,0-1.3,0.1 c1.2,8.1,2,16.2,2.3,24.4c22.8,3.8,54.7,0.1,90-14.3L486.1,210.7L486.1,210.7z M25.9,210.8l-14.8,50.1c35.3,14.4,67.2,18.1,90,14.3 c0.3-8.2,1.1-16.3,2.3-24.4c-0.4,0-0.9,0-1.3-0.1C78,248.7,51.3,234.9,25.9,210.8L25.9,210.8z M256,305.2l-114.8,28.1 c1.9,7.7,10.1,17.6,15.4,23.8c31.8-7.3,59.3-11.4,94.7-11.6c2.6,0,5.3,0,7.9,0c38.2,0.3,64.9,4.3,95.9,11.6 c5.1-6.2,15.2-15.8,16.8-23.6L256,305.2L256,305.2z M254.1,347.8l-79.3,22.1c5.8,4.8,16,8.5,23.2,13.3c18-5,33.5-7.8,53.5-7.9 c1.5,0,3,0,4.5,0c21.6,0.2,36.6,3,54.1,7.9c9.9-1.8,16.8-6.8,25.5-12.3L254.1,347.8L254.1,347.8z M373.3,377.7 c-68.3,55.6-166.9,55.7-235.3,0.3l-1.8,35.9c4.7,7.9,18.3,17,38,23c21,6.4,48,9.9,75.6,10.2c27.6,0.3,55.8-2.6,79.4-8.7 c21.6-5.6,39.3-14.2,48.8-23.9L373.3,377.7L373.3,377.7z\",\n            light: \"M254.9,88c-23.1,0-44.1,2.8-59.8,8.8c-7.9,3-14.5,6.8-19.5,11.9c-5,5.1-8.4,12.1-8.4,19.9 c0,3.2,0.5,6.2,1.5,9.1c2,37.1-20.9,83.9-46,107.5c5.9,35.9,19.4,72.7,39.6,106.3c23.8,23,54.6,35.4,85.9,37.1v-24 c-9.6-0.1-19-0.5-26.5-1.1l0.8-13.2c7.1,0.6,16.2,1,25.7,1.1v-28.3c-9.1,0.4-17.9,1.8-24.4,4.2l-3.3-12.7 c8.1-2.9,17.8-4.6,27.7-5.1v-23.8c-2.9,0.2-5.8,0.5-8.7,1c-17.2,1-31.8,3.6-45.2,7.5l-0.1-0.2c16.7-14.8,38.1-22.2,59.6-22.2 c21.4,0,42.9,7.4,59.6,22.2l-0.1,0.1c-13.4-3.9-28.1-6.5-45.4-7.5c-2.8-0.5-5.7-0.8-8.5-1v23.8c10,0.5,19.7,2.1,27.7,5.1l-3.3,12.7 c-6.6-2.4-15.4-3.8-24.5-4.2v28.3c9.4-0.1,18.6-0.4,25.7-1.1l0.8,13.2c-7.5,0.7-16.9,1-26.5,1.1v24.1c32.4-0.8,64.6-13,89.4-36.5 c21.1-33.6,34.9-69.9,40.8-105.3c-26.2-23.2-50.7-72.5-47.8-110.7c0.7-2.5,1-5,1-7.7c0-7.8-3.4-14.8-8.4-19.9 c-5-5.1-11.7-8.9-19.6-11.9C298.9,90.8,278,88,254.9,88L254.9,88z M254.9,101.3c22.3,0,42.5,2.9,56.4,8.2c7,2.7,12.4,6,15.7,9.3 c3.3,3.4,4.5,6.3,4.5,9.9c0,1.8-0.3,3.6-1.1,5.5c-21.9-11.9-49.3-17.9-76.7-17.9c-26.6,0-53.2,5.6-74.7,16.8 c-0.5-1.5-0.7-2.9-0.7-4.4c0-3.5,1.2-6.5,4.5-9.9c3.3-3.4,8.7-6.7,15.7-9.3C212.4,104.1,232.6,101.3,254.9,101.3L254.9,101.3z M253.7,130c24.6,0,49.2,4.8,68.6,14.3c-3.1,2.6-6.9,5.1-11.4,7.3c-13.9,7-33.9,11.5-56,11.5s-42-4.5-56-11.5 c-4.9-2.4-9-5.2-12.2-8C205.8,134.5,229.7,130,253.7,130z M232.3,174.9c3.7,0.5,7.5,0.9,11.4,1.2c0.5,3.6,1,7.5,1.6,11.8 c1.6,13,3.3,27.9,3.3,37.5c0,10.8-3.5,20.6-9.5,28.1c-6.1,7.5-14.5,13-24.6,16.5c-11.2,3.9-24.5,5.6-39.3,4.8 c-14.2-2.5-25.1-9.3-35.7-19.6c29.1,8.3,54.5,8.2,71.9,2.1c8.7-3.1,15.4-7.6,19.7-13c4.3-5.4,6.5-11.4,6.5-18.9 c0-7.7-1.6-22.8-3.1-35.6C233.6,184.1,232.9,179,232.3,174.9L232.3,174.9z M275,175.2c-0.6,4-1.3,9-2,14.6 c-1.6,12.7-3.1,27.9-3.1,35.6c0,7.5,2.1,13.6,6.5,18.9c4.3,5.4,11,9.9,19.7,13c17.3,6.1,42.6,6.2,71.6-2.1 c-10.6,10.3-21.5,17.1-35.7,19.6c-14.8,0.8-28-0.9-39.1-4.8c-10.1-3.5-18.5-9-24.6-16.5s-9.5-17.3-9.5-28.1 c0-9.7,1.7-24.6,3.3-37.5c0.5-4.3,1.1-8.2,1.5-11.7C267.4,176,271.2,175.7,275,175.2L275,175.2z M347.1,370.2 c-52.9,43.1-129.3,43.2-182.3,0.3l-1.4,27.8c3.6,6.1,14.2,13.2,29.4,17.8c16.3,4.9,37.2,7.7,58.5,7.9c21.4,0.2,43.2-2,61.5-6.7 c16.8-4.3,30.4-11,37.8-18.5L347.1,370.2L347.1,370.2z\",\n            special: \"M256,14.2c-65.6,98.3-131.1,90.2-196.7,106.5c0,262.3,65.6,327.8,196.7,377 c131.1-49.2,196.7-114.7,196.7-377C387.1,104.4,321.6,112.6,256,14.2z M256,47c5.1,0,9.2,4.1,9.2,9.2s-4.1,9.2-9.2,9.2 s-9.2-4.1-9.2-9.2S250.9,47,256,47z M70.6,138.2c0-5.1,4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2s-4.1,9.2-9.2,9.2S70.6,143.3,70.6,138.2z M92.1,301.1c-5.1,0-9.2-4.1-9.2-9.2c0-5.1,4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2C101.3,296.9,97.2,301.1,92.1,301.1z M157.7,432.2 c-5.1,0-9.2-4.1-9.2-9.2c0-5.1,4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2C166.9,428.1,162.7,432.2,157.7,432.2z M256,483.4 c-5.1,0-9.2-4.1-9.2-9.2s4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2S261.1,483.4,256,483.4z M354.3,432.2c-5.1,0-9.2-4.1-9.2-9.2 c0-5.1,4.1-9.2,9.2-9.2c5.1,0,9.2,4.1,9.2,9.2C363.6,428.1,359.4,432.2,354.3,432.2z M314.4,426.7c-15.8,11.1-33.7,18.7-51.1,26.8 c-6.7,4.7-14-0.5-20.7-2.5c-44.7-18.3-86.5-49.8-107.6-94.5c-29.8-63.5-33.8-135-36.7-204.3c58.8-9,115.3-28.5,156.2-72.1l1.9-2.1 c4.5,5,9.3,9.8,14.2,14.5c35.8,36.3,85,47,133.9,57.8c2.8,1.2,6.8,0.5,9.1,2c-2.7,66.4-5.7,134.9-33.1,196.4 C367.3,380.9,343.2,407.7,314.4,426.7z M419.9,301.1c-5.1,0-9.2-4.1-9.2-9.2c0-5.1,4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2 C429.1,296.9,425,301.1,419.9,301.1z M432.2,147.4c-5.1,0-9.2-4.1-9.2-9.2s4.1-9.2,9.2-9.2s9.2,4.1,9.2,9.2 S437.3,147.4,432.2,147.4z M301.1,154.9c0.2,23.3,0.3,46.6,0.5,69.9c0,1,0.4,2.2,0.9,3.1c4.9,8.4,9.8,16.9,15,25.1 c1.6,2.6,0.8,5.1,0.6,7.6c-0.7,9.5-1.7,19-2.6,28.5c-1,10.5-2,21-3,31.6c-0.8,9-1.6,17.9-2.4,26.9c-0.8,9-1.7,17.9-2.5,26.9 c-0.7,7.3-1.3,14.6-2,22c-0.1,1.2-0.6,2.7-1.4,3.6c-12,12-24.1,23.9-36.2,35.9c-0.2,0.2-0.5,0.5-1.1,1c0-1.1,0-1.8,0-2.5 c0.1-66.5,0.3-133,0.5-199.5c0-1.5,0.8-3.2,1.7-4.4c2.2-2.9,2.8-6,2.8-9.6c0-28.5,0.1-57.1,0.2-85.6c0-0.7,0-1.5,0-2.5 c0.8,0,1.5-0.1,2.3-0.1c13.9,0.1,27.8,0.1,41.7,0.1c1.2,0,1.9,0.3,2.3,1.5c0.8,2.2,1.7,4.3,2.7,6.6c-6.2,3.9-12.2,7.6-18.2,11.3 C301.6,152.6,301.1,153.4,301.1,154.9z M245.2,433.7c0,0.9,0,1.7,0,2.6c-0.2,0.1-0.4,0.2-0.6,0.3c-1.4-1.5-2.8-3.1-4.3-4.5 c-10.7-10.6-21.5-21.2-32.2-31.9c-0.9-0.9-1.6-2.5-1.7-3.9c-1-9.2-1.8-18.4-2.6-27.5c-0.7-7.2-1.3-14.3-2-21.5 c-0.8-9.2-1.7-18.4-2.6-27.5c-0.7-7.1-1.3-14.2-1.9-21.3c-0.9-9.3-1.7-18.5-2.6-27.8c-0.5-4.9-1-9.9-1.3-14.8 c-0.1-0.7,0.4-1.6,0.8-2.2c5.1-8.6,10.2-17.1,15.2-25.7c0.5-0.9,0.9-2.1,0.9-3.1c0.2-23.2,0.3-46.4,0.5-69.6c0-1.6-0.5-2.5-1.9-3.4 c-6-3.6-11.9-7.3-18-11.2c1-2.5,2-4.9,3.1-7.4c0.2-0.3,0.8-0.6,1.2-0.6c14.6-0.1,29.3-0.1,43.9-0.1c0.1,0,0.3,0.1,0.6,0.3 c0,0.7,0.1,1.5,0.1,2.3c0.1,29.2,0.2,58.4,0.3,87.7c0,2.1,0.3,4,1.7,5.6c2.5,2.9,3,6.2,3,10C244.9,303.4,245.1,368.5,245.2,433.7z\",\n            specialBg: \"M316.9,432.4c-16.5,11.6-35,19.4-53.1,27.8c-7,4.9-14.6-0.5-21.6-2.6 c-46.5-19-90-51.8-111.9-98.3c-31-66.1-35.1-140.5-38.2-212.4c61.2-9.4,119.9-29.6,162.4-75l2-2.1c4.7,5.2,9.6,10.2,14.7,15.1 c37.2,37.7,88.4,48.9,139.2,60.1c2.9,1.3,7.1,0.5,9.4,2.1c-2.9,69.1-5.9,140.3-34.4,204.3C372,384.8,346.8,412.7,316.9,432.4z\"\n        }\n    },\n    [ConsequenceType.ReducedEffect]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            main: \"M260.7,487.55C133,487.55,28.39,382.92,28.39,255.23S133,24.45,260.7,24.45A230.5,230.5,0,0,1,491.49,255.23c0,127.69-103.1,232.32-230.78,232.32Zm-1.06-82L377,287.58l-23.94-25.1-65.41,37.94V128a167.28,167.28,0,0,1,103.6,268.91,193.71,193.71,0,0,0,61.22-141.63A191.18,191.18,0,0,0,260.7,63.45c-106.39,0-193.31,85.39-193.31,191.78A192.9,192.9,0,0,0,128,395.55,167.3,167.3,0,0,1,231,128.2V296.92l-62.5-35.62-25.09,26.28Z\"\n        },\n        classes: {\n            main: \"fill-linear\"\n        }\n    },\n    [ConsequenceType.ComplicationMinor]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            main: \"M345.58,263.18l39.74-8.31,73.29-15.3,22.83-4.79,2.81-.58,9.56-2V213.1l-6.33,1.33-79.55,16.62-26.49,5.54-55.93,11.69c-13-11.18-20-24.73-27.16-39.89l-1.67-3.53,34.18-46.76,57.87-79.18,3-4.1,41.19-56.33H409.77L375.26,65.7l-4.09,5.59-60.51,82.78-32.91,45c-15.06-6.36-26.14-17.76-38.57-30.33l-2.34-2.37-4.59-30.28L216.72,33.5l-1-6.47-1.29-8.54h-18.9l2.84,18.75-.11-4.41,15.2,104.1,5.59,37c-11.18,7.5-24.44,12.15-39,15.49l-22.9-28.89L93.8,80.58,44.58,18.49H20.74l53,66.83,4.18,5.26,66.54,84,19.15,24.16-.08.7c-1.93,17.37-8.88,29.63-16.65,43.07L115.3,234.2,25.49,210.61,23.08,210l-4.31-1.14v19.32l2.56.67L112,252.65l27.61,7.25.56,1.4c6.1,15.15,5.39,31.77,2.9,49.71l-30.31,14.2L23.15,367.14l-4.38,2.06v20.62l9.18-4.3,67.92-31.77,17.13-8,28.92-13.54,1.52,1.53c5.85,5.86,10,10.29,11.22,20.75l-31.14,31.3L56.27,453.39l-37.5,37.69v2.43h24l20.91-21h0l77.94-78.36,24.11-24.24,1-.23c23.75-5.79,59.86-6.75,80.11-6.78,4,0,6.81,0,9.35.08l10.4,32.29L293,477.73l1.54,4.78,3.54,11h19.63l-5.19-16.14-2.24-6.95-25.77-80.06-11-34.32c3.55-3.17,8.73-7.63,15-12.42,11.42-8.73,26.21-17.7,35.68-19.62l4.24-.87,25.37,10L442,368.08l4.18,1.66,47.6,18.83V368.48l-37.78-15-5.21-2-82.75-32.74-36.59-14.48c0-13.16,1.4-22.85,9.12-33.93Zm-61.35-41.29c5.12,10.41,11.11,21.1,19.66,30.91l-31.15,6.52a39.69,39.69,0,0,0-6.93-12.22Zm-62.13-28,6,39.74a39.25,39.25,0,0,0-10.25,3.48l-25.18-31.77A132,132,0,0,0,222.1,193.9Zm-43.39,23.92,24.91,31.43a38.6,38.6,0,0,0-4.08,7.07l-33.92-8.92C170.58,238.65,175.45,229.15,178.71,217.82Zm17.49,56.93a39.32,39.32,0,0,0,2.08,10.45L163,301.7c1.05-11.91.92-24.05-2-36.2ZM160,324.27l.09-.55,47.15-22.07h0L169.55,339.5A54.79,54.79,0,0,0,160,324.27Zm28.37,22.85,36.61-36.8a39.43,39.43,0,0,0,10.6,1.45,35.54,35.54,0,0,0,4-.2L250,344.11C236.7,344,212.41,344.2,188.33,347.12ZM250.78,236a35.39,35.39,0,0,0-3.61-1.32L241.46,197a109.45,109.45,0,0,0,25.15,17.38Zm26.37,92.76c-3.9,3-7.1,5.61-9.88,8l-10.1-31.4a39.81,39.81,0,0,0,8.16-7.16l36.5,14.44A169,169,0,0,0,277.15,328.76Zm36-31.76L273.9,281.47c.26-1.14.47-2.29.64-3.44l45.58-9.53C315.5,277.93,313.74,287.39,313.17,297Z\"\n        },\n        classes: {\n            main: \"fill-radial\"\n        }\n    },\n    [ConsequenceType.ComplicationMajor]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            main: \"M458.26,239.57l22.83-4.78,2.81-.59,9.56-2v-19.1l-6.33,1.33-79.55,16.62-26.49,5.54-55.93,11.69c-13-11.18-20-24.73-27.16-39.89l-1.67-3.53,34.18-46.76.58-.79c9.76,28.37,24.84,58.48,51.36,78.35l24.6-5,1.83-.54L407.07,229c-37.27-19.15-50.45-51.64-61.94-88.83l-.44-1.43,43.69-59.78,3-4.1,41.19-56.34H409.42L374.91,65.7l-4.09,5.6-46.71,63.9c-34.73.23-70.42-3-95.76-22.5l-12-79.19-1-6.47-1.29-8.55H195.2L198,37.24l-.11-4.4,12.18,83.44c-17,16.89-39.15,28.73-67.39,26.48L93.45,80.59,44.23,18.49H20.39l53,66.83,4.18,5.27L129,155.51c-3.16,27.24-16.63,53.33-32.88,73.74l-71-18.63L22.73,210l-4.31-1.13v19.32l2.56.67,71.38,18.74c8.29,26.73,6.3,57.28,2.12,86L22.8,367.15l-4.38,2.05v20.63l9.18-4.3,67.92-31.78,1.09-.51A190.52,190.52,0,0,1,104.47,382c1.33,7.25,2.58,14.68,3.19,19.36l-51.74,52-37.5,37.69v2.43H42.37l20.91-21h0l58.27-58.57c10.1-.83,33.7-2.28,59.06-3.17,7.9-.28,16.15-.45,24.46-.47,23.47-.05,49.4,1.12,67.34,4.45l20.27,63,1.54,4.79,3.54,11h19.63l-5.19-16.14L310,470.43,291.2,412.17c23.43-27.05,48.62-54.87,86-69.58l64.45,25.5,4.18,1.65,47.6,18.84v-20.1l-37.78-15-5.21-2.06-62.74-24.82c-3.11-24.21,8.64-50.64,20.2-76.57ZM266.92,336.72l-10.1-31.4a39.76,39.76,0,0,0,8.16-7.15l36.5,14.44a169,169,0,0,0-24.68,16.16C272.9,331.76,269.7,334.38,266.92,336.72Zm-71.07-62a39.17,39.17,0,0,0,2.08,10.44l-35.27,16.5c1.05-11.9.92-24-2-36.19Zm-30.58-27.35c5-8.75,9.83-18.25,13.09-29.59l24.91,31.43a39.28,39.28,0,0,0-4.08,7.07Zm41.58,54.25h0L169.2,339.51a54.79,54.79,0,0,0-9.59-15.23l.09-.56Zm17.74,8.67a39.43,39.43,0,0,0,10.6,1.45,38,38,0,0,0,4-.2l10.47,32.54c-13.32-.16-37.61.08-61.69,3Zm22.23-75.64L241.11,197a109.17,109.17,0,0,0,25.15,17.39L250.43,236A37.88,37.88,0,0,0,246.82,234.69Zm26.73,46.78c.26-1.13.47-2.28.64-3.43l45.58-9.53c-4.62,9.43-6.38,18.89-6.95,28.5Zm30-28.66-31.15,6.51a39.53,39.53,0,0,0-6.93-12.21l18.42-25.21C289,232.31,295,243,303.54,252.81ZM232.78,136.13c23.18,13.26,50.47,17.92,77,18.68l-32.37,44.3c-15.06-6.37-26.14-17.76-38.57-30.33l-2.34-2.37-4.59-30.28,0-.12Zm-5,97.52a39.25,39.25,0,0,0-10.25,3.48l-25.18-31.77a132,132,0,0,0,29.42-11.45Zm-14.52-96,5.48,36.25c-11.18,7.5-24.44,12.15-39.05,15.49l-22.46-28.34C178.25,159.21,198.58,149.44,213.24,137.65Zm-69.67,36.28.5.63,19.15,24.15-.08.71c-1.93,17.37-8.88,29.63-16.65,43.06L115,234.2l-.07,0C127,217.56,138.38,195.1,143.57,173.93ZM123.4,385.56c-.42-2.17-1.06-4.9-1.43-6.92-1.84-10-4.7-23.39-8.85-33.12l28.45-13.32,1.52,1.53c5.85,5.87,10,10.3,11.22,20.75Zm15.89-125.65.56,1.4c6.1,15.14,5.39,31.77,2.9,49.71l-29,13.58c2.87-22.76,3.42-48.28-2.06-71.93h0Zm72.18,131.64h-6.55c-8.5.05-16.9.25-25,.53-15.57.55-28,1.33-37.85,2.07l.07-.07a7.94,7.94,0,0,1-.82-.06l24-24.11,1-.23c23.75-5.79,59.86-6.75,80.11-6.78,4,0,6.81,0,9.35.07l10.29,32C249.77,392.55,229.58,391.66,211.47,391.55Zm73.59-1.18-.71.53-.17-.53-11-34.32c3.55-3.17,8.73-7.63,15-12.42,11.42-8.73,26.21-17.7,35.68-19.63l4.24-.86,25.37,10C324.89,348,303.58,369.47,285.06,390.37ZM368.49,319l-.77-.31-36.59-14.48c0-13.15,1.4-22.84,9.12-33.92l5-7.14L385,254.88l.12,0C376.44,274.07,368.18,297,368.49,319Z\"\n        },\n        classes: {\n            main: \"fill-radial\"\n        }\n    },\n    [ConsequenceType.ComplicationSerious]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            main: \"M21.42,17.34,78.56,89.45c-2.73,48.59-23.75,85.79-52.39,120l-6.72-1.76V227l2.56.67C37.36,272.78,31.1,318.54,23.83,366l-4.38,2.05v20.63l9.18-4.29c6.52,10.7,13.66,27,19.06,41.33,4.29,11.33,7.48,21,9.26,26.53l-37.5,37.69v2.43h24L72,463.67c9.27-.36,41.77-1.47,82.7-.75,46.74.83,102.61,4.3,139,13.67l5.08,15.78h19.63L311,469.28c35.94-41.51,71.91-80.52,131.73-102.34l51.78,20.49v-20.1l-43-17c-6.37-39.21,12.76-76.67,30.62-116.68l12.37-2.59V212l-6.33,1.32-5.45-2.8c-56.09-28.83-76.33-78-93.3-132.7L433.6,17.34H410.45l-38.6,52.81c-58.28,1.26-112.48-2.46-154.45-37.79l-2.27-15h-18.9l2.83,18.75c-27.13,29-57.56,48-104.58,43.36L45.26,17.34Zm199.92,41c40.6,26.3,88.49,30.89,136.75,30.63L325,134.32c-36.59.39-69.86-3-95.85-24.64l-7.76-51.33Zm-18.84.44,8.29,54.77c-17.81,18.62-37.29,30.18-68,26.86L109.72,98.68c38.59-.74,68.36-17.15,92.78-39.89ZM375.83,96.38c15.53,47,37.05,92.69,84.55,122.72l-51.77,10.82-.82-.42c-37.27-19.14-50.44-51.64-61.93-88.83l-.72-2.31,30.68-42ZM95.09,110.3l34.39,43.39c-2.52,29.59-15.41,52.66-33.14,74.21L45.93,214.67c23.72-29.78,42.64-63.39,49.16-104.37ZM232.93,135c23.94,13.69,51.05,17.4,78.41,17.94l-32.91,45c-15.06-6.36-26.14-17.75-38.57-30.32l-2.35-2.37L232.93,135Zm-18.77.81,5.59,36.95c-11.18,7.5-24.44,12.15-39.05,15.49l-22.9-28.89c22.71-1.4,41.09-10.68,56.36-23.55ZM331.54,157c9.74,29.15,23.14,58,50.58,78.49l-55.93,11.69c-13-11.18-20-24.74-27.16-39.89l-1.67-3.53ZM145.1,173.41l19.15,24.16-.08.71c-1.93,17.36-8.88,29.63-16.65,43.06L116,233.06c13.21-17.36,23.94-36.83,29.12-59.65Zm77.68,19.35,6,39.75A38.88,38.88,0,0,0,218.54,236l-25.18-31.77a132.49,132.49,0,0,0,29.42-11.45Zm19.36,3.05a109.17,109.17,0,0,0,25.15,17.39l-15.83,21.66c-1.18-.49-2.38-.94-3.61-1.32l-5.71-37.73Zm-62.75,20.86L204.3,248.1a39.37,39.37,0,0,0-4.08,7.07l-33.92-8.9c5-8.76,9.83-18.25,13.09-29.6Zm105.52,4.08c5.12,10.42,11.11,21.1,19.66,30.92l-31.15,6.5A39.64,39.64,0,0,0,266.49,246l18.42-25.21ZM43.14,233.26,92,246.09c9.23,28.21,5.8,57.08,1.2,87.45l-49.07,23c6-40.15,10.29-81.42-1-123.24Zm416.14,5.16c-14.93,32.63-30.11,66.73-27.43,104.13l-43.74-17.31c-3.6-25,8.78-49.44,20.72-76.28l50.45-10.54Zm-346.57,13.1,27.61,7.25.56,1.4c6.1,15.13,5.39,31.77,2.9,49.71l-30.32,14.18c3.22-23.51,5-47.81-.75-72.54ZM386,253.74c-9,19.81-17.8,40.8-17.25,63.84l-36.59-14.47c0-13.15,1.4-22.84,9.12-33.92l5-7.15,39.74-8.3ZM161.64,264.36l35.24,9.26A39.33,39.33,0,0,0,199,284.06l-35.27,16.5c1.05-11.9.92-24.05-2.05-36.2Zm159.16,3c-4.62,9.44-6.38,18.89-6.95,28.5l-39.27-15.54c.26-1.12.47-2.27.64-3.43l45.58-9.53ZM266,297l36.5,14.44a169,169,0,0,0-24.68,16.16c-3.9,3-7.1,5.6-9.88,7.94l-10.11-31.4A39.76,39.76,0,0,0,266,297Zm-58.12,3.48-37.66,37.86a54.85,54.85,0,0,0-9.59-15.24l.09-.55,47.15-22.07Zm17.73,8.67a39.43,39.43,0,0,0,10.6,1.46c1.35,0,2.69-.07,4-.2L250.7,343c-13.32-.16-37.62.07-61.7,3l36.61-36.81ZM329.1,322l25.36,10c-29.4,14.92-50.37,35.89-69.25,57.2l-11-34.32c3.55-3.18,8.73-7.63,15-12.43,11.42-8.73,26.21-17.7,35.68-19.63l4.24-.86Zm-186.5,9.07,1.52,1.52c5.85,5.88,10,10.31,11.22,20.75L124.2,384.64c-.35-2.27-.74-4.63-1.2-7.14-2-10.95-4.45-22.94-9.32-32.9l28.92-13.54Zm235.93,10.49,39.22,15.52c-49.42,22.5-82.92,56.68-113.45,91.47l-12.44-38.65c24.11-27.84,47.68-53.61,86.67-68.34Zm-282,11.06c3,6.84,6.22,18.17,8.07,28.26,1.58,8.61,2.5,16.08,3,20.45L71.72,437.4c-1.68-5-3.78-11-6.55-18.29-5.37-14.22-12-30-19.61-42.64l51-23.86Zm150.86,9.15c4,0,6.81,0,9.35.06l10.39,32.3c-26.25-4.15-58.63-4.19-87-3.18-15.58.55-28,1.32-37.86,2.06l24.11-24.24,1-.23C191,362.74,227.16,361.79,247.41,361.76Zm-42.19,47.39c24.92-.06,50.36,1.26,68.41,5.1L287.06,456c-38.71-8.23-89-11-132.09-11.74-27.22-.48-49.23-.19-63.87.17l30.8-31c7.77-.76,30.71-2.84,58.86-3.84,7.9-.28,16.15-.45,24.46-.47Z\"\n        },\n        classes: {\n            main: \"fill-radial\"\n        }\n    },\n    [ConsequenceType.LostOpportunity]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            main: \"M373.33,52.76A234.57,234.57,0,0,0,52.77,138.67C-12,250.93,26.41,394.41,138.67,459.23s255.75,26.36,320.56-85.91S485.59,117.58,373.33,52.76Zm-211.87,367A189.1,189.1,0,0,1,81,184.37L327.62,431A188.73,188.73,0,0,1,161.46,419.76Zm211.18-14.87L107.14,139.38a187.3,187.3,0,0,1,32.24-32.29L404.89,372.6A187.71,187.71,0,0,1,372.64,404.89ZM431,327.6,184.41,81A189.12,189.12,0,0,1,431,327.6Z\"\n        },\n        classes: {\n            main: \"fill-linear\"\n        }\n    },\n    [ConsequenceType.WorsePosition]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            horizon: \"M18.36,227.8v18.68h86.37a98.45,98.45,0,0,0-4.43-18.68Zm379.4,0a110.51,110.51,0,0,1,9.44,18.68h86.44V227.8H397.76Z\",\n            boot: \"M218.67,18.73a162.14,162.14,0,0,0-20,1.32C164,24.39,123.5,39.4,91.23,67.36L124.7,257.55l.35,10.12c42.26,15.79,100.82,24.55,152.87,24.25,27.19-.15,52.64-2.74,73-7.78s35.2-12.82,41.81-20.94l.44.35a113,113,0,0,0-6.53-17.06h.19a95.88,95.88,0,0,0-4.85-8.66c-.09-.14-.16-.3-.25-.44l-.31-.47c-21.46-34.89-63.5-55.87-124.28-29.37l-.16.06a215.37,215.37,0,0,0-34,20.19h-.81c11-15.72,23.26-28.12,35.91-37.28l1.12-11.16c-14.68-4-38.08-4.06-53.53-.09L201,161.14a130.33,130.33,0,0,1,30.34-3.84c1.5,0,3,0,4.5,0a117.66,117.66,0,0,1,25.25,3.12l3.19-32c-21.06-8.07-42.12-6.6-64.57-1.59l-4.06-18.25A170.07,170.07,0,0,1,231,104.17c1.72,0,3.44,0,5.16.07a107,107,0,0,1,30.06,5.12l3.16-31.47c-25.6-7.69-51-8.1-76.91-2.78l-3.78-18.28A188.53,188.53,0,0,1,221.52,53c1.14,0,2.29-.05,3.43-.06A167.36,167.36,0,0,1,271.23,59l.47-4.6c5-23.31-18.75-35.71-53-35.65ZM397.26,284.45c-10.84,8.13-25.26,13.7-41.87,17.82-22.37,5.54-49.07,8.18-77.38,8.34a526.46,526.46,0,0,1-65.09-3.75L225.36,329c80.16,9.44,141.5-1.19,172-21.78a113.13,113.13,0,0,0-.13-22.75ZM125.7,287.77l1,30.47,58.6,8.43,9.59-22.31c-24.55-3.82-48.21-9.37-69.19-16.59Z\",\n            ice: \"M92.61,309.3C82.3,312.37,74,315.76,68,319.36l-.21.12L37.58,334.2,18.36,322v22.16L32,352.8l4.41,2.81,4.72-2.31,22-10.72c11.71,9.8,40.46,18.23,79.4,23.87l-60,28.25,26.63,21L18.36,454.23v39H145.14L188.86,447l51,46.28h27.84L159.11,394.8l35.06-23c20,1.37,41.34,2.15,63.56,2.15,20.7,0,40.66-.67,59.44-1.87l39.06,24.69-66.9,35.71,62.28,60.75H475.52L385,440.64l51.32-39.78-71.5-33.28c45.88-6,79.18-15.67,89.81-27l18,6.43,21.06,22.57V342.17l-8.94-9.56L483.17,331l-2.15-.78L439.8,315.42a141.57,141.57,0,0,0-16.66-6c5.37,3.24,8.28,6.7,8.28,10.28,0,18.59-77.73,33.66-173.62,33.66S84.14,338.29,84.14,319.7c0-3.63,3-7.13,8.47-10.4Z\"\n        },\n        classes: {\n            horizon: \"fill-dark\",\n            boot: \"fill-bright\",\n            ice: \"fill-radial\"\n        }\n    },\n    [ConsequenceType.InsightHarm1]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            eye: \"M406.09,282.69V352.6c4.19,8.54,8.53,16.73,8.53,27.56,0,13.24-8.75,22.78-18.09,22.78-9.13,0-18.69-10-18.69-23.94,0-12.22,5.1-20.64,9.56-29.59V289.63c-6.51-19.32-16.22-25.45-26.54-21.72V226.24A401.64,401.64,0,0,0,409.07,204h45.2C435.64,222.23,417,244.72,406.09,282.69ZM494.83,158.8c-33,49.83-80.77,87.12-134,108.82a291.28,291.28,0,0,1-90,21.07q-7.2.51-14.42.62a256.33,256.33,0,0,1-89-14,239,239,0,0,1-25.35-10.52A239.65,239.65,0,0,1,82.64,223.9C74.76,216.85,66,208.81,57.89,200c-11.54-12.52-21.66-26.51-25.72-41.23,20.19-37.74,48.7-69.38,84.66-92.29C241.41-14.68,416.3,37.68,494.83,158.8Zm-29.17-.36C373.78,11.86,140.41,12.08,57.19,160.28l.46.39-.46.39a353,353,0,0,0,54.67,42.55c45.21,28.32,92.77,42.1,140.82,42.29h.22C324.81,246.14,397.81,215.94,465.66,158.44Z\",\n            iris: \"M303.7,99.51a65,65,0,0,0-45-18h0a65.26,65.26,0,1,0,45,18Zm-45.4,68.13a23.4,23.4,0,1,1,23.39-23.41A23.42,23.42,0,0,1,258.3,167.64Zm45.4-68.13a65,65,0,0,0-45-18h0a65.26,65.26,0,1,0,45,18Zm-45.4,68.13a23.4,23.4,0,1,1,23.39-23.41A23.42,23.42,0,0,1,258.3,167.64Zm45.4-68.13a65,65,0,0,0-45-18h0a65.26,65.26,0,1,0,45,18Zm-45.4,68.13a23.4,23.4,0,1,1,23.39-23.41A23.42,23.42,0,0,1,258.3,167.64Z\"\n        },\n        classes: {\n            eye: \"fill-dark\",\n            iris: \"fill-med\"\n        }\n    },\n    [ConsequenceType.InsightHarm2]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            eye: \"M305.51,89.71A78.5,78.5,0,0,0,251.22,68h0a78.81,78.81,0,1,0,54.29,21.71ZM250.71,172a28.25,28.25,0,1,1,28.23-28.27A28.28,28.28,0,0,1,250.71,172Zm54.8-82.26A78.5,78.5,0,0,0,251.22,68h0a78.81,78.81,0,1,0,54.29,21.71ZM250.71,172a28.25,28.25,0,1,1,28.23-28.27A28.28,28.28,0,0,1,250.71,172Zm54.8-82.26A78.5,78.5,0,0,0,251.22,68h0a78.81,78.81,0,1,0,54.29,21.71ZM250.71,172a28.25,28.25,0,1,1,28.23-28.27A28.28,28.28,0,0,1,250.71,172Z\",\n            iris: \"M398.59,282.69V352.6c4.19,8.54,8.53,16.73,8.53,27.56,0,13.24-8.75,22.78-18.09,22.78-9.13,0-18.69-10-18.69-23.94,0-12.22,5.1-20.64,9.56-29.59V289.63c-6.51-19.32-16.22-25.45-26.54-21.72V226.24A401.64,401.64,0,0,0,401.57,204h45.2C428.14,222.23,409.46,244.72,398.59,282.69Zm-264-17.94A239.65,239.65,0,0,1,75.14,223.9c-7.88-7.05-16.67-15.09-24.75-23.86,11.79,18.34,22,39.48,27.42,60.27v50c-4.76,10.14-12.06,17.21-12.06,28.41,0,9.09,11.63,18.09,21,18.09,9.2,0,21.6-9.67,21.59-19.25,0-11.36-7.31-17.81-11.87-27V278.22C103,265.1,117.78,261.12,134.61,264.75ZM487.33,158.8c-33,49.83-80.77,87.12-134,108.82a291.28,291.28,0,0,1-90,21.07q-7.2.51-14.42.62a256.33,256.33,0,0,1-88.95-14,239,239,0,0,1-25.35-10.52A239.65,239.65,0,0,1,75.14,223.9c-7.88-7.05-16.67-15.09-24.75-23.86-11.54-12.52-21.66-26.51-25.72-41.23,20.19-37.74,48.7-69.38,84.66-92.29C233.91-14.68,408.8,37.68,487.33,158.8Zm-29.17-.36C366.28,11.86,132.91,12.08,49.69,160.28l.46.39-.46.39a353,353,0,0,0,54.67,42.55c45.21,28.32,92.77,42.1,140.82,42.29h.22C317.31,246.14,390.31,215.94,458.16,158.44Z\"\n        },\n        classes: {\n            eye: \"fill-med\",\n            iris: \"fill-med\"\n        }\n    },\n    [ConsequenceType.InsightHarm3]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            eye: \"M398.31,282.69V352.6c4.19,8.54,8.53,16.73,8.53,27.56,0,13.24-8.75,22.78-18.09,22.78-9.13,0-18.69-10-18.69-23.94,0-12.22,5.1-20.64,9.56-29.59V289.63c-6.51-19.32-16.22-25.45-26.54-21.72V226.24A401.64,401.64,0,0,0,401.29,204h45.2C427.86,222.23,409.18,244.72,398.31,282.69Zm-264-17.94A239.65,239.65,0,0,1,74.86,223.9C67,216.85,58.19,208.81,50.11,200c11.79,18.34,22,39.48,27.42,60.27v50c-4.76,10.14-12.06,17.21-12.06,28.41,0,9.09,11.63,18.09,21,18.09,9.2,0,21.6-9.67,21.59-19.25,0-11.36-7.31-17.81-11.87-27V278.22C102.75,265.1,117.5,261.12,134.33,264.75Zm114.3,24.56a256.33,256.33,0,0,1-88.95-14,109.79,109.79,0,0,1,42.38,48.58v80.59c-6.36,10.47-13.62,16.95-13.62,28.87,0,17.89,11.76,24.5,23.93,24.5,11.91,0,21.6-5.66,21.6-24.5,0-9.3-7.44-16.63-13.22-31.06V324.1C227.16,309.18,237.5,294.45,248.63,289.31ZM487.05,158.8c-33,49.83-80.77,87.12-134,108.82a291.28,291.28,0,0,1-90,21.07q-7.2.51-14.42.62a256.33,256.33,0,0,1-88.95-14,239,239,0,0,1-25.35-10.52A239.65,239.65,0,0,1,74.86,223.9C67,216.85,58.19,208.81,50.11,200c-11.54-12.52-21.66-26.51-25.72-41.23,20.19-37.74,48.7-69.38,84.66-92.29C233.63-14.68,408.52,37.68,487.05,158.8Zm-29.17-.36C366,11.86,132.63,12.08,49.41,160.28l.46.39-.46.39a353,353,0,0,0,54.67,42.55c45.21,28.32,92.77,42.1,140.82,42.29h.22C317,246.14,390,215.94,457.88,158.44Z\",\n            iris: \"M314.46,80a91.84,91.84,0,0,0-63.52-25.39h0A92.2,92.2,0,1,0,314.46,80Zm-64.12,96.24a33.05,33.05,0,1,1,33-33.07A33.08,33.08,0,0,1,250.34,176.25ZM314.46,80a91.84,91.84,0,0,0-63.52-25.39h0A92.2,92.2,0,1,0,314.46,80Zm-64.12,96.24a33.05,33.05,0,1,1,33-33.07A33.08,33.08,0,0,1,250.34,176.25ZM314.46,80a91.84,91.84,0,0,0-63.52-25.39h0A92.2,92.2,0,1,0,314.46,80Zm-64.12,96.24a33.05,33.05,0,1,1,33-33.07A33.08,33.08,0,0,1,250.34,176.25Z\"\n        },\n        classes: {\n            eye: \"fill-med\",\n            iris: \"fill-bright\"\n        }\n    },\n    [ConsequenceType.InsightHarm4]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            eye: \"M244,27.44c-46.86,0-93.53,12.25-134.7,39.08-36,22.91-64.47,54.55-84.66,92.29,4.06,14.72,14.18,28.71,25.72,41.23,8.08,8.77,16.87,16.81,24.75,23.86a239.65,239.65,0,0,0,59.47,40.85A239,239,0,0,0,160,275.27a256.33,256.33,0,0,0,88.95,14q7.22-.1,14.42-.62a291.28,291.28,0,0,0,90-21.07A299.94,299.94,0,0,0,430.12,222a286.46,286.46,0,0,0,57.21-63.16C434.75,77.71,339,27.44,244,27.44ZM245.4,245.9h-.22c-48.05-.19-95.61-14-140.82-42.29a353,353,0,0,1-54.67-42.55l.46-.39-.46-.39c83.22-148.2,316.59-148.42,408.47-1.84C390.31,215.94,317.31,246.14,245.4,245.9Zm17.93,42.79c7.16,3,14.11,11.57,20,28.08,3.54,9.85,6.71,22.54,9.33,38.58v74.84C287.27,440.69,281,449.64,281,462.5s10,22.19,21,22.19c10.74,0,22.18-9.73,22.18-23.34,0-14.45-7.09-23.42-12.81-34.57V342.22h-.22a223.26,223.26,0,0,1,7.48-25.45c9.57-26.37,22.57-44.47,34.73-48.86v-.29A291.28,291.28,0,0,1,263.33,288.69Zm-38.82,28.08c6.37-12.19,15.11-23.17,24.4-27.46a256.33,256.33,0,0,1-88.95-14,109.62,109.62,0,0,1,38.91,41.5q1.84,3.45,3.47,7.08v80.59c-6.36,10.47-13.62,16.95-13.62,28.87,0,17.89,11.76,24.5,23.93,24.5,11.91,0,21.6-5.66,21.6-24.5,0-9.3-7.44-16.63-13.22-31.06V324.1C222.09,321.64,223.26,319.18,224.51,316.77Zm-89.9-52A239.65,239.65,0,0,1,75.14,223.9c-7.88-7.05-16.67-15.09-24.75-23.86,11.79,18.34,22,39.48,27.42,60.27v50c-1.08,2.29-2.28,4.43-3.51,6.49-4.18,7.06-8.55,13.25-8.55,21.92,0,9.09,11.63,18.09,21,18.09,9.2,0,21.6-9.67,21.59-19.25,0-8.63-4.22-14.43-8.25-20.76a67,67,0,0,1-3.62-6.27V278.22C103,265.1,117.78,261.12,134.61,264.75Zm267-60.78a401.64,401.64,0,0,1-48.21,22.27v41.67c10.32-3.73,20,2.4,26.54,21.72v59.78c-4.46,8.95-9.56,17.37-9.56,29.59,0,13.94,9.56,23.94,18.69,23.94,9.34,0,18.09-9.54,18.09-22.78,0-10.83-4.34-19-8.53-27.56V282.69c7.59-26.52,19-45.48,31.53-60.73a225.7,225.7,0,0,1,16.65-18Z\",\n            iris: \"M326.5,67.65a108.84,108.84,0,0,0-75.28-30.08h0A109.22,109.22,0,1,0,326.5,67.65Zm-76,114.06a39.17,39.17,0,1,1,39.15-39.19A39.2,39.2,0,0,1,250.51,181.71Zm76-114.06a108.84,108.84,0,0,0-75.28-30.08h0A109.22,109.22,0,1,0,326.5,67.65Zm-76,114.06a39.17,39.17,0,1,1,39.15-39.19A39.2,39.2,0,0,1,250.51,181.71Zm76-114.06a108.84,108.84,0,0,0-75.28-30.08h0A109.22,109.22,0,1,0,326.5,67.65Zm-76,114.06a39.17,39.17,0,1,1,39.15-39.19A39.2,39.2,0,0,1,250.51,181.71Z\"\n        },\n        classes: {\n            eye: \"fill-bright\",\n            iris: \"fill-med\"\n        }\n    },\n    [ConsequenceType.ProwessHarm1]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            scar: \"M443.44,434.53Q408.7,409.87,376,383.64c-20-11.91-31.49.3-44.26,16.86,8.8-18.17,13.38-36.95,3.24-50.86l-4.46-3.84-44.85-35.35L237.9,336.93l17.19-25.34c7.31-12.4,3.43-27.17-5.65-41.14q-16.37-16.32-32.22-33c-1.66-1.23-3.31-2.38-4.95-3.5l-66.44,18.87L167.59,227c10.57-17.62,0-41.59-9.84-55.7q-8.4-9.81-16.62-19.75l-43.67,7.29c18.43-7.3,31.37-22.38,16.85-40l2.06,2.33Q91.79,90.29,68.44,58.49q43,32.32,83.86,67.06L188.92,116l-22.11,22q23.38,20.3,46.09,41.39l71.86-30.46L266,178l.3-.24c-21.55,27.54,18.77,86,46,78.42l31.91-17.7L319.4,275l36.88,52.71c.26.3.53.59.79.9,13.64,12.5,31.23,1.71,43.05-14.53l-19.59,42Q412.66,394.28,443.44,434.53Z\"\n        },\n        classes: {\n            scar: \"fill-dark\"\n        }\n    },\n    [ConsequenceType.ProwessHarm2]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            scarTissue: \"M399,355.08c-15-32.31-18.67-65.87-6.23-94.7-47.19,58.41-76.14,4.41-4.09-70.72-101.67,62.7-147.78,31.47-14-88.26-103,54.66-182.49,69.22-130.93,15.19-37.19,10.63-58.21,5.21-76-2.43A643.42,643.42,0,0,0,55.28,58.49a789.14,789.14,0,0,0,47,77.56c7,18.27,3,38.71-31.46,63.44,124.85-33.45,88.52,47-9.36,104.92,166.21-61.68,207.52-47.41,100.64,78,84-61.07,150.14-44.57,122.89,31.29,31.63-24.51,57.9-29.74,78-20.87q43.39,30.7,90.32,59C436.25,418.27,418.25,386,399,355.08ZM352.11,362c-16.61-9.9-26.17.25-36.79,14,7.32-15.11,11.12-30.72,2.69-42.28l-3.7-3.19L277,301.11l-39.68,22,14.29-21.06c6.08-10.31,2.85-22.58-4.7-34.2q-13.6-13.56-26.78-27.46c-1.38-1-2.75-2-4.11-2.91l-55.23,15.68,18.09-21.41c8.78-14.64,0-34.57-8.18-46.3q-7-8.15-13.82-16.42l-36.3,6.06c15.32-6.06,26.08-18.6,14-33.28l-1.89-2.13c.69.72,1.31,1.42,1.89,2.13l1.71,1.94q-20.43-25.65-39.84-52.09,35.76,26.88,69.71,55.75l30.44-7.93-18.38,18.27q19.44,16.88,38.31,34.41l59.73-25.32L260.68,191l.25-.2c-17.91,22.9,15.6,71.52,38.24,65.19l26.52-14.71-20.6,30.37,30.65,43.82.66.74c11.34,10.39,26,1.42,35.79-12.07L355.9,339q26.72,31.78,52.3,65.24Q379.31,383.76,352.11,362Z\"\n        },\n        classes: {\n            scarTissue: \"fill-med\"\n        }\n    },\n    [ConsequenceType.ProwessHarm3]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            scar: \"M447.44,434.53Q412.7,409.87,380,383.64c-20-11.91-31.49.3-44.26,16.86,8.8-18.17,13.38-36.95,3.24-50.86l-4.46-3.84-44.85-35.35L241.9,336.93l17.19-25.34c7.31-12.4,3.43-27.17-5.65-41.14q-16.37-16.32-32.22-33c-1.66-1.23-3.31-2.38-4.95-3.5l-66.44,18.87L171.59,227c10.57-17.62,0-41.59-9.84-55.7q-8.4-9.81-16.62-19.75l-43.67,7.29c18.43-7.3,31.37-22.38,16.85-40l2.06,2.33Q95.79,90.29,72.44,58.49q43,32.32,83.86,67.06L192.92,116l-22.11,22q23.38,20.3,46.09,41.39l71.86-30.46L270,178l.3-.24c-21.55,27.54,18.77,86,46,78.42l31.91-17.7L323.4,275l36.88,52.71c.26.3.53.59.79.9,13.64,12.5,31.23,1.71,43.05-14.53l-19.59,42Q416.66,394.28,447.44,434.53Z\",\n            scarTissue: \"M436.33,375.37c-18.07-38.87-22.46-79.24-7.49-113.92-56.77,70.27-91.6,5.3-4.93-85.08C301.61,251.8,246.13,214.23,407,70.19,283.18,136,187.5,153.46,249.53,88.47c-44.75,12.79-70,6.27-91.47-2.93a773.7,773.7,0,0,0-135.18-67,949.58,949.58,0,0,0,56.49,93.31c8.39,22,3.6,46.57-37.84,76.32C191.72,148,148,244.71,30.26,314.42c200-74.2,249.65-57,121.08,93.78C252.42,334.73,332,354.59,299.17,445.84c38.06-29.48,69.66-35.77,93.87-25.1q52.21,36.94,108.66,70.93C481.19,451.39,459.54,412.52,436.33,375.37ZM380,383.64c-20-11.91-31.49.3-44.26,16.86,8.8-18.17,13.38-36.95,3.24-50.86l-4.46-3.84-44.85-35.35L241.9,336.93l17.19-25.34c7.31-12.4,3.43-27.17-5.65-41.14q-16.37-16.32-32.22-33c-1.66-1.23-3.31-2.38-4.95-3.5l-66.44,18.87L171.59,227c10.57-17.62,0-41.59-9.84-55.7q-8.4-9.81-16.62-19.75l-43.67,7.29c18.43-7.3,31.37-22.38,16.85-40L116,116.26c.83.86,1.57,1.71,2.27,2.56l2.06,2.33Q95.79,90.29,72.44,58.49q43,32.32,83.86,67.06L192.92,116l-22.11,22q23.38,20.3,46.09,41.39l71.86-30.46L270,178l.3-.24c-21.55,27.54,18.77,86,46,78.42l31.91-17.7L323.4,275l36.88,52.71c.26.3.53.59.79.9,13.64,12.5,31.23,1.71,43.05-14.53l-19.59,42q32.13,38.23,62.91,78.49Q412.7,409.87,380,383.64Z\"\n        },\n        classes: {\n            scar: \"fill-dark\",\n            scarTissue: \"fill-med\"\n        }\n    },\n    [ConsequenceType.ProwessHarm4]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            scar: \"M441.44,434.53Q406.7,409.87,374,383.64c-20-11.91-31.49.3-44.26,16.86,8.8-18.17,13.38-36.95,3.24-50.86l-4.46-3.84-44.85-35.35L235.9,336.93l17.19-25.34c7.31-12.4,3.43-27.17-5.65-41.14q-16.37-16.32-32.22-33c-1.66-1.23-3.31-2.38-4.95-3.5l-66.44,18.87L165.59,227c10.57-17.62,0-41.59-9.84-55.7q-8.4-9.81-16.62-19.75l-43.67,7.29c18.43-7.3,31.37-22.38,16.85-40l2.06,2.33Q89.79,90.29,66.44,58.49q43,32.32,83.86,67.06L186.92,116l-22.11,22q23.38,20.3,46.09,41.39l71.86-30.46L264,178l.3-.24c-21.55,27.54,18.77,86,46,78.42l31.91-17.7L317.4,275l36.88,52.71c.26.3.53.59.79.9,13.64,12.5,31.23,1.71,43.05-14.53l-19.59,42Q410.66,394.28,441.44,434.53Z\",\n            scarTissue: \"M430.33,375.37c-18.07-38.87-22.46-79.24-7.49-113.92-56.77,70.27-91.6,5.3-4.93-85.08C295.61,251.8,240.13,214.23,401,70.19,277.18,136,181.5,153.46,243.53,88.47c-44.75,12.79-70,6.27-91.47-2.93a773.7,773.7,0,0,0-135.18-67,949.58,949.58,0,0,0,56.49,93.31c8.39,22,3.6,46.57-37.84,76.32C185.72,148,142,244.71,24.26,314.42c200-74.2,249.65-57,121.08,93.78C246.42,334.73,326,354.59,293.17,445.84c38.06-29.48,69.66-35.77,93.87-25.1q52.21,36.94,108.66,70.93C475.19,451.39,453.54,412.52,430.33,375.37ZM374,383.64c-20-11.91-31.49.3-44.26,16.86,8.8-18.17,13.38-36.95,3.24-50.86l-4.46-3.84-44.85-35.35L235.9,336.93l17.19-25.34c7.31-12.4,3.43-27.17-5.65-41.14q-16.37-16.32-32.22-33c-1.66-1.23-3.31-2.38-4.95-3.5l-66.44,18.87L165.59,227c10.57-17.62,0-41.59-9.84-55.7q-8.4-9.81-16.62-19.75l-43.67,7.29c18.43-7.3,31.37-22.38,16.85-40L110,116.26c.83.86,1.57,1.71,2.27,2.56l2.06,2.33Q89.79,90.29,66.44,58.49q43,32.32,83.86,67.06L186.92,116l-22.11,22q23.38,20.3,46.09,41.39l71.86-30.46L264,178l.3-.24c-21.55,27.54,18.77,86,46,78.42l31.91-17.7L317.4,275l36.88,52.71c.26.3.53.59.79.9,13.64,12.5,31.23,1.71,43.05-14.53l-19.59,42q32.13,38.23,62.91,78.49Q406.7,409.87,374,383.64Z\",\n            welts: \"M414.13,84.19a39.5,39.5,0,1,0,39.57,39.5,39.2,39.2,0,0,0-39.57-39.5ZM308.33,29.83A28.66,28.66,0,1,0,337,58.51a28.51,28.51,0,0,0-28.67-28.68ZM90.17,322.56a49.51,49.51,0,1,0,49.53,49.52A49.36,49.36,0,0,0,90.17,322.56Zm258-171.24A22.79,22.79,0,1,0,371,174.11a22.61,22.61,0,0,0-22.83-22.79ZM261.49,89.88a16.72,16.72,0,1,0,16.73,16.73,16.63,16.63,0,0,0-16.73-16.73ZM91.15,187.65a21.18,21.18,0,1,0,21.18,21.18,21,21,0,0,0-21.18-21.18Zm77.51,94.54a32.09,32.09,0,1,0,32.07,32.1,32,32,0,0,0-32.07-32.1ZM391.6,243.05a16.51,16.51,0,1,0,16.49,16.52,16.41,16.41,0,0,0-16.49-16.52ZM238.11,374.85a48.43,48.43,0,1,0,48.44,48.45A48.29,48.29,0,0,0,238.11,374.85Zm137,59.88A22.86,22.86,0,1,0,398,457.59a22.69,22.69,0,0,0-22.86-22.86Z\"\n        },\n        classes: {\n            scar: \"fill-bright\",\n            scarTissue: \"fill-dark\",\n            welts: \"fill-bright\"\n        }\n    },\n    [ConsequenceType.ResolveHarm1]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            spikes: \"M256.09,19.1A237.5,237.5,0,0,0,197,27.22C70.63,61.08-4.36,191,29.5,317.31,62.59,440.8,187.39,515.21,311,486.92A132.35,132.35,0,0,1,279.74,475,207,207,0,0,1,122,417.49l-13.48-14.55L94.89,385.42a205.62,205.62,0,0,1-24-47.36l-7.2-17.33L60.71,296.5a205.83,205.83,0,0,1-.18-54.37l3-24.36,7.67-19.51a208.28,208.28,0,0,1,29.16-53.84l105,60.61-68.63-98a205.85,205.85,0,0,1,63.68-34.49l27.24-8.18,23.18-1.89q6.46-.48,12.89-.54a205.54,205.54,0,0,1,61.66,8.84l23.65,11,22,9.09A207.05,207.05,0,0,1,428.2,140.9l13.1,14.44L448.93,173a208,208,0,0,1,16.41,42.22,205.89,205.89,0,0,1,2.52,96.73,133,133,0,0,1,7.74,38.31,235.8,235.8,0,0,0,11.48-155.53C458.51,88.09,361.59,18.05,256.09,19.1Z\",\n            eyeball: \"M344.58,242.53a45.61,45.61,0,0,1,8.95,6.95c12.22,12.21,16.07,29.9,13.26,47.35S354.74,332,340,346.82s-32.54,24-50,26.83-35.13-1-47.35-13.26a48,48,0,0,1-13-24.74,114.74,114.74,0,1,0,114.92-93.12Z\",\n            iris: \"M316.24,254a50.56,50.56,0,0,0-7.08.66c-13,2.09-27.56,9.39-39.76,21.59S249.91,303,247.81,316s.75,23.89,8,31.16S274,357.3,287,355.2s27.56-9.39,39.76-21.59,19.5-26.76,21.59-39.76-.75-23.89-8-31.16c-5.45-5.45-12.94-8.42-21.83-8.68-.74,0-1.49,0-2.25,0Zm-13.81,20.35a16,16,0,0,1,11.86,4.38c7.49,7.5,5.16,22-5.22,32.37s-24.88,12.72-32.38,5.23-5.16-22,5.22-32.38c6.17-6.16,13.78-9.49,20.52-9.6Z\"\n        },\n        classes: {\n            spikes: \"fill-dark\",\n            eyeball: \"fill-dark\",\n            iris: \"fill-med\"\n        }\n    },\n    [ConsequenceType.ResolveHarm2]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            spikes: \"M261.25,19.1a237.64,237.64,0,0,0-59.11,8.12C75.79,61.08.8,191,34.66,317.31,67.75,440.8,192.55,515.21,316.15,486.92A132.59,132.59,0,0,1,284.89,475a207,207,0,0,1-157.72-57.52l-11.44-12.15-15.68-19.92a205.62,205.62,0,0,1-24-47.36l-7.32-17.33L65.87,296.5a205.41,205.41,0,0,1-.18-54.37l91.84,19.32L76.38,198.26a208,208,0,0,1,29.16-53.84L259.93,252.78,141.87,107a205.79,205.79,0,0,1,63.67-34.49L263.45,141,256,62.45q6.46-.48,12.89-.54a205.54,205.54,0,0,1,61.66,8.84l22.84,8.32,22.83,11.78a207,207,0,0,1,57.17,50.05l13.41,16.85L454.08,173a207.52,207.52,0,0,1,18.93,139,132.67,132.67,0,0,1,7.75,38.31,235.92,235.92,0,0,0,11.48-155.53C463.67,88.09,366.74,18.05,261.25,19.1Z\",\n            eyeball: \"M349.74,242.53a45.61,45.61,0,0,1,8.95,6.95c12.21,12.21,16.07,29.9,13.26,47.35s-12.05,35.21-26.83,50-32.54,24-50,26.83-35.14-1-47.35-13.26a48,48,0,0,1-13-24.74,116.19,116.19,0,0,0-2,21.58,114.73,114.73,0,1,0,117-114.7Z\",\n            iris: \"M321.4,254a50.42,50.42,0,0,0-7.08.66c-13,2.09-27.56,9.39-39.76,21.59S255.06,303,253,316s.75,23.89,8,31.16,18.16,10.12,31.16,8,27.56-9.39,39.76-21.59,19.49-26.76,21.59-39.76-.75-23.89-8-31.16c-5.46-5.45-13-8.42-21.83-8.68-.74,0-1.49,0-2.25,0Zm-13.81,20.35a16,16,0,0,1,11.85,4.38c7.5,7.5,5.16,22-5.22,32.37s-24.87,12.72-32.37,5.23-5.16-22,5.22-32.38c6.16-6.16,13.78-9.49,20.52-9.6Z\"\n        },\n        classes: {\n            spikes: \"fill-med\",\n            eyeball: \"fill-dark\",\n            iris: \"fill-bright\"\n        }\n    },\n    [ConsequenceType.ResolveHarm3]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            spikes: \"M261.31,19.1a237.51,237.51,0,0,0-59.11,8.12C75.84,61.08.86,191,34.71,317.31,67.8,440.8,192.61,515.21,316.2,486.92A132.35,132.35,0,0,1,285,475a207,207,0,0,1-157.72-57.52l-13.81-16.37-13.31-15.7a206,206,0,0,1-24.06-47.36l83.63-17.33L65.93,296.5a205.41,205.41,0,0,1-.18-54.37l164.66,47.21-154-91.08a208,208,0,0,1,29.15-53.84L260,252.78,141.92,107A205.85,205.85,0,0,1,205.6,72.52l95.49,158.21L256,62.45q6.47-.48,12.9-.54a205.43,205.43,0,0,1,61.65,8.84L353.08,169l23.17-78.14a206.76,206.76,0,0,1,57.16,50.05l13.08,22.41,7.65,9.67a207.52,207.52,0,0,1,18.93,139,132.33,132.33,0,0,1,7.74,38.31,235.8,235.8,0,0,0,11.48-155.53C463.73,88.09,366.8,18.05,261.31,19.1Z\",\n            eyeball: \"M349.79,242.53a45.38,45.38,0,0,1,9,6.95c12.21,12.21,16.07,29.9,13.25,47.35s-12,35.21-26.82,50-32.54,24-50,26.83-35.13-1-47.34-13.26a48,48,0,0,1-13-24.74,116.19,116.19,0,0,0-2,21.58,114.73,114.73,0,1,0,117-114.7Z\",\n            iris: \"M321.45,254a50.56,50.56,0,0,0-7.08.66c-13,2.09-27.55,9.39-39.75,21.59S255.12,303,253,316s.75,23.89,8,31.16,18.16,10.12,31.16,8,27.56-9.39,39.76-21.59,19.49-26.76,21.59-39.76-.75-23.89-8-31.16c-5.45-5.45-12.94-8.42-21.83-8.68-.74,0-1.49,0-2.25,0Zm-13.81,20.35a16,16,0,0,1,11.86,4.38c7.5,7.5,5.16,22-5.22,32.37s-24.88,12.72-32.37,5.23-5.16-22,5.22-32.38c6.16-6.16,13.78-9.49,20.51-9.6Z\"\n        },\n        classes: {\n            spikes: \"fill-bright\",\n            eyeball: \"fill-med\",\n            iris: \"fill-bright\"\n        }\n    },\n    [ConsequenceType.ResolveHarm4]: {\n        viewBox: \"0 0 512 512\",\n        paths: {\n            spikes: \"M261.14,19.1A237.51,237.51,0,0,0,202,27.22C75.67,61.08.69,191,34.54,317.31,67.63,440.8,192.44,515.21,316,486.92A132.35,132.35,0,0,1,284.78,475a207,207,0,0,1-157.72-57.52l89.22-30-116.34-2a206,206,0,0,1-24.06-47.36L214,333.21,65.76,296.5a205.41,205.41,0,0,1-.18-54.37l164.66,47.21-154-91.08a208,208,0,0,1,29.15-53.84l154.4,108.36L141.75,107a205.85,205.85,0,0,1,63.68-34.49l95.49,158.21L255.85,62.45q6.47-.48,12.9-.54a205.43,205.43,0,0,1,61.65,8.84L359.77,223.5,376.08,90.85a206.76,206.76,0,0,1,57.16,50.05L415.61,243.13,454,173a207.52,207.52,0,0,1,18.93,139,132.33,132.33,0,0,1,7.74,38.31,235.8,235.8,0,0,0,11.48-155.53C463.55,88.09,366.63,18.05,261.14,19.1Z\",\n            eyeball: \"M349.62,242.53a45.38,45.38,0,0,1,9,6.95c12.21,12.21,16.07,29.9,13.25,47.35s-12,35.21-26.82,50-32.55,24-50,26.83-35.13-1-47.34-13.26a48,48,0,0,1-13-24.74,116.19,116.19,0,0,0-2,21.58,114.73,114.73,0,1,0,117-114.7Z\",\n            iris: \"M321.28,254a50.56,50.56,0,0,0-7.08.66c-13,2.09-27.55,9.39-39.75,21.59S255,303,252.86,316s.75,23.89,8,31.16S279,357.3,292,355.2s27.55-9.39,39.76-21.59,19.49-26.76,21.59-39.76-.75-23.89-8-31.16c-5.45-5.45-12.94-8.42-21.83-8.68-.74,0-1.49,0-2.25,0Zm-13.81,20.35a16,16,0,0,1,11.86,4.38c7.5,7.5,5.16,22-5.22,32.37s-24.88,12.72-32.37,5.23-5.16-22,5.22-32.38c6.16-6.16,13.78-9.49,20.51-9.6Z\"\n        },\n        classes: {\n            spikes: \"fill-bright\",\n            eyeball: \"fill-bright\",\n            iris: \"fill-bright\"\n        }\n    }\n};\n// #endregion\n/* harmony default export */ __webpack_exports__[\"default\"] = (C);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/constants.ts\n");

/***/ }),

/***/ "./ts/core/debug.ts":
/*!**************************!*\
  !*** ./ts/core/debug.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region ▮▮▮▮▮▮▮ IMPORTS ▮▮▮▮▮▮▮ ~\n\n\n\nclass BladesDebug {\n    static async GetSampleSchemas(docNames = {}) {\n        // Documents\n        const SAMPLE_USER_NAME = docNames.user || \"Alistair\";\n        const SAMPLE_PC_NAME = docNames.pc || \"Alistair\";\n        const SAMPLE_NPC_NAME = docNames.npc || \"Setarra\";\n        const SAMPLE_FACTION_NAME = docNames.faction || \"the Bluecoats\";\n        const sampleUser = game.users.getName(SAMPLE_USER_NAME);\n        if (!sampleUser) {\n            throw new Error(`Sample user with name \"${SAMPLE_USER_NAME}\" not found.`);\n        }\n        const samplePC = game.actors.getName(SAMPLE_PC_NAME);\n        if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesPC.IsType(samplePC)) {\n            throw new Error(`Sample BladesPC with name \"${SAMPLE_PC_NAME}\" not found.`);\n        }\n        const sampleNPC = game.actors.getName(SAMPLE_NPC_NAME);\n        if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesNPC.IsType(sampleNPC)) {\n            throw new Error(`Sample BladesNPC with name \"${SAMPLE_NPC_NAME}\" not found or is not a valid BladesNPC.`);\n        }\n        const sampleFaction = game.actors.getName(SAMPLE_FACTION_NAME);\n        if (!_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesFaction.IsType(sampleFaction)) {\n            throw new Error(`Sample BladesFaction with name \"${SAMPLE_FACTION_NAME}\" not found or is not a valid BladesFaction.`);\n        }\n        // BladesActionRoll\n        const BladesActionRoll_Schema = {\n            rollType: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollType.Action,\n            // rollSubType: RollSubType.GatherInfo,\n            // rollPrompt: \"Gathering Information\",\n            rollTrait: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ActionTrait.skirmish,\n            // rollUserID: sampleUser.id,\n            // rollDowntimeAction: DowntimeAction.AcquireAsset,\n            // rollClockKey: U.getLast(game.eunoblades.ClockKeys.contents)?.id,\n            rollPrimaryData: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_2__.BladesRollPrimary.GetDataFromDoc(samplePC),\n            rollOppData: _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_2__.BladesRollOpposition.GetDataFromDoc(sampleFaction),\n            // rollParticipantData: {},\n            // consequenceData: {},\n            // resistanceData: {\n            //   consequence: {}\n            // },\n            rollModsData: {},\n            rollPositionInitial: _core_constants__WEBPACK_IMPORTED_MODULE_0__.Position.risky,\n            rollEffectInitial: _core_constants__WEBPACK_IMPORTED_MODULE_0__.Effect.standard,\n            rollPosEffectTrade: false,\n            rollPhase: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollPhase.Collaboration,\n            GMBoosts: {},\n            GMOppBoosts: {},\n            GMOverrides: {},\n            rollFactorToggles: {\n                source: {},\n                opposition: {}\n            },\n            userPermissions: {\n                [sampleUser.id]: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollPermissions.Primary\n            }\n            // rollPositionFinal: Position.risky,\n            // rollEffectFinal: Effect.standard,\n            // rollResult: RollResult.success,\n            // rollResultDelta: 0,\n            // rollResultFinal: RollResult.success,\n            // rollTraitVerb: \"skirmishes\",\n            // rollTraitPastVerb: \"skirmished\",\n            // finalDiceData: [],\n            // isInlineResistanceRoll: false\n        };\n        return {\n            BladesActionRoll_Schema\n        };\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesDebug);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9jb3JlL2RlYnVnLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ3dHO0FBQ3JCO0FBQ0g7QUFDaEY7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQSxhQUFhLGlFQUFRO0FBQ3JCLDBEQUEwRCxlQUFlO0FBQ3pFO0FBQ0E7QUFDQSxhQUFhLGtFQUFTO0FBQ3RCLDJEQUEyRCxnQkFBZ0I7QUFDM0U7QUFDQTtBQUNBLGFBQWEsc0VBQWE7QUFDMUIsK0RBQStELG9CQUFvQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IscURBQVE7QUFDOUI7QUFDQTtBQUNBLHVCQUF1Qix3REFBVztBQUNsQztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0VBQWlCO0FBQzlDLHlCQUF5QixxRUFBb0I7QUFDN0Msc0NBQXNDO0FBQ3RDLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLDRCQUE0QjtBQUM1QixpQ0FBaUMscURBQVE7QUFDekMsK0JBQStCLG1EQUFNO0FBQ3JDO0FBQ0EsdUJBQXVCLHNEQUFTO0FBQ2hDLHdCQUF3QjtBQUN4QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsaUNBQWlDLDREQUFlO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvY29yZS9kZWJ1Zy50cz85OTk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLy8gI3JlZ2lvbiDilq7ilq7ilq7ilq7ilq7ilq7ilq4gSU1QT1JUUyDilq7ilq7ilq7ilq7ilq7ilq7ilq4gflxuaW1wb3J0IHsgUm9sbFBlcm1pc3Npb25zLCBBY3Rpb25UcmFpdCwgUm9sbFBoYXNlLCBFZmZlY3QsIFJvbGxUeXBlLCBQb3NpdGlvbiB9IGZyb20gXCIuLi9jb3JlL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgQmxhZGVzUEMsIEJsYWRlc05QQywgQmxhZGVzRmFjdGlvbiB9IGZyb20gXCIuLi9kb2N1bWVudHMvQmxhZGVzQWN0b3JQcm94eVwiO1xuaW1wb3J0IHsgQmxhZGVzUm9sbFByaW1hcnksIEJsYWRlc1JvbGxPcHBvc2l0aW9uIH0gZnJvbSBcIi4uL2NsYXNzZXMvQmxhZGVzUm9sbFwiO1xuY2xhc3MgQmxhZGVzRGVidWcge1xuICAgIHN0YXRpYyBhc3luYyBHZXRTYW1wbGVTY2hlbWFzKGRvY05hbWVzID0ge30pIHtcbiAgICAgICAgLy8gRG9jdW1lbnRzXG4gICAgICAgIGNvbnN0IFNBTVBMRV9VU0VSX05BTUUgPSBkb2NOYW1lcy51c2VyIHx8IFwiQWxpc3RhaXJcIjtcbiAgICAgICAgY29uc3QgU0FNUExFX1BDX05BTUUgPSBkb2NOYW1lcy5wYyB8fCBcIkFsaXN0YWlyXCI7XG4gICAgICAgIGNvbnN0IFNBTVBMRV9OUENfTkFNRSA9IGRvY05hbWVzLm5wYyB8fCBcIlNldGFycmFcIjtcbiAgICAgICAgY29uc3QgU0FNUExFX0ZBQ1RJT05fTkFNRSA9IGRvY05hbWVzLmZhY3Rpb24gfHwgXCJ0aGUgQmx1ZWNvYXRzXCI7XG4gICAgICAgIGNvbnN0IHNhbXBsZVVzZXIgPSBnYW1lLnVzZXJzLmdldE5hbWUoU0FNUExFX1VTRVJfTkFNRSk7XG4gICAgICAgIGlmICghc2FtcGxlVXNlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTYW1wbGUgdXNlciB3aXRoIG5hbWUgXCIke1NBTVBMRV9VU0VSX05BTUV9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNhbXBsZVBDID0gZ2FtZS5hY3RvcnMuZ2V0TmFtZShTQU1QTEVfUENfTkFNRSk7XG4gICAgICAgIGlmICghQmxhZGVzUEMuSXNUeXBlKHNhbXBsZVBDKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTYW1wbGUgQmxhZGVzUEMgd2l0aCBuYW1lIFwiJHtTQU1QTEVfUENfTkFNRX1cIiBub3QgZm91bmQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FtcGxlTlBDID0gZ2FtZS5hY3RvcnMuZ2V0TmFtZShTQU1QTEVfTlBDX05BTUUpO1xuICAgICAgICBpZiAoIUJsYWRlc05QQy5Jc1R5cGUoc2FtcGxlTlBDKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTYW1wbGUgQmxhZGVzTlBDIHdpdGggbmFtZSBcIiR7U0FNUExFX05QQ19OQU1FfVwiIG5vdCBmb3VuZCBvciBpcyBub3QgYSB2YWxpZCBCbGFkZXNOUEMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2FtcGxlRmFjdGlvbiA9IGdhbWUuYWN0b3JzLmdldE5hbWUoU0FNUExFX0ZBQ1RJT05fTkFNRSk7XG4gICAgICAgIGlmICghQmxhZGVzRmFjdGlvbi5Jc1R5cGUoc2FtcGxlRmFjdGlvbikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2FtcGxlIEJsYWRlc0ZhY3Rpb24gd2l0aCBuYW1lIFwiJHtTQU1QTEVfRkFDVElPTl9OQU1FfVwiIG5vdCBmb3VuZCBvciBpcyBub3QgYSB2YWxpZCBCbGFkZXNGYWN0aW9uLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJsYWRlc0FjdGlvblJvbGxcbiAgICAgICAgY29uc3QgQmxhZGVzQWN0aW9uUm9sbF9TY2hlbWEgPSB7XG4gICAgICAgICAgICByb2xsVHlwZTogUm9sbFR5cGUuQWN0aW9uLFxuICAgICAgICAgICAgLy8gcm9sbFN1YlR5cGU6IFJvbGxTdWJUeXBlLkdhdGhlckluZm8sXG4gICAgICAgICAgICAvLyByb2xsUHJvbXB0OiBcIkdhdGhlcmluZyBJbmZvcm1hdGlvblwiLFxuICAgICAgICAgICAgcm9sbFRyYWl0OiBBY3Rpb25UcmFpdC5za2lybWlzaCxcbiAgICAgICAgICAgIC8vIHJvbGxVc2VySUQ6IHNhbXBsZVVzZXIuaWQsXG4gICAgICAgICAgICAvLyByb2xsRG93bnRpbWVBY3Rpb246IERvd250aW1lQWN0aW9uLkFjcXVpcmVBc3NldCxcbiAgICAgICAgICAgIC8vIHJvbGxDbG9ja0tleTogVS5nZXRMYXN0KGdhbWUuZXVub2JsYWRlcy5DbG9ja0tleXMuY29udGVudHMpPy5pZCxcbiAgICAgICAgICAgIHJvbGxQcmltYXJ5RGF0YTogQmxhZGVzUm9sbFByaW1hcnkuR2V0RGF0YUZyb21Eb2Moc2FtcGxlUEMpLFxuICAgICAgICAgICAgcm9sbE9wcERhdGE6IEJsYWRlc1JvbGxPcHBvc2l0aW9uLkdldERhdGFGcm9tRG9jKHNhbXBsZUZhY3Rpb24pLFxuICAgICAgICAgICAgLy8gcm9sbFBhcnRpY2lwYW50RGF0YToge30sXG4gICAgICAgICAgICAvLyBjb25zZXF1ZW5jZURhdGE6IHt9LFxuICAgICAgICAgICAgLy8gcmVzaXN0YW5jZURhdGE6IHtcbiAgICAgICAgICAgIC8vICAgY29uc2VxdWVuY2U6IHt9XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgcm9sbE1vZHNEYXRhOiB7fSxcbiAgICAgICAgICAgIHJvbGxQb3NpdGlvbkluaXRpYWw6IFBvc2l0aW9uLnJpc2t5LFxuICAgICAgICAgICAgcm9sbEVmZmVjdEluaXRpYWw6IEVmZmVjdC5zdGFuZGFyZCxcbiAgICAgICAgICAgIHJvbGxQb3NFZmZlY3RUcmFkZTogZmFsc2UsXG4gICAgICAgICAgICByb2xsUGhhc2U6IFJvbGxQaGFzZS5Db2xsYWJvcmF0aW9uLFxuICAgICAgICAgICAgR01Cb29zdHM6IHt9LFxuICAgICAgICAgICAgR01PcHBCb29zdHM6IHt9LFxuICAgICAgICAgICAgR01PdmVycmlkZXM6IHt9LFxuICAgICAgICAgICAgcm9sbEZhY3RvclRvZ2dsZXM6IHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IHt9LFxuICAgICAgICAgICAgICAgIG9wcG9zaXRpb246IHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdXNlclBlcm1pc3Npb25zOiB7XG4gICAgICAgICAgICAgICAgW3NhbXBsZVVzZXIuaWRdOiBSb2xsUGVybWlzc2lvbnMuUHJpbWFyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcm9sbFBvc2l0aW9uRmluYWw6IFBvc2l0aW9uLnJpc2t5LFxuICAgICAgICAgICAgLy8gcm9sbEVmZmVjdEZpbmFsOiBFZmZlY3Quc3RhbmRhcmQsXG4gICAgICAgICAgICAvLyByb2xsUmVzdWx0OiBSb2xsUmVzdWx0LnN1Y2Nlc3MsXG4gICAgICAgICAgICAvLyByb2xsUmVzdWx0RGVsdGE6IDAsXG4gICAgICAgICAgICAvLyByb2xsUmVzdWx0RmluYWw6IFJvbGxSZXN1bHQuc3VjY2VzcyxcbiAgICAgICAgICAgIC8vIHJvbGxUcmFpdFZlcmI6IFwic2tpcm1pc2hlc1wiLFxuICAgICAgICAgICAgLy8gcm9sbFRyYWl0UGFzdFZlcmI6IFwic2tpcm1pc2hlZFwiLFxuICAgICAgICAgICAgLy8gZmluYWxEaWNlRGF0YTogW10sXG4gICAgICAgICAgICAvLyBpc0lubGluZVJlc2lzdGFuY2VSb2xsOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgQmxhZGVzQWN0aW9uUm9sbF9TY2hlbWFcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZGVmYXVsdCBCbGFkZXNEZWJ1ZztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/core/debug.ts\n");

/***/ }),

/***/ "./ts/core/gsap.ts":
/*!*************************!*\
  !*** ./ts/core/gsap.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyTooltipAnimations: function() { return /* binding */ ApplyTooltipAnimations; },\n/* harmony export */   CustomBounce: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomBounce; },\n/* harmony export */   CustomEase: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomEase; },\n/* harmony export */   CustomWiggle: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomWiggle; },\n/* harmony export */   Dragger: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.Draggable; },\n/* harmony export */   EasePack: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.EasePack; },\n/* harmony export */   Flip: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.Flip; },\n/* harmony export */   Initialize: function() { return /* binding */ Initialize; },\n/* harmony export */   MotionPathPlugin: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.MotionPathPlugin; },\n/* harmony export */   Observer: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.Observer; },\n/* harmony export */   SplitText: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.SplitText; },\n/* harmony export */   TextPlugin: function() { return /* reexport safe */ gsap_all__WEBPACK_IMPORTED_MODULE_2__.TextPlugin; },\n/* harmony export */   gsapEffects: function() { return /* binding */ gsapEffects; }\n/* harmony export */ });\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var gsap_all__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/all */ \"gsap/all\");\n/* harmony import */ var gsap_all__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(gsap_all__WEBPACK_IMPORTED_MODULE_2__);\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n// eslint-disable-next-line import/no-unresolved\n\nconst gsapPlugins = [\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.TextPlugin,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.Flip,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.MotionPathPlugin,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.Draggable,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.SplitText,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.Observer,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomEase,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomWiggle,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomBounce,\n    gsap_all__WEBPACK_IMPORTED_MODULE_2__.EasePack\n];\nconst gsapEffects = {\n    // #region CLOCK KEYS\n    keyDrop: {\n        effect: (clockKey, config) => {\n            const [keyContainer] = $(clockKey).closest(\".clock-key-container\");\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                onComplete() {\n                    if (config.callback) {\n                        config.callback();\n                    }\n                }\n            })\n                .fromTo(keyContainer, {\n                y: config.yShift\n            }, {\n                y: 0,\n                autoAlpha: 1,\n                ease: \"bounce\",\n                duration: config.duration\n            });\n        },\n        defaults: {\n            duration: 1,\n            yShift: -800\n        },\n        extendTimeline: true\n    },\n    keyPull: {\n        effect: (clockKey, config) => {\n            const [keyContainer] = $(clockKey).closest(\".clock-key-container\");\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                onComplete() {\n                    if (config.callback) {\n                        config.callback();\n                    }\n                }\n            })\n                .to(keyContainer, {\n                y: config.yDelta,\n                ease: config.ease,\n                duration: 0.75 * config.duration\n            })\n                .to(keyContainer, {\n                opacity: 0,\n                ease: \"power2.out\",\n                duration: 0.25 * config.duration\n            }, 0.75 * config.duration);\n        },\n        defaults: {\n            yDelta: -800,\n            duration: 1,\n            ease: \"back.in(1)\"\n        },\n        extendTimeline: true\n    },\n    keyControlPanelFlip: {\n        effect: (target, config) => {\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                delay: config.delay,\n                onStart() {\n                    if (target) {\n                        const target$ = $(target);\n                        // Get the next sibling of the target element if it has the class \"clock-control\"\n                        const nextSibling$ = target$.next(\".clock-control-flipper\");\n                        // Check if the nextSibling element exists\n                        if (nextSibling$.length) {\n                            _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.keyControlPanelFlip(nextSibling$[0], {\n                                ...config,\n                                delay: 0.15\n                            });\n                        }\n                    }\n                }\n            })\n                .to(target, {\n                rotateX: config.angle,\n                duration: 0.5,\n                ease: \"back.inOut(2)\"\n            });\n        },\n        defaults: {\n            angle: 180,\n            delay: 0\n        },\n        extendTimeline: true\n    },\n    // #endregion\n    // #region CHAT CONSEQUENCE EFFECTS\n    csqEnter: {\n        effect: (csqContainer, config) => {\n            const csqRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqContainer);\n            // ELog.checkLog3(\"gsap\", \"gsapEffects.consequenceEnter -> THIS\", {this: this, csqRoot});\n            const csqIconCircle = csqRoot(\".consequence-icon-circle.base-consequence\");\n            // const csqBaseElems = csqRoot(\".base-consequence:not(.consequence-icon-circle)\");\n            const csqBaseTypeElem = csqRoot(\".consequence-type.base-consequence\");\n            const csqAcceptTypeElem = csqRoot(\".consequence-type.accept-consequence\");\n            const csqBaseNameElem = csqRoot(\".consequence-name.base-consequence\");\n            const csqAcceptNameElem = csqRoot(\".consequence-name.accept-consequence\");\n            // const csqAcceptElems = csqRoot(\".accept-consequence:not(.consequence-icon-circle):not(.consequence-button-container)\");\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ paused: true, defaults: {} });\n            // Initialize name and type opacities.\n            if (csqAcceptTypeElem.length > 0) {\n                tl.set(csqAcceptTypeElem, { opacity: 0 }, 0);\n            }\n            if (csqAcceptNameElem.length > 0) {\n                tl.set(csqAcceptNameElem, { opacity: 0 }, 0);\n            }\n            // Crossfade base/accept type lines\n            if (csqBaseTypeElem.length > 0) {\n                tl.fromTo(csqBaseTypeElem, {\n                    opacity: 1\n                }, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: \"sine\"\n                }, 0);\n            }\n            if (csqAcceptTypeElem.length > 0) {\n                tl.fromTo(csqAcceptTypeElem, {\n                    opacity: 0\n                }, {\n                    opacity: 1,\n                    duration: 0.25,\n                    ease: \"sine\"\n                }, 0);\n            }\n            // Crossfade base/accept name lines\n            if (csqBaseNameElem.length > 0) {\n                tl.fromTo(csqBaseNameElem, {\n                    opacity: 1\n                }, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: \"sine\"\n                }, 0);\n            }\n            if (csqAcceptNameElem.length > 0) {\n                tl.fromTo(csqAcceptNameElem, {\n                    opacity: 0\n                }, {\n                    opacity: 1,\n                    duration: 0.25,\n                    ease: \"sine\"\n                }, 0);\n            }\n            // Brighten the entire container slightly\n            if (csqContainer) {\n                tl.fromTo(csqContainer, {\n                    filter: \"brightness(1)\"\n                }, {\n                    filter: `brightness(${config.brightness})`,\n                    duration: config.duration / 3,\n                    ease: \"none\"\n                }, 0);\n            }\n            // Enlarge the icon circle, add stroke\n            if (csqIconCircle.length > 0) {\n                tl.fromTo(csqIconCircle, {\n                    scale: 0.75,\n                    outlineColor: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n                    outlineWidth: 0\n                }, {\n                    scale: 0.85,\n                    outlineColor: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n                    outlineWidth: 1,\n                    duration: 0.55,\n                    ease: \"sine.out\"\n                }, 0);\n            }\n            return tl;\n        },\n        defaults: {\n            brightness: 1.5,\n            duration: 0.5,\n            scale: 1.5,\n            stagger: 0.05,\n            ease: \"sine\",\n            easeStrength: 1.5\n        }\n    },\n    csqClickIcon: {\n        effect: (csqIconContainer, config) => {\n            const csqContainer = $(csqIconContainer).closest(\".comp.consequence-display-container\");\n            const csqRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqContainer[0]);\n            const iconRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqIconContainer);\n            const csqBackgroundImg = csqRoot(\".consequence-bg-image\");\n            const csqInteractionPads = csqRoot(\".consequence-interaction-pad\");\n            const csqIconCircleBase = iconRoot(\".consequence-icon-circle.base-consequence\");\n            const csqIconCircleAccept = iconRoot(\".consequence-icon-circle.accept-consequence\");\n            const csqButtonContainers = iconRoot(\".consequence-button-container\");\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                paused: true,\n                onComplete: function () {\n                    $(csqInteractionPads).css(\"pointerEvents\", \"auto\");\n                },\n                onReverseComplete: function () {\n                    $(csqInteractionPads).css(\"pointerEvents\", \"none\");\n                }\n            });\n            // Slide out the background\n            if (csqBackgroundImg.length) {\n                tl.fromTo(csqBackgroundImg, {\n                    xPercent: 110,\n                    yPercent: -50\n                }, {\n                    xPercent: -60,\n                    yPercent: -50,\n                    duration: 0.5,\n                    ease: \"back\"\n                }, 0);\n            }\n            // Fade out the base consequence icon circle\n            if (csqIconCircleBase.length > 0) {\n                tl.fromTo(csqIconCircleBase, {\n                    opacity: 1\n                }, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: \"sine.out\"\n                }, 0);\n            }\n            // Fade in the accept consequence icon circle, enlarging the stroke\n            if (csqIconCircleAccept.length > 0) {\n                tl.fromTo(csqIconCircleAccept, {\n                    opacity: 0\n                }, {\n                    opacity: 1,\n                    duration: 0.15,\n                    ease: \"sine\"\n                }, 0)\n                    .fromTo(csqIconCircleAccept, {\n                    outlineWidth: 1,\n                    scale: 0.85\n                }, {\n                    outlineWidth: 2,\n                    scale: 1,\n                    duration: 0.25,\n                    ease: \"sine\"\n                }, 0.175);\n            }\n            // Scale and fade in the button containers\n            if (csqButtonContainers.length > 0) {\n                tl.fromTo(csqButtonContainers, {\n                    scale: config.scale,\n                    opacity: 0,\n                    filter: \"blur(25px)\"\n                }, {\n                    scale: 1,\n                    opacity: 1,\n                    filter: \"blur(0px)\",\n                    stagger: config.stagger,\n                    duration: config.duration,\n                    ease: `${config.ease}.inOut(${config.easeStrength})`\n                }, 0);\n            }\n            return tl;\n        },\n        defaults: {\n            duration: 0.5,\n            scale: 1.5,\n            stagger: 0.05,\n            ease: \"sine\",\n            easeStrength: 1.5\n        }\n    },\n    csqEnterRight: {\n        effect: (csqContainer) => {\n            const csqRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqContainer);\n            const typeLine = csqRoot(\".consequence-type-container .consequence-type.accept-consequence\");\n            const typeLineBg = csqRoot(\".consequence-type-container .consequence-type-bg.accept-consequence\");\n            const buttonRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqRoot(\".consequence-button-container.consequence-accept-button-container\"));\n            const buttonBg = buttonRoot(\".consequence-button-bg\");\n            const buttonIcon = buttonRoot(\".button-icon i\");\n            const buttonLabel = buttonRoot(\".consequence-button-label\");\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ paused: true, defaults: {} });\n            // Turn type line white\n            if (typeLine.length > 0) {\n                tl.fromTo(typeLine, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.RED\n                }, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.WHITE,\n                    duration: 0.5,\n                    ease: \"sine.inOut\"\n                }, 0);\n            }\n            // Slide type line background out from under icon\n            if (typeLineBg.length > 0) {\n                tl.fromTo(typeLineBg, {\n                    x: 5,\n                    scaleX: 0,\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.RED,\n                    skewX: 0\n                }, {\n                    scaleX: 1,\n                    skewX: -45,\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.RED,\n                    duration: 0.5,\n                    ease: \"back.out\"\n                }, 0);\n            }\n            // Slide accept button background out from under icon\n            if (buttonBg.length > 0) {\n                tl.fromTo(buttonBg, {\n                    scaleX: 0,\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.RED,\n                    skewX: 0\n                }, {\n                    x: 0,\n                    scaleX: 1,\n                    skewX: -45,\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.RED,\n                    duration: 0.25,\n                    ease: \"back.out\"\n                }, 0);\n            }\n            // Turn button icon black and scale\n            if (buttonIcon.length > 0) {\n                tl.fromTo(buttonIcon, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n                    opacity: 0.75,\n                    scale: 1\n                }, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n                    scale: 1.25,\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"sine\"\n                }, 0);\n            }\n            // Turn button label black, add letter-spacing, bold\n            if (buttonLabel.length > 0) {\n                tl.fromTo(buttonLabel, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n                    fontWeight: 400,\n                    scale: 1\n                }, {\n                    color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n                    fontWeight: 800,\n                    duration: 0.75,\n                    ease: \"sine\"\n                }, 0);\n            }\n            return tl;\n        },\n        defaults: {}\n    },\n    csqEnterLeft: {\n        effect: (csqContainer) => {\n            const csqRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqContainer);\n            const typeLine = csqRoot(\".consequence-type-container .consequence-type.accept-consequence\");\n            const nameLine = csqRoot(\".consequence-name-container .consequence-name.accept-consequence\");\n            const acceptIconCircle = csqRoot(\".consequence-icon-circle.accept-consequence\");\n            const acceptButton = csqRoot(\".consequence-button-container.consequence-accept-button-container\");\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ paused: true, defaults: {} });\n            // Fade out type line\n            if (typeLine.length > 0) {\n                tl.to(typeLine, {\n                    opacity: 0,\n                    duration: 0.15,\n                    ease: \"sine.inOut\"\n                }, 0);\n            }\n            // Fade out name\n            if (nameLine.length > 0) {\n                tl.to(nameLine, {\n                    opacity: 0,\n                    duration: 0.15,\n                    ease: \"sine.inOut\"\n                }, 0);\n            }\n            // Fade out icon\n            if (acceptIconCircle.length > 0) {\n                tl.to(acceptIconCircle, {\n                    opacity: 0,\n                    duration: 0.15,\n                    ease: \"sine.inOut\"\n                }, 0);\n            }\n            // Fade out accept button\n            if (acceptButton.length > 0) {\n                tl.fromTo(acceptButton, {\n                    opacity: 1\n                }, {\n                    opacity: 0,\n                    duration: 0.25,\n                    ease: \"sine.inOut\"\n                }, 0);\n            }\n            return tl;\n        },\n        defaults: {}\n    },\n    csqEnterSubLeft: {\n        effect: (csqContainer, config) => {\n            const csqRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqContainer);\n            const iconCircle = csqRoot(`.consequence-icon-circle.${config.type}-consequence`);\n            const typeLine = csqRoot(`.consequence-type-container .consequence-type.${config.type}-consequence`);\n            const nameLine = csqRoot(`.consequence-name.${config.type}-consequence`);\n            const footerBg = csqRoot(`.consequence-footer-container .consequence-footer-bg.${config.type}-consequence`);\n            const specialFooterMsg = csqRoot(`.consequence-footer-container .consequence-footer-message.${config.type}-consequence`);\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ paused: true, defaults: {} });\n            // Fade in icon circle\n            if (iconCircle.length > 0) {\n                tl.fromTo(iconCircle, {\n                    opacity: 0\n                }, {\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"back.out\"\n                }, 0);\n            }\n            // Fade in typeLine\n            if (typeLine.length > 0) {\n                tl.fromTo(typeLine, {\n                    opacity: 0\n                }, {\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"back.out\"\n                }, 0);\n            }\n            // Slide out nameLine from left\n            if (nameLine.length > 0) {\n                tl.fromTo(nameLine, {\n                    scaleX: 0\n                }, {\n                    scaleX: 1,\n                    duration: 0.5,\n                    ease: \"back.inOut\"\n                }, 0);\n            }\n            // Slide out footer background from left\n            if (footerBg.length > 0) {\n                tl.fromTo(footerBg, {\n                    scaleX: 0,\n                    skewX: 0,\n                    opacity: 1\n                }, {\n                    scaleX: 1,\n                    skewX: -45,\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"back.inOut\"\n                }, 0);\n            }\n            // Slide out attribute from left\n            if (specialFooterMsg.length > 0) {\n                tl.fromTo(specialFooterMsg, {\n                    scaleX: 0,\n                    opacity: 1\n                }, {\n                    scaleX: 1,\n                    opacity: 1,\n                    duration: 0.5,\n                    ease: \"back.inOut\"\n                }, 0);\n            }\n            if (csqRoot(`.consequence-button-container.consequence-${config.type}-button-container`).length > 0) {\n                const buttonRoot = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.selector(csqRoot(`.consequence-button-container.consequence-${config.type}-button-container`));\n                const buttonBg = buttonRoot(\".consequence-button-bg\");\n                const buttonIcon = buttonRoot(\".button-icon i\");\n                const buttonLabel = buttonRoot(\".consequence-button-label\");\n                // Slide out button background from right\n                if (buttonBg.length > 0) {\n                    tl.fromTo(buttonBg, {\n                        scaleX: 0,\n                        skewX: 0,\n                        opacity: 1\n                    }, {\n                        scaleX: 1,\n                        skewX: -45,\n                        opacity: 1,\n                        duration: 0.5,\n                        ease: \"back.inOut\"\n                    }, 0);\n                }\n                // Turn button icon black and scale\n                if (buttonIcon.length > 0) {\n                    tl.fromTo(buttonIcon, {\n                        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n                        opacity: 0.75,\n                        scale: 1\n                    }, {\n                        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n                        scale: 1.25,\n                        opacity: 1,\n                        duration: 0.5,\n                        ease: \"sine\"\n                    }, 0);\n                }\n                // Turn button label black, bold\n                if (buttonLabel.length > 0) {\n                    tl.fromTo(buttonLabel, {\n                        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n                        fontWeight: 400,\n                        scale: 1\n                    }, {\n                        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n                        fontWeight: 800,\n                        duration: 0.75,\n                        ease: \"sine\"\n                    }, 0);\n                }\n            }\n            return tl;\n        },\n        defaults: {}\n    },\n    // #endregion\n    // #region CHARACTER SHEET EFFECTS\n    fillCoins: {\n        effect: (targets, config) => {\n            // Targets will be all coins from zero to where fill currently is\n            // Some will already be full, others not.\n            // Stagger in timeline\n            // Pulse in size and color\n            // Shimmer as they shrink back ?\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.to(targets, {\n                duration: config.duration / 2,\n                scale: config.scale,\n                filter: config.filter,\n                ease: config.ease,\n                stagger: {\n                    amount: 0.25,\n                    from: \"start\",\n                    repeat: 1,\n                    yoyo: true\n                }\n            });\n        },\n        defaults: {\n            duration: 1,\n            scale: 1,\n            filter: \"saturate(1) brightness(2)\",\n            ease: \"power2.in\"\n        },\n        extendTimeline: true\n    },\n    // #endregion\n    // #region GENERAL: 'blurRemove', 'hoverTooltip', 'textJitter'\n    blurRemove: {\n        effect: (targets, config) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({ stagger: config.stagger })\n            .to(targets, {\n            skewX: config.skewX,\n            duration: config.duration / 2,\n            ease: \"power4.out\"\n        })\n            .to(targets, {\n            x: config.x,\n            marginBottom: config.ignoreMargin\n                ? undefined\n                : function (i, target) {\n                    return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(target, \"height\") * -1;\n                },\n            marginRight: config.ignoreMargin\n                ? undefined\n                : function (i, target) {\n                    return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(target, \"width\") * -1;\n                },\n            scale: config.scale,\n            filter: `blur(${config.blur}px)`,\n            duration: (3 / 4) * config.duration\n        }, config.duration / 4)\n            .to(targets, {\n            autoAlpha: 0,\n            duration: config.duration / 2,\n            ease: \"power3.in\"\n        }, config.duration / 2),\n        defaults: {\n            ignoreMargin: false,\n            skewX: -20,\n            duration: 0.5,\n            x: \"+=300\",\n            scale: 1.5,\n            blur: 10,\n            stagger: 0\n        },\n        extendTimeline: true\n    },\n    blurReveal: {\n        effect: (targets, config) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n            .fromTo(targets, {\n            x: config.x,\n            marginBottom: config.ignoreMargin\n                ? undefined\n                : function (i, target) {\n                    return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(target, \"height\") * -1;\n                },\n            marginRight: config.ignoreMargin\n                ? undefined\n                : function (i, target) {\n                    return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(target, \"width\") * -1;\n                },\n            scale: config.scale,\n            filter: `blur(${config.blur}px)`\n        }, {\n            x: 0,\n            marginBottom: 0,\n            marginRight: 0,\n            scale: 1,\n            filter: \"blur(0px)\",\n            duration: (3 / 4) * config.duration\n        }, 0)\n            .fromTo(targets, {\n            autoAlpha: 0\n        }, {\n            autoAlpha: 1,\n            duration: config.duration / 2,\n            ease: \"power3.in\"\n        }, 0)\n            .fromTo(targets, {\n            skewX: config.skewX\n        }, {\n            skewX: 0,\n            duration: config.duration / 2,\n            ease: \"power4.out\"\n        }, config.duration / 2),\n        defaults: {\n            ignoreMargin: false,\n            skewX: -20,\n            duration: 0.5,\n            x: \"+=300\",\n            scale: 1.5,\n            blur: 10\n        },\n        extendTimeline: true\n    },\n    scaleUpReveal: {\n        effect: (target, config) => {\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n                .fromTo(target, {\n                autoAlpha: 0,\n                scale: 0.5 * config.scale\n            }, {\n                autoAlpha: 1,\n                scale: config.scale,\n                duration: config.duration,\n                ease: config.ease\n            });\n            return tl;\n        },\n        defaults: {\n            scale: 1,\n            duration: 0.5,\n            ease: \"power2\"\n        },\n        extendTimeline: true\n    },\n    scaleDownRemove: {\n        effect: (target, config) => {\n            const tl = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n                .to(target, {\n                autoAlpha: 0,\n                scale: 0.5 * config.scale,\n                duration: config.duration,\n                ease: config.ease\n            });\n            return tl;\n        },\n        defaults: {\n            scale: 1,\n            duration: 0.5,\n            ease: \"power2\"\n        },\n        extendTimeline: true\n    },\n    blurRevealTooltip: {\n        effect: (target, config) => {\n            if (!target) {\n                throw new Error(`blurRevealTooltip effect: tooltip element is ${target === null ? \"null\" : typeof target}`);\n            }\n            const tooltip$ = $(target);\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline({\n                paused: true,\n                onReverseComplete: config.onReverseComplete\n            })\n                .fromTo(tooltip$, {\n                filter: `blur(${config.blurStrength}px)`,\n                autoAlpha: 0,\n                xPercent: 50,\n                yPercent: -200,\n                scale: config.scale\n            }, {\n                filter: \"blur(0px)\",\n                autoAlpha: 1,\n                xPercent: -50,\n                yPercent: -100,\n                scale: 1,\n                ease: config.ease,\n                duration: config.duration\n            });\n        },\n        defaults: {\n            scale: 1.5,\n            blurStrength: 15,\n            ease: \"back.out\",\n            duration: 0.25,\n            onReverseComplete: undefined\n        },\n        extendTimeline: true\n    },\n    textJitter: {\n        effect: (target, config) => {\n            const [targetElem] = $(target);\n            if (!targetElem) {\n                throw new Error(\"textJitter effect: target not found\");\n            }\n            const split = new gsap_all__WEBPACK_IMPORTED_MODULE_2__.SplitText(targetElem, { type: \"chars\" });\n            return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.timeline()\n                .to(targetElem, {\n                autoAlpha: 1,\n                duration: config.duration,\n                ease: \"none\"\n            })\n                .fromTo(split.chars, {\n                y: -config.yAmp\n            }, {\n                y: config.yAmp,\n                duration: config.duration,\n                ease: \"sine.inOut\",\n                stagger: {\n                    repeat: -1,\n                    yoyo: true,\n                    from: \"random\",\n                    each: config.stagger\n                }\n            }, 0)\n                .fromTo(split.chars, {\n                rotateZ: -config.rotateAmp\n            }, {\n                rotateZ: config.rotateAmp,\n                duration: config.duration,\n                ease: gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomWiggle.create(\"myWiggle\", { wiggles: 10, type: \"random\" }),\n                stagger: {\n                    repeat: -1,\n                    from: \"random\",\n                    yoyo: true,\n                    each: config.stagger\n                }\n            }, 0);\n        },\n        defaults: {\n            yAmp: 2,\n            rotateAmp: 2,\n            duration: 1,\n            stagger: 0.05\n        },\n        extendTimeline: true\n    }\n    // #endregion\n};\n/**\n * Registers relevant GSAP plugins and effects.\n */\nfunction Initialize() {\n    if (gsapPlugins.length) {\n        _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.config({\n            nullTargetWarn: true\n        });\n        _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.registerPlugin(...gsapPlugins);\n        Object.assign(globalThis, {\n            TextPlugin: gsap_all__WEBPACK_IMPORTED_MODULE_2__.TextPlugin,\n            Flip: gsap_all__WEBPACK_IMPORTED_MODULE_2__.Flip,\n            MotionPathPlugin: gsap_all__WEBPACK_IMPORTED_MODULE_2__.MotionPathPlugin,\n            Dragger: gsap_all__WEBPACK_IMPORTED_MODULE_2__.Draggable,\n            SplitText: gsap_all__WEBPACK_IMPORTED_MODULE_2__.SplitText,\n            Observer: gsap_all__WEBPACK_IMPORTED_MODULE_2__.Observer,\n            CustomEase: gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomEase,\n            CustomWiggle: gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomWiggle,\n            CustomBounce: gsap_all__WEBPACK_IMPORTED_MODULE_2__.CustomBounce,\n            EasePack: gsap_all__WEBPACK_IMPORTED_MODULE_2__.EasePack\n        });\n    }\n    Object.entries(gsapEffects).forEach(([name, effect]) => {\n        _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.registerEffect(Object.assign(effect, { name }));\n    });\n}\n/**\n * Applies listeners to '.tooltip-trigger' elements in the document.\n * @param {JQuery<HTMLElement>} html The document to be searched.\n */\nfunction ApplyTooltipAnimations(html) {\n    html.find(\".tooltip-trigger\").each((_, el) => {\n        const tooltipElem = $(el).find(\".tooltip\")[0] ?? $(el).next(\".tooltip\")[0];\n        if (!tooltipElem) {\n            return;\n        }\n        const tooltip$ = $(tooltipElem);\n        /**\n         * Use the .tooltip-trigger element as the definitive positioning element for the tooltip itself.\n         * If the tooltip-trigger's absolute position relative to the viewport is, e.g., near the top,\n         * then the tooltip should appear beneath, etc\n         */\n        // Find the tooltip's parent container. If its position isn't relative or absolute, set it to relative.\n        const tooltipContainer$ = tooltip$.parent();\n        if (tooltipContainer$.css(\"position\") !== \"relative\"\n            && tooltipContainer$.css(\"position\") !== \"absolute\") {\n            tooltipContainer$.css(\"position\", \"relative\");\n        }\n        // Set the tooltip itself to absolute positioning\n        tooltip$.css(\"position\", \"absolute\");\n        // Assign a unique ID to the tooltip element\n        const tooltipID = `tooltip-${randomID()}`;\n        tooltip$.attr(\"id\", tooltipID);\n        // For .tooltip-wide tooltips, adjust the aspect ratio accordingly\n        if (tooltip$.hasClass(\"tooltip-wide\")) {\n            _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].adjustTextContainerAspectRatio(tooltipElem, 6);\n        }\n        $(el).on({\n            mouseenter: function () {\n                game.eunoblades.Director.displayTooltip(tooltipElem);\n            },\n            mouseleave: function () {\n                game.eunoblades.Director.clearTooltip(tooltipID);\n            }\n        });\n    });\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/gsap.ts\n");

/***/ }),

/***/ "./ts/core/helpers.ts":
/*!****************************!*\
  !*** ./ts/core/helpers.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preloadHandlebarsTemplates: function() { return /* binding */ preloadHandlebarsTemplates; },\n/* harmony export */   registerHandlebarHelpers: function() { return /* binding */ registerHandlebarHelpers; }\n/* harmony export */ });\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n// #region ▮▮▮▮▮▮▮ IMPORTS ▮▮▮▮▮▮▮ ~\n\n// #endregion ▮▮▮▮[IMPORTS]▮▮▮▮\n// #region ░░░░░░░[Templates]░░░░ Preload Partials, Components & Overlay Templates ░░░░░░░ ~\n/**\n * Define a set of template paths to pre-load\n * Pre-loaded templates are compiled and cached for fast access when rendering\n */\nasync function preloadHandlebarsTemplates() {\n    // Define template paths to load\n    const templatePaths = [\n        // General Components\n        \"systems/eunos-blades/templates/components/toggle-icon.hbs\",\n        \"systems/eunos-blades/templates/components/button-icon.hbs\",\n        \"systems/eunos-blades/templates/components/dotline.hbs\",\n        \"systems/eunos-blades/templates/components/armor.hbs\",\n        \"systems/eunos-blades/templates/components/comp.hbs\",\n        \"systems/eunos-blades/templates/components/select.hbs\",\n        \"systems/eunos-blades/templates/components/portrait.hbs\",\n        \"systems/eunos-blades/templates/components/clock.hbs\",\n        \"systems/eunos-blades/templates/components/roll-collab-mod.hbs\",\n        \"systems/eunos-blades/templates/components/slide-out-controls.hbs\",\n        \"systems/eunos-blades/templates/components/consequence.hbs\",\n        \"systems/eunos-blades/templates/components/consequence-accepted.hbs\",\n        // Partials\n        \"systems/eunos-blades/templates/parts/tier-block.hbs\",\n        \"systems/eunos-blades/templates/parts/turf-list.hbs\",\n        \"systems/eunos-blades/templates/parts/cohort-block.hbs\",\n        \"systems/eunos-blades/templates/parts/roll-opposition-creator.hbs\",\n        \"systems/eunos-blades/templates/parts/active-effects.hbs\",\n        \"systems/eunos-blades/templates/parts/gm-pc-summary.hbs\",\n        \"systems/eunos-blades/templates/components/clock-key.hbs\"\n    ];\n    // Load the template parts\n    return loadTemplates(templatePaths);\n}\n// #endregion ░░░░[Preload Templates]░░░░\n// #region ████████ Handlebars: Handlebar Helpers Definitions ████████ ~\nconst handlebarHelpers = {\n    randString(param1 = 10) {\n        return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randString(param1);\n    },\n    test(param1, operator, param2) {\n        const stringMap = {\n            true: true,\n            false: false,\n            null: null,\n            undefined\n        };\n        if ([\"!\", \"not\", \"=??\"].includes(String(param1))) {\n            [operator, param1] = [String(param1), operator];\n        }\n        if (typeof param1 === \"string\" && param1 in stringMap) {\n            param1 = stringMap[param1];\n        }\n        if (typeof param2 === \"string\" && param2 in stringMap) {\n            param2 = stringMap[param2];\n        }\n        switch (operator) {\n            case \"!\":\n            case \"not\": {\n                return !param1;\n            }\n            case \"=??\": {\n                return [undefined, null].includes(param1);\n            }\n            case \"&&\": {\n                return param1 && param2;\n            }\n            case \"||\": {\n                return param1 || param2;\n            }\n            case \"==\": {\n                return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].areFuzzyEqual(param1, param2);\n            }\n            case \"===\": {\n                return param1 === param2;\n            }\n            case \"!=\":\n            case \"!==\": {\n                return param1 !== param2;\n            }\n            case \">\": {\n                return typeof param1 === \"number\" && typeof param2 === \"number\" && param1 > param2;\n            }\n            case \"<\": {\n                return typeof param1 === \"number\" && typeof param2 === \"number\" && param1 < param2;\n            }\n            case \">=\": {\n                return typeof param1 === \"number\" && typeof param2 === \"number\" && param1 >= param2;\n            }\n            case \"<=\": {\n                return typeof param1 === \"number\" && typeof param2 === \"number\" && param1 <= param2;\n            }\n            case \"??\": {\n                return param1 ?? param2;\n            }\n            case \"includes\": {\n                return Array.isArray(param1) && param1.includes(param2);\n            }\n            case \"in\": {\n                if (Array.isArray(param2)) {\n                    return param2.includes(param1);\n                }\n                if (_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(param2) && (typeof param1 === \"number\" || typeof param1 === \"string\")) {\n                    return param1 in param2;\n                }\n                if (typeof param2 === \"string\") {\n                    return new RegExp(String(param1), \"gu\").test(String(param2));\n                }\n                return false;\n            }\n            default: {\n                return false;\n            }\n        }\n    },\n    calc(...params) {\n        const calcs = {\n            \"+\": (p1, p2) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1) + _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2),\n            \"-\": (p1, p2) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1) - _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2),\n            \"*\": (p1, p2) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1) * _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2),\n            \"/\": (p1, p2) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1) / _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2),\n            \"%\": (p1, p2) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1) % _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2),\n            max: (p1, p2) => Math.max(_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1), _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2)),\n            min: (p1, p2) => Math.min(_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p1), _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(p2)),\n            ceil: (p1) => Math.ceil(_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pFloat(p1)),\n            floor: (p1) => Math.floor(_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pFloat(p1))\n        };\n        const [param1, operator, param2] = typeof params[0] === \"string\" && params[0] in calcs\n            ? [params[1], params[0]]\n            : params;\n        return calcs[operator](param1, param2);\n    },\n    isIn(...args) {\n        const [testStr, ...contents] = args;\n        return contents.includes(testStr);\n    },\n    case(mode, str) {\n        switch (mode) {\n            case \"upper\": return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uCase(str);\n            case \"lower\": return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(str);\n            case \"sentence\": return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sCase(str);\n            case \"title\": return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(str);\n            default: return str;\n        }\n    },\n    romanize(val) {\n        return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(val));\n    },\n    count(param) {\n        if (Array.isArray(param) || _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isList(param)) {\n            return Object.values(param).filter((val) => val !== null && val !== undefined).length;\n        }\n        else if (typeof param === \"string\") {\n            return param.length;\n        }\n        return param ? 1 : 0;\n    },\n    // Concat helper\n    // Usage: (concat 'first 'second')\n    concat(...args) {\n        let outStr = \"\";\n        for (const arg of args) {\n            if (typeof arg === \"string\" || typeof arg === \"number\") {\n                outStr += arg;\n            }\n        }\n        return outStr;\n    },\n    // Merge helper - To merge additional properties into a template's context\n    merge(context, ...args) {\n        args.pop();\n        return args.reduce((acc, val) => Object.assign(acc, val), context);\n    },\n    // For loop: {{#for [from = 0, to, stepSize = 1]}}<html content, this = index>{{/for}}\n    for: (...args) => {\n        const options = args.pop();\n        let [from, to, stepSize] = args;\n        from = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(from);\n        to = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(to);\n        stepSize = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(stepSize) || 1;\n        if (from > to) {\n            return \"\";\n        }\n        let html = \"\";\n        for (let i = parseInt(from || 0, 10); i <= parseInt(to || 0, 10); i += stepSize) {\n            html += options.fn(i);\n        }\n        return html;\n    },\n    signNum(num) {\n        return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].signNum(num);\n    },\n    compileSvg(...args) {\n        const [svgDotKey, svgPaths] = args;\n        return _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSvgCode(svgDotKey, svgPaths);\n    },\n    eLog(...args) {\n        args.pop();\n        let dbLevel = 3;\n        if ([0, 1, 2, 3, 4, 5].includes(args[0])) {\n            dbLevel = args.shift();\n        }\n        eLog.hbsLog(...args, dbLevel);\n    },\n    // Does the name of this turf block represent a standard 'Turf' claim?\n    isTurfBlock: (name) => _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fuzzyMatch(name, \"Turf\"),\n    // Which other connection does this connector overlap with?\n    getConnectorPartner: (index, direction) => {\n        index = parseInt(`${index}`, 10);\n        const partners = {\n            1: { right: 2, bottom: 6 },\n            2: { left: 1, right: 3, bottom: 7 },\n            3: { left: 2, right: 4, bottom: 8 },\n            4: { left: 3, right: 5, bottom: 9 },\n            5: { left: 4, bottom: 10 },\n            6: { top: 1, right: 7, bottom: 11 },\n            7: { top: 2, left: 6, right: 8, bottom: 12 },\n            8: { top: 3, left: 7, right: 9, bottom: 13 },\n            9: { top: 4, left: 8, right: 10, bottom: 14 },\n            10: { top: 5, left: 9, bottom: 15 },\n            11: { top: 6, right: 12 },\n            12: { top: 7, left: 11, right: 13 },\n            13: { top: 8, left: 12, right: 14 },\n            14: { top: 9, left: 13, right: 15 },\n            15: { top: 10, left: 14 }\n        };\n        const partnerDir = { left: \"right\", right: \"left\", top: \"bottom\", bottom: \"top\" }[direction];\n        const partnerNum = partners[index][direction] ?? 0;\n        if (partnerNum) {\n            return `${partnerNum}-${partnerDir}`;\n        }\n        return null;\n    },\n    // Is the value Turf side.\n    isTurfOnEdge: (index, direction) => {\n        index = parseInt(`${index}`, 10);\n        const edges = {\n            1: [\"top\", \"left\"],\n            2: [\"top\"],\n            3: [\"top\"],\n            4: [\"top\"],\n            5: [\"top\", \"right\"],\n            6: [\"left\"],\n            7: [],\n            8: [],\n            9: [],\n            10: [\"right\"],\n            11: [\"left\", \"bottom\"],\n            12: [\"bottom\"],\n            13: [\"bottom\"],\n            14: [\"bottom\"],\n            15: [\"right\", \"bottom\"]\n        };\n        if (!(index in edges)) {\n            return true;\n        }\n        return edges[index].includes(direction);\n    },\n    // Multiboxes\n    multiboxes(selected, options) {\n        let html = options.fn(this);\n        selected = [selected].flat(1);\n        selected.forEach((selectedVal) => {\n            if (selectedVal !== false) {\n                const escapedValue = RegExp.escape(Handlebars.escapeExpression(String(selectedVal)));\n                const rgx = new RegExp(` value=\"${escapedValue}\"`);\n                html = html.replace(rgx, \"$& checked=\\\"checked\\\"\");\n            }\n        });\n        return html;\n    },\n    repturf: (turfsAmount, options) => {\n        let html = options.fn(undefined);\n        let turfsAmountInt = parseInt(turfsAmount, 10);\n        // Can't be more than 6.\n        if (turfsAmountInt > 6) {\n            turfsAmountInt = 6;\n        }\n        for (let i = 13 - turfsAmountInt; i <= 12; i++) {\n            const rgx = new RegExp(` value=\"${i}\"`);\n            html = html.replace(rgx, \"$& disabled=\\\"disabled\\\"\");\n        }\n        return html;\n    }\n};\nhandlebarHelpers.eLog1 = function (...args) { handlebarHelpers.eLog(...[1, ...args.slice(0, 7)]); };\nhandlebarHelpers.eLog2 = function (...args) { handlebarHelpers.eLog(...[2, ...args.slice(0, 7)]); };\nhandlebarHelpers.eLog3 = function (...args) { handlebarHelpers.eLog(...[3, ...args.slice(0, 7)]); };\nhandlebarHelpers.eLog4 = function (...args) { handlebarHelpers.eLog(...[4, ...args.slice(0, 7)]); };\nhandlebarHelpers.eLog5 = function (...args) { handlebarHelpers.eLog(...[5, ...args.slice(0, 7)]); };\nObject.assign(handlebarHelpers);\n/**\n *\n */\nfunction registerHandlebarHelpers() {\n    Object.entries(handlebarHelpers).forEach(([name, func]) => Handlebars.registerHelper(name, func));\n}\n// #endregion ▄▄▄▄▄ Handlebars ▄▄▄▄▄\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/helpers.ts\n");

/***/ }),

/***/ "./ts/core/logger.ts":
/*!***************************!*\
  !*** ./ts/core/logger.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n\n\nconst LOGGERCONFIG = {\n    fullName: \"eLogger\",\n    aliases: [\"dbLog\"],\n    stackTraceExclusions: {\n        handlebars: [/scripts\\/handlebars/] // From internal Handlebars module\n    }\n};\nconst STYLES = {\n    base: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.BLACK,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGOLD,\n        \"font-family\": \"Pragmata Pro\",\n        padding: \"0 25px\",\n        \"margin-right\": \"25px\"\n    },\n    log0: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGOLD,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n        \"font-size\": \"16px\"\n    },\n    log1: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bGOLD,\n        \"font-size\": \"16px\"\n    },\n    log2: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGOLD,\n        \"font-size\": \"16px\"\n    },\n    log3: {\n        \"font-size\": \"14px\"\n    },\n    log4: {\n        \"font-size\": \"12px\"\n    },\n    log5: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGREY,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bGREY,\n        \"font-size\": \"10px\"\n    },\n    display: {\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bGOLD,\n        \"font-family\": \"Kirsty\",\n        \"font-size\": \"16px\",\n        \"margin-left\": \"-100px\",\n        padding: \"0 100px\"\n    },\n    warn: {\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGOLD,\n        \"font-weight\": 500\n    },\n    error: {\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bRED,\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.ddRED,\n        \"font-weight\": 500\n    },\n    handlebars: {\n        background: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY,\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.BLUE,\n        \"font-family\": \"Pragmata Pro\",\n        padding: \"0\",\n        \"margin-right\": \"25px\"\n    },\n    stack: {\n        color: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GOLD,\n        \"font-weight\": 100,\n        \"font-size\": \"10px\",\n        \"font-family\": \"Pragmata Pro\"\n    }\n};\nconst { base: baseStyles, ...typeStyles } = STYLES;\nconst STYLELINES = Object.fromEntries(Object.entries(typeStyles)\n    .map(([styleName, styles]) => [\n    styleName,\n    Object.entries({ ...baseStyles, ...styles })\n        .map(([prop, val]) => `${prop}: ${val};`).join(\" \")\n]));\nconst eLogger = (type = \"base\", ...content) => {\n    if (!([\"error\", \"display\"].includes(type) || CONFIG.debug.logging)) {\n        return;\n    }\n    const lastElem = _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLast(content);\n    let dbLevel = typeof lastElem === \"number\" && [0, 1, 2, 3, 4, 5].includes(lastElem)\n        ? content.pop()\n        : 3;\n    let key = false;\n    if (type === \"checkLog\") {\n        key = content.shift();\n        type = `log${dbLevel}`;\n    }\n    const [message, ...data] = content;\n    if (key) {\n        const blacklist = (_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSetting(\"blacklist\") ?? \"\").split(/,/).map((pat) => new RegExp(`\\\\b${pat.trim()}\\\\b`, \"igu\"));\n        const whitelist = (_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSetting(\"whitelist\") ?? \"\").split(/,/).map((pat) => new RegExp(`\\\\b${pat.trim()}\\\\b`, \"igu\"));\n        const isBlack = blacklist.some((pat) => pat.test(key));\n        const isWhite = whitelist.some((pat) => pat.test(key));\n        if (isBlack && !isWhite) {\n            dbLevel = Math.max(4, Math.min(5, dbLevel + 2));\n        }\n        if (isWhite && !isBlack) {\n            dbLevel = Math.min(3, Math.max(1, dbLevel - 2));\n        }\n    }\n    if ((_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getSetting(\"debug\") ?? 5) < dbLevel) {\n        return;\n    }\n    if (type === \"log\") {\n        type = `${type}${dbLevel}`;\n    }\n    const stackTrace = type === \"display\"\n        ? null\n        : getStackTrace(LOGGERCONFIG.stackTraceExclusions[type] ?? []);\n    let logFunc;\n    if (stackTrace) {\n        logFunc = console.groupCollapsed;\n    }\n    else if (data.length <= 1) {\n        logFunc = console.log;\n    }\n    else {\n        logFunc = console.group;\n    }\n    if (data.length === 0) {\n        if (typeof message === \"string\") {\n            logFunc(`%c${message}`, STYLELINES[type]);\n        }\n        else {\n            logFunc(\"%o\", message);\n        }\n    }\n    else {\n        logFunc(`%c${message}${typeof data[0] === \"string\" ? \"\" : \" %o\"}`, STYLELINES[type], data.shift());\n        data.forEach((line) => {\n            if (typeof line === \"string\") {\n                console.log(line);\n            }\n            else {\n                console.log(\"%o\", line);\n            }\n        });\n    }\n    if (stackTrace) {\n        console.group(\"%cSTACK TRACE\", `color: ${_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dGOLD}; font-family: \"Pragmata Pro\"; font-size: 12px; background: ${_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.BLACK}; font-weight: bold; padding: 0 10px;`);\n        console.log(`%c${stackTrace}`, Object.entries(STYLES.stack).map(([prop, val]) => `${prop}: ${val};`).join(\" \"));\n        console.groupEnd();\n    }\n    console.groupEnd();\n    /**\n     *\n     * @param regExpFilters\n     */\n    function getStackTrace(regExpFilters = []) {\n        regExpFilters.push(new RegExp(`at (getStackTrace|${LOGGERCONFIG.fullName}|${LOGGERCONFIG.aliases.map(String).join(\"|\")}|Object\\\\.(log|display|hbsLog|error))`), /^Error/);\n        return ((new Error()).stack ?? \"\")\n            .split(/\\n/)\n            .map((sLine) => sLine.trim())\n            .filter((sLine) => !regExpFilters.some((rTest) => rTest.test(sLine)))\n            .join(\"\\n\");\n    }\n};\nconst logger = {\n    display: (...content) => eLogger(\"display\", ...content),\n    log0: (...content) => eLogger(\"log\", ...content, 0),\n    log1: (...content) => eLogger(\"log\", ...content, 1),\n    log2: (...content) => eLogger(\"log\", ...content, 2),\n    log: (...content) => eLogger(\"log\", ...content, 3),\n    log3: (...content) => eLogger(\"log\", ...content, 3),\n    log4: (...content) => eLogger(\"log\", ...content, 4),\n    log5: (...content) => eLogger(\"log\", ...content, 5),\n    checkLog0: (...content) => eLogger(\"checkLog\", ...content, 0),\n    checkLog1: (...content) => eLogger(\"checkLog\", ...content, 1),\n    checkLog2: (...content) => eLogger(\"checkLog\", ...content, 2),\n    checkLog: (...content) => eLogger(\"checkLog\", ...content, 3),\n    checkLog3: (...content) => eLogger(\"checkLog\", ...content, 3),\n    checkLog4: (...content) => eLogger(\"checkLog\", ...content, 4),\n    checkLog5: (...content) => eLogger(\"checkLog\", ...content, 5),\n    warn: (...content) => eLogger(\"warn\", ...content),\n    error: (...content) => eLogger(\"error\", ...content),\n    hbsLog: (...content) => eLogger(\"handlebars\", ...content)\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/logger.ts\n");

/***/ }),

/***/ "./ts/core/settings.ts":
/*!*****************************!*\
  !*** ./ts/core/settings.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initCanvasStyles: function() { return /* binding */ initCanvasStyles; },\n/* harmony export */   initDOMStyles: function() { return /* binding */ initDOMStyles; },\n/* harmony export */   initTinyMCEStyles: function() { return /* binding */ initTinyMCEStyles; }\n/* harmony export */ });\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n\n\nconst registerSettings = function () {\n    game.settings.register(\"eunos-blades\", \"debug\", {\n        name: \"Debug Level\",\n        hint: \"The verbosity of the debug messages to console.\",\n        scope: \"client\", // This specifies a world-level setting\n        config: true, // This specifies that the setting appears in the configuration view\n        type: Number,\n        range: {\n            min: 0,\n            max: 5,\n            step: 1\n        },\n        default: 3 // The default value for the setting\n    });\n    game.settings.register(\"eunos-blades\", \"debugHooks\", {\n        name: \"Debug HOOKS\",\n        hint: \"Whether all Hooks are logged to the console.\",\n        scope: \"client\",\n        config: true,\n        type: Boolean,\n        default: false\n    });\n    game.settings.register(\"eunos-blades\", \"openAPIModelLevel\", {\n        name: \"AI Base Quality\",\n        hint: \"Lower values are cheaper to run, at the cost of quality.\",\n        scope: \"client\", // This specifies a world-level setting\n        config: true, // This specifies that the setting appears in the configuration view\n        type: Number,\n        range: {\n            min: 0,\n            max: 2,\n            step: 1\n        }\n    });\n    game.settings.register(\"eunos-blades\", \"blacklist\", {\n        name: \"Debug Blacklist\",\n        hint: \"Comma-delimited list of categories of debug messages to silence.\",\n        scope: \"client\", // This specifies a world-level setting\n        config: true, // This specifies that the setting appears in the configuration view\n        type: String,\n        default: \"\" // The default value for the setting\n    });\n    game.settings.register(\"eunos-blades\", \"openAPIKey\", {\n        name: \"OpenAI API Key\",\n        hint: \"Your personal OpenAI API Key (necessary to enable AI functionality)\",\n        scope: \"client\", // This specifies a world-level setting\n        config: true, // This specifies that the setting appears in the configuration view\n        type: String,\n        default: \"\" // The default value for the setting\n    });\n    game.settings.register(\"eunos-blades\", \"whitelist\", {\n        name: \"Debug Whitelist\",\n        hint: \"Comma-delimited list of categories of debug messages to promote.\",\n        scope: \"client\", // This specifies a world-level setting\n        config: true, // This specifies that the setting appears in the configuration view\n        type: String,\n        default: \"\" // The default value for the setting\n    });\n    /**\n     * Track the system version upon which point a migration was last applied\n     */\n    game.settings.register(\"eunos-blades\", \"systemMigrationVersion\", {\n        name: \"System Migration Version\",\n        scope: \"world\",\n        config: false,\n        type: Number,\n        default: 0\n    });\n};\n/**\n *\n */\nfunction initTinyMCEStyles() {\n    CONFIG.TinyMCE = {\n        ...CONFIG.TinyMCE,\n        ...{\n            skin: \"skin\",\n            skin_url: \"systems/eunos-blades/css/tinymce/skin\",\n            content_css: `systems/eunos-blades/css/tinymce/content.css?${new Date().getTime()}`,\n            font_css: \"systems/eunos-blades/css/fonts.css\",\n            max_height: 500,\n            min_height: 40,\n            autoresize_overflow_padding: 0,\n            autoresize_bottom_margin: 0, // 25,\n            menubar: false,\n            statusbar: false, // True,\n            elementPath: true,\n            branding: false,\n            resize: false,\n            plugins: \"lists image table code save autoresize searchreplace quickbars template\",\n            save_enablewhendirty: false,\n            // Table_default_styles: {},\n            style_formats: [\n                {\n                    title: \"Headings\",\n                    items: [\n                        { title: \"Heading 1\", block: \"h1\", wrapper: false },\n                        { title: \"Heading 2\", block: \"h2\", wrapper: false },\n                        { title: \"Heading 3\", block: \"h3\", wrapper: false },\n                        { title: \"Heading 4\", block: \"h4\", wrapper: false }\n                    ]\n                },\n                {\n                    title: \"Blocks\",\n                    items: [\n                        { title: \"Paragraph\", block: \"p\", wrapper: false },\n                        { title: \"Block Quote\", block: \"blockquote\", wrapper: true }\n                        // {title: \"Secret\", block: \"span\", classes: \"text-secret\", attributes: {\"data-is-secret\": \"true\"}, wrapper: false}\n                    ]\n                },\n                {\n                    title: \"Inline\",\n                    items: [\n                        { title: \"Bold\", inline: \"b\", wrapper: false },\n                        { title: \"Italics\", inline: \"i\", wrapper: false },\n                        { title: \"Underline\", inline: \"u\", wrapper: false },\n                        { title: \"Secret\", inline: \"span\", classes: \"text-secret\", attributes: { \"data-is-secret\": \"true\" }, wrapper: false }\n                    ]\n                }\n            ],\n            style_formats_merge: false,\n            toolbar: \"styles | searchreplace | formatting alignment lists elements | removeformat | code | save\",\n            toolbar_groups: {\n                formatting: {\n                    icon: \"color-picker\",\n                    tooltip: \"Formatting\",\n                    items: \"bold italic underline\"\n                },\n                alignment: {\n                    icon: \"align-left\",\n                    tooltip: \"Alignment\",\n                    items: \"alignleft aligncenter alignright alignjustify | outdent indent\"\n                },\n                lists: {\n                    icon: \"unordered-list\",\n                    tooltip: \"Lists\",\n                    items: \"bullist numlist\"\n                },\n                elements: {\n                    icon: \"duplicate\",\n                    tooltip: \"Insert Element\",\n                    items: \"tableinsertdialog image hr | template\"\n                }\n            },\n            toolbar_mode: \"floating\",\n            quickbars_link_toolbar: false,\n            quickbars_selection_toolbar: \"styles | bold italic underline\",\n            quickbars_insert_toolbar: \"hr image table\",\n            quickbars_table_toolbar: \"tableprops tabledelete | tableinsertrowbefore tableinsertrowafter tabledeleterow | tableinsertcolbefore tableinsertcolafter tabledeletecol\"\n        }\n    };\n}\n/**\n *\n */\nfunction initCanvasStyles() {\n    CONFIG.canvasTextStyle = new PIXI.TextStyle({\n        align: \"center\",\n        dropShadow: true,\n        dropShadowAngle: _utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].degToRad(45),\n        dropShadowBlur: 8,\n        dropShadowColor: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.BLACK,\n        dropShadowDistance: 4,\n        fill: [\n            _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bWHITE,\n            _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.bGREY\n        ],\n        fillGradientType: 1,\n        fillGradientStops: [\n            0,\n            0.3\n        ],\n        fontFamily: \"Kirsty\",\n        fontSize: 32,\n        letterSpacing: 2,\n        lineHeight: 32,\n        lineJoin: \"round\",\n        padding: 4,\n        stroke: _constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.dBLACK,\n        strokeThickness: 3,\n        trim: true,\n        whiteSpace: \"normal\",\n        wordWrap: true,\n        wordWrapWidth: 0.1\n    });\n}\nfunction initDOMStyles() {\n    // Create a full-screen background gradient that resembles the gradient described in CONFIG-canvasTextStyles\n    // This will serve as a fallback background when the canvas has been disabled or is not available\n    $(\"body.vtt.game.system-eunos-blades\")\n        .append(`<div id=\"backsplash\" style=\"height: 100%; width: 100%; position: absolute; z-index: -1; background: linear-gradient(35deg, ${_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.GREY}, ${_constants__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Colors.BLACK});\"></div>`);\n    // Append lightning-barrier background to #sidebar\n    $(\"#interface\")\n        .append(`<div class=\"lightning-border-container\">\r\n    </div>`); /*\n      <img class=\"border-lightning right-lightning right-lightning-a\" src=\"systems/eunos-blades/assets/animations/chat/energy-beam.webp\" />\n      <img class=\"border-lightning right-lightning right-lightning-b\" src=\"systems/eunos-blades/assets/animations/chat/lightning-ray.webp\" />\n      <img class=\"border-lightning right-lightning right-lightning-c\" src=\"systems/eunos-blades/assets/animations/chat/lightning-ray.webp\" />\n      <img class=\"border-lightning left-lightning left-lightning-a\" src=\"systems/eunos-blades/assets/animations/chat/energy-beam.webp\" />\n      <img class=\"border-lightning left-lightning left-lightning-b\" src=\"systems/eunos-blades/assets/animations/chat/lightning-ray.webp\" />\n      <img class=\"border-lightning left-lightning left-lightning-c\" src=\"systems/eunos-blades/assets/animations/chat/lightning-ray.webp\" />\n    </div>`); */\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (registerSettings);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/settings.ts\n");

/***/ }),

/***/ "./ts/core/tags.ts":
/*!*************************!*\
  !*** ./ts/core/tags.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_tagify_tagify_esm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/tagify/tagify.esm */ \"./lib/tagify/tagify.esm.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ \"./ts/core/utilities.ts\");\n\n\n\nconst _onTagifyChange = (event, doc, targetKey) => {\n    const tagString = event.target.value;\n    if (tagString) {\n        const tags = JSON.parse(tagString).map(({ value }) => value);\n        doc.update({ [targetKey]: tags });\n    }\n    else {\n        doc.update({ [targetKey]: [] });\n    }\n};\nconst Tags = {\n    InitListeners: (html, doc) => {\n        /**\n         * Applies tags and Tagify functionality to a specified HTML element.\n         * @param {HTMLElement} elem The element to tagify.\n         * @param {Record<string,BladesTag[]>} tags The tags, sorted into groups, to apply.\n         */\n        function makeTagInput(elem, tags) {\n            // Create tagify instance; populate dropdown list with tags\n            const tagify = new _lib_tagify_tagify_esm__WEBPACK_IMPORTED_MODULE_0__[\"default\"](elem, {\n                enforceWhitelist: true,\n                editTags: false,\n                whitelist: Object.entries(tags)\n                    .map(([dataGroup, tagList]) => tagList\n                    .map((tag) => ({\n                    value: (new Handlebars.SafeString(tag)).toString(),\n                    \"data-group\": dataGroup\n                })))\n                    .flat(),\n                dropdown: {\n                    enabled: 0,\n                    maxItems: 10000,\n                    placeAbove: false,\n                    appendTarget: html[0]\n                }\n            });\n            tagify.dropdown.createListHTML = (optionsArr) => {\n                const map = {};\n                return structuredClone(optionsArr)\n                    .map((suggestion, idx) => {\n                    const value = tagify.dropdown.getMappedValue.call(tagify, suggestion);\n                    let tagHTMLString = \"\";\n                    if (!map[suggestion[\"data-group\"]]) {\n                        map[suggestion[\"data-group\"]] = true;\n                        if (Object.keys(map).length) {\n                            tagHTMLString += \"</div>\";\n                        }\n                        tagHTMLString += `\r\n                <div class=\"tagify__dropdown__itemsGroup\">\r\n                <h3>${suggestion[\"data-group\"]}</h3>\r\n              `;\n                    }\n                    suggestion.value =\n                        value && typeof value === \"string\" ? _utilities__WEBPACK_IMPORTED_MODULE_2__[\"default\"].escapeHTML(value) : value;\n                    tagHTMLString += tagify.settings.templates.dropdownItem.apply(tagify, [suggestion, idx]);\n                    return tagHTMLString;\n                })\n                    .join(\"\");\n            };\n            /**\n             * Returns the tag group to which a tag belongs, or false if no group found.\n             * @param {BladesTag|string} tag\n             * @returns {string|false} Either the group containing the given tag, or false if no group found.\n             */\n            function findDataGroup(tag) {\n                for (const [group, tagList] of Object.entries(tags)) {\n                    if (tagList.includes(tag)) {\n                        return group;\n                    }\n                }\n                return false;\n            }\n            // Check if element specifies an alternate schema target from doc.tags\n            const targetKey = $(elem).data(\"tagTarget\") ?? \"system.tags\";\n            const curTags = [getProperty(doc, targetKey) ?? []].flat().filter(Boolean);\n            tagify.addTags(curTags\n                .filter(findDataGroup)\n                .map((tag) => ({\n                value: (new Handlebars.SafeString(tag)).toString(),\n                \"data-group\": findDataGroup(tag)\n            })), true, true);\n            // Add event listener for tag changes, setting defined target\n            // Wait briefly, so other tag elements' tags can be set before listener initializes\n            setTimeout(() => elem.addEventListener(\"change\", (event) => { _onTagifyChange(event, doc, targetKey); }), 1000);\n        }\n        const systemTags = {\n            \"System Tags\": Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.System),\n            \"Gear Tags\": [\n                ...Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Gear),\n                ...Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.GearCategory)\n            ],\n            \"Actor Tags\": [\n                ...Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.PC),\n                ...Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.NPC)\n            ],\n            Vices: Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Vice),\n            Playbooks: Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Playbook),\n            Inventions: Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.Invention),\n            \"Gang Types\": Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.GangType)\n        };\n        const districtTags = {\n            \"City Districts\": Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.MainDistrict),\n            \"Other Districts\": Object.values(_constants__WEBPACK_IMPORTED_MODULE_1__.OtherDistrict)\n        };\n        const factionTags = { Factions: game.actors\n                .filter((actor) => actor.type === _constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.faction && actor.name !== null)\n                .map((faction) => faction.name) };\n        $(html).find(\".tags-gm\").each((_, e) => makeTagInput(e, systemTags));\n        $(html).find(\".tags-district\").each((_, e) => makeTagInput(e, districtTags));\n        $(html).find(\".tags-faction\").each((_, e) => makeTagInput(e, factionTags));\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Tags);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/tags.ts\n");

/***/ }),

/***/ "./ts/core/utilities.ts":
/*!******************************!*\
  !*** ./ts/core/utilities.ts ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var gsap_all__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap/all */ \"gsap/all\");\n/* harmony import */ var gsap_all__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(gsap_all__WEBPACK_IMPORTED_MODULE_1__);\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// /// <reference types=\"gsap\" />\n// #region ▮▮▮▮▮▮▮ IMPORTS ▮▮▮▮▮▮▮ ~\n\n// eslint-disable-next-line import/no-unresolved\n\ngsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.registerPlugin(gsap_all__WEBPACK_IMPORTED_MODULE_1__.MotionPathPlugin);\n// #endregion ▮▮▮▮ IMPORTS ▮▮▮▮\n// #region ▮▮▮▮▮▮▮ [HELPERS] Internal Functions, Data & References Used by Utility Functions ▮▮▮▮▮▮▮ ~\n// _noCapWords -- Patterns matching words that should NOT be capitalized when converting to TITLE case.\nconst _noCapWords = \"a|above|after|an|and|at|below|but|by|down|for|for|from|in|nor|of|off|on|onto|or|out|so|the|to|under|up|with|yet\"\n    .split(\"|\")\n    .map((word) => new RegExp(`\\\\b${word}\\\\b`, \"gui\"));\n// _capWords -- Patterns matching words that should ALWAYS be capitalized when converting to SENTENCE case.\nconst _capWords = [\n    \"I\", /[^a-z]{3,}|[.0-9]/gu\n].map((word) => (/RegExp/.test(Object.prototype.toString.call(word)) ? word : new RegExp(`\\\\b${word}\\\\b`, \"gui\")));\n// _loremIpsumText -- Boilerplate lorem ipsum\nconst _loremIpsumText = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ultricies\r\nnibh sed massa euismod lacinia. Aliquam nec est ac nunc ultricies scelerisque porta vulputate odio.\r\nInteger gravida mattis odio, semper volutpat tellus. Ut elit leo, auctor eget fermentum hendrerit,\r\naliquet ac nunc. Suspendisse porta turpis vitae mi posuere molestie. Cras lectus lacus, vulputate a\r\nvestibulum in, mattis vel mi. Mauris quis semper mauris. Praesent blandit nec diam eget tincidunt. Nunc\r\naliquet consequat massa ac lacinia. Ut posuere velit sagittis, vehicula nisl eget, fringilla nibh. Duis\r\nvolutpat mattis libero, a porttitor sapien viverra ut. Phasellus vulputate imperdiet ligula, eget\r\neleifend metus tempor nec. Nam eget sapien risus. Praesent id suscipit elit. Sed pellentesque ligula\r\ndiam, non aliquet magna feugiat vitae. Pellentesque ut tortor id erat placerat dignissim. Pellentesque\r\nut dui vel leo laoreet sodales nec ac tellus. In hac habitasse platea dictumst. Proin sed ex sed augue\r\nsollicitudin interdum. Sed id lacus porttitor nisi vestibulum tincidunt. Nulla facilisi. Vestibulum\r\nfeugiat finibus magna in pretium. Proin consectetur lectus nisi, non commodo lectus tempor et. Cras\r\nviverra, mi in consequat aliquet, justo mauris fringilla tellus, at accumsan magna metus in eros. Sed\r\nvehicula, diam ut sagittis semper, purus massa mattis dolor, in posuere.`;\n// _randomWords -- A collection of random words for various debugging purposes.\nconst _randomWords = `\r\naboveboard|account|achiever|acoustics|act|action|activity|actor|addition|adjustment|advertisement|advice|afterglow|afterimage|afterlife|aftermath|afternoon|afterthought|agreement\r\nair|aircraft|airfield|airlift|airline|airmen|airplane|airport|airtime|alarm|allover|allspice|alongside|also|amount|amusement|anger|angle|animal|another|ants|anyhow|anymore\r\nanyone|anyplace|anytime|anywhere|apparatus|apparel|appliance|approval|arch|argument|arithmetic|arm|army|around|art|ashtray|attack|attraction|aunt|authority|babies|baby|babysitter\r\nback|backache|backbone|backbreaker|backdrop|backfire|background|backhand|backlash|backlog|backpack|backside|backslap|backslide|backspace|backspin|backstroke|backtrack|backward\r\nbadge|bag|bait|balance|ball|ballroom|bankbook|bankroll|base|baseball|basin|basket|basketball|bat|bath|battle|beachcomb|bead|bear|because|become|bed|bedrock|bedroll|bedroom\r\nbeds|bee|beef|beginner|behavior|belief|believe|bell|bellboy|bellhop|bells|below|berry|bike|bikes|bird|birds|birth|birthday|bit|bite|blackball|blackberries|blackbird|blackboard\r\nblackjack|blacklist|blackmail|blackout|blacksmith|blacktop|blade|blood|blow|blowgun|bluebell|blueberry|bluebird|bluefish|bluegrass|blueprint|board|boardwalk|boat|bodyguard\r\nbomb|bone|book|bookcase|bookend|bookkeeper|bookmark|bookmobile|books|bookseller|bookshelf|bookworm|boot|border|bottle|boundary|bowlegs|bowtie|box|boy|brainchild|brake|branch\r\nbrass|breath|brick|bridge|brother|bubble|bucket|bugspray|building|bulb|burst|bushes|business|butter|butterball|buttercup|butterfingers|buttermilk|butternut|butterscotch|button\r\nbypass|cabbage|cabdriver|cable|cactus|cake|cakes|calculator|calendar|camera|camp|can|cancan|candlelight|candlestick|cannon|cannot|canvas|cap|caption|car|card|cardsharp|care\r\ncarefree|careworn|carfare|carload|carpenter|carpool|carport|carriage|cars|carsick|cart|cartwheel|cast|cat|cats|cattle|catwalk|cause|cave|caveman|celery|cellar|cemetery|cent\r\ncentercut|chalk|chance|change|channel|cheese|cheeseburger|cherries|cherry|chess|chicken|chickens|children|chin|church|circle|clam|class|clockwise|cloth|clover|club|coach|coal\r\ncoast|coat|cobweb|coffeemaker|coil|collar|color|comeback|committee|commonplace|commonwealth|company|comparison|competition|condition|connection|control|cook|copper|corn|cornmeal\r\ncough|country|courthouse|cover|cow|cows|crack|cracker|crate|crayon|cream|creator|creature|credit|crewcut|crib|crime|crook|crossbow|crossbreed|crosscut|crossover|crosswalk\r\ncrow|crowd|crown|cub|cup|current|curtain|curve|cushion|dad|dairymaid|daisywheel|daughter|day|daybed|daybook|daybreak|daydream|daylight|daytime|deadend|deadline|death|debt\r\ndecision|deer|degree|design|desire|desk|destruction|detail|development|digestion|dime|dinner|dinosaurs|direction|dirt|discovery|discussion|dishcloth|dishpan|dishwasher|dishwater\r\ndiskdrive|distance|distribution|division|dock|doctor|dog|dogs|doll|dolls|donkey|door|doorstop|downtown|downunder|drain|drawbridge|drawer|dress|drink|driveway|driving|drop\r\nduck|duckbill|duckpin|ducks|dust|ear|earache|earring|earth|earthquake|earthward|earthworm|edge|education|effect|egg|egghead|eggnog|eggs|eggshell|elbow|end|engine|error|event\r\neverything|example|exchange|existence|expansion|experience|expert|eye|eyeballs|eyecatching|eyeglasses|eyelash|eyelid|eyes|eyesight|eyewitness|face|fact|fairies|fall|fang|farm\r\nfatherland|fear|feeling|field|finger|fire|fireball|fireboat|firebomb|firebreak|firecracker|firefighter|firehouse|fireman|fireproof|fireworks|fish|fishbowl|fisherman|fisheye\r\nfishhook|fishmonger|fishnet|fishpond|fishtail|flag|flame|flavor|flesh|flight|flock|floor|flower|flowers|fly|fog|fold|food|foot|football|foothill|footlights|footlocker|footprints\r\nforbearer|force|forearm|forebear|forebrain|forecast|foreclose|foreclosure|foredoom|forefather|forefeet|forefinger|forefoot|forego|foregone|forehand|forehead|foreknowledge\r\nforeleg|foreman|forepaws|foresee|foreshadow|forestall|forethought|foretold|forever|forewarn|foreword|forget|fork|forklift|form|fowl|frame|friction|friend|friends|frog|frogs\r\nfront|fruit|fruitcup|fuel|furniture|gate|gearshift|geese|ghost|giants|giraffe|girl|girls|glass|glassmaking|glove|gold|goodbye|goodnight|government|governor|grade|grain|grandaunt\r\ngranddaughter|grandfather|grandmaster|grandmother|grandnephew|grandparent|grandson|grandstand|granduncle|grape|grass|grassland|graveyard|grip|ground|group|growth|guide|guitar\r\ngumball|gun|hair|haircut|hall|hamburger|hammer|hand|handbook|handgun|handmade|handout|hands|harbor|harmony|hat|hate|head|headache|headlight|headline|headquarters|health|heat\r\nhereafter|hereby|herein|hereupon|highchair|highland|highway|hill|himself|history|hobbies|hole|holiday|home|homemade|hometown|honey|honeybee|honeydew|honeysuckle|hook|hookup\r\nhope|horn|horse|horseback|horsefly|horsehair|horseman|horseplay|horsepower|horseradish|horses|hose|hospital|hot|hour|house|houseboat|household|housekeeper|houses|housetop\r\nhowever|humor|hydrant|ice|icicle|idea|impulse|income|increase|industry|ink|insect|inside|instrument|insurance|intake|interest|invention|iron|island|itself|jail|jailbait|jam\r\njar|jeans|jelly|jellybean|jellyfish|jetliner|jetport|jewel|join|judge|juice|jump|jumpshot|kettle|key|keyboard|keyhole|keynote|keypad|keypunch|keystone|keystroke|keyword|kick\r\nkiss|kittens|kitty|knee|knife|knot|knowledge|laborer|lace|ladybug|lake|lamp|land|language|laugh|leather|leg|legs|letter|letters|lettuce|level|library|lifeblood|lifeguard|lifelike\r\nlifeline|lifelong|lifetime|lifework|limelight|limestone|limit|line|linen|lip|liquid|loaf|lock|locket|longhand|look|loss|love|low|lukewarm|lumber|lunch|lunchroom|machine|magic\r\nmaid|mailbox|mainline|man|marble|mark|market|mask|mass|match|matchbox|meal|meantime|meanwhile|measure|meat|meeting|memory|men|metal|mice|middle|milk|mind|mine|minister|mint\r\nminute|mist|mitten|mom|money|monkey|month|moon|moonbeam|moonlight|moonlit|moonscape|moonshine|moonstruck|moonwalk|moreover|morning|mother|motion|motorcycle|mountain|mouth\r\nmove|muscle|name|nation|nearby|neck|need|needle|nerve|nest|nevermore|newsboy|newsbreak|newscaster|newsdealer|newsletter|newsman|newspaper|newsprint|newsreel|newsroom|night\r\nnightfall|nobody|noise|noisemaker|north|northeast|nose|note|notebook|nowhere|number|nursemaid|nut|nutcracker|oatmeal|observation|ocean|offer|office|oil|oneself|onetime|orange\r\noranges|order|oven|overboard|overcoat|overflow|overland|pacemaker|page|pail|pan|pancake|paper|parcel|part|partner|party|passbook|passenger|passkey|Passover|passport|payment\r\npeace|pear|pen|pencil|peppermint|person|pest|pet|pets|pickle|pickup|picture|pie|pies|pig|pigs|pin|pinhole|pinstripe|pinup|pinwheel|pipe|pizzas|place|plane|planes|plant|plantation\r\nplants|plastic|plate|play|playback|playground|playhouse|playthings|pleasure|plot|plough|pocket|point|poison|pollution|ponytail|popcorn|porter|position|postcard|pot|potato\r\npowder|power|price|produce|profit|property|prose|protest|pull|pump|punishment|purpose|push|quarter|quartz|queen|question|quicksand|quiet|quill|quilt|quince|quiver|rabbit|rabbits\r\nracquetball|rail|railroad|railway|rain|raincheck|raincoat|rainstorm|rainwater|rake|range|rat|rate|rattlesnake|rattletrap|ray|reaction|reading|reason|receipt|recess|record\r\nregret|relation|religion|repairman|representative|request|respect|rest|reward|rhythm|rice|riddle|rifle|ring|rings|river|riverbanks|road|robin|rock|rod|roll|roof|room|root\r\nrose|route|rub|rubberband|rule|run|sack|sail|sailboat|salesclerk|salt|sand|sandlot|sandstone|saucepan|scale|scapegoat|scarecrow|scarf|scene|scent|school|schoolbook|schoolboy\r\nschoolbus|schoolhouse|science|scissors|screw|sea|seashore|seat|secretary|seed|selection|self|sense|servant|shade|shadyside|shake|shame|shape|sharecropper|sharpshooter|sheep\r\nsheepskin|sheet|shelf|ship|shirt|shock|shoe|shoelace|shoemaker|shoes|shop|shortbread|show|showoff|showplace|side|sidekick|sidewalk|sign|silk|silver|silversmith|sink|sister\r\nsisterhood|sisters|sixfold|size|skate|skateboard|skin|skintight|skirt|sky|skylark|skylight|slave|sleep|sleet|slip|slope|slowdown|slumlord|smash|smell|smile|smoke|snail|snails\r\nsnake|snakes|snakeskin|sneeze|snow|snowball|snowbank|snowbird|snowdrift|snowshovel|soap|society|sock|soda|sofa|softball|somebody|someday|somehow|someone|someplace|something\r\nsometimes|somewhat|somewhere|son|song|songs|sort|sound|soundproof|soup|southeast|southwest|soybean|space|spacewalk|spade|spark|spearmint|spiders|spillway|spokesperson|sponge\r\nspoon|spot|spring|spy|square|squirrel|stage|stagehand|stamp|standby|standoff|standout|standpoint|star|starfish|start|statement|station|steam|steamship|steel|stem|step|stepson\r\nstew|stick|sticks|stitch|stocking|stockroom|stomach|stone|stop|stoplight|stopwatch|store|story|stove|stranger|straw|stream|street|stretch|string|stronghold|structure|substance\r\nsubway|sugar|suggestion|suit|summer|sun|sunbaked|sunbathe|sundial|sundown|sunfish|sunflower|sunglasses|sunlit|sunray|sunroof|sunup|supercargo|supercharge|supercool|superego\r\nsuperfine|supergiant|superhero|superhighways|superhuman|superimpose|supermarket|supermen|supernatural|superpower|superscript|supersensitive|supersonic|superstar|superstrong\r\nsuperstructure|supertanker|superweapon|superwoman|support|surprise|sweater|sweetheart|sweetmeat|swim|swing|system|table|tablecloth|tablespoon|tabletop|tableware|tail|tailcoat\r\ntailgate|taillight|taillike|tailpiece|tailspin|takeoff|takeout|takeover|talebearer|taleteller|talk|tank|tapeworm|taproom|taproot|target|taskmaster|taste|tax|taxicab|taxpayer\r\nteaching|teacup|team|teammate|teamwork|teapot|teaspoon|teenager|teeth|telltale|temper|tendency|tenderfoot|tenfold|tent|territory|test|textbook|texture|theory|therefore|thing\r\nthings|thought|thread|thrill|throat|throne|throwaway|throwback|thumb|thunder|thunderbird|thunderstorm|ticket|tiger|time|timekeeper|timesaving|timeshare|timetable|tin|title\r\ntoad|toe|toes|together|tomatoes|tongue|toolbox|tooth|toothbrush|toothpaste|toothpick|top|touch|touchdown|town|township|toy|toys|trade|trail|train|trains|tramp|transport|tray\r\ntreatment|tree|trees|trick|trip|trouble|trousers|truck|trucks|tub|turkey|turn|turnabout|turnaround|turnbuckle|turndown|turnkey|turnoff|turntable|twig|twist|typewriter|umbrella\r\nuncle|underachieve|underage|underarm|underbelly|underbid|undercharge|underclothes|undercover|undercut|underdevelop|underestimate|underexpose|underfoot|underground|underwear\r\nunit|upbeat|upbringing|upcoming|update|upend|upgrade|upheaval|uphill|uphold|upkeep|upland|uplift|upload|upmarket|upon|uppercase|upperclassman|uppercut|uproar|uproot|upset\r\nupshot|upside|upstage|upstairs|upstanding|upstart|upstate|upstream|uptake|upthrust|uptight|uptime|uptown|upward|upwind|use|vacation|value|van|vase|vegetable|veil|vein|verse\r\nvessel|vest|view|visitor|voice|volcano|volleyball|voyage|waistline|walk|walkways|wall|walleyed|wallpaper|war|wardroom|warfare|warmblooded|warpath|wash|washbowl|washcloth|washhouse\r\nwashout|washrag|washroom|washstand|washtub|waste|wastebasket|wasteland|wastepaper|wastewater|watch|watchband|watchdog|watchmaker|watchman|watchtower|watchword|water|watercolor\r\nwatercooler|watercraft|waterfall|waterfront|waterline|waterlog|watermelon|waterpower|waterproof|waterscape|watershed|waterside|waterspout|watertight|wave|wavelike|waves|wax\r\nwaxwork|way|waybill|wayfarer|waylaid|wayside|wayward|wealth|weather|weathercock|weatherman|weatherproof|week|weekday|weekend|weeknight|weight|whatever|whatsoever|wheel|wheelchair\r\nwheelhouse|whip|whistle|whitecap|whitefish|whitewall|whitewash|widespread|wilderness|wind|window|wine|wing|winter|wipeout|wire|wish|without|woman|women|wood|woodshop|wool\r\nword|work|worm|wound|wren|wrench|wrist|writer|writing|yak|yam|yard|yarn|year|yoke|zebra|zephyr|zinc|zipper|zoo\r\n`.split(\"|\");\nconst _numberWords = {\n    ones: [\n        \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n        \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\n        \"twenty\"\n    ],\n    tens: [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"],\n    tiers: [\"\", \"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"],\n    bigPrefixes: [\"\", \"un\", \"duo\", \"tre\", \"quattuor\", \"quin\", \"sex\", \"octo\", \"novem\"],\n    bigSuffixes: [\"\", \"decillion\", \"vigintillion\", \"trigintillion\", \"quadragintillion\", \"quinquagintillion\", \"sexagintillion\", \"septuagintillion\", \"octogintillion\", \"nonagintillion\", \"centillion\"]\n};\nconst _ordinals = {\n    zero: \"zeroeth\", one: \"first\", two: \"second\", three: \"third\", four: \"fourth\", five: \"fifth\", eight: \"eighth\", nine: \"ninth\", twelve: \"twelfth\",\n    twenty: \"twentieth\", thirty: \"thirtieth\", forty: \"fortieth\", fifty: \"fiftieth\", sixty: \"sixtieth\", seventy: \"seventieth\", eighty: \"eightieth\", ninety: \"ninetieth\"\n};\nconst _romanNumerals = {\n    grouped: [\n        [\"\", \"Ⅰ\", \"Ⅱ\", \"Ⅲ\", \"Ⅳ\", \"Ⅴ\", \"Ⅵ\", \"Ⅶ\", \"Ⅷ\", \"Ⅸ\"],\n        [\"\", \"Ⅹ\", \"ⅩⅩ\", \"ⅩⅩⅩ\", \"ⅩⅬ\", \"Ⅼ\", \"ⅬⅩ\", \"ⅬⅩⅩ\", \"ⅬⅩⅩⅩ\", \"ⅩⅭ\"],\n        [\"\", \"Ⅽ\", \"ⅭⅭ\", \"ⅭⅭⅭ\", \"ⅭⅮ\", \"Ⅾ\", \"ⅮⅭ\", \"ⅮⅭⅭ\", \"ⅮⅭⅭⅭ\", \"ⅭⅯ\"],\n        [\"\", \"Ⅿ\", \"ⅯⅯ\", \"ⅯⅯⅯ\", \"Ⅿↁ\", \"ↁ\", \"ↁⅯ\", \"ↁⅯⅯ\", \"ↁⅯⅯⅯ\", \"ↁↂ\"],\n        [\"\", \"ↂ\", \"ↂↂ\", \"ↂↂↂ\", \"ↂↇ\", \"ↇ\", \"ↇↂ\", \"ↇↂↂ\", \"ↇↂↂↂ\", \"ↇↈ\"],\n        [\"\", \"ↈ\", \"ↈↈ\", \"ↈↈↈ\"]\n    ],\n    ungrouped: [\n        [\"\", \"Ⅰ\", \"ⅠⅠ\", \"ⅠⅠⅠ\", \"ⅠⅤ\", \"Ⅴ\", \"ⅤⅠ\", \"ⅤⅠⅠ\", \"ⅤⅠⅠⅠ\", \"ⅠⅩ\"],\n        [\"\", \"Ⅹ\", \"ⅩⅩ\", \"ⅩⅩⅩ\", \"ⅩⅬ\", \"Ⅼ\", \"ⅬⅩ\", \"ⅬⅩⅩ\", \"ⅬⅩⅩⅩ\", \"ⅩⅭ\"],\n        [\"\", \"Ⅽ\", \"ⅭⅭ\", \"ⅭⅭⅭ\", \"ⅭⅮ\", \"Ⅾ\", \"ⅮⅭ\", \"ⅮⅭⅭ\", \"ⅮⅭⅭⅭ\", \"ⅭⅯ\"],\n        [\"\", \"Ⅿ\", \"ⅯⅯ\", \"ⅯⅯⅯ\", \"Ⅿↁ\", \"ↁ\", \"ↁⅯ\", \"ↁⅯⅯ\", \"ↁⅯⅯⅯ\", \"ↁↂ\"],\n        [\"\", \"ↂ\", \"ↂↂ\", \"ↂↂↂ\", \"ↂↇ\", \"ↇ\", \"ↇↂ\", \"ↇↂↂ\", \"ↇↂↂↂ\", \"ↇↈ\"],\n        [\"\", \"ↈ\", \"ↈↈ\", \"ↈↈↈ\"]\n    ]\n};\nconst UUIDLOG = [];\n// #endregion ▮▮▮▮[HELPERS]▮▮▮▮\n// #region ████████ GETTERS: Basic Data Lookup & Retrieval ████████ ~\n// @ts-expect-error Leauge of foundry developers is wrong about user not being on game.\nconst GMID = () => game?.user?.find((user) => user.isGM)?.id ?? false;\n// #endregion ▄▄▄▄▄ GETTERS ▄▄▄▄▄\n// #region ████████ TYPES: Type Checking, Validation, Conversion, Casting ████████ ~\nconst isNumber = (ref) => typeof ref === \"number\" && !isNaN(ref);\nconst isNumString = (ref) => typeof ref === \"string\"\n    && !isNaN(parseFloat(ref))\n    && isFinite(parseFloat(ref));\nconst isBooleanString = (ref) => typeof ref === \"string\"\n    && (ref === \"true\" || ref === \"false\");\nconst isArray = (ref) => Array.isArray(ref);\nconst isSimpleObj = (ref) => ref === Object(ref) && !isArray(ref);\nconst isList = (ref) => ref === Object(ref) && !isArray(ref);\nconst isFunc = (ref) => typeof ref === \"function\";\nconst isInt = (ref) => isNumber(ref) && Math.round(ref) === ref;\nconst isFloat = (ref) => isNumber(ref) && /\\./.test(`${ref}`);\nconst isPosInt = (ref) => isInt(ref) && ref >= 0;\nconst isIndex = (ref) => isList(ref) || isArray(ref);\nconst isIterable = (ref) => typeof ref === \"object\" && ref !== null && Symbol.iterator in ref;\nconst isHTMLCode = (ref) => typeof ref === \"string\" && /^<.*>$/u.test(ref);\nconst isHexColor = (ref) => typeof ref === \"string\" && /^#(([0-9a-fA-F]{2}){3,4}|[0-9a-fA-F]{3,4})$/.test(ref);\nconst isRGBColor = (ref) => typeof ref === \"string\" && /^rgba?\\((\\d{1,3},\\s*){1,2}?\\d{1,3},\\s*\\d{1,3}(\\.\\d+)?\\)$/.test(ref);\nconst isUndefined = (ref) => ref === undefined;\nconst isDefined = (ref) => !isUndefined(ref);\nconst isEmpty = (ref) => Object.keys(ref).length === 0;\nconst hasItems = (ref) => !isEmpty(ref);\nconst isInstance = (classRef, ref) => ref instanceof classRef;\nconst isNullish = (ref) => isUndefined(ref) || ref === null;\n/**\n * Asserts that a given value is of a specified type.\n * Throws an error if the value is not of the expected type.\n *\n * @template T The expected type of the value.\n * @param {unknown} val The value to check.\n * @param {(new(...args: unknown[]) => T) | string} type The expected type of the value.\n * @throws {Error} If the value is not of the expected type.\n */\nfunction assertNonNullType(val, type) {\n    let valStr;\n    // Attempt to convert the value to a string for error messaging.\n    try {\n        valStr = JSON.stringify(val);\n    }\n    catch {\n        valStr = String(val);\n    }\n    // Check if the value is undefined\n    if (val === undefined) {\n        throw new Error(`Value ${valStr} is undefined!`);\n    }\n    // If the type is a string, compare the typeof the value to the type string.\n    if (typeof type === \"string\") {\n        // eslint-disable-next-line valid-typeof\n        if (typeof val !== type) {\n            throw new Error(`Value ${valStr} is not a ${type}!`);\n        }\n    }\n    else if (!(val instanceof type)) {\n        // If the type is a function (constructor), check if the value is an instance of the type.\n        throw new Error(`Value ${valStr} is not a ${type.name}!`);\n    }\n}\n/**\n * Checks if two values are \"fuzzy\" equal, simulating the behavior of the \"==\" operator.\n * This function does not use the \"==\" operator directly to comply with linting rules.\n *\n * @param {unknown} val1 The first value to compare.\n * @param {unknown} val2 The second value to compare.\n * @returns {boolean} True if the values are \"fuzzy\" equal, false otherwise.\n */\nconst areFuzzyEqual = (val1, val2) => {\n    // If both values are null or undefined, they are considered equal\n    if ([null, undefined].includes(val1)\n        && [null, undefined].includes(val2)) {\n        return true;\n    }\n    // If only one of the values is null or undefined, they are not equal\n    if ([null, undefined].includes(val1)\n        || [null, undefined].includes(val2)) {\n        return false;\n    }\n    // If both values are numbers, they are considered equal if they are numerically equal\n    if (typeof val1 === \"number\" && typeof val2 === \"number\") {\n        return val1 === val2;\n    }\n    // If both values are booleans, they are considered equal if they are both true or both false\n    if (typeof val1 === \"boolean\" && typeof val2 === \"boolean\") {\n        return val1 === val2;\n    }\n    // If both values are strings, they are considered equal if they are identical\n    if (typeof val1 === \"string\" && typeof val2 === \"string\") {\n        return val1 === val2;\n    }\n    // If one value is a number and the other is a string, they are considered\n    //                         equal if the string can be converted to the number\n    if (typeof val1 === \"number\" && typeof val2 === \"string\") {\n        return val1 === Number(val2);\n    }\n    if (typeof val1 === \"string\" && typeof val2 === \"number\") {\n        return Number(val1) === val2;\n    }\n    // If one value is a boolean and the other is a non-null object, they are not equal\n    if (typeof val1 === \"boolean\" && typeof val2 === \"object\") {\n        return false;\n    }\n    if (typeof val1 === \"object\" && typeof val2 === \"boolean\") {\n        return false;\n    }\n    // If one value is a boolean and the other is a string, they are considered equal ID:\n    //      ... the boolean is true and the string is not empty, or\n    //      ... the boolean is false and the string is empty\n    if (typeof val1 === \"boolean\"\n        && typeof val2 === \"string\") {\n        return (val1 && val2 !== \"\") || (!val1 && val2 === \"\");\n    }\n    if (typeof val1 === \"string\"\n        && typeof val2 === \"boolean\") {\n        return (val2 && val1 !== \"\") || (!val2 && val1 === \"\");\n    }\n    // If one value is a number or a string and the other is an object, they are not equal\n    if ((typeof val1 === \"number\" || typeof val1 === \"string\") && typeof val2 === \"object\") {\n        return false;\n    }\n    if (typeof val1 === \"object\" && (typeof val2 === \"number\" || typeof val2 === \"string\")) {\n        return false;\n    }\n    // If both values are objects, they are considered equal if they are identical\n    if (typeof val1 === \"object\" && typeof val2 === \"object\") {\n        return val1 === val2;\n    }\n    // If none of the above conditions are met, the values are not equal\n    return false;\n};\nconst areEqual = (...refs) => {\n    do {\n        const ref = refs.pop();\n        if (refs.length && !areFuzzyEqual(ref, refs[0])) {\n            return false;\n        }\n    } while (refs.length);\n    return true;\n};\nconst pFloat = (ref, sigDigits, isStrict = false) => {\n    if (typeof ref === \"string\") {\n        ref = parseFloat(ref);\n    }\n    if (typeof ref === \"number\") {\n        if (isNaN(ref)) {\n            return isStrict ? NaN : 0;\n        }\n        if (isUndefined(sigDigits)) {\n            return ref;\n        }\n        return Math.round(ref * (10 ** sigDigits)) / (10 ** sigDigits);\n    }\n    return isStrict ? NaN : 0;\n};\nconst pInt = (ref, isStrictOrIndex, _arr) => {\n    let isStrict = false;\n    if (typeof isStrictOrIndex === \"boolean\") {\n        isStrict = isStrictOrIndex;\n    }\n    return (isNaN(pFloat(ref, 0, isStrict)) ? NaN : Math.round(pFloat(ref, 0, isStrict)));\n};\nconst pBool = (ref) => {\n    if (typeof ref === \"boolean\") {\n        return ref;\n    }\n    if ([0, null, undefined, \"\"].includes(ref)) {\n        return false;\n    }\n    if (typeof ref === \"string\") {\n        return ![\"0\", \"false\", \"null\", \"undefined\", \"\"].includes(ref);\n    }\n    if (isArray(ref) && ref.length === 0) {\n        return false;\n    }\n    if (isList(ref) && isEmpty(ref)) {\n        return false;\n    }\n    return true;\n};\nconst radToDeg = (rad, isConstrained = true) => {\n    rad = isConstrained ? rad % (2 * Math.PI) : rad;\n    rad *= 180 / Math.PI;\n    return rad;\n};\nconst degToRad = (deg, isConstrained = true) => {\n    deg = isConstrained ? deg % 360 : deg;\n    deg *= Math.PI / 180;\n    return deg;\n};\nconst getKey = (key, obj) => {\n    if (key in obj) {\n        return obj[key];\n    }\n    return null;\n};\nconst FILTERS = {\n    IsInstance: ((classRef) => ((item) => typeof classRef === \"function\" && item instanceof classRef))\n};\n// #endregion ▄▄▄▄▄ TYPES ▄▄▄▄▄\n// #region ████████ STRINGS: String Parsing, Manipulation, Conversion, Regular Expressions ████████\n// #region ░░░░░░░[Case Conversion]░░░░ Upper, Lower, Sentence & Title Case ░░░░░░░ ~\nconst uCase = (str) => String(str).toUpperCase();\nconst lCase = (str) => String(str).toLowerCase();\nconst sCase = (str) => {\n    let [first, ...rest] = `${str ?? \"\"}`.split(/\\s+/);\n    first = testRegExp(first, _capWords) ? first : `${uCase(first.charAt(0))}${lCase(first.slice(1))}`;\n    if (hasItems(rest)) {\n        rest = rest.map((word) => (testRegExp(word, _capWords) ? word : lCase(word)));\n    }\n    return [first, ...rest].join(\" \").trim();\n};\nconst tCase = (str) => String(str).split(/\\s/)\n    .map((word, i) => (i && testRegExp(word, _noCapWords) ? lCase(word) : sCase(word)))\n    .join(\" \").trim();\n// #endregion ░░░░[Case Conversion]░░░░\n// #region ░░░░░░░[RegExp]░░░░ Regular Expressions ░░░░░░░ ~\nconst testRegExp = (str, patterns = [], flags = \"gui\", isTestingAll = false) => patterns\n    .map((pattern) => (pattern instanceof RegExp\n    ? pattern\n    : new RegExp(`\\\\b${pattern}\\\\b`, flags)))[isTestingAll ? \"every\" : \"some\"]((pattern) => pattern.test(`${str}`));\nconst regExtract = (ref, pattern, flags) => {\n    /* Wrapper around String.match() that removes the need to worry about match()'s different handling of the 'g' flag.\n        - IF your pattern contains unescaped parentheses -> Returns Array of all matching groups.\n        - OTHERWISE -> Returns string that matches the provided pattern. */\n    const splitFlags = [];\n    [...(flags ?? \"\").replace(/g/g, \"\"), \"u\"].forEach((flag) => {\n        if (flag && !splitFlags.includes(flag)) {\n            splitFlags.push(flag);\n        }\n    });\n    const isGrouping = /[)(]/.test(pattern.toString().replace(/\\\\\\)|\\\\\\(/g, \"\"));\n    if (isGrouping) {\n        splitFlags.push(\"g\");\n    }\n    flags = splitFlags.join(\"\");\n    pattern = new RegExp(pattern, flags);\n    const matches = `${ref}`.match(pattern) || [];\n    return isGrouping ? Array.from(matches) : matches.pop();\n};\n// #endregion ░░░░[RegExp]░░░░\n// #region ░░░░░░░[Formatting]░░░░ Hyphenation, Pluralization, \"a\"/\"an\" Fixing ░░░░░░░ ~\n// const hyphenate = (str: unknown) => (/^<|\\u00AD|\\u200B/.test(`${str}`) ? `${str}` : _hyph(`${str}`));\nconst unhyphenate = (str) => `${str}`.replace(/[\\u00AD\\u200B]/gu, \"\");\nconst parseArticles = (str) => `${str}`.replace(/\\b([aA])\\s([aeiouAEIOU])/gu, \"$1n $2\");\nconst pluralize = (singular, num = 2, plural) => {\n    if (pFloat(num) === 1) {\n        return singular;\n    }\n    return plural ?? `${singular.replace(/y$/, \"ie\").replace(/s$/, \"se\")}s`;\n};\nconst oxfordize = (items, useOxfordComma = true, andString = \"and\") => {\n    if (items.length === 0) {\n        return \"\";\n    }\n    if (items.length === 1) {\n        return `${items[0]}`;\n    }\n    const lastItem = items.pop();\n    return [\n        items.join(\", \"),\n        useOxfordComma ? \",\" : \"\",\n        ` ${andString} `,\n        lastItem\n    ].join(\"\");\n};\nconst ellipsize = (text, maxLength) => {\n    const str = String(text);\n    return str.length > maxLength ? `${str.slice(0, maxLength - 3)}…` : str;\n};\nconst pad = (text, minLength, delim = \" \") => {\n    const str = `${text}`;\n    if (str.length < minLength) {\n        return `${delim.repeat(minLength - str.length)}${str}`;\n    }\n    return str;\n};\nconst toKey = (text) => (text ?? \"\").toLowerCase().replace(/ /g, \"-\").replace(/default/, \"DEFAULT\");\n// #region ========== Numbers: Formatting Numbers Into Strings =========== ~\nconst signNum = (num, delim = \"\", zeroSign = \"+\") => {\n    let sign;\n    const parsedNum = pFloat(num);\n    if (parsedNum < 0) {\n        sign = \"-\";\n    }\n    else if (parsedNum === 0) {\n        sign = zeroSign;\n    }\n    else {\n        sign = \"+\";\n    }\n    return `${sign}${delim}${Math.abs(parsedNum)}`;\n};\nconst padNum = (num, numDecDigits, includePlus = false) => {\n    const prefix = (includePlus && num >= 0) ? \"+\" : \"\";\n    const [leftDigits, rightDigits] = `${pFloat(num)}`.split(/\\./);\n    if (getType(rightDigits) === \"int\") {\n        if (rightDigits.length > numDecDigits) {\n            return `${prefix}${pFloat(num, numDecDigits)}`;\n        }\n        else if (rightDigits.length < numDecDigits) {\n            return `${prefix}${leftDigits}.${rightDigits}${\"0\".repeat(numDecDigits - rightDigits.length)}`;\n        }\n        else {\n            return `${prefix}${pFloat(num)}`;\n        }\n    }\n    return `${prefix}${leftDigits}.${\"0\".repeat(numDecDigits)}`;\n};\nconst stringifyNum = (num) => {\n    // Can take string representations of numbers, either in standard or scientific/engineering notation.\n    // Returns a string representation of the number in standard notation.\n    if (pFloat(num) === 0) {\n        return \"0\";\n    }\n    const stringyNum = lCase(num).replace(/[^\\d.e+-]/g, \"\");\n    const base = regExtract(stringyNum, /^-?[\\d.]+/);\n    const exp = pInt(regExtract(stringyNum, /e([+-]?\\d+)$/));\n    if (typeof base === \"string\" && typeof exp === \"string\") {\n        let baseInts = regExtract(base, /^-?(\\d+)/);\n        let baseDecs = regExtract(base, /\\.(\\d+)/);\n        if (isArray(baseInts) && isArray(baseDecs)) {\n            baseInts = baseInts.pop()?.replace(/^0+/, \"\");\n            baseDecs = lCase(baseDecs?.pop()).replace(/0+$/, \"\");\n            if (!isUndefined(baseInts) && !isUndefined(baseDecs)) {\n                const numFinalInts = Math.max(0, baseInts.length + exp);\n                const numFinalDecs = Math.max(0, baseDecs.length - exp);\n                const finalInts = [\n                    baseInts.slice(0, numFinalInts),\n                    baseDecs.slice(0, Math.max(0, exp))\n                ].join(\"\") || \"0\";\n                const finalDecs = [\n                    baseInts.length - numFinalInts > 0\n                        ? baseInts.slice(baseInts.length - numFinalInts - 1)\n                        : \"\",\n                    baseDecs.slice(baseDecs.length - numFinalDecs)\n                ].join(\"\");\n                return [\n                    stringyNum.charAt(0) === \"-\" ? \"-\" : \"\",\n                    finalInts,\n                    \"0\".repeat(Math.max(0, numFinalInts - finalInts.length)),\n                    finalDecs.length ? \".\" : \"\",\n                    \"0\".repeat(Math.max(0, numFinalDecs - finalDecs.length)),\n                    finalDecs\n                ].join(\"\");\n            }\n        }\n    }\n    return `${num}`;\n};\nconst verbalizeNum = (num) => {\n    // Converts a float with absolute magnitude <= 9.99e303 into words.\n    num = stringifyNum(num);\n    const getTier = (trioNum) => {\n        if (trioNum < _numberWords.tiers.length) {\n            return _numberWords.tiers[trioNum];\n        }\n        return [\n            _numberWords.bigPrefixes[(trioNum % 10) - 1],\n            _numberWords.bigSuffixes[Math.floor(trioNum / 10)]\n        ].join(\"\");\n    };\n    const parseThreeDigits = (trio) => {\n        if (pInt(trio) === 0) {\n            return \"\";\n        }\n        const digits = `${trio}`.split(\"\").map((digit) => pInt(digit));\n        let result = \"\";\n        if (digits.length === 3) {\n            const hundreds = digits.shift();\n            if (isUndefined(hundreds)) {\n                throw new Error(`[U.verbalizeNum] Undefined digit in trio '${digits.join(\"\")}'.`);\n            }\n            result += hundreds > 0 ? `${_numberWords.ones[hundreds]} hundred` : \"\";\n            if (hundreds && (digits[0] || digits[1])) {\n                result += \" and \";\n            }\n        }\n        if (pInt(digits.join(\"\")) <= _numberWords.ones.length) {\n            result += _numberWords.ones[pInt(digits.join(\"\"))];\n        }\n        else {\n            const tens = _numberWords.tens[pInt(digits.shift())];\n            const ones = pInt(digits[0]) > 0 ? `-${_numberWords.ones[pInt(digits[0])]}` : \"\";\n            result += `${tens}${ones}`;\n        }\n        return result;\n    };\n    const numWords = [];\n    if (num.charAt(0) === \"-\") {\n        numWords.push(\"negative\");\n    }\n    const [integers, decimals] = num.replace(/[,\\s-]/g, \"\").split(\".\");\n    const intArray = [...integers.split(\"\")].reverse().join(\"\")\n        .match(/.{1,3}/g)\n        ?.map((v) => [...v.split(\"\")].reverse().join(\"\")) ?? [];\n    const intStrings = [];\n    while (intArray.length) {\n        const thisTrio = intArray.pop();\n        if (thisTrio) {\n            const theseWords = parseThreeDigits(thisTrio);\n            if (theseWords) {\n                intStrings.push(`${theseWords} ${getTier(intArray.length)}`);\n            }\n        }\n    }\n    numWords.push(intStrings.join(\", \").trim());\n    if (getType(decimals) === \"int\") {\n        if (integers === \"0\") {\n            numWords.push(\"zero\");\n        }\n        numWords.push(\"point\");\n        for (const digit of decimals.split(\"\")) {\n            numWords.push(_numberWords.ones[pInt(digit)]);\n        }\n    }\n    return numWords.join(\" \");\n};\nconst ordinalizeNum = (num, isReturningWords = false) => {\n    if (isReturningWords) {\n        const [numText, suffix] = lCase(verbalizeNum(num)).match(/.*?[-\\s]?(\\w*)$/i) ?? [\"\", \"\"];\n        return numText.replace(new RegExp(`${suffix}$`), suffix in _ordinals ? _ordinals[suffix] : `${suffix}th`);\n    }\n    if (/(\\.)|(1[1-3]$)/.test(`${num}`)) {\n        return `${num}th`;\n    }\n    return `${num}${[\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\"][pInt(`${num}`.charAt(`${num}`.length - 1))]}`;\n};\nconst romanizeNum = (num, isUsingGroupedChars = true) => {\n    if (isFloat(num)) {\n        throw new Error(`Error: Can't Romanize Floats (${num})`);\n    }\n    if (num >= 400000) {\n        throw new Error(`Error: Can't Romanize >= 400,000 (${num})`);\n    }\n    if (num < 0) {\n        throw new Error(`Error: Can't Romanize Negative Numbers (${num})`);\n    }\n    if (num === 0) {\n        return \"0\";\n    }\n    const romanRef = _romanNumerals[isUsingGroupedChars ? \"grouped\" : \"ungrouped\"];\n    const romanNum = [...stringifyNum(num).split(\"\")]\n        .reverse()\n        .map((digit, i) => romanRef[i][pInt(digit)])\n        .reverse()\n        .join(\"\");\n    return isUsingGroupedChars\n        ? romanNum.replace(/ⅩⅠ/gu, \"Ⅺ\").replace(/ⅩⅡ/gu, \"Ⅻ\")\n        : romanNum;\n};\n// #endregion _______ Numbers _______\n// #endregion ░░░░[Formatting]░░░░\n// #region ░░░░░░░[Content]░░░░ Lorem Ipsum, Random Content Generation, Randum UUID ░░░░░░░ ~\nconst loremIpsum = (numWords = 200) => {\n    const lrWordList = _loremIpsumText.split(/\\n?\\s+/g);\n    const words = [...lrWordList[randNum(0, lrWordList.length - 1)]];\n    while (words.length < numWords) {\n        words.push(...lrWordList);\n    }\n    words.length = numWords;\n    return `${sCase(words.join(\" \")).trim().replace(/[^a-z\\s]*$/ui, \"\")}.`;\n};\nconst randString = (length = 5) => Array.from({ length })\n    .map(() => String.fromCharCode(randInt(...[\"a\", \"z\"].map((char) => char.charCodeAt(0)))))\n    .join(\"\");\nconst randWord = (numWords = 1, wordList = _randomWords) => Array.from({ length: numWords }).map(() => randElem([...wordList])).join(\" \");\nconst getUID = (id) => {\n    const indexNum = Math.max(0, ...UUIDLOG.filter(([genericID]) => genericID.startsWith(id)).map(([, , num]) => num)) + 1;\n    const uuid = indexNum === 1 ? id : `${id}_${indexNum}`;\n    UUIDLOG.push([id, uuid, indexNum]);\n    eLog.log(`UUIDify(${id}) --> [${uuid}, ${indexNum}]`);\n    Object.assign(globalThis, { UUIDLOG });\n    return uuid;\n};\n// #endregion ░░░░[Content]░░░░\n// #endregion ▄▄▄▄▄ STRINGS ▄▄▄▄▄\n// #region ████████ SEARCHING: Searching Various Data Types w/ Fuzzy Matching ████████ ~\nconst fuzzyMatch = (val1, val2) => {\n    const [str1, str2] = [val1, val2].map((val) => lCase(String(val).replace(/[^a-zA-Z0-9.+-]/g, \"\").trim()));\n    return str1.length > 0 && str1 === str2;\n};\nconst isIn = (needle, haystack = [], fuzziness = 0) => {\n    // Looks for needle in haystack using fuzzy matching, then returns value as it appears in haystack.\n    // STEP ONE: POPULATE SEARCH TESTS ACCORDING TO FUZZINESS SETTING\n    const SearchTests = [\n        (ndl, item) => new RegExp(`^${ndl}$`, \"gu\").test(`${item}`),\n        (ndl, item) => new RegExp(`^${ndl}$`, \"gui\").test(`${item}`)\n    ];\n    if (fuzziness >= 1) {\n        const fuzzyTests = [\n            (ndl, item) => new RegExp(`^${ndl}`, \"gui\").test(`${item}`),\n            (ndl, item) => new RegExp(`${ndl}$`, \"gui\").test(`${item}`),\n            (ndl, item) => new RegExp(`${ndl}`, \"gui\").test(`${item}`),\n            (ndl, item) => new RegExp(`${item}`, \"gui\").test(`${ndl}`)\n        ];\n        SearchTests.push(...fuzzyTests);\n        if (fuzziness >= 2) {\n            SearchTests.push(...fuzzyTests\n                .map((func) => (ndl, item) => func(`${ndl}`.replace(/\\W/g, \"\"), `${item}`.replace(/\\W/gu, \"\"))));\n            if (fuzziness >= 3) {\n                SearchTests.push(() => false); // Have to implement Fuse matching\n            }\n        }\n    }\n    // STEP TWO: PARSE NEEDLE & CONSTRUCT SEARCHABLE HAYSTACK.\n    const searchNeedle = `${needle}`;\n    const searchStack = (() => {\n        if (isArray(haystack)) {\n            return [...haystack];\n        }\n        if (isList(haystack)) {\n            return Object.keys(haystack);\n        }\n        try {\n            return Array.from(haystack);\n        }\n        catch {\n            throw new Error(`Haystack type must be [list, array], not ${typeof haystack}: ${JSON.stringify(haystack)}`);\n        }\n    })();\n    if (!isArray(searchStack)) {\n        return false;\n    }\n    // STEP THREE: SEARCH HAY FOR NEEDLE USING PROGRESSIVELY MORE FUZZY SEARCH TESTS\n    let matchIndex = -1;\n    while (!isPosInt(matchIndex)) {\n        const testFunc = SearchTests.shift();\n        if (!testFunc) {\n            return false;\n        }\n        matchIndex = searchStack.findIndex((item) => testFunc(searchNeedle, `${item}`));\n    }\n    if (isPosInt(matchIndex)) {\n        return isList(haystack) ? Object.values(haystack)[matchIndex] : haystack[matchIndex];\n    }\n    return false;\n};\nconst isInExact = (needle, haystack) => isIn(needle, haystack, 0);\n// #endregion ▄▄▄▄▄ SEARCHING ▄▄▄▄▄\n// #region ████████ NUMBERS: Number Casting, Mathematics, Conversion ████████ ~\nconst randNum = (min, max, snap = 0) => gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.random(min, max, snap);\nconst randInt = (min, max) => randNum(min, max, 1);\nconst coinFlip = () => randNum(0, 1, 1) === 1;\nconst cycleNum = (num, [min = 0, max = Infinity] = []) => gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.wrap(min, max, num);\nconst clampNum = (num, [min = 0, max = Infinity] = []) => gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.clamp(min, max, num);\nconst cycleAngle = (angle, range = [0, 360]) => cycleNum(angle, range);\nconst roundNum = (num, sigDigits = 0) => (sigDigits === 0 ? pInt(num) : pFloat(num, sigDigits));\nconst sum = (...nums) => Object.values(nums.flat()).reduce((num, tot) => tot + num, 0);\nconst average = (...nums) => sum(...nums) / nums.flat().length;\n// #region ░░░░░░░[Positioning]░░░░ Relationships On 2D Cartesian Plane ░░░░░░░ ~\nconst getDistance = ({ x: x1, y: y1 }, { x: x2, y: y2 }) => (((x1 - x2) ** 2) + ((y1 - y2) ** 2)) ** 0.5;\nconst getAngle = ({ x: x1, y: y1 }, { x: x2, y: y2 }, { x: xO, y: yO } = { x: 0, y: 0 }, range = [0, 360]) => {\n    x1 -= xO;\n    y1 -= yO;\n    x2 -= xO;\n    y2 -= yO;\n    return cycleAngle(radToDeg(Math.atan2(y2 - y1, x2 - x1)), range);\n};\nconst getAngleDelta = (angleStart, angleEnd, range = [0, 360]) => cycleAngle(angleEnd - angleStart, range);\n/**\n * Function to calculate the smallest rectangle that can contain all the given shapes.\n * @param arrayOfShapes - Array of objects, each describing a shape's position and size.\n * @returns An object describing the position (center) and size of the smallest rectangle that can contain all the shapes.\n */\nconst getBoundingRectangle = (arrayOfShapes) => {\n    // Initialize the minimum and maximum x and y coordinates.\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    // Iterate over the array of shapes.\n    for (const shape of arrayOfShapes) {\n        // Calculate the minimum and maximum x and y coordinates for the current shape.\n        let shapeMinX;\n        let shapeMinY;\n        let shapeMaxX;\n        let shapeMaxY;\n        if (shape.radius !== undefined) {\n            // The shape is a circle.\n            shapeMinX = shape.x - shape.radius;\n            shapeMinY = shape.y - shape.radius;\n            shapeMaxX = shape.x + shape.radius;\n            shapeMaxY = shape.y + shape.radius;\n        }\n        else if (shape.size !== undefined) {\n            // The shape is a square.\n            shapeMinX = (shape.x - shape.size) / 2;\n            shapeMinY = (shape.y - shape.size) / 2;\n            shapeMaxX = (shape.x + shape.size) / 2;\n            shapeMaxY = (shape.y + shape.size) / 2;\n        }\n        else if (shape.width !== undefined || shape.height !== undefined) {\n            // The shape is a rectangle (or possibly a square).\n            shape.width ??= shape.height;\n            shape.height ??= shape.width;\n            shapeMinX = (shape.x - shape.width) / 2;\n            shapeMinY = (shape.y - shape.height) / 2;\n            shapeMaxX = (shape.x + shape.width) / 2;\n            shapeMaxY = (shape.y + shape.height) / 2;\n        }\n        else {\n            throw new Error(`[getBoundingRectangle] Error: shape must be a circle, square, or rectangle, not ${JSON.stringify(shape)}`);\n        }\n        // Update the overall minimum and maximum x and y coordinates.\n        minX = Math.min(minX, shapeMinX);\n        minY = Math.min(minY, shapeMinY);\n        maxX = Math.max(maxX, shapeMaxX);\n        maxY = Math.max(maxY, shapeMaxY);\n    }\n    // Calculate the width and height of the smallest rectangle.\n    const width = maxX - minX;\n    const height = maxY - minY;\n    // Calculate the center of the rectangle.\n    const x = (minX + width) / 2;\n    const y = (minY + height) / 2;\n    // Return the position (center) and size of the smallest rectangle.\n    return { x, y, width, height };\n};\n// #endregion ░░░░[Positioning]░░░░\n// #endregion ▄▄▄▄▄ NUMBERS ▄▄▄▄▄\n// #region ████████ ARRAYS: Array Manipulation ████████ ~\nconst randElem = (array) => gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.random(array);\nconst randIndex = (array) => randInt(0, array.length - 1);\nconst makeIntRange = (min, max) => {\n    const intRange = [];\n    for (let i = min; i <= max; i++) {\n        intRange.push(i);\n    }\n    return intRange;\n};\nconst makeCycler = (array, index = 0) => {\n    // Given an array and a starting index, returns a generator function that can be used\n    // to iterate over the array indefinitely, or wrap out-of-bounds index values\n    const wrapper = gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.wrap(array);\n    index--;\n    return (function* () {\n        while (true) {\n            index++;\n            yield wrapper(index);\n        }\n    })();\n};\n/**\n * Returns the last element of an array, or the last value of an object literal.\n *\n * @param {Index<Type>} array An array or object literal\n * @returns {Type|undefined} The last element, or undefined if empty.\n */\nfunction getLast(array) {\n    array = Object.values(array);\n    if (array.length === 0) {\n        throw new Error(\"Cannot get last element of an empty array.\");\n    }\n    return array[array.length - 1];\n}\n// Const getLast = <Type>(array: Type[]): typeof array extends [] ? undefined : Type => ;\nconst unique = (array) => {\n    const returnArray = [];\n    array.forEach((item) => { if (!returnArray.includes(item)) {\n        returnArray.push(item);\n    } });\n    return returnArray;\n};\nconst group = (array, key) => {\n    const returnObj = {};\n    array.forEach((item) => {\n        const returnKey = item[key];\n        let returnVal = returnObj[returnKey];\n        if (!returnVal) {\n            returnVal = [];\n            returnObj[returnKey] = returnVal;\n        }\n        returnVal.push(item);\n    });\n    return returnObj;\n};\nconst sample = (array, numElems = 1, isUniqueOnly = true, uniqueTestFunc = (e, a) => !a.includes(e)) => {\n    const elems = [];\n    let overloadCounter = 0;\n    while (elems.length < numElems && overloadCounter < 1000000) {\n        const randomElem = randElem(array);\n        if (isUniqueOnly && uniqueTestFunc(randomElem, elems)) {\n            elems.push(randomElem);\n        }\n        overloadCounter++;\n    }\n    return elems;\n};\nconst removeFirst = (array, element) => array.splice(array.findIndex((v) => v === element));\n/**\n * This function removes and returns the first element in an array that equals the provided value\n *   or satisfies the provided testing function.\n * If no elements satisfy the testing function, the function will return undefined.\n *\n * @param {T[]} array The array to be searched.\n * @param {(T|((_v: T, _i?: number, _a?: T[]) => boolean))} checkFunc The testing function or value to be searched for.\n * @returns {T | undefined} The first element in the array that passes the test.\n *                          If no elements pass the test, return undefined.\n */\nfunction pullElement(array, checkFunc) {\n    // Define the test function\n    let testFunction;\n    // If checkFunc is not a function, create a function that checks for equality with checkFunc\n    if (typeof checkFunc !== \"function\") {\n        testFunction = (_v) => _v === checkFunc;\n    }\n    else {\n        testFunction = checkFunc;\n    }\n    // Find the index of the first element that passes the test\n    const index = array.findIndex((v, i, a) => testFunction(v, i, a));\n    // If no element passes the test, return undefined\n    if (index === -1) {\n        return undefined;\n    }\n    // Remove the element from the array and return it\n    return array.splice(index, 1).pop();\n}\nconst pullIndex = (array, index) => pullElement(array, (_, i) => i === index);\nconst subGroup = (array, groupSize) => {\n    const subArrays = [];\n    while (array.length > groupSize) {\n        const subArray = [];\n        while (subArray.length < groupSize) {\n            subArray.push(array.shift());\n        }\n        subArrays.push(subArray);\n    }\n    subArrays.push(array);\n    return subArrays;\n};\nconst shuffle = (array) => {\n    let currentIndex = array.length;\n    let randomIndex;\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n        // Pick a remaining element.\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n        // And swap it with the current element.\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex], array[currentIndex]\n        ];\n    }\n    return array;\n};\nconst toArray = (target) => {\n    return gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.toArray(target);\n};\n// #endregion ▄▄▄▄▄ ARRAYS ▄▄▄▄▄\n// #region ████████ OBJECTS: Manipulation of Simple Key/Val Objects ████████ ~\nconst checkVal = ({ k, v }, checkTest) => {\n    if (typeof checkTest === \"function\") {\n        if (isDefined(v)) {\n            return checkTest(v, k);\n        }\n        return checkTest(k);\n    }\n    if (typeof checkTest === \"number\") {\n        checkTest = `${checkTest}`;\n    }\n    return (new RegExp(checkTest)).test(`${v}`);\n};\n/**\n * Given an array or list and a search function, will remove the first matching element and return it.\n * @param {Index<unknown>} obj The array or list to be searched.\n * @param {testFunc<keyFunc | valFunc> | number | string} checkTest The search function.\n * @returns {unknown | false} - The removed element or false if no element was found.\n */\nconst remove = (obj, checkTest) => {\n    if (isArray(obj)) {\n        const index = obj.findIndex((v) => checkVal({ v }, checkTest));\n        if (index >= 0) {\n            return removeElementFromArray(obj, index);\n        }\n    }\n    else if (isList(obj)) {\n        const [remKey] = Object.entries(obj).find(([k, v]) => checkVal({ k, v }, checkTest)) ?? [];\n        if (remKey) {\n            return removeElementFromList(obj, remKey);\n        }\n    }\n    return false;\n};\n/**\n * Removes an element from an array at a given index and returns it.\n * @param {unknown[]} array The array to remove the element from.\n * @param {number} index The index of the element to remove.\n * @returns {unknown} - The removed element.\n */\nconst removeElementFromArray = (array, index) => {\n    let remVal;\n    for (let i = 0; i <= array.length; i++) {\n        if (i === index) {\n            remVal = array.shift();\n        }\n        else {\n            array.push(array.shift());\n        }\n    }\n    return remVal;\n};\n/**\n * Removes an element from a list at a given key and returns it.\n * @param {List<unknown>} list The list to remove the element from.\n * @param {string} key The key of the element to remove.\n * @returns {unknown} - The removed element.\n */\nconst removeElementFromList = (list, key) => {\n    const remVal = list[key];\n    delete list[key];\n    return remVal;\n};\nconst replace = (obj, checkTest, repVal) => {\n    // As remove, except instead replaces the element with the provided value.\n    // Returns true/false to indicate whether the replace action succeeded.\n    let repKey;\n    if (isList(obj)) {\n        [repKey] = Object.entries(obj).find((v) => checkVal({ v }, checkTest)) || [false];\n        if (repKey === false) {\n            return false;\n        }\n    }\n    else if (isArray(obj)) {\n        repKey = obj.findIndex((v) => checkVal({ v }, checkTest));\n        if (repKey === -1) {\n            return false;\n        }\n    }\n    if (typeof repKey !== \"number\") {\n        repKey = `${repKey}`;\n    }\n    if (typeof repVal === \"function\") {\n        // @ts-expect-error Need to figure out how to properly define testFunc<keyFunc | valFunc> (keyFunc/valFunc types?)\n        obj[repKey] = repVal(obj[repKey], repKey);\n    }\n    else {\n        // @ts-expect-error Need to figure out how to properly define testFunc<keyFunc | valFunc> (keyFunc/valFunc types?)\n        obj[repKey] = repVal;\n    }\n    return true;\n};\n/**\n * Cleans an object or value by removing specified values recursively.\n *\n * @template T - The type of the input object or value.\n * @param {T} data The object or value to be cleaned.\n * @param {Array<any>} [remVals] An array of values to be removed during the cleaning process.\n * @returns {T | Partial<T> | \"KILL\"} - The cleaned version of the input object or value.\n *                                      If marked for removal, returns \"KILL\".\n */\nconst objClean = (data, remVals = [undefined, null, \"\", {}, []]) => {\n    const remStrings = remVals.map((rVal) => JSON.stringify(rVal));\n    if (remStrings.includes(JSON.stringify(data)) || remVals.includes(data)) {\n        return \"KILL\";\n    }\n    if (Array.isArray(data)) {\n        const newData = data.map((elem) => objClean(elem, remVals))\n            .filter((elem) => elem !== \"KILL\");\n        return Array.isArray(newData) && newData.length ? newData : \"KILL\";\n    }\n    if (data && typeof data === \"object\" && JSON.stringify(data).startsWith(\"{\")) {\n        const newData = Object.entries(data)\n            .map(([key, val]) => [key, objClean(val, remVals)])\n            .filter(([, val]) => val !== \"KILL\");\n        return newData.length ? Object.fromEntries(newData) : \"KILL\";\n    }\n    return data;\n};\n// Given an object and a predicate function, returns array of two objects:\n//   one with entries that pass, one with entries that fail.\nconst partition = (obj, predicate = () => true) => [\n    objFilter(obj, predicate),\n    objFilter(obj, (v, k) => !predicate(v, k))\n];\n/**\n * Zips two arrays into an object.\n *\n * @template T - The type of the keys.\n * @template U - The type of the values.\n * @param {T[]} keys - The array of keys.\n * @param {U[]} values - The array of values.\n * @returns {Record<T, U>} - The resulting object.\n * @throws {Error} - Throws an error if the arrays are not of equal length, if the keys are not unique, or if the keys are not of a type that can be used as object keys.\n */\nconst zip = (keys, values) => {\n    // Check that the arrays are of equal length\n    if (keys.length !== values.length) {\n        throw new Error(\"The arrays must be of equal length.\");\n    }\n    // Check that the keys are unique\n    if (new Set(keys).size !== keys.length) {\n        throw new Error(\"The keys must be unique.\");\n    }\n    // Zip the arrays into an object\n    const result = {};\n    keys.forEach((key, i) => {\n        result[key] = values[i];\n    });\n    return result;\n};\nfunction objMap(obj, keyFunc, valFunc) {\n    let valFuncTyped = valFunc;\n    let keyFuncTyped = keyFunc;\n    if (!valFuncTyped) {\n        valFuncTyped = keyFunc;\n        keyFuncTyped = false;\n    }\n    if (!keyFuncTyped) {\n        keyFuncTyped = ((k) => k);\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(valFuncTyped);\n    }\n    return Object.fromEntries(Object.entries(obj).map(([key, val]) => {\n        assertNonNullType(valFuncTyped, \"function\");\n        return [keyFuncTyped(key, val), valFuncTyped(val, key)];\n    }));\n}\n/**\n * This function returns the 'size' of any reference passed into it, following these rules:\n * - object: the number of enumerable keys\n * - array: the number of elements\n * - false/null/undefined: 0\n * - anything else: 1\n */\nconst objSize = (obj) => {\n    if (isSimpleObj(obj)) {\n        return Object.keys(obj).length;\n    }\n    if (isArray(obj)) {\n        return obj.length;\n    }\n    if (obj === false || obj === null || obj === undefined) {\n        return 0;\n    }\n    return 1;\n};\n/**\n * This function is an object-equivalent of Array.findIndex() function.\n * It accepts check functions for both keys and/or values.\n * If only one function is provided, it's assumed to be searching via values and will receive (v, k) args.\n *\n * @param {Type} obj The object to be searched.\n * @param {testFunc<keyFunc> | testFunc<valFunc> | false} keyFunc The testing function for keys.\n * @param {testFunc<valFunc>} valFunc The testing function for values.\n * @returns {KeyOf<Type> | false} The key of the first entry that passes the test.\n *                                If no entries pass the test, return false.\n */\nfunction objFindKey(obj, keyFunc, valFunc) {\n    // If valFunc is not provided, assume keyFunc is meant to be valFunc\n    if (!valFunc) {\n        valFunc = keyFunc;\n        keyFunc = false;\n    }\n    // If keyFunc is not provided, create a function that returns the key\n    if (!keyFunc) {\n        keyFunc = ((k) => k);\n    }\n    // If obj is an array, find the index of the first element that passes the test\n    if (isArray(obj)) {\n        return obj.findIndex(valFunc);\n    }\n    // Define the testing functions for keys and values\n    const kFunc = keyFunc || (() => true);\n    const vFunc = valFunc || (() => true);\n    // Find the first entry that passes the test\n    const validEntry = Object.entries(obj).find(([k, v]) => kFunc(k, v) && vFunc(v, k));\n    // If an entry passes the test, return its key\n    if (validEntry) {\n        return validEntry[0];\n    }\n    // If no entries pass the test, return false\n    return false;\n}\n/**\n * An object-equivalent Array.filter() function, which accepts filter functions for both keys and/or values.\n * If only one function is provided, it's assumed to be mapping the values and will receive (v, k) args.\n *\n * @param {Type} obj The object to be searched.\n * @param {testFunc<keyFunc> | testFunc<valFunc> | false} keyFunc The testing function for keys.\n * @param {testFunc<valFunc>} [valFunc] The testing function for values.\n * @returns {Type} The filtered object.\n */\nconst objFilter = (obj, keyFunc, valFunc, isMutating = false) => {\n    //\n    if (!valFunc) {\n        valFunc = keyFunc;\n        keyFunc = false;\n    }\n    if (!keyFunc) {\n        keyFunc = ((k) => k);\n    }\n    if (isArray(obj)) {\n        const keptValues = obj.filter(valFunc);\n        if (isMutating) {\n            obj.splice(0, obj.length, ...keptValues);\n            return obj;\n        }\n        return keptValues;\n    }\n    const kFunc = keyFunc || (() => true);\n    const vFunc = valFunc || (() => true);\n    if (isMutating) {\n        const entriesToRemove = Object.entries(obj)\n            .filter(([key, val]) => !(kFunc(key, val) && vFunc(val, key)));\n        for (const [key] of entriesToRemove) {\n            delete obj[key];\n        }\n        return obj;\n    }\n    return Object.fromEntries(Object.entries(obj)\n        .filter(([key, val]) => kFunc(key, val) && vFunc(val, key)));\n};\nconst objForEach = (obj, func) => {\n    // An object-equivalent Array.forEach() function, which accepts one function(val, key) to perform for each member.\n    if (isArray(obj)) {\n        obj.forEach(func);\n    }\n    else {\n        Object.entries(obj).forEach(([key, val]) => func(val, key));\n    }\n};\n// Prunes an object of given set of values, [undefined, null] default\nconst objCompact = (obj, removeWhiteList = [undefined, null], isMutating = false) => objFilter(obj, (val) => !removeWhiteList.includes(val), undefined, isMutating);\nconst objClone = (obj, isStrictlySafe = false) => {\n    const cloneArray = (arr) => [...arr];\n    const cloneObject = (o) => ({ ...o });\n    try {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    catch (err) {\n        if (isStrictlySafe) {\n            throw err;\n        }\n        if (Array.isArray(obj)) {\n            return cloneArray(obj);\n        }\n        if (typeof obj === \"object\") {\n            return cloneObject(obj);\n        }\n    }\n    return obj;\n};\n/**\n * Returns a deep merge of source into target. Does not mutate target unless isMutatingOk = true.\n * @param {Tx} target The target object to be merged.\n * @param {Ty} source The source object to be merged.\n * @param {object} options An object containing various options for the merge operation.\n * @param {boolean} options.isMutatingOk\n * @param {boolean} options.isStrictlySafe\n * @param {boolean} options.isConcatenatingArrays\n * @param {boolean} options.isReplacingArrays\n * @returns {Tx & Ty} - The merged object.\n */\nfunction objMerge(target, source, { isMutatingOk = false, isStrictlySafe = false, isConcatenatingArrays = true, isReplacingArrays = false } = {}) {\n    // Clone the target if mutation is not allowed\n    target = isMutatingOk ? target : objClone(target, isStrictlySafe);\n    // If source is an instance of  or target is undefined, return source\n    if ((source && typeof source === \"object\" && \"id\" in source && isDocID(source.id)) || isUndefined(target)) {\n        return source;\n    }\n    // If source is undefined, return target\n    if (isUndefined(source)) {\n        return target;\n    }\n    // If source is not an index, return target\n    if (!isIndex(source)) {\n        return target;\n    }\n    // Iterate over each entry in the source object\n    for (const [key, val] of Object.entries(source)) {\n        const targetVal = target[key];\n        // If replacing arrays is enabled and both target and source values are\n        // arrays, replace target value with source value\n        if (isReplacingArrays && isArray(targetVal) && isArray(val)) {\n            target[key] = val;\n        }\n        else if (isConcatenatingArrays && isArray(targetVal) && isArray(val)) {\n            // If concatenating arrays is enabled and both target and source values\n            // are arrays, concatenate source value to target value\n            target[key].push(...val);\n        }\n        else if (val !== null && typeof val === \"object\") {\n            // If source value is an object and not null, merge it into target value\n            if (isUndefined(targetVal) && !(val instanceof Application)) {\n                target[key] = new (Object.getPrototypeOf(val).constructor)();\n            }\n            target[key] = objMerge(target[key], val, { isMutatingOk: true, isStrictlySafe });\n        }\n        else {\n            // For all other cases, assign source value to target\n            target[key] = val;\n        }\n    }\n    // Return the merged target\n    return target;\n}\n/**\n * Deep-compares two objects and returns an object containing only the keys and values\n * in the second object that differ from the first.\n * If the second object is missing a key or value contained in the first, it sets the\n * value in the returned object to null, and prefixes the key with \"-=\".\n * @param {Tx} obj1 The first object to be compared.\n * @param {Ty} obj2 The second object to be compared.\n * @returns {Record<string, unknown>} - An object containing the differences between the two input objects.\n */\nfunction objDiff(obj1, obj2) {\n    const diff = {};\n    const bothObj1AndObj2Keys = Object.keys(obj2).filter((key) => Object.hasOwn(obj2, key) && Object.hasOwn(obj1, key));\n    const onlyObj2Keys = Object.keys(obj2).filter((key) => Object.hasOwn(obj2, key) && !Object.hasOwn(obj1, key));\n    for (const key of bothObj1AndObj2Keys) {\n        // If both values are non-array objects, recursively compare them\n        if (typeof obj1[key] === \"object\" && typeof obj2[key] === \"object\" && !Array.isArray(obj1[key]) && !Array.isArray(obj2[key])) {\n            const nestedDiff = objDiff(obj1[key], obj2[key]);\n            if (Object.keys(nestedDiff).length > 0) {\n                diff[key] = nestedDiff;\n            }\n        }\n        else if (Array.isArray(obj1[key]) && Array.isArray(obj2[key])) {\n            const array1 = obj1[key];\n            const array2 = obj2[key];\n            if (array1.toString() !== array2.toString()) {\n                // If both values are arrays and they are not equal, add the second array to the diff\n                diff[key] = obj2[key];\n            }\n        }\n        else if (obj1[key] !== obj2[key]) {\n            // If the values are not equal, add the second value to the diff\n            diff[key] = obj2[key];\n        }\n    }\n    for (const key of onlyObj2Keys) {\n        // If the second object has a key that the first does not, add it to the diff with a \"-=\" prefix\n        diff[`-=${key}`] = obj2[key];\n    }\n    return diff;\n}\nconst objExpand = (obj) => {\n    const expObj = {};\n    for (const [key, val] of Object.entries(obj)) {\n        if (isList(val)) {\n            const expandedVal = objExpand(val);\n            setProperty(expObj, key, expandedVal);\n        }\n        else {\n            setProperty(expObj, key, val);\n        }\n    }\n    // Iterate through expanded Object, converting object literals to arrays where it makes sense\n    /**\n     *\n     * @param o\n     */\n    function arrayify(o) {\n        if (isList(o)) {\n            if (/^\\d+$/.test(Object.keys(o).join(\"\"))) {\n                return Object.values(o).map(arrayify);\n            }\n            return objMap(o, (v) => arrayify(v));\n        }\n        if (isArray(o)) {\n            return o.map(arrayify);\n        }\n        return o;\n    }\n    return arrayify(expObj);\n};\nconst objFlatten = (obj) => {\n    const flatObj = {};\n    for (const [key, val] of Object.entries(obj)) {\n        if ((isArray(val) || isList(val)) && hasItems(val)) {\n            for (const [subKey, subVal] of Object.entries(objFlatten(val))) {\n                flatObj[`${key}.${subKey}`] = subVal;\n            }\n        }\n        else {\n            flatObj[key] = val;\n        }\n    }\n    return flatObj;\n};\n/**\n *\n * @param obj\n */\nfunction objNullify(obj) {\n    // Check if the input is an object or an array\n    if (!isIndex(obj)) {\n        return obj;\n    }\n    // If the input is an array, nullify all its elements\n    if (Array.isArray(obj)) {\n        obj.forEach((_, i) => {\n            obj[i] = null;\n        });\n        return obj;\n    }\n    // If the input is an object, nullify all its properties\n    Object.keys(obj).forEach((objKey) => {\n        obj[objKey] = null;\n    });\n    return obj;\n}\n/**\n * This function freezes the properties of an object based on a provided schema or keys.\n * If a property is missing, it throws an error.\n * @param {Partial<T>} data The object whose properties are to be frozen.\n * @param {...Array<keyof T> | [T]} keysOrSchema The keys or schema to freeze the properties.\n * @returns {T} - The object with frozen properties.\n * @throws {Error} - Throws an error if a property is missing.\n */\nfunction objFreezeProps(data, ...keysOrSchema) {\n    const firstArg = keysOrSchema[0];\n    // If the first argument is an object and not an array, treat it as a schema\n    if (firstArg instanceof Object && !Array.isArray(firstArg)) {\n        const schema = firstArg;\n        for (const key in schema) {\n            if (data[key] === undefined) {\n                throw new Error(`Missing value for ${key}`);\n            }\n        }\n    }\n    else {\n        // If the first argument is not an object or is an array, treat it as an array of keys\n        for (const key of keysOrSchema) {\n            if (data[key] === undefined) {\n                throw new Error(`Missing value for ${String(key)}`);\n            }\n        }\n    }\n    // Return the data as type T\n    return data;\n}\n// #endregion ▄▄▄▄▄ OBJECTS ▄▄▄▄▄\n// #region ████████ FUNCTIONS: Function Wrapping, Queuing, Manipulation ████████ ~\nconst getDynamicFunc = (funcName, func, context) => {\n    if (typeof func === \"function\") {\n        const dFunc = { [funcName](...args) { return func(...args); } }[funcName];\n        return context ? dFunc.bind(context) : dFunc;\n    }\n    return false;\n};\nconst withLog = (fn) => {\n    return (...args) => {\n        console.log(`calling ${fn.name}`);\n        return fn(...args);\n    };\n};\n// #endregion ▄▄▄▄▄ FUNCTIONS ▄▄▄▄▄\n// #region ████████ HTML: Parsing HTML Code, Manipulating DOM Objects ████████ ~\nconst changeContainer = (elem, container, isCloning = false) => {\n    elem = $(elem)[0];\n    container = $(container)[0];\n    // Get the element's current container, which defines its current coordinate space.\n    const curContainer = $(elem).parent()[0];\n    // Get the element's current position in its current coordinate space.\n    const curPosition = {\n        x: gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.getProperty(elem, \"x\"),\n        y: gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.getProperty(elem, \"y\")\n    };\n    // Convert the element's position in its current space, to the equivalent position in the target space.\n    const relPos = gsap_all__WEBPACK_IMPORTED_MODULE_1__.MotionPathPlugin.convertCoordinates(curContainer, container, curPosition);\n    eLog.checkLog3(\"changeContainer\", \"Target Element\", { elem, container, curContainer, curPosition, relPos });\n    // Clone the element, if indicated\n    if (isCloning) {\n        elem = $(elem).clone()[0];\n    }\n    // Append the element to the new container, and set its new position\n    $(elem).appendTo($(container));\n    gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.set(elem, relPos);\n    return elem;\n};\n/**\n * Adjusts the aspect ratio of a text container to match a target ratio by modifying its font size and line height.\n * This function recursively adjusts the font size and line height until the container's aspect ratio or maximum dimensions are met.\n *\n * @param {HTMLElement|JQuery<HTMLElement>} textContainer - The text container element or jQuery object to adjust.\n * @param {number} targetRatio - The target aspect ratio (width / height) to achieve.\n * @param {number} [maxHeight] - Optional maximum height for the text container.\n * @param {number} [maxWidth] - Optional maximum width for the text container.\n * @param {number} [minFontSize=8] - Optional minimum font size to prevent the text from becoming too small.\n * @returns {void}\n */\nconst adjustTextContainerAspectRatio = (textContainer, targetRatio, maxHeight, maxWidth, minFontSize = 8) => {\n    // Ensure textContainer is an HTMLElement\n    textContainer = $(textContainer)[0];\n    // If no maxWidth is provided, initialize textContainer's width to maximum possible\n    if (!maxWidth) {\n        textContainer.style.setProperty(\"width\", \"max-content\", \"important\");\n    }\n    else {\n        textContainer.style.setProperty(\"width\", `${maxWidth}px`, \"important\");\n    }\n    /**\n     * Recursively adjusts the font size and line height of the text container.\n     * This function is called if the current adjustments do not meet the target aspect ratio or maximum dimensions.\n     *\n     * @returns {boolean} - Returns false if the new font size is below the minimum font size, indicating no further adjustments should be made.\n     */\n    function recurAdjustment() {\n        // Ensure textContainer is an HTMLElement for each recursive call\n        textContainer = $(textContainer)[0];\n        // Calculate new font size and line height as 80% of their current values\n        const newFontSize = parseFloat(style.fontSize) * 0.8;\n        const newLineHeight = parseFloat(style.lineHeight) * 0.8;\n        // Stop recursion if the new font size is below the minimum\n        if (newFontSize < minFontSize) {\n            return false;\n        }\n        // Apply the new font size and line height\n        textContainer.style.fontSize = `${newFontSize}px`;\n        textContainer.style.lineHeight = `${newLineHeight}px`;\n        // Recursively call adjustTextContainerAspectRatio with updated parameters\n        return adjustTextContainerAspectRatio(textContainer, targetRatio, lineCount ?? maxHeight, maxWidth, minFontSize);\n    }\n    // Get computed styles of the text container\n    const style = window.getComputedStyle(textContainer);\n    const lineHeight = parseFloat(style.lineHeight);\n    // Initialize lineCount as undefined\n    let lineCount = undefined;\n    // If maxHeight is provided and is an integer less than lineHeight, calculate lineCount\n    if (isInt(maxHeight) && maxHeight < lineHeight) {\n        lineCount = maxHeight;\n    }\n    // Get the initial width of the text container\n    const initialWidth = parseFloat(style.width);\n    // Initialize bestWidth with the initial width\n    let bestWidth = initialWidth;\n    // Flag to indicate if the maximum line count has been reached\n    let isAtMaxLineCount = false;\n    // Loop to find the best width that matches the target aspect ratio\n    for (let lines = 1;; lines++) {\n        const expectedHeight = lineHeight * lines;\n        const expectedWidth = initialWidth / lines;\n        const expectedRatio = expectedWidth / expectedHeight;\n        // Break the loop if the expected ratio is less than the target ratio\n        if (expectedRatio < targetRatio) {\n            break;\n        }\n        // Handle cases where lineCount is defined\n        if (isInt(lineCount)) {\n            if (lines > lineCount) {\n                if (recurAdjustment()) {\n                    return;\n                }\n                break;\n            }\n        }\n        else if (maxHeight && expectedHeight > maxHeight) {\n            // Handle cases where maxHeight is exceeded\n            if (recurAdjustment()) {\n                return;\n            }\n            break;\n        }\n        // Update bestWidth with the expected width\n        bestWidth = expectedWidth;\n        // Check if the current line count matches the maximum line count\n        if (isInt(lineCount) && lines === lineCount) {\n            isAtMaxLineCount = true;\n            break;\n        }\n    }\n    // If the best width exceeds maxWidth, attempt to adjust font size and line height\n    if (!isAtMaxLineCount && maxWidth && bestWidth > maxWidth) {\n        if (recurAdjustment()) {\n            return;\n        }\n    }\n    // Apply the best width to the text container\n    textContainer.style.setProperty(\"width\", `${bestWidth}px`, \"important\");\n};\nconst getSvgCode = (svgDotKey, svgPathKeys) => {\n    const svgData = getProperty(_constants__WEBPACK_IMPORTED_MODULE_0__.SVGDATA, svgDotKey);\n    // eLog.checkLog3(\"compileSvg\", {svgDotKey, svgPaths, svgData});\n    if (!svgData) {\n        return \"\";\n    }\n    const { viewBox, paths, classes } = svgData;\n    svgPathKeys ??= Object.keys(paths).join(\"|\");\n    if (typeof svgPathKeys === \"string\") {\n        svgPathKeys = svgPathKeys.split(\"|\");\n    }\n    return [\n        `<svg viewBox=\"${viewBox}\">`,\n        ...svgPathKeys\n            .map((path) => `<path class=\"${path} ${classes?.[path] ?? \"\"}\" d=\"${paths[path] ?? \"\"}\" />`),\n        \"</svg>\"\n    ].join(\"\\n\");\n};\n// #region ░░░░░░░[SVG]░░░░ SVG Generation & Manipulation ░░░░░░░ ~\nconst getRawCirclePath = (r, { x: xO, y: yO } = { x: 0, y: 0 }) => {\n    [r, xO, yO] = [r, xO, yO].map((val) => roundNum(val, 2));\n    const [b1, b2] = [0.4475 * r, (1 - 0.4475) * r];\n    const [xT, yT] = [xO, yO - r];\n    return [[\n            ...[xT, yT],\n            ...[b2, 0, r, b1, r, r],\n            ...[0, b2, -b1, r, -r, r],\n            ...[-b2, 0, -r, -b1, -r, -r],\n            ...[0, -b2, b1, -r, r, -r]\n        ]];\n};\nconst drawCirclePath = (radius, origin) => {\n    const [[xT, yT, ...segments]] = getRawCirclePath(radius, origin);\n    const path = [`m ${xT} ${yT}`];\n    segments.forEach((coord, i) => {\n        if (i % 6 === 0) {\n            path.push(\"c\");\n        }\n        path.push(coord);\n    });\n    path.push(\"z\");\n    return path.join(\" \");\n};\n// #endregion ░░░░[SVG]░░░░\n// #region ░░░░░░░[Colors]░░░░ Color Manipulation ░░░░░░░ ~\nconst getColorVals = (red, green, blue, alpha) => {\n    if (isRGBColor(red)) {\n        [red, green, blue, alpha] = red\n            .replace(/[^\\d.,]/g, \"\")\n            .split(/,/)\n            .map((color) => (isUndefined(color) ? undefined : parseFloat(color)));\n    }\n    if (isHexColor(red)) {\n        if ([4, 5].includes(red.length)) {\n            red = red.replace(/([^#])/g, \"$1$1\");\n        }\n        [red, green, blue, alpha] = red\n            .match(/[^#]{2}/g)\n            ?.map((val) => parseInt(val, 16)) ?? [];\n    }\n    if ([red, green, blue].every((color) => /^\\d+$/.test(`${color}`))) {\n        return [red, green, blue, alpha]\n            .filter((color) => /^[\\d.]+$/.test(`${color}`));\n    }\n    return null;\n};\nconst getRGBString = (red, green, blue, alpha) => {\n    if (isRGBColor(red) || isHexColor(red)) {\n        [red, green, blue, alpha] = getColorVals(red) ?? [];\n    }\n    if ([red, green, blue].every((color) => /^[.\\d]+$/.test(`${color}`))) {\n        let colorString = \"rgb\";\n        const colors = [red, green, blue];\n        if (/^[.\\d]+$/.test(`${alpha}`)) {\n            colors.push(alpha >= 1 ? pInt(alpha) : pFloat(alpha, 2));\n            colorString += \"a\";\n        }\n        return `${colorString}(${colors.join(\", \")})`;\n    }\n    return null;\n};\nconst getHEXString = (red, green, blue) => {\n    function componentToHex(c) {\n        const hex = c.toString(16);\n        return hex.length === 1 ? `0${hex}` : hex;\n    }\n    if (isHexColor(red)) {\n        return red;\n    }\n    if (isRGBColor(red)) {\n        [red, green, blue] = getColorVals(red) ?? [];\n    }\n    if (isDefined(red) && isDefined(green) && isDefined(blue) && [red, green, blue].every((color) => /^[.\\d]+$/.test(`${color}`))) {\n        return `#${componentToHex(red ?? 0)}${componentToHex(green ?? 0)}${componentToHex(blue ?? 0)}`;\n    }\n    return null;\n};\nconst getContrastingColor = (...colorVals) => {\n    const [red, green, blue] = getColorVals(...colorVals) ?? [];\n    if ([red, green, blue].every(isNumber)) {\n        const YIQ = ((red * 299) + (green * 587) + (blue * 114)) / 1000;\n        return (YIQ >= 128) ? \"rgba(0, 0, 0, 1)\" : \"rgba(255, 255, 255, 0.8)\";\n    }\n    return null;\n};\nconst getRandomColor = () => getRGBString(gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.random(0, 255, 1), gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.random(0, 255, 1), gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.random(0, 255, 1));\n// #endregion ░░░░[Colors]░░░░\n// #region ░░░░░░░[DOM]░░░░ DOM Manipulation ░░░░░░░ ~\nconst getSiblings = (elem) => {\n    const siblings = [];\n    // If no parent, return no sibling\n    if (!elem.parentNode) {\n        return siblings;\n    }\n    Array.from(elem.parentNode.children).forEach((sibling) => {\n        if (sibling !== elem) {\n            siblings.push(sibling);\n        }\n    });\n    return siblings;\n};\n// #endregion ░░░░[DOM]░░░░\nconst escapeHTML = (str) => (typeof str === \"string\"\n    ? str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/[`']/g, \"&#039;\")\n    : str);\n// #region ████████ PERFORMANCE: Performance Testing & Metrics ████████\n/**\n * Test the performance of a function (synchronous or asynchronous).\n * The function will be called repeatedly for 10 seconds, and the total and average execution times will be logged.\n * @param func - The function to test. Can be synchronous or asynchronous.\n * @param params - The parameters to pass to the function.\n */\nconst testFuncPerformance = (func, ...params) => {\n    const start = performance.now(); // Start the timer\n    let tally = 0; // Keep track of how many times the function is called\n    // This function will be called each time 'func' finishes executing\n    const handleResult = () => {\n        // Check if 10 seconds have passed\n        if (performance.now() - start < 10000) {\n            runFunc(); // If not, call 'func' again\n            tally++; // And increment the tally\n        }\n        else {\n            // If 10 seconds have passed, calculate the total and average time and log them\n            const elapsedTime = performance.now() - start;\n            const timePerCall = roundNum(elapsedTime / tally / 4000, 4);\n            eLog.checkLog3(\"performance\", `[TestPerformance] Function Ran ${tally} Times in ${roundNum(elapsedTime / 1000, 4)}s, Averaging ${timePerCall}s per Call`);\n        }\n    };\n    // This function calls 'func' and handles its result, whether it's a Promise or not\n    const runFunc = () => {\n        const result = func(...params); // Call 'func' with the provided parameters\n        if (result instanceof Promise) {\n            // If 'func' is asynchronous, wait for the Promise to resolve before handling the result\n            result.then(handleResult);\n        }\n        else {\n            // If 'func' is synchronous, handle the result immediately\n            handleResult();\n        }\n    };\n    runFunc(); // Start the first call to 'func'\n};\n// #endregion\n// #region ░░░░░░░[GreenSock]░░░░ Wrappers for GreenSock Functions ░░░░░░░ ~\nconst set = (targets, vars) => gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.set(targets, vars);\n/**\n *\n * @param target\n * @param property\n * @param unit\n */\nfunction get(target, property, unit) {\n    if (unit) {\n        const propVal = regExtract(gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.getProperty(target, property, unit), /[\\d.]+/);\n        if (typeof propVal === \"string\") {\n            return pFloat(propVal);\n        }\n        throw new Error(`Unable to extract property '${property}' in '${unit}' units from ${target}`);\n    }\n    return gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.getProperty(target, property);\n}\nconst getGSAngleDelta = (startAngle, endAngle) => signNum(roundNum(getAngleDelta(startAngle, endAngle), 2)).replace(/^(.)/, \"$1=\");\nconst getNearestLabel = (tl, matchTest) => {\n    if (!tl) {\n        return undefined;\n    }\n    if (!objSize(tl.labels)) {\n        return undefined;\n    }\n    if (typeof matchTest === \"string\") {\n        matchTest = new RegExp(matchTest);\n    }\n    // Filter the labels against the matchTest, if one provided, and sort by time in ascending order.\n    const labelTimes = Object.entries(tl.labels)\n        .filter(([label]) => {\n        return matchTest instanceof RegExp\n            ? matchTest.test(label)\n            : true;\n    })\n        .sort((a, b) => a[1] - b[1]);\n    // Snap the current time of the timeline to the values in labelTimes\n    const nearestTime = gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.utils.snap(labelTimes.map(([_label, time]) => time), tl.time());\n    // Get the associated label for the nearest time\n    const [nearestLabel] = labelTimes.find(([_label, time]) => time === nearestTime);\n    return nearestLabel;\n};\nconst reverseRepeatingTimeline = (tl) => {\n    // FIRST: Determine if timeline itself is repeating, or if most-recent child tween of timeline is repeating\n    if (tl.repeat() === -1) {\n        // Timeline itself is repeating. Set totalTime equal to time, reverse.\n        tl.totalTime(tl.time());\n    }\n    else {\n        // Get currently-running child tween, check if that is repeating.\n        const [tw] = tl.getChildren(false, true, true, tl.time());\n        if (tw && tw.repeat() === -1) {\n            // Child tween is repeating. Set totalTime of TWEEN equal to time, reverse TIMELINE.\n            tw.totalTime(tw.time());\n        }\n        tl.reverse();\n    }\n    return tl;\n};\n// #endregion ░░░░[GreenSock]░░░░\n// #endregion ▄▄▄▄▄ HTML ▄▄▄▄▄\n// #region ████████ ASYNC: Async Functions, Asynchronous Flow Control ████████ ~\nconst sleep = (duration) => new Promise((resolve) => {\n    setTimeout(resolve, duration >= 100 ? duration : duration * 1000);\n});\nfunction waitFor(waitForTarget) {\n    return new Promise((resolve, reject) => {\n        if (waitForTarget instanceof Promise\n            || waitForTarget instanceof gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap.core.Animation) {\n            waitForTarget.then(() => resolve()).catch(reject);\n        }\n        else if (Array.isArray(waitForTarget)) {\n            Promise.all(waitForTarget.map((target) => waitFor(target))).then(() => resolve()).catch(reject);\n        }\n        else {\n            resolve();\n        }\n    });\n}\n// #endregion ▄▄▄▄▄ ASYNC ▄▄▄▄▄\nconst EventHandlers = {\n    onTextInputBlur: async (inst, event) => {\n        const elem = event.target;\n        const { action, target, flagTarget } = elem.dataset;\n        if (!action) {\n            throw new Error(\"Input text elements require a data-action attribute.\");\n        }\n        if (!target && !flagTarget) {\n            throw new Error(\"Input text elements require a 'data-target' or 'data-flag-target' attribute.\");\n        }\n        if (target) {\n            await inst.document.update({ [target]: elem.value });\n        }\n        else if (flagTarget) {\n            if (elem.value === \"\") {\n                await inst.document.unsetFlag(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID, flagTarget);\n            }\n            else {\n                await inst.document.setFlag(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID, flagTarget, elem.value);\n            }\n        }\n    },\n    onSelectChange: async (inst, event) => {\n        const elem = event.currentTarget;\n        const { action, dtype, target, flagTarget } = elem.dataset;\n        if (!action) {\n            throw new Error(\"Select elements require a data-action attribute.\");\n        }\n        if (!target && !flagTarget) {\n            throw new Error(\"Select elements require a 'data-target' or 'data-flag-target' attribute.\");\n        }\n        const dataType = lCase(dtype);\n        let value;\n        switch (dataType) {\n            case \"number\":\n                value = pFloat(elem.value);\n                break;\n            case \"boolean\":\n                value = lCase(`${elem.value}`) === \"true\";\n                break;\n            case \"string\":\n                value = `${elem.value}`;\n                break;\n            default: {\n                if (isNumString(value)) {\n                    throw new Error(\"You must set 'data-dtype=\\\"Number\\\"' for <select> elements with number values.\");\n                }\n                if (isBooleanString(value)) {\n                    throw new Error(\"You must set 'data-dtype=\\\"Boolean\\\"' for <select> elements with boolean values.\");\n                }\n                value = `${elem.value}`;\n                break;\n            }\n        }\n        if (target) {\n            await inst.document.update({ [target]: value });\n        }\n        else if (flagTarget) {\n            if (elem.value === \"\") {\n                await inst.document.unsetFlag(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID, flagTarget);\n            }\n            else {\n                await inst.document.setFlag(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID, flagTarget, value);\n            }\n        }\n    }\n};\n// #region ████████ FOUNDRY: Requires Configuration of System ID in constants.ts ████████ ~\nconst isDocID = (ref) => {\n    return typeof ref === \"string\" && /^[A-Za-z0-9]{16}$/.test(ref);\n};\nconst isDocUUID = (ref) => {\n    if (typeof ref !== \"string\") {\n        return false;\n    }\n    const [docName, docID] = ref.split(/\\./);\n    if (!isDocID(docID)) {\n        return false;\n    }\n    return game.collections.has(docName);\n};\nconst isDotKey = (ref) => {\n    return typeof ref === \"string\";\n};\nconst isTargetKey = (ref) => {\n    if (!isDotKey(ref)) {\n        return false;\n    }\n    if ([\"name\", \"img\", \"id\", \"_id\"].includes(ref)) {\n        return true;\n    }\n    if (ref.startsWith(\"system\")) {\n        return true;\n    }\n    if (ref.startsWith(\"flag\")) {\n        return true;\n    }\n    return false;\n};\nconst isTargetFlagKey = (ref) => {\n    if (!isDotKey(ref)) {\n        return false;\n    }\n    if (isTargetKey(ref)) {\n        return false;\n    }\n    return true;\n};\nconst parseDocRefToUUID = (ref) => {\n    if (isDocUUID(ref)) {\n        return ref;\n    }\n    else if (isDocID(ref)) {\n        const doc = game.collections.find((collection) => collection.has(ref))?.get(ref);\n        if (doc && \"uuid\" in doc) {\n            return doc.uuid;\n        }\n        throw new Error(`[U.parseDocRefToUUID] Unable to find document with id '${ref}'`);\n    }\n    else if (ref && typeof ref === \"object\" && \"uuid\" in ref && typeof ref.uuid === \"string\") {\n        return ref.uuid;\n    }\n    throw new Error(`[U.parseDocRefToUUID] Unrecognized reference: '${ref}'`);\n};\nconst loc = (locRef, formatDict = {}) => {\n    if (/[a-z]/.test(locRef)) { // Reference contains lower-case characters: add system ID namespacing to dot notation\n        locRef = locRef.replace(new RegExp(`^(${_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID}.)*`), `${_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID}.`);\n    }\n    if (typeof game.i18n.localize(locRef) === \"string\") {\n        for (const [key, val] of Object.entries(formatDict)) {\n            formatDict[key] = loc(val);\n        }\n        return game.i18n.format(locRef, formatDict) || game.i18n.localize(locRef) || locRef;\n    }\n    return locRef;\n};\nconst getSetting = (setting) => {\n    if (game.settings.settings.has(`${_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID}.${setting}`)) {\n        return game.settings.get(_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID, setting);\n    }\n    return undefined;\n};\n/**\n *\n * @param subFolder\n * @param fileName\n */\nfunction getTemplatePath(subFolder, fileName) {\n    if (typeof fileName === \"string\") {\n        return `${_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TEMPLATE_ROOT}/${subFolder}/${fileName.replace(/\\..*$/, \"\")}.hbs`;\n    }\n    return fileName.map((fName) => getTemplatePath(subFolder, fName));\n}\n// DisplayImageSelector: Displays a file selector in tiles mode at the indicated path root.\n/**\n *\n * @param callback\n * @param pathRoot\n * @param position\n * @param position.top\n * @param position.left\n */\nfunction displayImageSelector(callback, pathRoot = `systems/${_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SYSTEM_ID}/assets`, position = { top: 200, left: 200 }) {\n    const fp = new FilePicker({\n        type: \"image\",\n        activeSource: \"public\",\n        displayMode: \"tiles\",\n        callback,\n        top: position.top ?? 200 + 40,\n        left: position.left ?? 200 + 10\n    });\n    return fp.browse(pathRoot);\n}\n// #endregion ▄▄▄▄▄ FOUNDRY ▄▄▄▄▄\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    // ████████ GETTERS: Basic Data Lookup & Retrieval ████████\n    GMID, getUID,\n    // ████████ TYPES: Type Checking, Validation, Conversion, Casting ████████\n    isNumber, isNumString, isBooleanString, isSimpleObj, isList, isArray, isFunc, isInt, isFloat, isPosInt, isIterable,\n    isHTMLCode, isRGBColor, isHexColor,\n    isUndefined, isDefined, isEmpty, hasItems, isInstance, isNullish,\n    areEqual, areFuzzyEqual,\n    pFloat, pInt, pBool, radToDeg, degToRad,\n    getKey,\n    assertNonNullType,\n    FILTERS,\n    // ████████ REGEXP: Regular Expressions, Replacing, Matching ████████\n    testRegExp,\n    regExtract,\n    // ████████ STRINGS: String Parsing, Manipulation, Conversion ████████\n    // ░░░░░░░ Case Conversion ░░░░░░░\n    uCase, lCase, sCase, tCase,\n    // ░░░░░░░ Formatting ░░░░░░░\n    /* hyphenate, */ unhyphenate, pluralize, oxfordize, ellipsize, pad,\n    toKey,\n    parseArticles,\n    signNum, padNum, stringifyNum, verbalizeNum, ordinalizeNum, romanizeNum,\n    // ░░░░░░░ Content ░░░░░░░\n    loremIpsum, randString, randWord,\n    // ████████ SEARCHING: Searching Various Data Types w/ Fuzzy Matching ████████\n    fuzzyMatch, isIn, isInExact,\n    // ████████ NUMBERS: Number Casting, Mathematics, Conversion ████████\n    randNum, randInt,\n    coinFlip,\n    cycleNum, cycleAngle, roundNum, clampNum,\n    sum, average,\n    // ░░░░░░░ Positioning ░░░░░░░\n    getDistance,\n    getAngle, getAngleDelta,\n    getBoundingRectangle,\n    // ████████ ARRAYS: Array Manipulation ████████\n    randElem, randIndex,\n    makeIntRange,\n    makeCycler,\n    unique, group, sample,\n    getLast, removeFirst, pullElement, pullIndex,\n    subGroup, shuffle,\n    toArray,\n    // ████████ OBJECTS: Manipulation of Simple Key/Val Objects ████████\n    remove, replace, partition, zip,\n    objClean, objSize, objMap, objFindKey, objFilter, objForEach, objCompact,\n    objClone, objMerge, objDiff, objExpand, objFlatten, objNullify,\n    objFreezeProps,\n    // ████████ FUNCTIONS: Function Wrapping, Queuing, Manipulation ████████\n    getDynamicFunc, withLog,\n    // ████████ HTML: Parsing HTML Code, Manipulating DOM Objects ████████\n    getSvgCode,\n    changeContainer, adjustTextContainerAspectRatio,\n    getRawCirclePath, drawCirclePath,\n    getColorVals, getRGBString, getHEXString, getContrastingColor, getRandomColor,\n    getSiblings,\n    escapeHTML,\n    // ████████ PERFORMANCE: Performance Testing & Metrics ████████\n    testFuncPerformance,\n    // ░░░░░░░ GreenSock ░░░░░░░\n    gsap: gsap_all__WEBPACK_IMPORTED_MODULE_1__.gsap, get, set, getGSAngleDelta, getNearestLabel, reverseRepeatingTimeline, /* to, from, fromTo, */\n    TextPlugin: gsap_all__WEBPACK_IMPORTED_MODULE_1__.TextPlugin, Flip: gsap_all__WEBPACK_IMPORTED_MODULE_1__.Flip, MotionPathPlugin: gsap_all__WEBPACK_IMPORTED_MODULE_1__.MotionPathPlugin,\n    // ████████ ASYNC: Async Functions, Asynchronous Flow Control ████████\n    sleep, waitFor,\n    // EVENT HANDLERS\n    EventHandlers,\n    // ░░░░░░░ SYSTEM: System-Specific Functions (Requires Configuration of System ID in constants.js) ░░░░░░░\n    isDocID, isDocUUID, isDotKey, isTargetKey, isTargetFlagKey,\n    parseDocRefToUUID,\n    loc, getSetting, getTemplatePath, displayImageSelector\n});\n// #endregion ▄▄▄▄▄ EXPORTS ▄▄▄▄▄\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/core/utilities.ts\n");

/***/ }),

/***/ "./ts/documents/BladesActiveEffect.ts":
/*!********************************************!*\
  !*** ./ts/documents/BladesActiveEffect.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n\n\n\nconst FUNCQUEUE = {};\n// {type: \"ability\", name: \"rX:/^(?!Ghost)/\"}\nconst CUSTOMFUNCS = {\n    addItem: async (actor, funcData, _, isReversing = false) => {\n        eLog.checkLog(\"activeEffects\", \"addItem\", { actor, funcData, isReversing });\n        if (actor.hasActiveSubItemOf(funcData)) {\n            if (isReversing) {\n                return actor.remSubItem(funcData);\n            }\n        }\n        else if (!isReversing) {\n            return actor.addSubItem(funcData);\n        }\n        return undefined;\n    },\n    addIfChargen: async (actor, funcData, _, isReversing = false) => {\n        eLog.checkLog(\"activeEffects\", \"addIfChargen\", { actor, funcData, isReversing });\n        if (!isReversing && game.eunoblades.Tracker?.system.phase !== _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesPhase.CharGen) {\n            return;\n        }\n        const [target, qty] = funcData.split(/:/);\n        if (isReversing) {\n            await actor.update({ [target]: _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(getProperty(actor, target)) - _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(qty) });\n            return;\n        }\n        await actor.update({ [target]: _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(getProperty(actor, target)) + _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(qty) });\n    },\n    upgradeIfChargen: async (actor, funcData, _, isReversing = false) => {\n        eLog.checkLog(\"activeEffects\", \"upgradeIfChargen\", { actor, funcData, isReversing });\n        if (!isReversing && game.eunoblades.Tracker?.system.phase !== _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesPhase.CharGen) {\n            return;\n        }\n        const [target, qty] = funcData.split(/:/);\n        if (getProperty(actor, target) < _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(qty)) {\n            await actor.update({ [target]: _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(qty) });\n        }\n    },\n    APPLYTOMEMBERS: async () => undefined,\n    APPLYTOCOHORTS: async () => undefined,\n    remItem: async (actor, funcData, _, isReversing = false) => {\n        function testString(targetString, testDef) {\n            if (testDef.startsWith(\"rX\")) {\n                const pat = new RegExp(testDef.replace(/^rX:\\/(.*?)\\//, \"$1\"));\n                return pat.test(targetString);\n            }\n            return targetString === testDef;\n        }\n        if (funcData.startsWith(\"{\")) {\n            if (isReversing) {\n                console.error(\"Cannot reverse a 'remItem' custom effect that was defined with a JSON object.\");\n                return undefined;\n            }\n            const { type, tags, name } = JSON.parse(funcData);\n            let activeSubItems = actor.activeSubItems;\n            if (activeSubItems.length === 0) {\n                return undefined;\n            }\n            if (name) {\n                activeSubItems = activeSubItems.filter((item) => testString(item.name, name));\n            }\n            if (activeSubItems.length === 0) {\n                return undefined;\n            }\n            if (type) {\n                activeSubItems = activeSubItems.filter((item) => testString(item.type, type));\n            }\n            if (activeSubItems.length === 0) {\n                return undefined;\n            }\n            if (tags) {\n                activeSubItems = activeSubItems.filter((item) => item.hasTag(...tags));\n            }\n            if (activeSubItems.length === 0) {\n                return undefined;\n            }\n            eLog.checkLog(\"activeEffects\", \"remItem - JSON OBJECT\", { actor, funcData: JSON.parse(funcData), isReversing, activeSubItems });\n            activeSubItems.forEach((item) => actor.remSubItem(item));\n        }\n        eLog.checkLog(\"activeEffects\", \"remItem\", { actor, funcData, isReversing });\n        if (actor.hasActiveSubItemOf(funcData)) {\n            return actor.remSubItem(funcData);\n        }\n        if (isReversing) {\n            return actor.addSubItem(funcData);\n        }\n        return undefined;\n    }\n};\nvar EffectMode;\n(function (EffectMode) {\n    EffectMode[EffectMode[\"Custom\"] = 0] = \"Custom\";\n    EffectMode[EffectMode[\"Multiply\"] = 1] = \"Multiply\";\n    EffectMode[EffectMode[\"Add\"] = 2] = \"Add\";\n    EffectMode[EffectMode[\"Downgrade\"] = 3] = \"Downgrade\";\n    EffectMode[EffectMode[\"Upgrade\"] = 4] = \"Upgrade\";\n    EffectMode[EffectMode[\"Override\"] = 5] = \"Override\";\n})(EffectMode || (EffectMode = {}));\nclass BladesActiveEffect extends ActiveEffect {\n    static Initialize() {\n        CONFIG.ActiveEffect.documentClass = BladesActiveEffect;\n        Hooks.on(\"preCreateActiveEffect\", async (effect) => {\n            eLog.checkLog3(\"effect\", \"PRECREATE ActiveEffect\", { effect, parent: effect.parent?.name });\n            if (!(effect.parent instanceof _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n                return;\n            }\n            // Does this effect have an \"APPLYTOMEMBERS\" or \"APPLYTOCOHORTS\" CUSTOM effect?\n            if (effect.changes.some((change) => change.key === \"APPLYTOMEMBERS\")) {\n                if (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc)\n                    && _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent.crew, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew)) {\n                    const otherMembers = effect.parent.crew.members.filter((member) => member.id !== effect.parent?.id);\n                    if (otherMembers.length > 0) {\n                        // If PC & APPLYTOMEMBERS   --> Create effect on members MINUS the 'APPLYTOMEMBERS' key, leave PC's effect unchanged.\n                        effect.changes = effect.changes.filter((change) => change.key !== \"APPLYTOMEMBERS\");\n                        await Promise.all(otherMembers.map(async (member) => member.createEmbeddedDocuments(\"ActiveEffect\", [effect.toJSON()])));\n                        // Set flag with effect's data on member, so future members can have effect applied to them.\n                        await effect.parent.setFlag(\"eunos-blades\", `memberEffects.${effect.id}`, {\n                            appliedTo: otherMembers.map((member) => member.id),\n                            effect: effect.toJSON()\n                        });\n                    }\n                }\n                else if (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew)) {\n                    const changeKey = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pullElement(effect.changes, (change) => change.key === \"APPLYTOMEMBERS\");\n                    if (!changeKey) {\n                        return;\n                    }\n                    if (effect.parent.members.length > 0) {\n                        // If Crew & APPLYTOMEMBERS --> Create effect on members MINUS the 'APPLYTOMEMBERS' key\n                        await Promise.all(effect.parent.members.map(async (member) => member.createEmbeddedDocuments(\"ActiveEffect\", [effect.toJSON()])));\n                    }\n                    // Set flag with effect's data on crew, so future members can have effect applied to them.\n                    await effect.parent.setFlag(\"eunos-blades\", `memberEffects.${effect.id}`, {\n                        appliedTo: effect.parent.members.map((member) => member.id),\n                        effect\n                    });\n                    // Update effect on crew-parent to only include 'APPLYTOMEMBERS' change\n                    await effect.updateSource({ changes: [changeKey] });\n                }\n            }\n            else if (effect.changes.some((change) => change.key === \"APPLYTOCOHORTS\")\n                && (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc)\n                    || _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew))) {\n                if (effect.parent.cohorts.length > 0) {\n                    // If APPLYTOCOHORTS   --> Create effect on cohorts\n                    await Promise.all(effect.parent.cohorts.map(async (cohort) => cohort.createEmbeddedDocuments(\"ActiveEffect\", [effect.toJSON()])));\n                }\n                // Set flag with effect's data on parent, so future cohorts can have effect applied to them.\n                await effect.parent.setFlag(\"eunos-blades\", `cohortEffects.${effect.id}`, {\n                    appliedTo: effect.parent.cohorts.map((cohort) => cohort.id),\n                    effect\n                });\n                // Update effect on parent to only include 'APPLYTOCOHORTS' change\n                await effect.updateSource({ changes: effect.changes.filter((change) => change.key === \"APPLYTOCOHORTS\") });\n            }\n            // Partition effect.changes into permanent and non-permanent changes:\n            const [permChanges, changes] = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].partition(effect.changes, (change) => change.key.startsWith(\"perm\"));\n            await effect.updateSource({ changes });\n            for (const permChange of permChanges) {\n                const { key, value } = permChange;\n                const permFuncName = key.replace(/^perm/, \"\");\n                if (permFuncName in CUSTOMFUNCS) {\n                    const funcData = {\n                        funcName: permFuncName,\n                        funcData: value,\n                        isReversing: false,\n                        effect\n                    };\n                    BladesActiveEffect.ThrottleCustomFunc(effect.parent, funcData);\n                }\n                else if (permFuncName === \"Add\") {\n                    const [target, qty] = value.split(/:/);\n                    effect.parent.update({ [target]: _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(getProperty(effect.parent, target)) + _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(qty) });\n                }\n            }\n        });\n        Hooks.on(\"applyActiveEffect\", (actor, changeData) => {\n            if (!(actor instanceof _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n                return;\n            }\n            if (changeData.key in CUSTOMFUNCS) {\n                const funcData = {\n                    funcName: changeData.key,\n                    funcData: changeData.value,\n                    isReversing: false,\n                    effect: changeData.effect\n                };\n                BladesActiveEffect.ThrottleCustomFunc(actor, funcData);\n            }\n        });\n        Hooks.on(\"updateActiveEffect\", (effect, { disabled }) => {\n            if (!(effect.parent instanceof _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n                return;\n            }\n            const customEffects = effect.changes.filter((changes) => changes.mode === 0);\n            customEffects.forEach(({ key, value }) => {\n                const funcData = {\n                    funcName: key,\n                    funcData: value,\n                    isReversing: disabled,\n                    effect\n                };\n                BladesActiveEffect.ThrottleCustomFunc(effect.parent, funcData);\n            });\n        });\n        Hooks.on(\"deleteActiveEffect\", async (effect) => {\n            if (!(effect.parent instanceof _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n                return;\n            }\n            // Does this effect have an \"APPLYTOMEMBERS\" or \"APPLYTOCOHORTS\" CUSTOM effect?\n            if (effect.changes.some((change) => change.key === \"APPLYTOMEMBERS\")) {\n                if (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc)\n                    && _BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent.crew, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew)) {\n                    const otherMembers = effect.parent.crew.members.filter((member) => member.id !== effect.parent?.id);\n                    if (otherMembers.length > 0) {\n                        // If PC & APPLYTOMEMBERS   --> Delete effect on all other members.\n                        await Promise.all(otherMembers\n                            .map(async (member) => Promise.all(member.effects\n                            .filter((e) => e.name === effect.name)\n                            .map(async (e) => e.delete()))));\n                    }\n                    // Clear flag from parent\n                    await effect.parent.unsetFlag(\"eunos-blades\", `memberEffects.${effect.id}`);\n                }\n                else if (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew)) {\n                    if (effect.parent.members.length > 0) {\n                        // If CREW & APPLYTOMEMBERS   --> Delete effect on all other members.\n                        await Promise.all(effect.parent.members\n                            .map(async (member) => Promise.all(member.effects\n                            .filter((e) => e.name === effect.name)\n                            .map(async (e) => e.delete()))));\n                    }\n                    // Clear flag from parent\n                    await effect.parent.unsetFlag(\"eunos-blades\", `memberEffects.${effect.id}`);\n                }\n            }\n            else if (effect.changes.some((change) => change.key === \"APPLYTOCOHORTS\")\n                && (_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(effect.parent, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew))) {\n                if (effect.parent.cohorts.length > 0) {\n                    // If APPLYTOCOHORTS   --> Delete effect on cohorts.\n                    await Promise.all(effect.parent.cohorts\n                        .map(async (cohort) => Promise.all(cohort.effects\n                        .filter((e) => e.name === effect.name)\n                        .map(async (e) => e.delete()))));\n                }\n                // Clear flag from parent\n                await effect.parent.unsetFlag(\"eunos-blades\", `cohortEffects.${effect.id}`);\n            }\n            const customEffects = effect.changes.filter((changes) => changes.mode === 0);\n            customEffects.forEach(({ key, value }) => {\n                const funcData = {\n                    funcName: key,\n                    funcData: value,\n                    isReversing: true,\n                    effect\n                };\n                BladesActiveEffect.ThrottleCustomFunc(effect.parent, funcData);\n            });\n        });\n    }\n    static async AddActiveEffect(doc, name, eChanges, icon = \"systems/eunos-blades/assets/icons/effect-icons/default.png\") {\n        const changes = [eChanges].flat();\n        await doc.createEmbeddedDocuments(\"ActiveEffect\", [{ name, icon, changes }]);\n    }\n    static ThrottleCustomFunc(actor, data) {\n        const { funcName, funcData, isReversing, effect } = data;\n        if (!actor.id) {\n            return;\n        }\n        eLog.checkLog3(\"activeEffect\", `Throttling Func: ${funcName}(${funcData}, ${isReversing})`);\n        // Is there a currently-running function for this actor?\n        if (actor.id && actor.id in FUNCQUEUE) {\n            // Is this a duplicate of a function already queued?\n            const matchingQueue = FUNCQUEUE[actor.id].queue\n                .find((fData) => JSON.stringify(fData) === JSON.stringify(data));\n            eLog.checkLog(\"activeEffects\", \"... Checking Queue\", { data, FUNCQUEUE: FUNCQUEUE[actor.id], matchingQueue });\n            if (matchingQueue) {\n                eLog.error(\"... Function ALREADY QUEUED, SKIPPING\");\n                return;\n            }\n            FUNCQUEUE[actor.id].queue.push(data);\n            return;\n        }\n        // If not, create FUNCQUEUE entry and run first function.\n        eLog.checkLog3(\"activeEffect\", \"... Creating New FUNCQUEUE, RUNNING:\");\n        FUNCQUEUE[actor.id] = {\n            curFunc: BladesActiveEffect.RunCustomFunc(actor, CUSTOMFUNCS[funcName](actor, funcData, effect, isReversing)),\n            queue: []\n        };\n    }\n    static async RunCustomFunc(actor, funcPromise) {\n        if (!actor.id) {\n            return;\n        }\n        eLog.checkLog(\"activeEffects\", \"... Running Func ...\");\n        await funcPromise;\n        eLog.checkLog(\"activeEffects\", \"... Function Complete!\");\n        if (FUNCQUEUE[actor.id].queue.length) {\n            const { funcName, funcData, isReversing, effect } = FUNCQUEUE[actor.id].queue.shift() ?? {};\n            if (!funcName || !(funcName in CUSTOMFUNCS)) {\n                return;\n            }\n            if (!funcData) {\n                return;\n            }\n            eLog.checkLog3(\"activeEffect\", `Progressing Queue: ${funcName}(${funcData}, ${isReversing}) -- ${FUNCQUEUE[actor.id].queue.length} remaining funcs.`);\n            FUNCQUEUE[actor.id].curFunc = BladesActiveEffect.RunCustomFunc(actor, CUSTOMFUNCS[funcName](actor, funcData, effect, isReversing));\n        }\n        else {\n            eLog.checkLog3(\"activeEffect\", \"Function Queue Complete! Deleting.\");\n            delete FUNCQUEUE[actor.id];\n        }\n    }\n    /**\n     * Manage Active Effect instances through the Actor Sheet via effect control buttons.\n     * @param {MouseEvent} event      The left-click event on the effect control\n     * @param {Actor|Item} owner      The owning entity which manages this effect\n     */\n    static onManageActiveEffect(event, owner) {\n        event.preventDefault();\n        const a = event.currentTarget;\n        if (a.dataset.action === \"create\") {\n            return owner.createEmbeddedDocuments(\"ActiveEffect\", [{\n                    name: owner.name,\n                    icon: owner.img,\n                    origin: owner.uuid\n                }]);\n        }\n        const selector = a.closest(\"tr\");\n        if (selector === null) {\n            return null;\n        }\n        const effect = selector.dataset.effectId\n            ? owner.effects.get(selector.dataset.effectId)\n            : null;\n        if (!effect) {\n            return null;\n        }\n        switch (a.dataset.action) {\n            case \"edit\":\n                return effect.sheet?.render(true);\n            case \"delete\":\n                eLog.checkLog(\"activeEffects\", \"delete effect\");\n                return effect.delete();\n            case \"toggle\":\n                return effect.update({ disabled: !effect.disabled });\n            default: return null;\n        }\n    }\n    async _preCreate(data, options, user) {\n        eLog.checkLog3(\"effect\", \"ActiveEffect._preCreate()\", { data, options, user });\n        await super._preCreate(data, options, user);\n    }\n    _onDelete(options, userID) {\n        eLog.checkLog3(\"effect\", \"ActiveEffect._onDelete()\", { options, userID });\n        super._onDelete(options, userID);\n    }\n    get isSuppressed() {\n        // Get source item from 'origin' field -- of form 'Actor.<id>.Item.<id>'\n        if (!/Actor.*Item/.test(this.origin)) {\n            return super.isSuppressed;\n        }\n        const [actorID, itemID] = this.origin.replace(/Actor\\.|Item\\./g, \"\").split(\".\");\n        const actor = game.actors.get(actorID);\n        const item = actor.items.get(itemID);\n        return super.isSuppressed || item?.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Tag.System.Archived);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesActiveEffect);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/documents/BladesActiveEffect.ts\n");

/***/ }),

/***/ "./ts/documents/BladesActorProxy.ts":
/*!******************************************!*\
  !*** ./ts/documents/BladesActorProxy.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesActor: function() { return /* reexport safe */ _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   BladesCrew: function() { return /* reexport safe */ _actors_BladesCrew__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; },\n/* harmony export */   BladesFaction: function() { return /* reexport safe */ _actors_BladesFaction__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; },\n/* harmony export */   BladesNPC: function() { return /* reexport safe */ _actors_BladesNPC__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; },\n/* harmony export */   BladesPC: function() { return /* reexport safe */ _actors_BladesPC__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _actors_BladesPC__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actors/BladesPC */ \"./ts/documents/actors/BladesPC.ts\");\n/* harmony import */ var _actors_BladesNPC__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actors/BladesNPC */ \"./ts/documents/actors/BladesNPC.ts\");\n/* harmony import */ var _actors_BladesFaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actors/BladesFaction */ \"./ts/documents/actors/BladesFaction.ts\");\n/* harmony import */ var _actors_BladesCrew__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actors/BladesCrew */ \"./ts/documents/actors/BladesCrew.ts\");\n\n\n\n\n\n\n\nconst ActorsMap = {\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc]: _actors_BladesPC__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.npc]: _actors_BladesNPC__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.faction]: _actors_BladesFaction__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.crew]: _actors_BladesCrew__WEBPACK_IMPORTED_MODULE_6__[\"default\"]\n};\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst BladesActorProxy = new Proxy(function () { }, {\n    construct(_, args) {\n        const [{ type }] = args;\n        if (!type) {\n            throw new Error(`Invalid Actor Type: ${String(type)}`);\n        }\n        const MappedConstructor = ActorsMap[type];\n        if (!MappedConstructor) {\n            return new _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"](...args);\n        }\n        return new MappedConstructor(...args);\n    },\n    get(_, prop) {\n        switch (prop) {\n            case \"create\":\n            case \"createDocuments\":\n                return function (data, options = {}) {\n                    if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isArray(data)) {\n                        return data.map((i) => CONFIG.Actor.documentClass.create(i, options));\n                    }\n                    const MappedConstructor = ActorsMap[data.type];\n                    if (!MappedConstructor) {\n                        return _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create(data, options);\n                    }\n                    return MappedConstructor.create(data, options);\n                };\n            case Symbol.hasInstance:\n                return function (instance) {\n                    return Object.values(ActorsMap).some((i) => instance instanceof i);\n                };\n            default:\n                return _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"][prop];\n        }\n    }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesActorProxy);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvQmxhZGVzQWN0b3JQcm94eS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBa0M7QUFDa0I7QUFDWDtBQUNBO0FBQ0U7QUFDUTtBQUNOO0FBQzdDO0FBQ0EsS0FBSyw0REFBZSxNQUFNLHdEQUFRO0FBQ2xDLEtBQUssNERBQWUsT0FBTyx5REFBUztBQUNwQyxLQUFLLDREQUFlLFdBQVcsNkRBQWE7QUFDNUMsS0FBSyw0REFBZSxRQUFRLDBEQUFVO0FBQ3RDO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQSxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBLG1EQUFtRCxhQUFhO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvREFBVztBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25ELHdCQUF3Qix1REFBQztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixvREFBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9EQUFXO0FBQ2xDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsK0RBQWUsZ0JBQWdCLEVBQUM7QUFDdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi90cy9kb2N1bWVudHMvQmxhZGVzQWN0b3JQcm94eS50cz8zNDQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVIGZyb20gXCIuLi9jb3JlL3V0aWxpdGllc1wiO1xuaW1wb3J0IHsgQmxhZGVzQWN0b3JUeXBlIH0gZnJvbSBcIi4uL2NvcmUvY29uc3RhbnRzXCI7XG5pbXBvcnQgQmxhZGVzQWN0b3IgZnJvbSBcIi4uL0JsYWRlc0FjdG9yXCI7XG5pbXBvcnQgQmxhZGVzUEMgZnJvbSBcIi4vYWN0b3JzL0JsYWRlc1BDXCI7XG5pbXBvcnQgQmxhZGVzTlBDIGZyb20gXCIuL2FjdG9ycy9CbGFkZXNOUENcIjtcbmltcG9ydCBCbGFkZXNGYWN0aW9uIGZyb20gXCIuL2FjdG9ycy9CbGFkZXNGYWN0aW9uXCI7XG5pbXBvcnQgQmxhZGVzQ3JldyBmcm9tIFwiLi9hY3RvcnMvQmxhZGVzQ3Jld1wiO1xuY29uc3QgQWN0b3JzTWFwID0ge1xuICAgIFtCbGFkZXNBY3RvclR5cGUucGNdOiBCbGFkZXNQQyxcbiAgICBbQmxhZGVzQWN0b3JUeXBlLm5wY106IEJsYWRlc05QQyxcbiAgICBbQmxhZGVzQWN0b3JUeXBlLmZhY3Rpb25dOiBCbGFkZXNGYWN0aW9uLFxuICAgIFtCbGFkZXNBY3RvclR5cGUuY3Jld106IEJsYWRlc0NyZXdcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5jb25zdCBCbGFkZXNBY3RvclByb3h5ID0gbmV3IFByb3h5KGZ1bmN0aW9uICgpIHsgfSwge1xuICAgIGNvbnN0cnVjdChfLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IFt7IHR5cGUgfV0gPSBhcmdzO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBBY3RvciBUeXBlOiAke1N0cmluZyh0eXBlKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBNYXBwZWRDb25zdHJ1Y3RvciA9IEFjdG9yc01hcFt0eXBlXTtcbiAgICAgICAgaWYgKCFNYXBwZWRDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbGFkZXNBY3RvciguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IE1hcHBlZENvbnN0cnVjdG9yKC4uLmFyZ3MpO1xuICAgIH0sXG4gICAgZ2V0KF8sIHByb3ApIHtcbiAgICAgICAgc3dpdGNoIChwcm9wKSB7XG4gICAgICAgICAgICBjYXNlIFwiY3JlYXRlXCI6XG4gICAgICAgICAgICBjYXNlIFwiY3JlYXRlRG9jdW1lbnRzXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFUuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubWFwKChpKSA9PiBDT05GSUcuQWN0b3IuZG9jdW1lbnRDbGFzcy5jcmVhdGUoaSwgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IE1hcHBlZENvbnN0cnVjdG9yID0gQWN0b3JzTWFwW2RhdGEudHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghTWFwcGVkQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCbGFkZXNBY3Rvci5jcmVhdGUoZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hcHBlZENvbnN0cnVjdG9yLmNyZWF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSBTeW1ib2wuaGFzSW5zdGFuY2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhBY3RvcnNNYXApLnNvbWUoKGkpID0+IGluc3RhbmNlIGluc3RhbmNlb2YgaSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEJsYWRlc0FjdG9yW3Byb3BdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCBCbGFkZXNBY3RvclByb3h5O1xuZXhwb3J0IHsgQmxhZGVzQWN0b3IsIEJsYWRlc1BDLCBCbGFkZXNDcmV3LCBCbGFkZXNOUEMsIEJsYWRlc0ZhY3Rpb24gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/documents/BladesActorProxy.ts\n");

/***/ }),

/***/ "./ts/documents/BladesItemProxy.ts":
/*!*****************************************!*\
  !*** ./ts/documents/BladesItemProxy.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesClockKeeper: function() { return /* reexport safe */ _items_BladesClockKeeper__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; },\n/* harmony export */   BladesGMTracker: function() { return /* reexport safe */ _items_BladesGMTracker__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; },\n/* harmony export */   BladesItem: function() { return /* reexport safe */ _BladesItem__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; },\n/* harmony export */   BladesLocation: function() { return /* reexport safe */ _items_BladesLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; },\n/* harmony export */   BladesProject: function() { return /* reexport safe */ _items_BladesProject__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; },\n/* harmony export */   BladesScore: function() { return /* reexport safe */ _items_BladesScore__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; }\n/* harmony export */ });\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _items_BladesProject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./items/BladesProject */ \"./ts/documents/items/BladesProject.ts\");\n/* harmony import */ var _items_BladesLocation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./items/BladesLocation */ \"./ts/documents/items/BladesLocation.ts\");\n/* harmony import */ var _items_BladesClockKeeper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./items/BladesClockKeeper */ \"./ts/documents/items/BladesClockKeeper.ts\");\n/* harmony import */ var _items_BladesGMTracker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./items/BladesGMTracker */ \"./ts/documents/items/BladesGMTracker.ts\");\n/* harmony import */ var _items_BladesScore__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./items/BladesScore */ \"./ts/documents/items/BladesScore.ts\");\n\n\n\n\n\n\n\n\nconst ItemsMap = {\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.clock_keeper]: _items_BladesClockKeeper__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gm_tracker]: _items_BladesGMTracker__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.location]: _items_BladesLocation__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.project]: _items_BladesProject__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    [_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.score]: _items_BladesScore__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n};\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst BladesItemProxy = new Proxy(function () { }, {\n    construct(_, args) {\n        const [{ type }] = args;\n        if (!type) {\n            throw new Error(`Invalid Item Type: ${String(type)}`);\n        }\n        const MappedConstructor = ItemsMap[type];\n        if (!MappedConstructor) {\n            return new _BladesItem__WEBPACK_IMPORTED_MODULE_2__[\"default\"](...args);\n        }\n        return new MappedConstructor(...args);\n    },\n    get(_, prop) {\n        switch (prop) {\n            case \"create\":\n            case \"createDocuments\":\n                return function (data, options = {}) {\n                    if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isArray(data)) {\n                        return data.map((i) => CONFIG.Item.documentClass.create(i, options));\n                    }\n                    const MappedConstructor = ItemsMap[data.type];\n                    if (!MappedConstructor) {\n                        return _BladesItem__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create(data, options);\n                    }\n                    return MappedConstructor.create(data, options);\n                };\n            case Symbol.hasInstance:\n                return function (instance) {\n                    return Object.values(ItemsMap).some((i) => instance instanceof i);\n                };\n            default:\n                return _BladesItem__WEBPACK_IMPORTED_MODULE_2__[\"default\"][prop];\n        }\n    }\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesItemProxy);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvQmxhZGVzSXRlbVByb3h5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ2lCO0FBQ1o7QUFDVztBQUNFO0FBQ007QUFDSjtBQUNSO0FBQzlDO0FBQ0EsS0FBSywyREFBYyxnQkFBZ0IsZ0VBQWlCO0FBQ3BELEtBQUssMkRBQWMsY0FBYyw4REFBZTtBQUNoRCxLQUFLLDJEQUFjLFlBQVksNkRBQWM7QUFDN0MsS0FBSywyREFBYyxXQUFXLDREQUFhO0FBQzNDLEtBQUssMkRBQWMsU0FBUywwREFBVztBQUN2QztBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkI7QUFDQSxrREFBa0QsYUFBYTtBQUMvRDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbURBQVU7QUFDakM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRDtBQUNuRCx3QkFBd0IsdURBQUM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsbURBQVU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtREFBVTtBQUNqQztBQUNBO0FBQ0EsQ0FBQztBQUNELCtEQUFlLGVBQWUsRUFBQztBQUN1RSIsInNvdXJjZXMiOlsid2VicGFjazovL2V1bm9zLWJsYWRlcy8uL3RzL2RvY3VtZW50cy9CbGFkZXNJdGVtUHJveHkudHM/NjVjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVSBmcm9tIFwiLi4vY29yZS91dGlsaXRpZXNcIjtcbmltcG9ydCB7IEJsYWRlc0l0ZW1UeXBlIH0gZnJvbSBcIi4uL2NvcmUvY29uc3RhbnRzXCI7XG5pbXBvcnQgQmxhZGVzSXRlbSBmcm9tIFwiLi4vQmxhZGVzSXRlbVwiO1xuaW1wb3J0IEJsYWRlc1Byb2plY3QgZnJvbSBcIi4vaXRlbXMvQmxhZGVzUHJvamVjdFwiO1xuaW1wb3J0IEJsYWRlc0xvY2F0aW9uIGZyb20gXCIuL2l0ZW1zL0JsYWRlc0xvY2F0aW9uXCI7XG5pbXBvcnQgQmxhZGVzQ2xvY2tLZWVwZXIgZnJvbSBcIi4vaXRlbXMvQmxhZGVzQ2xvY2tLZWVwZXJcIjtcbmltcG9ydCBCbGFkZXNHTVRyYWNrZXIgZnJvbSBcIi4vaXRlbXMvQmxhZGVzR01UcmFja2VyXCI7XG5pbXBvcnQgQmxhZGVzU2NvcmUgZnJvbSBcIi4vaXRlbXMvQmxhZGVzU2NvcmVcIjtcbmNvbnN0IEl0ZW1zTWFwID0ge1xuICAgIFtCbGFkZXNJdGVtVHlwZS5jbG9ja19rZWVwZXJdOiBCbGFkZXNDbG9ja0tlZXBlcixcbiAgICBbQmxhZGVzSXRlbVR5cGUuZ21fdHJhY2tlcl06IEJsYWRlc0dNVHJhY2tlcixcbiAgICBbQmxhZGVzSXRlbVR5cGUubG9jYXRpb25dOiBCbGFkZXNMb2NhdGlvbixcbiAgICBbQmxhZGVzSXRlbVR5cGUucHJvamVjdF06IEJsYWRlc1Byb2plY3QsXG4gICAgW0JsYWRlc0l0ZW1UeXBlLnNjb3JlXTogQmxhZGVzU2NvcmVcbn07XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5jb25zdCBCbGFkZXNJdGVtUHJveHkgPSBuZXcgUHJveHkoZnVuY3Rpb24gKCkgeyB9LCB7XG4gICAgY29uc3RydWN0KF8sIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgW3sgdHlwZSB9XSA9IGFyZ3M7XG4gICAgICAgIGlmICghdHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEl0ZW0gVHlwZTogJHtTdHJpbmcodHlwZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgTWFwcGVkQ29uc3RydWN0b3IgPSBJdGVtc01hcFt0eXBlXTtcbiAgICAgICAgaWYgKCFNYXBwZWRDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBCbGFkZXNJdGVtKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgTWFwcGVkQ29uc3RydWN0b3IoLi4uYXJncyk7XG4gICAgfSxcbiAgICBnZXQoXywgcHJvcCkge1xuICAgICAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgICAgICAgIGNhc2UgXCJjcmVhdGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjcmVhdGVEb2N1bWVudHNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5tYXAoKGkpID0+IENPTkZJRy5JdGVtLmRvY3VtZW50Q2xhc3MuY3JlYXRlKGksIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBNYXBwZWRDb25zdHJ1Y3RvciA9IEl0ZW1zTWFwW2RhdGEudHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghTWFwcGVkQ29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBCbGFkZXNJdGVtLmNyZWF0ZShkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWFwcGVkQ29uc3RydWN0b3IuY3JlYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIFN5bWJvbC5oYXNJbnN0YW5jZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKEl0ZW1zTWFwKS5zb21lKChpKSA9PiBpbnN0YW5jZSBpbnN0YW5jZW9mIGkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBCbGFkZXNJdGVtW3Byb3BdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5leHBvcnQgZGVmYXVsdCBCbGFkZXNJdGVtUHJveHk7XG5leHBvcnQgeyBCbGFkZXNJdGVtLCBCbGFkZXNDbG9ja0tlZXBlciwgQmxhZGVzR01UcmFja2VyLCBCbGFkZXNMb2NhdGlvbiwgQmxhZGVzUHJvamVjdCwgQmxhZGVzU2NvcmUgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/documents/BladesItemProxy.ts\n");

/***/ }),

/***/ "./ts/documents/actors/BladesCrew.ts":
/*!*******************************************!*\
  !*** ./ts/documents/actors/BladesCrew.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _sheets_actor_BladesCrewSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sheets/actor/BladesCrewSheet */ \"./ts/sheets/actor/BladesCrewSheet.ts\");\n/* harmony import */ var _BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../classes/BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\nclass BladesCrew extends _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesCrew, BladesCrewSheet: _sheets_actor_BladesCrewSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] });\n        Actors.registerSheet(\"blades\", _sheets_actor_BladesCrewSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { types: [\"crew\"], makeDefault: true });\n        return loadTemplates([\"systems/eunos-blades/templates/crew-sheet.hbs\"]);\n    }\n    // #endregion\n    // #region Static Overrides: Create ~\n    // static override IsType<T extends BladesActorType = BladesActorType.crew>(doc: unknown): doc is BladesActorOfType<T> {\n    //   return super.IsType(doc, BladesActorType.crew);\n    // }\n    static IsType(doc) {\n        return super.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew);\n    }\n    static GetFromUser(userRef) {\n        const actor = _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesPC.GetFromUser(userRef);\n        if (!actor) {\n            return undefined;\n        }\n        return actor.crew;\n    }\n    static GetFromPC(pcRef) {\n        let actor;\n        if (typeof pcRef === \"string\") {\n            actor = game.actors.get(pcRef) ?? game.actors.getName(pcRef);\n        }\n        else if (pcRef instanceof _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesPC) {\n            actor = pcRef;\n        }\n        else {\n            actor ??= _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesPC.GetFromUser(pcRef);\n        }\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesPC.IsType(actor)) {\n            throw new Error(`Unable to find BladesPC from '${pcRef}'`);\n        }\n        return actor.crew;\n    }\n    static async create(data, options = {}) {\n        data.token = data.token || {};\n        data.system = data.system ?? {};\n        eLog.checkLog2(\"actor\", \"BladesActor.create(data,options)\", { data, options });\n        // ~ For Crew and PC set the Token to sync with charsheet.\n        data.token.actorLink = true;\n        // ~ Create world_name\n        data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\n        // ~ Initialize generic experience clues.\n        data.system.experience = {\n            playbook: { value: 0, max: 8 },\n            clues: [],\n            ...data.system.experience ?? {}\n        };\n        return super.create(data, options);\n    }\n    // #endregion\n    // #region BladesCrew Implementation\n    getDialogItems(category) {\n        const dialogData = {};\n        const { playbookName } = this;\n        if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__.SelectionCategory.Playbook) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__.SelectionCategory.Reputation) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_reputation));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__.SelectionCategory.Preferred_Op && playbookName !== null) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.preferred_op, playbookName));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__.SelectionCategory.Ability) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_ability, this.playbookName));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_4__.SelectionCategory.Upgrade && playbookName !== null) {\n            dialogData[playbookName] = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_upgrade, playbookName));\n            dialogData.General = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_3__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_upgrade, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.General));\n        }\n        return dialogData;\n    }\n    get members() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew)) {\n            return [];\n        }\n        const self = this;\n        return _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc).filter((actor) => actor.isMember(self));\n    }\n    get contacts() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew) || !this.playbook) {\n            return [];\n        }\n        const self = this;\n        return this.activeSubActors.filter((actor) => actor.hasTag(self.playbookName));\n    }\n    get claims() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew) || !this.playbook) {\n            return {};\n        }\n        return this.playbook.system.turfs;\n    }\n    get turfCount() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew) || !this.playbook) {\n            return 0;\n        }\n        return Object.values(this.playbook.system.turfs)\n            .filter((claim) => claim.isTurf && claim.value).length;\n    }\n    get upgrades() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew) || !this.playbook) {\n            return [];\n        }\n        return this.activeSubItems\n            .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_upgrade);\n    }\n    get cohorts() {\n        return this.activeSubItems\n            .filter((item) => [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert].includes(item.type));\n    }\n    getTaggedItemBonuses(tags) {\n        // Given a list of item tags, will return the total bonuses to that item\n        // Won't return a number, but an object literal that includes things like extra load space or concealability\n        // Check ACTIVE EFFECTS supplied by upgrade/ability against submitted tags?\n        return tags.length; // Placeholder to avoid linter error\n    }\n    // #endregion\n    // #region BladesRoll Implementation\n    // #region BladesRoll.ParticipantDoc Implementation\n    get rollParticipantID() { return this.id; }\n    get rollParticipantDoc() { return this; }\n    get rollParticipantIcon() { return this.playbook?.img ?? this.img; }\n    get rollParticipantName() { return this.name; }\n    get rollParticipantType() { return this.type; }\n    get rollParticipantModsSchemaSet() { return []; }\n    async applyHarm(_amount, _name) {\n        console.error(\"Attempt to apply harm directly to a Crew document.\");\n    }\n    async applyWorsePosition() {\n        console.error(\"Attempt to apply worse position directly to a Crew document.\");\n    }\n    // #endregion\n    // #endregion\n    get abilities() {\n        if (!this.playbook) {\n            return [];\n        }\n        return this.activeSubItems\n            .filter((item) => [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_ability].includes(item.type));\n    }\n    get playbookName() {\n        return this.playbook?.name;\n    }\n    get playbook() {\n        return this.activeSubItems\n            .find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesCrew);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/documents/actors/BladesCrew.ts\n");

/***/ }),

/***/ "./ts/documents/actors/BladesFaction.ts":
/*!**********************************************!*\
  !*** ./ts/documents/actors/BladesFaction.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _sheets_actor_BladesFactionSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sheets/actor/BladesFactionSheet */ \"./ts/sheets/actor/BladesFactionSheet.ts\");\n/* harmony import */ var _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../classes/BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n\n\n\n\nclass BladesFaction extends _BladesActorProxy__WEBPACK_IMPORTED_MODULE_1__.BladesActor {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesFaction, BladesFactionSheet: _sheets_actor_BladesFactionSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] });\n        Actors.registerSheet(\"blades\", _sheets_actor_BladesFactionSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { types: [\"faction\"], makeDefault: true });\n        return loadTemplates([\"systems/eunos-blades/templates/faction-sheet.hbs\"]);\n    }\n    // #endregion\n    static get All() {\n        return new Collection(super.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.faction)\n            .map((faction) => [faction.id, faction]));\n    }\n    static IsType(doc) {\n        return super.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.faction);\n    }\n    // #region BladesRoll Implementation\n    // #region BladesRoll.OppositionDoc Implementation\n    get rollOppID() { return this.id; }\n    get rollOppDoc() { return this; }\n    get rollOppImg() { return this.img ?? \"\"; }\n    get rollOppName() { return this.name ?? \"\"; }\n    get rollOppSubName() { return this.system.subtitle || this.system.concept || \" \"; }\n    get rollOppType() { return this.type; }\n    get rollOppModsSchemaSet() { return []; }\n    // #endregion\n    // #endregion\n    // _clocks: Collection<BladesClock> = new Collection();\n    // get clocks(): Collection<BladesClock> = {\n    //   return new Collection()\n    // }\n    get clocks() {\n        return new Collection(Object.entries(this.system.clocksData ?? {})\n            .map(([id, data]) => [\n            id,\n            game.eunoblades.ClockKeys.get(id) ?? new _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_3__[\"default\"](data)\n        ]));\n    }\n    async addClock() {\n        return await _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Create({\n            target: this,\n            targetKey: \"system.clocksData\"\n        });\n    }\n    async deleteClock(clockKeyID) {\n        await game.eunoblades.ClockKeys.get(clockKeyID)?.delete(game.eunoblades.ClockKeys);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesFaction);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvYWN0b3JzL0JsYWRlc0ZhY3Rpb24udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFDTDtBQUNxQjtBQUNiO0FBQzFELDRCQUE0QiwwREFBVztBQUN2QztBQUNBO0FBQ0Esb0NBQW9DLGlDQUFpQyw0RUFBRTtBQUN2RSx1Q0FBdUMsd0VBQWtCLElBQUksdUNBQXVDO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELDREQUFlO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw0REFBZTtBQUNoRDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4QixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBLHFEQUFxRCwrREFBYztBQUNuRTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsK0RBQWM7QUFDbkM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQWUsYUFBYSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvZG9jdW1lbnRzL2FjdG9ycy9CbGFkZXNGYWN0aW9uLnRzPzNmNjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxhZGVzQWN0b3JUeXBlIH0gZnJvbSBcIi4uLy4uL2NvcmUvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBCbGFkZXNBY3RvciB9IGZyb20gXCIuLi9CbGFkZXNBY3RvclByb3h5XCI7XG5pbXBvcnQgQmxhZGVzRmFjdGlvblNoZWV0IGZyb20gXCIuLi8uLi9zaGVldHMvYWN0b3IvQmxhZGVzRmFjdGlvblNoZWV0XCI7XG5pbXBvcnQgQmxhZGVzQ2xvY2tLZXkgZnJvbSBcIi4uLy4uL2NsYXNzZXMvQmxhZGVzQ2xvY2tLZXlcIjtcbmNsYXNzIEJsYWRlc0ZhY3Rpb24gZXh0ZW5kcyBCbGFkZXNBY3RvciB7XG4gICAgLy8gI3JlZ2lvbiBJTklUSUFMSVpBVElPTiB+XG4gICAgc3RhdGljIGFzeW5jIEluaXRpYWxpemUoKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgeyBCbGFkZXNGYWN0aW9uLCBCbGFkZXNGYWN0aW9uU2hlZXQgfSk7XG4gICAgICAgIEFjdG9ycy5yZWdpc3RlclNoZWV0KFwiYmxhZGVzXCIsIEJsYWRlc0ZhY3Rpb25TaGVldCwgeyB0eXBlczogW1wiZmFjdGlvblwiXSwgbWFrZURlZmF1bHQ6IHRydWUgfSk7XG4gICAgICAgIHJldHVybiBsb2FkVGVtcGxhdGVzKFtcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9mYWN0aW9uLXNoZWV0Lmhic1wiXSk7XG4gICAgfVxuICAgIC8vICNlbmRyZWdpb25cbiAgICBzdGF0aWMgZ2V0IEFsbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKHN1cGVyLkdldFR5cGVXaXRoVGFncyhCbGFkZXNBY3RvclR5cGUuZmFjdGlvbilcbiAgICAgICAgICAgIC5tYXAoKGZhY3Rpb24pID0+IFtmYWN0aW9uLmlkLCBmYWN0aW9uXSkpO1xuICAgIH1cbiAgICBzdGF0aWMgSXNUeXBlKGRvYykge1xuICAgICAgICByZXR1cm4gc3VwZXIuSXNUeXBlKGRvYywgQmxhZGVzQWN0b3JUeXBlLmZhY3Rpb24pO1xuICAgIH1cbiAgICAvLyAjcmVnaW9uIEJsYWRlc1JvbGwgSW1wbGVtZW50YXRpb25cbiAgICAvLyAjcmVnaW9uIEJsYWRlc1JvbGwuT3Bwb3NpdGlvbkRvYyBJbXBsZW1lbnRhdGlvblxuICAgIGdldCByb2xsT3BwSUQoKSB7IHJldHVybiB0aGlzLmlkOyB9XG4gICAgZ2V0IHJvbGxPcHBEb2MoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZ2V0IHJvbGxPcHBJbWcoKSB7IHJldHVybiB0aGlzLmltZyA/PyBcIlwiOyB9XG4gICAgZ2V0IHJvbGxPcHBOYW1lKCkgeyByZXR1cm4gdGhpcy5uYW1lID8/IFwiXCI7IH1cbiAgICBnZXQgcm9sbE9wcFN1Yk5hbWUoKSB7IHJldHVybiB0aGlzLnN5c3RlbS5zdWJ0aXRsZSB8fCB0aGlzLnN5c3RlbS5jb25jZXB0IHx8IFwiIFwiOyB9XG4gICAgZ2V0IHJvbGxPcHBUeXBlKCkgeyByZXR1cm4gdGhpcy50eXBlOyB9XG4gICAgZ2V0IHJvbGxPcHBNb2RzU2NoZW1hU2V0KCkgeyByZXR1cm4gW107IH1cbiAgICAvLyAjZW5kcmVnaW9uXG4gICAgLy8gI2VuZHJlZ2lvblxuICAgIC8vIF9jbG9ja3M6IENvbGxlY3Rpb248QmxhZGVzQ2xvY2s+ID0gbmV3IENvbGxlY3Rpb24oKTtcbiAgICAvLyBnZXQgY2xvY2tzKCk6IENvbGxlY3Rpb248QmxhZGVzQ2xvY2s+ID0ge1xuICAgIC8vICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKClcbiAgICAvLyB9XG4gICAgZ2V0IGNsb2NrcygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKE9iamVjdC5lbnRyaWVzKHRoaXMuc3lzdGVtLmNsb2Nrc0RhdGEgPz8ge30pXG4gICAgICAgICAgICAubWFwKChbaWQsIGRhdGFdKSA9PiBbXG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIGdhbWUuZXVub2JsYWRlcy5DbG9ja0tleXMuZ2V0KGlkKSA/PyBuZXcgQmxhZGVzQ2xvY2tLZXkoZGF0YSlcbiAgICAgICAgXSkpO1xuICAgIH1cbiAgICBhc3luYyBhZGRDbG9jaygpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IEJsYWRlc0Nsb2NrS2V5LkNyZWF0ZSh7XG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRLZXk6IFwic3lzdGVtLmNsb2Nrc0RhdGFcIlxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlQ2xvY2soY2xvY2tLZXlJRCkge1xuICAgICAgICBhd2FpdCBnYW1lLmV1bm9ibGFkZXMuQ2xvY2tLZXlzLmdldChjbG9ja0tleUlEKT8uZGVsZXRlKGdhbWUuZXVub2JsYWRlcy5DbG9ja0tleXMpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc0ZhY3Rpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/documents/actors/BladesFaction.ts\n");

/***/ }),

/***/ "./ts/documents/actors/BladesNPC.ts":
/*!******************************************!*\
  !*** ./ts/documents/actors/BladesNPC.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _sheets_actor_BladesNPCSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../sheets/actor/BladesNPCSheet */ \"./ts/sheets/actor/BladesNPCSheet.ts\");\n\n\n\nclass BladesNPC extends _BladesActor__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesNPC, BladesNPCSheet: _sheets_actor_BladesNPCSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] });\n        Actors.registerSheet(\"blades\", _sheets_actor_BladesNPCSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"], { types: [\"npc\"], makeDefault: true });\n        return loadTemplates([\"systems/eunos-blades/templates/npc-sheet.hbs\"]);\n    }\n    // #endregion\n    static IsType(doc) {\n        return super.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.npc);\n    }\n    // #region BladesRoll Implementation\n    get rollFactors() {\n        const factorData = super.rollFactors;\n        factorData[_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale] = {\n            name: _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale,\n            display: \"Scale\",\n            value: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale),\n            max: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale),\n            baseVal: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.scale),\n            cssClasses: \"factor-grey\",\n            isActive: false,\n            isPrimary: false,\n            isDominant: false,\n            highFavorsPC: true\n        };\n        factorData[_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude] = {\n            name: _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude,\n            display: \"Magnitude\",\n            value: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude),\n            max: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude),\n            baseVal: this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.magnitude),\n            isActive: false,\n            isPrimary: false,\n            isDominant: false,\n            highFavorsPC: true\n        };\n        return factorData;\n    }\n    // #region BladesRoll.OppositionDoc Implementation\n    get rollOppID() { return this.id; }\n    get rollOppDoc() { return this; }\n    get rollOppImg() { return this.img; }\n    get rollOppName() { return this.name; }\n    get rollOppSubName() { return this.system.subtitle || this.system.concept || \" \"; }\n    get rollOppType() { return this.type; }\n    get rollOppModsSchemaSet() { return []; }\n    // #endregion\n    // #region BladesRoll.ParticipantDoc Implementation\n    get rollParticipantID() { return this.id; }\n    get rollParticipantDoc() { return this; }\n    get rollParticipantIcon() { return this.img; }\n    get rollParticipantName() { return this.name; }\n    get rollParticipantType() { return this.type; }\n    get rollParticipantModsSchemaSet() { return []; }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesNPC);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvYWN0b3JzL0JsYWRlc05QQy50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQStEO0FBQ25CO0FBQ21CO0FBQy9ELHdCQUF3QixvREFBVztBQUNuQztBQUNBO0FBQ0Esb0NBQW9DLHlCQUF5Qix3RUFBRTtBQUMvRCx1Q0FBdUMsb0VBQWMsSUFBSSxtQ0FBbUM7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsNERBQWU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbURBQU07QUFDekIsa0JBQWtCLG1EQUFNO0FBQ3hCO0FBQ0EsdUNBQXVDLG1EQUFNO0FBQzdDLHFDQUFxQyxtREFBTTtBQUMzQyx5Q0FBeUMsbURBQU07QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFNO0FBQ3pCLGtCQUFrQixtREFBTTtBQUN4QjtBQUNBLHVDQUF1QyxtREFBTTtBQUM3QyxxQ0FBcUMsbURBQU07QUFDM0MseUNBQXlDLG1EQUFNO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsdUJBQXVCO0FBQ3ZCLHVCQUF1QjtBQUN2Qix3QkFBd0I7QUFDeEIsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4QixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiwrQkFBK0I7QUFDL0IsZ0NBQWdDO0FBQ2hDLGdDQUFnQztBQUNoQyxnQ0FBZ0M7QUFDaEMseUNBQXlDO0FBQ3pDO0FBQ0EsK0RBQWUsU0FBUyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvZG9jdW1lbnRzL2FjdG9ycy9CbGFkZXNOUEMudHM/YmRiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbGFkZXNBY3RvclR5cGUsIEZhY3RvciB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbnN0YW50c1wiO1xuaW1wb3J0IEJsYWRlc0FjdG9yIGZyb20gXCIuLi8uLi9CbGFkZXNBY3RvclwiO1xuaW1wb3J0IEJsYWRlc05QQ1NoZWV0IGZyb20gXCIuLi8uLi9zaGVldHMvYWN0b3IvQmxhZGVzTlBDU2hlZXRcIjtcbmNsYXNzIEJsYWRlc05QQyBleHRlbmRzIEJsYWRlc0FjdG9yIHtcbiAgICAvLyAjcmVnaW9uIElOSVRJQUxJWkFUSU9OIH5cbiAgICBzdGF0aWMgYXN5bmMgSW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7IEJsYWRlc05QQywgQmxhZGVzTlBDU2hlZXQgfSk7XG4gICAgICAgIEFjdG9ycy5yZWdpc3RlclNoZWV0KFwiYmxhZGVzXCIsIEJsYWRlc05QQ1NoZWV0LCB7IHR5cGVzOiBbXCJucGNcIl0sIG1ha2VEZWZhdWx0OiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gbG9hZFRlbXBsYXRlcyhbXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvbnBjLXNoZWV0Lmhic1wiXSk7XG4gICAgfVxuICAgIC8vICNlbmRyZWdpb25cbiAgICBzdGF0aWMgSXNUeXBlKGRvYykge1xuICAgICAgICByZXR1cm4gc3VwZXIuSXNUeXBlKGRvYywgQmxhZGVzQWN0b3JUeXBlLm5wYyk7XG4gICAgfVxuICAgIC8vICNyZWdpb24gQmxhZGVzUm9sbCBJbXBsZW1lbnRhdGlvblxuICAgIGdldCByb2xsRmFjdG9ycygpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yRGF0YSA9IHN1cGVyLnJvbGxGYWN0b3JzO1xuICAgICAgICBmYWN0b3JEYXRhW0ZhY3Rvci5zY2FsZV0gPSB7XG4gICAgICAgICAgICBuYW1lOiBGYWN0b3Iuc2NhbGUsXG4gICAgICAgICAgICBkaXNwbGF5OiBcIlNjYWxlXCIsXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRGYWN0b3JUb3RhbChGYWN0b3Iuc2NhbGUpLFxuICAgICAgICAgICAgbWF4OiB0aGlzLmdldEZhY3RvclRvdGFsKEZhY3Rvci5zY2FsZSksXG4gICAgICAgICAgICBiYXNlVmFsOiB0aGlzLmdldEZhY3RvclRvdGFsKEZhY3Rvci5zY2FsZSksXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiBcImZhY3Rvci1ncmV5XCIsXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBpc1ByaW1hcnk6IGZhbHNlLFxuICAgICAgICAgICAgaXNEb21pbmFudDogZmFsc2UsXG4gICAgICAgICAgICBoaWdoRmF2b3JzUEM6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgZmFjdG9yRGF0YVtGYWN0b3IubWFnbml0dWRlXSA9IHtcbiAgICAgICAgICAgIG5hbWU6IEZhY3Rvci5tYWduaXR1ZGUsXG4gICAgICAgICAgICBkaXNwbGF5OiBcIk1hZ25pdHVkZVwiLFxuICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0RmFjdG9yVG90YWwoRmFjdG9yLm1hZ25pdHVkZSksXG4gICAgICAgICAgICBtYXg6IHRoaXMuZ2V0RmFjdG9yVG90YWwoRmFjdG9yLm1hZ25pdHVkZSksXG4gICAgICAgICAgICBiYXNlVmFsOiB0aGlzLmdldEZhY3RvclRvdGFsKEZhY3Rvci5tYWduaXR1ZGUpLFxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlLFxuICAgICAgICAgICAgaXNQcmltYXJ5OiBmYWxzZSxcbiAgICAgICAgICAgIGlzRG9taW5hbnQ6IGZhbHNlLFxuICAgICAgICAgICAgaGlnaEZhdm9yc1BDOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmYWN0b3JEYXRhO1xuICAgIH1cbiAgICAvLyAjcmVnaW9uIEJsYWRlc1JvbGwuT3Bwb3NpdGlvbkRvYyBJbXBsZW1lbnRhdGlvblxuICAgIGdldCByb2xsT3BwSUQoKSB7IHJldHVybiB0aGlzLmlkOyB9XG4gICAgZ2V0IHJvbGxPcHBEb2MoKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZ2V0IHJvbGxPcHBJbWcoKSB7IHJldHVybiB0aGlzLmltZzsgfVxuICAgIGdldCByb2xsT3BwTmFtZSgpIHsgcmV0dXJuIHRoaXMubmFtZTsgfVxuICAgIGdldCByb2xsT3BwU3ViTmFtZSgpIHsgcmV0dXJuIHRoaXMuc3lzdGVtLnN1YnRpdGxlIHx8IHRoaXMuc3lzdGVtLmNvbmNlcHQgfHwgXCIgXCI7IH1cbiAgICBnZXQgcm9sbE9wcFR5cGUoKSB7IHJldHVybiB0aGlzLnR5cGU7IH1cbiAgICBnZXQgcm9sbE9wcE1vZHNTY2hlbWFTZXQoKSB7IHJldHVybiBbXTsgfVxuICAgIC8vICNlbmRyZWdpb25cbiAgICAvLyAjcmVnaW9uIEJsYWRlc1JvbGwuUGFydGljaXBhbnREb2MgSW1wbGVtZW50YXRpb25cbiAgICBnZXQgcm9sbFBhcnRpY2lwYW50SUQoKSB7IHJldHVybiB0aGlzLmlkOyB9XG4gICAgZ2V0IHJvbGxQYXJ0aWNpcGFudERvYygpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICBnZXQgcm9sbFBhcnRpY2lwYW50SWNvbigpIHsgcmV0dXJuIHRoaXMuaW1nOyB9XG4gICAgZ2V0IHJvbGxQYXJ0aWNpcGFudE5hbWUoKSB7IHJldHVybiB0aGlzLm5hbWU7IH1cbiAgICBnZXQgcm9sbFBhcnRpY2lwYW50VHlwZSgpIHsgcmV0dXJuIHRoaXMudHlwZTsgfVxuICAgIGdldCByb2xsUGFydGljaXBhbnRNb2RzU2NoZW1hU2V0KCkgeyByZXR1cm4gW107IH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc05QQztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/documents/actors/BladesNPC.ts\n");

/***/ }),

/***/ "./ts/documents/actors/BladesPC.ts":
/*!*****************************************!*\
  !*** ./ts/documents/actors/BladesPC.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _sheets_actor_BladesPCSheet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../sheets/actor/BladesPCSheet */ \"./ts/sheets/actor/BladesPCSheet.ts\");\n/* harmony import */ var _BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../classes/BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n/* harmony import */ var _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../classes/BladesDirector */ \"./ts/classes/BladesDirector.ts\");\n/* harmony import */ var _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../classes/BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n\n\n\n\n\n\n\n\nclass BladesPC extends _BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesPC, BladesPCSheet: _sheets_actor_BladesPCSheet__WEBPACK_IMPORTED_MODULE_3__[\"default\"] });\n        Actors.registerSheet(\"blades\", _sheets_actor_BladesPCSheet__WEBPACK_IMPORTED_MODULE_3__[\"default\"], { types: [\"pc\"], makeDefault: true });\n        Hooks.on(\"dropActorSheetData\", async (parentActor, _, { uuid }) => {\n            const doc = fromUuidSync(uuid);\n            if (doc instanceof _BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor) {\n                if (parentActor.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew && doc.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc) {\n                    // Dropping a PC onto a Crew Sheet: Add Crew to PC\n                    doc.addSubActor(parentActor);\n                }\n                else if (parentActor.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc && doc.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew) {\n                    // Dropping a Crew onto a PC Sheet: Add\n                    parentActor.addSubActor(doc);\n                }\n            }\n        });\n        return loadTemplates([\"systems/eunos-blades/templates/actor-sheet.hbs\"]);\n    }\n    // #endregion\n    // #region Static Overrides: Create, get All ~\n    // static override IsType<T extends BladesActorType = BladesActorType.pc>(doc: unknown): doc is BladesActorOfType<T> {\n    //   return super.IsType(doc, BladesActorType.pc);\n    // }\n    static IsType(doc) {\n        return super.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc);\n    }\n    static GetUser(userRef) {\n        let user;\n        if (typeof userRef === \"string\") {\n            user = game.users.get(userRef) ?? game.users.getName(userRef);\n        }\n        else if (userRef instanceof User) {\n            user = userRef;\n        }\n        return user;\n    }\n    static GetFromUser(userRef) {\n        const user = BladesPC.GetUser(userRef);\n        if (!user) {\n            throw new Error(`Unable to find user '${userRef}'`);\n        }\n        const actor = game.actors.get(user.character?.id ?? \"\");\n        if (BladesPC.IsType(actor)) {\n            return actor;\n        }\n        return undefined;\n    }\n    static async create(data, options = {}) {\n        data.token = data.token || {};\n        data.system = data.system ?? {};\n        eLog.checkLog2(\"actor\", \"BladesPC.create(data,options)\", { data, options });\n        // ~ Set the Token to sync with charsheet.\n        data.token.actorLink = true;\n        // ~ Initialize generic experience clues.\n        data.system.experience = {\n            playbook: { value: 0, max: 8 },\n            insight: { value: 0, max: 6 },\n            prowess: { value: 0, max: 6 },\n            resolve: { value: 0, max: 6 },\n            clues: [],\n            ...data.system.experience ?? {}\n        };\n        const pc = (await super.create(data, options));\n        await _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Create({\n            name: \"\",\n            target: pc,\n            targetKey: \"system.clocksData\",\n            isVisible: true,\n            isNameVisible: false,\n            isSpotlit: false\n        }, undefined, [\n            {\n                color: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.white,\n                value: 0,\n                max: 4,\n                index: 0,\n                isVisible: true,\n                isActive: true,\n                isNameVisible: false,\n                isHighlighted: false\n            }\n        ]);\n        return pc;\n    }\n    static get All() {\n        return new Collection(super.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)\n            .map((pc) => [pc.id, pc]));\n    }\n    // #endregion\n    constructor(data) {\n        super(data);\n        eLog.checkLog3(\"pcConstructor\", \"new BladesPC()\", { data });\n    }\n    // #region BladesPrimaryActor Implementation ~\n    get primaryUser() {\n        return game.users?.find((user) => user.character?.id === this?.id) || null;\n    }\n    async clearLoadout() {\n        await this.update({ \"system.loadout.selected\": \"\" });\n        this.updateEmbeddedDocuments(\"Item\", [\n            ...this.activeSubItems\n                .filter((item) => _BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)\n                && !item.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.System.Archived))\n                .map((item) => ({\n                _id: item.id,\n                \"system.tags\": [...item.tags, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.System.Archived],\n                \"system.uses_per_score.value\": 0\n            })),\n            ...this.activeSubItems\n                .filter((item) => _BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability)\n                && item.system.uses_per_score.max)\n                .map((item) => ({\n                _id: item.id,\n                \"system.uses_per_score.value\": 0\n            }))\n        ]);\n    }\n    // #endregion\n    getSubActor(actorRef) {\n        const actor = super.getSubActor(actorRef);\n        if (!actor) {\n            return undefined;\n        }\n        if (this.primaryUser?.id) {\n            actor.ownership[this.primaryUser.id] = CONST.DOCUMENT_PERMISSION_LEVELS.OWNER;\n        }\n        return actor;\n    }\n    get isLightArmorEquipped() { return this.system.armor.active.light; }\n    get isLightArmorEquippable() { return !this.isLightArmorEquipped && this.remainingLoad >= 2; }\n    get isLightArmorUsed() { return this.system.armor.checked.light; }\n    get isLightArmorAvailable() {\n        return (this.isLightArmorEquipped || this.isLightArmorEquippable)\n            && !this.isLightArmorUsed;\n    }\n    get isHeavyArmorEquipped() { return this.system.armor.active.heavy; }\n    get isHeavyArmorEquippable() {\n        if (this.isHeavyArmorEquipped) {\n            return false;\n        }\n        if (this.isLightArmorEquipped) {\n            return this.remainingLoad >= 3;\n        }\n        return this.remainingLoad >= 5;\n    }\n    get isHeavyArmorUsed() { return this.system.armor.checked.heavy; }\n    get isHeavyArmorAvailable() {\n        return (this.isHeavyArmorEquipped || this.isHeavyArmorEquippable)\n            && !this.isHeavyArmorUsed;\n    }\n    get availableArmor() {\n        const armor = [];\n        if (this.isLightArmorAvailable) {\n            armor.push(\"Light Armor\");\n        }\n        if (this.isHeavyArmorAvailable) {\n            armor.push(\"Heavy Armor\");\n        }\n        return armor;\n    }\n    get isSpecialArmorAvailable() {\n        return this.system.armor.active.special && !this.system.armor.checked.special;\n    }\n    // #region BladesScoundrel Implementation ~\n    isMember(crew) { return this.crew?.id === crew.id; }\n    get vice() {\n        if (this.type !== _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc) {\n            return undefined;\n        }\n        return this.activeSubItems.find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice);\n    }\n    get crew() {\n        return this.activeSubActors\n            .find((subActor) => _BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(subActor, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew));\n    }\n    get abilities() {\n        if (!this.playbook) {\n            return [];\n        }\n        return this.activeSubItems\n            .filter((item) => [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_ability].includes(item.type));\n    }\n    get cohorts() {\n        return this.activeSubItems\n            .filter((item) => _BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert));\n    }\n    get playbookName() {\n        return this.playbook?.name;\n    }\n    get playbook() {\n        return this.activeSubItems\n            .find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook);\n    }\n    get attributes() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return undefined;\n        }\n        return {\n            insight: Object.values(this.system.attributes.insight)\n                .filter(({ value }) => value > 0).length\n                + this.system.resistance_bonus.insight,\n            prowess: Object.values(this.system.attributes.prowess)\n                .filter(({ value }) => value > 0).length\n                + this.system.resistance_bonus.prowess,\n            resolve: Object.values(this.system.attributes.resolve)\n                .filter(({ value }) => value > 0).length\n                + this.system.resistance_bonus.resolve\n        };\n    }\n    get actions() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return undefined;\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objMap({\n            ...this.system.attributes.insight,\n            ...this.system.attributes.prowess,\n            ...this.system.attributes.resolve\n        }, ({ value, max }) => _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.utils.clamp(0, max, value));\n    }\n    get rollable() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return undefined;\n        }\n        return {\n            ...this.attributes,\n            ...this.actions\n        };\n    }\n    get stress() {\n        return this.system.stress.value;\n    }\n    get stressMax() {\n        return this.system.stress.max;\n    }\n    get isHealingClockReady() {\n        const [clockKeyID] = Object.keys(this.system.clocksData);\n        return game.eunoblades.ClockKeys.has(clockKeyID ?? \"\");\n    }\n    get healingClock() {\n        if (!this.isHealingClockReady) {\n            return undefined;\n        }\n        const [clockKeyID] = Object.keys(this.system.clocksData);\n        const clockKey = game.eunoblades.ClockKeys.get(clockKeyID ?? \"\");\n        return clockKey;\n    }\n    get harmLevel() {\n        if (this.system.harm.severe.one.length > 1) {\n            return 3;\n        }\n        if ((this.system.harm.moderate.one.length + this.system.harm.moderate.two.length) > 0) {\n            return 2;\n        }\n        if ((this.system.harm.lesser.one.length + this.system.harm.lesser.two.length) > 0) {\n            return 1;\n        }\n        return 0;\n    }\n    get trauma() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return 0;\n        }\n        return Object.keys(this.system.trauma.checked)\n            .filter((traumaName) => \n        // @ts-ignore Compiler linter mismatch.\n        this.system.trauma.active[traumaName] && this.system.trauma.checked[traumaName])\n            .length;\n    }\n    get traumaList() {\n        // @ts-ignore Compiler linter mismatch.\n        return _BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)\n            ? Object.keys(this.system.trauma.active).filter((key) => this.system.trauma.active[key])\n            : [];\n    }\n    get activeTraumaConditions() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return {};\n        }\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objFilter(this.system.trauma.checked, \n        // @ts-ignore Compiler linter mismatch.\n        (_v, traumaName) => Boolean(traumaName in this.system.trauma.active\n            && this.system.trauma.active[traumaName]));\n    }\n    get currentLoad() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return 0;\n        }\n        const activeLoadItems = this.activeSubItems.filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear);\n        return _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].gsap.utils.clamp(0, 10, activeLoadItems.reduce((tot, i) => tot + _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt(i.system.load), 0));\n    }\n    get remainingLoad() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return 0;\n        }\n        if (!this.system.loadout.selected) {\n            return 0;\n        }\n        const maxLoad = this.system.loadout.levels[game.i18n.localize(this.system.loadout.selected.toString())\n            .toLowerCase()];\n        return Math.max(0, maxLoad - this.currentLoad);\n    }\n    async addStash(amount) {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return;\n        }\n        await this.update({ \"system.stash.value\": Math.min(this.system.stash.value + amount, this.system.stash.max) });\n    }\n    get projects() {\n        return this.getSubItemsOfType(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project);\n    }\n    get remainingDowntimeActions() {\n        if (!_BladesActorProxy__WEBPACK_IMPORTED_MODULE_2__.BladesActor.IsType(this, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return 0;\n        }\n        return this.system.downtime_actions.max + this.system.downtime_action_bonus - this.system.downtime_actions.value;\n    }\n    _processAbilityDialogItems(dialogData) {\n        if (!this.playbookName) {\n            return;\n        }\n        dialogData[this.playbookName] = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability, this.playbookName));\n        dialogData.Veteran = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability))\n            .filter((item) => !item.hasTag(this.playbookName))\n            // Remove featured class from Veteran items\n            .map((item) => {\n            if (item.dialogCSSClasses) {\n                item.dialogCSSClasses = item.dialogCSSClasses.replace(/featured-item\\s?/g, \"\");\n            }\n            return item;\n        })\n            // Re-sort by world_name\n            .sort((a, b) => {\n            if (a.system.world_name > b.system.world_name) {\n                return 1;\n            }\n            if (a.system.world_name < b.system.world_name) {\n                return -1;\n            }\n            return 0;\n        });\n    }\n    processGearDialogItems(dialogData) {\n        if (this.playbookName === null) {\n            return;\n        }\n        const gearItems = this._processEmbeddedItemMatches([\n            ..._BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear, this.playbookName),\n            ..._BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.General)\n        ])\n            .filter((item) => this.remainingLoad >= item.system.load);\n        // Two tabs, one for playbook and the other for general items\n        dialogData[this.playbookName] = gearItems.filter((item) => item.hasTag(this.playbookName));\n        dialogData.General = gearItems\n            .filter((item) => item.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.General))\n            // Remove featured class from General items\n            .map((item) => {\n            if (item.dialogCSSClasses) {\n                item.dialogCSSClasses = item.dialogCSSClasses.replace(/featured-item\\s?/g, \"\");\n            }\n            return item;\n        })\n            // Re-sort by world_name\n            .sort((a, b) => {\n            if (a.system.world_name > b.system.world_name) {\n                return 1;\n            }\n            if (a.system.world_name < b.system.world_name) {\n                return -1;\n            }\n            return 0;\n        });\n    }\n    getDialogItems(category) {\n        const dialogData = {};\n        const { playbookName } = this;\n        if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Heritage) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.heritage));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Background) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.background));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Vice && playbookName !== null) {\n            dialogData.Main = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice, playbookName));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Playbook) {\n            dialogData.Basic = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook)\n                .filter((item) => !item.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.Advanced)));\n            dialogData.Advanced = this._processEmbeddedItemMatches(_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesItem.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.Advanced));\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Gear) {\n            this.processGearDialogItems(dialogData);\n        }\n        else if (category === _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_7__.SelectionCategory.Ability) {\n            this._processAbilityDialogItems(dialogData);\n        }\n        return dialogData;\n    }\n    getTaggedItemBonuses(tags) {\n        // Given a list of item tags, will return the total bonuses to that item\n        // Won't return a number, but an object literal that includes things like extra load space or concealability\n        // Check ACTIVE EFFECTS supplied by ability against submitted tags?\n        // Should INCLUDE bonuses from crew.\n        return tags.length; // Placeholder to avoid linter error\n    }\n    // #endregion\n    // #region BladesRoll.PrimaryDoc Implementation\n    get rollPrimaryModsSchemaSet() {\n        const rollModsSchemaSet = super.rollPrimaryModsSchemaSet;\n        // Add roll mods from harm\n        [\n            [/1d/, _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModSection.roll],\n            [/Less Effect/, _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModSection.effect]\n        ].forEach(([effectPat, effectCat]) => {\n            const { one: harmConditionOne, two: harmConditionTwo } = Object.values(this.system.harm)\n                .find((harmData) => effectPat.test(harmData.effect)) ?? {};\n            const harmString = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objCompact([harmConditionOne, harmConditionTwo === \"\" ? null : harmConditionTwo]).join(\" & \");\n            if (harmString.length > 0) {\n                rollModsSchemaSet.push({\n                    key: `Harm-negative-${effectCat}`,\n                    name: harmString,\n                    section: effectCat,\n                    posNeg: \"negative\",\n                    base_status: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModStatus.ToggledOn,\n                    modType: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModType.harm,\n                    value: 1,\n                    tooltip: [\n                        `<h1 class='sur-title'>${effectCat === _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModSection.roll ? _core_constants__WEBPACK_IMPORTED_MODULE_0__.Harm.Impaired : _core_constants__WEBPACK_IMPORTED_MODULE_0__.Harm.Weakened} (Harm)</h1>`,\n                        `<h1 class='red-bright'>${harmString}</h1>`,\n                        effectCat === _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModSection.roll\n                            ? \"<p>If your injuries apply to the situation at hand, you suffer <strong class='red-bright'>−1d</strong> to your roll.</p>\"\n                            : \"<p>If your injuries apply to the situation at hand, you suffer <strong class='red-bright'>−1 effect</strong>.\"\n                    ].join(\"\")\n                });\n            }\n        });\n        const { one: harmCondition } = Object.values(this.system.harm)\n            .find((harmData) => /Need Help/.test(harmData.effect)) ?? {};\n        if (harmCondition && harmCondition.trim() !== \"\") {\n            rollModsSchemaSet.push({\n                key: \"Push-negative-roll\",\n                name: \"PUSH\",\n                sideString: harmCondition.trim(),\n                section: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModSection.roll,\n                posNeg: \"negative\",\n                base_status: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModStatus.ToggledOn,\n                modType: _core_constants__WEBPACK_IMPORTED_MODULE_0__.RollModType.harm,\n                value: 0,\n                effectKeys: [\"Cost-Stress2\"],\n                tooltip: [\n                    \"<h1 class='sur-title'>Broken (Harm)</h1>\",\n                    `<h1 class='red-bright'>${harmCondition.trim()}</h1>`,\n                    \"<p>If your injuries apply to the situation at hand, you must <strong>Push</strong> to act.</p>\"\n                ].join(\"\")\n            });\n        }\n        return rollModsSchemaSet;\n    }\n    async applyHarm(num, name) {\n        if (num === 4) {\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: `${this.name} Suffers <u><strong>FATAL</strong></u> Harm: ${name}`,\n                body: `${this.name}, will you continue as a Ghost, or create a new character?`,\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n                cssClasses: \"harm-alert fatal-harm-alert\"\n            });\n            return;\n        }\n        // Construct sequence of harm keys to check, starting with given harm level.\n        const harmSequence = [\n            [[\"lesser\", \"one\"], [\"lesser\", \"two\"]],\n            [[\"moderate\", \"one\"], [\"moderate\", \"two\"]],\n            [[\"severe\", \"one\"]]\n        ].slice(num - 1).flat(1);\n        while (harmSequence.length) {\n            const theseHarmKeys = harmSequence.shift();\n            if (!theseHarmKeys) {\n                break;\n            }\n            const [thisHarmLevel, thisHarmKey] = theseHarmKeys;\n            const thisHarmVal = this.system.harm[thisHarmLevel][thisHarmKey];\n            if (!thisHarmVal) {\n                _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                    title: `${this.name} Suffers ${_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].tCase(thisHarmLevel)} Harm: ${name}`,\n                    type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n                    cssClasses: \"harm-alert\"\n                });\n                await this.update({ [`system.harm.${thisHarmLevel}.${thisHarmKey}`]: name });\n                return;\n            }\n        }\n        _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n            title: `${this.name} Suffers a Catastrophic, Permanent Injury!`,\n            body: `${this.name}, you're out of the action - either left for dead, or otherwise dropped from the action. You can choose to return at the beginning of the next Phase with a permanent injury, or die.`,\n            type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n            cssClasses: \"harm-alert fatal-harm-alert\"\n        });\n    }\n    async applyWorsePosition() {\n        this.setFlag(\"eunos-blades\", \"isWorsePosition\", true);\n    }\n    // #endregion\n    // #region BladesRoll.ParticipantDoc Implementation\n    get rollParticipantID() { return this.id; }\n    get rollParticipantDoc() { return this; }\n    get rollParticipantIcon() { return this.playbook?.img ?? this.img; }\n    get rollParticipantName() { return this.name ?? \"\"; }\n    get rollParticipantType() { return this.type; }\n    get rollParticipantModsSchemaSet() { return []; }\n    // #endregion\n    async adjustStress(deltaStress) {\n        const newStress = Math.min(this.stressMax, Math.max(0, this.stress + deltaStress));\n        if (newStress === this.stressMax) {\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: `${this.name} breaks under the stress!`,\n                body: `${this.name}: Select a Trauma Condition on your sheet. You are taken out of action and will no longer participate in this score. Narrate what happens.`,\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n                cssClasses: \"stress-alert\"\n            });\n            await this.update({ \"system.stress.value\": 0 });\n            return;\n        }\n        await this.update({ \"system.stress.value\": newStress });\n    }\n    async indulgeStress(deltaStress) {\n        if (deltaStress > this.stress) {\n            _classes_BladesDirector__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getInstance().pushNotice_SocketCall(\"ALL\", {\n                title: `${this.name} Overindulges!`,\n                body: `${this.name}: Select an option from the list below, and narrate how overindulging your vice led to this result: <ul><li><strong>Attract Trouble:</strong> Roll for an <strong>Entanglement</strong>.</li><li><strong>Brag About Your Exploits:</strong> +2 Heat</li><li><strong>Go AWOL</strong> Vanish for a few weeks. <em>(You will play a different character until the next Downtime Phase, at which point you will return with all Harm healed.)</em></li><li><strong>Tapped:</strong> Your current Vice Purveyor cuts you off. <em>(Until you find a new source for your vice, you will be unable to Indulge Vice during Downtime.)</em></li></ul>`,\n                type: _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesNoticeType.push,\n                cssClasses: \"stress-alert\"\n            });\n        }\n        await this.update({ \"system.stress.value\": this.stress - deltaStress });\n    }\n    async spendArmor(amount) {\n        const updateData = {};\n        while (amount > 0) {\n            if (this.isLightArmorAvailable) {\n                if (!this.isLightArmorEquipped) {\n                    updateData[\"system.armor.active.light\"] = true;\n                }\n                updateData[\"system.armor.checked.light\"] = true;\n            }\n            else if (this.isHeavyArmorAvailable) {\n                if (!this.isHeavyArmorEquipped) {\n                    updateData[\"system.armor.active.heavy\"] = true;\n                }\n                updateData[\"system.armor.checked.heavy\"] = true;\n            }\n            else {\n                throw new Error(\"No armor available to spend\");\n            }\n            amount--;\n        }\n        this.update(updateData);\n    }\n    async spendSpecialArmor() {\n        if (this.system.armor.active.special && !this.system.armor.checked.special) {\n            await this.update({ \"system.armor.checked.special\": true });\n        }\n    }\n    get rollTraitPCTooltipActions() {\n        const tooltipStrings = [\"<table><tbody>\"];\n        const actionRatings = this.actions;\n        Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait).forEach((attribute) => {\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Action[attribute].forEach((action) => {\n                tooltipStrings.push([\n                    \"<tr>\",\n                    `<td><strong>${_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].uCase(action)}</strong></td>`,\n                    `<td>${\"⚪\".repeat(actionRatings[action])}</td>`,\n                    `<td><em style=\"font-family: 'Minion Pro Cond'; font-size: 10px;\">(${_core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ShortActionTooltips[action]})</em></td>`,\n                    \"</tr>\"\n                ].join(\"\"));\n            });\n        });\n        tooltipStrings.push(\"</tbody></table>\");\n        return tooltipStrings.join(\"\");\n    }\n    get rollTraitPCTooltipAttributes() {\n        const tooltipStrings = [\"<table><tbody>\"];\n        const attributeRatings = this.attributes;\n        Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait).forEach((attribute) => {\n            tooltipStrings.push([\n                \"<tr>\",\n                `<td><strong>${_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].uCase(attribute)}</strong></td>`,\n                `<td>${\"⚪\".repeat(attributeRatings[attribute])}</td>`,\n                `<td><em>(${_core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ShortAttributeTooltips[attribute]})</em></td>`,\n                \"</tr>\"\n            ].join(\"\"));\n        });\n        tooltipStrings.push(\"</tbody></table>\");\n        return tooltipStrings.join(\"\");\n    }\n    // #endregion\n    render(force) {\n        if (!this.isHealingClockReady) {\n            setTimeout(() => this.render(force), 1000);\n            return;\n        }\n        super.render(force);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesPC);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/documents/actors/BladesPC.ts\n");

/***/ }),

/***/ "./ts/documents/items/BladesClockKeeper.ts":
/*!*************************************************!*\
  !*** ./ts/documents/items/BladesClockKeeper.ts ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesItemProxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../classes/BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n\n\nclass BladesClockKeeper extends _BladesItemProxy__WEBPACK_IMPORTED_MODULE_0__.BladesItem {\n    static async Initialize() {\n        const clockKeeper = game.items.find((item) => item.type === \"clock_keeper\");\n        if (!clockKeeper) {\n            game.eunoblades.ClockKeeper = (await BladesClockKeeper.create({\n                name: \"Clock Keeper\",\n                type: \"clock_keeper\",\n                img: \"systems/eunos-blades/assets/icons/misc-icons/clock-keeper.svg\"\n            }));\n        }\n        else {\n            game.eunoblades.ClockKeeper = clockKeeper;\n        }\n        return loadTemplates([\n            \"systems/eunos-blades/templates/parts/clock-sheet-key-controls.hbs\",\n            \"systems/eunos-blades/templates/parts/clock-sheet-clock-controls.hbs\"\n        ]);\n    }\n    showClockKeyControls(keyID) {\n        if (this.sheet?.element) {\n            // Find the key controls row, flip it over to controls row.\n        }\n    }\n    hideClockKeyControls(keyID) {\n        if (this.sheet?.element) {\n            // Find the key controls row, flip it back to minimal summary\n        }\n    }\n    // #region CLOCKS OVERLAY\n    get clockKeys() { return this.getSceneKeys(); }\n    get currentScene() { return game.scenes?.current?.id; }\n    get currentSceneID() {\n        if (!game.scenes?.current) {\n            throw new Error(\"[BladesClockKeeper.currentScene] Error retrieving 'game.scenes.current'.\");\n        }\n        return game.scenes.current.id;\n    }\n    get targetSceneID() { return this.system.targetScene ?? this.currentSceneID; }\n    get keys() {\n        return new Collection(Object.entries(this.system.clocksData ?? {})\n            .map(([id, data]) => [\n            id,\n            game.eunoblades.ClockKeys.get(id) ?? new _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_1__[\"default\"](data)\n        ]));\n    }\n    getSceneKeys(sceneID) {\n        sceneID ??= this.targetSceneID;\n        return new Collection(Array.from(game.eunoblades.ClockKeys)\n            .filter((clockKey) => clockKey.sceneIDs.includes(sceneID))\n            .map((clockKey) => [clockKey.id, clockKey]));\n    }\n    async addClockKey(clockKeyConfig = {}) {\n        if (!clockKeyConfig.sceneIDs?.length) {\n            clockKeyConfig.sceneIDs = [this.targetSceneID];\n        }\n        const key = await _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Create({\n            target: this,\n            targetKey: \"system.clocksData\",\n            ...clockKeyConfig\n        });\n        // super.update({});\n        return key;\n    }\n    async deleteClockKey(keyID) {\n        await game.eunoblades.ClockKeys.get(keyID)?.delete(game.eunoblades.ClockKeys);\n    }\n    async addClockToKey(keyID, clockData) {\n        const key = await game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        await key.addClock(clockData);\n    }\n    async deleteClockFromKey(keyID, clockID) {\n        const key = await game.eunoblades.ClockKeys.get(keyID);\n        if (!key) {\n            return;\n        }\n        await key.deleteClock(clockID);\n    }\n    // #endregion\n    // #region OVERRIDES: prepareDerivedData, _onUpdate\n    prepareDerivedData() {\n        super.prepareDerivedData();\n        this.system.targetScene ??= game.scenes.current?.id || null;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesClockKeeper);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvaXRlbXMvQmxhZGVzQ2xvY2tLZWVwZXIudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQWdEO0FBQ1U7QUFDMUQsZ0NBQWdDLHdEQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHlFQUF5RTtBQUN6RTtBQUNBO0FBQ0EscURBQXFELCtEQUFjO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLCtEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLGlCQUFpQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvZG9jdW1lbnRzL2l0ZW1zL0JsYWRlc0Nsb2NrS2VlcGVyLnRzP2E5Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxhZGVzSXRlbSB9IGZyb20gXCIuLi9CbGFkZXNJdGVtUHJveHlcIjtcbmltcG9ydCBCbGFkZXNDbG9ja0tleSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9CbGFkZXNDbG9ja0tleVwiO1xuY2xhc3MgQmxhZGVzQ2xvY2tLZWVwZXIgZXh0ZW5kcyBCbGFkZXNJdGVtIHtcbiAgICBzdGF0aWMgYXN5bmMgSW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgY29uc3QgY2xvY2tLZWVwZXIgPSBnYW1lLml0ZW1zLmZpbmQoKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gXCJjbG9ja19rZWVwZXJcIik7XG4gICAgICAgIGlmICghY2xvY2tLZWVwZXIpIHtcbiAgICAgICAgICAgIGdhbWUuZXVub2JsYWRlcy5DbG9ja0tlZXBlciA9IChhd2FpdCBCbGFkZXNDbG9ja0tlZXBlci5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xvY2sgS2VlcGVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJjbG9ja19rZWVwZXJcIixcbiAgICAgICAgICAgICAgICBpbWc6IFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvYXNzZXRzL2ljb25zL21pc2MtaWNvbnMvY2xvY2sta2VlcGVyLnN2Z1wiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnYW1lLmV1bm9ibGFkZXMuQ2xvY2tLZWVwZXIgPSBjbG9ja0tlZXBlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9hZFRlbXBsYXRlcyhbXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9wYXJ0cy9jbG9jay1zaGVldC1rZXktY29udHJvbHMuaGJzXCIsXG4gICAgICAgICAgICBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9wYXJ0cy9jbG9jay1zaGVldC1jbG9jay1jb250cm9scy5oYnNcIlxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2hvd0Nsb2NrS2V5Q29udHJvbHMoa2V5SUQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hlZXQ/LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGtleSBjb250cm9scyByb3csIGZsaXAgaXQgb3ZlciB0byBjb250cm9scyByb3cuXG4gICAgICAgIH1cbiAgICB9XG4gICAgaGlkZUNsb2NrS2V5Q29udHJvbHMoa2V5SUQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2hlZXQ/LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGtleSBjb250cm9scyByb3csIGZsaXAgaXQgYmFjayB0byBtaW5pbWFsIHN1bW1hcnlcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyAjcmVnaW9uIENMT0NLUyBPVkVSTEFZXG4gICAgZ2V0IGNsb2NrS2V5cygpIHsgcmV0dXJuIHRoaXMuZ2V0U2NlbmVLZXlzKCk7IH1cbiAgICBnZXQgY3VycmVudFNjZW5lKCkgeyByZXR1cm4gZ2FtZS5zY2VuZXM/LmN1cnJlbnQ/LmlkOyB9XG4gICAgZ2V0IGN1cnJlbnRTY2VuZUlEKCkge1xuICAgICAgICBpZiAoIWdhbWUuc2NlbmVzPy5jdXJyZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbQmxhZGVzQ2xvY2tLZWVwZXIuY3VycmVudFNjZW5lXSBFcnJvciByZXRyaWV2aW5nICdnYW1lLnNjZW5lcy5jdXJyZW50Jy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhbWUuc2NlbmVzLmN1cnJlbnQuaWQ7XG4gICAgfVxuICAgIGdldCB0YXJnZXRTY2VuZUlEKCkgeyByZXR1cm4gdGhpcy5zeXN0ZW0udGFyZ2V0U2NlbmUgPz8gdGhpcy5jdXJyZW50U2NlbmVJRDsgfVxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oT2JqZWN0LmVudHJpZXModGhpcy5zeXN0ZW0uY2xvY2tzRGF0YSA/PyB7fSlcbiAgICAgICAgICAgIC5tYXAoKFtpZCwgZGF0YV0pID0+IFtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZ2FtZS5ldW5vYmxhZGVzLkNsb2NrS2V5cy5nZXQoaWQpID8/IG5ldyBCbGFkZXNDbG9ja0tleShkYXRhKVxuICAgICAgICBdKSk7XG4gICAgfVxuICAgIGdldFNjZW5lS2V5cyhzY2VuZUlEKSB7XG4gICAgICAgIHNjZW5lSUQgPz89IHRoaXMudGFyZ2V0U2NlbmVJRDtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKEFycmF5LmZyb20oZ2FtZS5ldW5vYmxhZGVzLkNsb2NrS2V5cylcbiAgICAgICAgICAgIC5maWx0ZXIoKGNsb2NrS2V5KSA9PiBjbG9ja0tleS5zY2VuZUlEcy5pbmNsdWRlcyhzY2VuZUlEKSlcbiAgICAgICAgICAgIC5tYXAoKGNsb2NrS2V5KSA9PiBbY2xvY2tLZXkuaWQsIGNsb2NrS2V5XSkpO1xuICAgIH1cbiAgICBhc3luYyBhZGRDbG9ja0tleShjbG9ja0tleUNvbmZpZyA9IHt9KSB7XG4gICAgICAgIGlmICghY2xvY2tLZXlDb25maWcuc2NlbmVJRHM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgY2xvY2tLZXlDb25maWcuc2NlbmVJRHMgPSBbdGhpcy50YXJnZXRTY2VuZUlEXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBCbGFkZXNDbG9ja0tleS5DcmVhdGUoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0S2V5OiBcInN5c3RlbS5jbG9ja3NEYXRhXCIsXG4gICAgICAgICAgICAuLi5jbG9ja0tleUNvbmZpZ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gc3VwZXIudXBkYXRlKHt9KTtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlQ2xvY2tLZXkoa2V5SUQpIHtcbiAgICAgICAgYXdhaXQgZ2FtZS5ldW5vYmxhZGVzLkNsb2NrS2V5cy5nZXQoa2V5SUQpPy5kZWxldGUoZ2FtZS5ldW5vYmxhZGVzLkNsb2NrS2V5cyk7XG4gICAgfVxuICAgIGFzeW5jIGFkZENsb2NrVG9LZXkoa2V5SUQsIGNsb2NrRGF0YSkge1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBnYW1lLmV1bm9ibGFkZXMuQ2xvY2tLZXlzLmdldChrZXlJRCk7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQga2V5LmFkZENsb2NrKGNsb2NrRGF0YSk7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZUNsb2NrRnJvbUtleShrZXlJRCwgY2xvY2tJRCkge1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBnYW1lLmV1bm9ibGFkZXMuQ2xvY2tLZXlzLmdldChrZXlJRCk7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQga2V5LmRlbGV0ZUNsb2NrKGNsb2NrSUQpO1xuICAgIH1cbiAgICAvLyAjZW5kcmVnaW9uXG4gICAgLy8gI3JlZ2lvbiBPVkVSUklERVM6IHByZXBhcmVEZXJpdmVkRGF0YSwgX29uVXBkYXRlXG4gICAgcHJlcGFyZURlcml2ZWREYXRhKCkge1xuICAgICAgICBzdXBlci5wcmVwYXJlRGVyaXZlZERhdGEoKTtcbiAgICAgICAgdGhpcy5zeXN0ZW0udGFyZ2V0U2NlbmUgPz89IGdhbWUuc2NlbmVzLmN1cnJlbnQ/LmlkIHx8IG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQmxhZGVzQ2xvY2tLZWVwZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/documents/items/BladesClockKeeper.ts\n");

/***/ }),

/***/ "./ts/documents/items/BladesGMTracker.ts":
/*!***********************************************!*\
  !*** ./ts/documents/items/BladesGMTracker.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../BladesActor */ \"./ts/BladesActor.ts\");\n\n\n\nclass BladesGMTracker extends _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static async Initialize() {\n        const tracker = game.items\n            .find((item) => _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(item, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.gm_tracker));\n        if (tracker) {\n            game.eunoblades.Tracker = tracker;\n        }\n        else {\n            game.eunoblades.Tracker = (await BladesGMTracker.create({\n                name: \"GM Tracker\",\n                type: \"gm_tracker\",\n                img: \"systems/eunos-blades/assets/icons/misc-icons/gm-tracker.svg\"\n            }));\n        }\n    }\n    get phase() { return this.system.phase ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Freeplay; }\n    set phase(phase) {\n        this.update({ \"system.phase\": phase });\n    }\n    prepareDerivedData() {\n        this.system.phases = Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase);\n    }\n    // #region OVERRIDES: prepareDerivedData, _onUpdate\n    async _onUpdate(...args) {\n        await super.callOnUpdate(...args);\n        _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc).forEach((actor) => actor.render());\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesGMTracker);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvaXRlbXMvQmxhZGVzR01UcmFja2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBMEM7QUFDMEM7QUFDeEM7QUFDNUMsOEJBQThCLG1EQUFVO0FBQ3hDO0FBQ0E7QUFDQSw0QkFBNEIsbURBQVUsY0FBYywyREFBYztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxrQkFBa0IsNEJBQTRCLHdEQUFXO0FBQ3pEO0FBQ0Esc0JBQXNCLHVCQUF1QjtBQUM3QztBQUNBO0FBQ0EsMkNBQTJDLHdEQUFXO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxvREFBVyxpQkFBaUIsNERBQWU7QUFDbkQ7QUFDQTtBQUNBLCtEQUFlLGVBQWUsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V1bm9zLWJsYWRlcy8uL3RzL2RvY3VtZW50cy9pdGVtcy9CbGFkZXNHTVRyYWNrZXIudHM/ODFjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmxhZGVzSXRlbSBmcm9tIFwiLi4vLi4vQmxhZGVzSXRlbVwiO1xuaW1wb3J0IHsgQmxhZGVzQWN0b3JUeXBlLCBCbGFkZXNJdGVtVHlwZSwgQmxhZGVzUGhhc2UgfSBmcm9tIFwiLi4vLi4vY29yZS9jb25zdGFudHNcIjtcbmltcG9ydCBCbGFkZXNBY3RvciBmcm9tIFwiLi4vLi4vQmxhZGVzQWN0b3JcIjtcbmNsYXNzIEJsYWRlc0dNVHJhY2tlciBleHRlbmRzIEJsYWRlc0l0ZW0ge1xuICAgIHN0YXRpYyBhc3luYyBJbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCB0cmFja2VyID0gZ2FtZS5pdGVtc1xuICAgICAgICAgICAgLmZpbmQoKGl0ZW0pID0+IEJsYWRlc0l0ZW0uSXNUeXBlKGl0ZW0sIEJsYWRlc0l0ZW1UeXBlLmdtX3RyYWNrZXIpKTtcbiAgICAgICAgaWYgKHRyYWNrZXIpIHtcbiAgICAgICAgICAgIGdhbWUuZXVub2JsYWRlcy5UcmFja2VyID0gdHJhY2tlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdhbWUuZXVub2JsYWRlcy5UcmFja2VyID0gKGF3YWl0IEJsYWRlc0dNVHJhY2tlci5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR00gVHJhY2tlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiZ21fdHJhY2tlclwiLFxuICAgICAgICAgICAgICAgIGltZzogXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy9hc3NldHMvaWNvbnMvbWlzYy1pY29ucy9nbS10cmFja2VyLnN2Z1wiXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHBoYXNlKCkgeyByZXR1cm4gdGhpcy5zeXN0ZW0ucGhhc2UgPz8gQmxhZGVzUGhhc2UuRnJlZXBsYXk7IH1cbiAgICBzZXQgcGhhc2UocGhhc2UpIHtcbiAgICAgICAgdGhpcy51cGRhdGUoeyBcInN5c3RlbS5waGFzZVwiOiBwaGFzZSB9KTtcbiAgICB9XG4gICAgcHJlcGFyZURlcml2ZWREYXRhKCkge1xuICAgICAgICB0aGlzLnN5c3RlbS5waGFzZXMgPSBPYmplY3QudmFsdWVzKEJsYWRlc1BoYXNlKTtcbiAgICB9XG4gICAgLy8gI3JlZ2lvbiBPVkVSUklERVM6IHByZXBhcmVEZXJpdmVkRGF0YSwgX29uVXBkYXRlXG4gICAgYXN5bmMgX29uVXBkYXRlKC4uLmFyZ3MpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuY2FsbE9uVXBkYXRlKC4uLmFyZ3MpO1xuICAgICAgICBCbGFkZXNBY3Rvci5HZXRUeXBlV2l0aFRhZ3MoQmxhZGVzQWN0b3JUeXBlLnBjKS5mb3JFYWNoKChhY3RvcikgPT4gYWN0b3IucmVuZGVyKCkpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc0dNVHJhY2tlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/documents/items/BladesGMTracker.ts\n");

/***/ }),

/***/ "./ts/documents/items/BladesLocation.ts":
/*!**********************************************!*\
  !*** ./ts/documents/items/BladesLocation.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\nclass BladesLocation extends _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    get rollFactors() {\n        const factorData = {};\n        [\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier,\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality,\n            _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale\n        ].forEach((factor, i) => {\n            const factorTotal = this.getFactorTotal(factor);\n            factorData[factor] = {\n                name: factor,\n                value: factorTotal,\n                max: factorTotal,\n                baseVal: factorTotal,\n                display: factor === _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier ? _core_utilities__WEBPACK_IMPORTED_MODULE_2__[\"default\"].romanizeNum(factorTotal) : `${factorTotal}`,\n                isActive: i === 0,\n                isPrimary: i === 0,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: `factor-gold${i === 0 ? \" factor-main\" : \"\"}`\n            };\n        });\n        return factorData;\n    }\n    getFactorTotal(factor) {\n        switch (factor) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier: return this.system.tier.value;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality: return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier);\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale: return this.system.scale;\n            // no default\n        }\n        return 0;\n    }\n    get rollOppImg() { return this.img ?? \"\"; }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesLocation);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvaXRlbXMvQmxhZGVzTG9jYXRpb24udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQzBDO0FBQ0k7QUFDVDtBQUNyQyw2QkFBNkIsbURBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtREFBTTtBQUNsQixZQUFZLG1EQUFNO0FBQ2xCLFlBQVksbURBQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsbURBQU0sUUFBUSx1REFBQywrQkFBK0IsWUFBWTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyw4QkFBOEI7QUFDeEU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbURBQU07QUFDdkIsaUJBQWlCLG1EQUFNLHFDQUFxQyxtREFBTTtBQUNsRSxpQkFBaUIsbURBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSwrREFBZSxjQUFjLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi90cy9kb2N1bWVudHMvaXRlbXMvQmxhZGVzTG9jYXRpb24udHM/MjNmMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCBCbGFkZXNJdGVtIGZyb20gXCIuLi8uLi9CbGFkZXNJdGVtXCI7XG5pbXBvcnQgeyBGYWN0b3IgfSBmcm9tIFwiLi4vLi4vY29yZS9jb25zdGFudHNcIjtcbmltcG9ydCBVIGZyb20gXCIuLi8uLi9jb3JlL3V0aWxpdGllc1wiO1xuY2xhc3MgQmxhZGVzTG9jYXRpb24gZXh0ZW5kcyBCbGFkZXNJdGVtIHtcbiAgICBnZXQgcm9sbEZhY3RvcnMoKSB7XG4gICAgICAgIGNvbnN0IGZhY3RvckRhdGEgPSB7fTtcbiAgICAgICAgW1xuICAgICAgICAgICAgRmFjdG9yLnRpZXIsXG4gICAgICAgICAgICBGYWN0b3IucXVhbGl0eSxcbiAgICAgICAgICAgIEZhY3Rvci5zY2FsZVxuICAgICAgICBdLmZvckVhY2goKGZhY3RvciwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yVG90YWwgPSB0aGlzLmdldEZhY3RvclRvdGFsKGZhY3Rvcik7XG4gICAgICAgICAgICBmYWN0b3JEYXRhW2ZhY3Rvcl0gPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogZmFjdG9yLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmYWN0b3JUb3RhbCxcbiAgICAgICAgICAgICAgICBtYXg6IGZhY3RvclRvdGFsLFxuICAgICAgICAgICAgICAgIGJhc2VWYWw6IGZhY3RvclRvdGFsLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhY3RvciA9PT0gRmFjdG9yLnRpZXIgPyBVLnJvbWFuaXplTnVtKGZhY3RvclRvdGFsKSA6IGAke2ZhY3RvclRvdGFsfWAsXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IGkgPT09IDAsXG4gICAgICAgICAgICAgICAgaXNQcmltYXJ5OiBpID09PSAwLFxuICAgICAgICAgICAgICAgIGlzRG9taW5hbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGhpZ2hGYXZvcnNQQzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBgZmFjdG9yLWdvbGQke2kgPT09IDAgPyBcIiBmYWN0b3ItbWFpblwiIDogXCJcIn1gXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhY3RvckRhdGE7XG4gICAgfVxuICAgIGdldEZhY3RvclRvdGFsKGZhY3Rvcikge1xuICAgICAgICBzd2l0Y2ggKGZhY3Rvcikge1xuICAgICAgICAgICAgY2FzZSBGYWN0b3IudGllcjogcmV0dXJuIHRoaXMuc3lzdGVtLnRpZXIudmFsdWU7XG4gICAgICAgICAgICBjYXNlIEZhY3Rvci5xdWFsaXR5OiByZXR1cm4gdGhpcy5nZXRGYWN0b3JUb3RhbChGYWN0b3IudGllcik7XG4gICAgICAgICAgICBjYXNlIEZhY3Rvci5zY2FsZTogcmV0dXJuIHRoaXMuc3lzdGVtLnNjYWxlO1xuICAgICAgICAgICAgLy8gbm8gZGVmYXVsdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBnZXQgcm9sbE9wcEltZygpIHsgcmV0dXJuIHRoaXMuaW1nID8/IFwiXCI7IH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc0xvY2F0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./ts/documents/items/BladesLocation.ts\n");

/***/ }),

/***/ "./ts/documents/items/BladesProject.ts":
/*!*********************************************!*\
  !*** ./ts/documents/items/BladesProject.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesItemProxy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _sheets_item_BladesProjectSheet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../sheets/item/BladesProjectSheet */ \"./ts/sheets/item/BladesProjectSheet.ts\");\n/* harmony import */ var _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../classes/BladesClockKey */ \"./ts/classes/BladesClockKey.ts\");\n\n\n\n\n\nclass BladesProject extends _BladesItemProxy__WEBPACK_IMPORTED_MODULE_2__.BladesItem {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesProject, BladesProjectSheet: _sheets_item_BladesProjectSheet__WEBPACK_IMPORTED_MODULE_3__[\"default\"] });\n        Items.registerSheet(\"blades\", _sheets_item_BladesProjectSheet__WEBPACK_IMPORTED_MODULE_3__[\"default\"], { types: [\"project\"], makeDefault: true });\n        return loadTemplates([\"systems/eunos-blades/templates/items/project-sheet.hbs\"]);\n    }\n    // #endregion\n    static IsType(doc) {\n        return super.IsType(doc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project);\n    }\n    static async create(data, options = {}) {\n        const project = (await super.create(data, { ...options, renderSheet: false }));\n        if (!project._clockKey) {\n            project._clockKey = await _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_4__[\"default\"].Create({\n                name: project.name,\n                target: project,\n                targetKey: \"system.clocksData\",\n                isNameVisible: false,\n                isSpotlit: false,\n                isVisible: true,\n                displayMode: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockKeyDisplayMode.clocks\n                // oneKeyIndex: U.gsap.utils.random(0, 4, 1) as OneKeyImgIndex\n            }, undefined, [{\n                    name: \"\",\n                    index: 0,\n                    color: _core_constants__WEBPACK_IMPORTED_MODULE_0__.ClockColor.yellow,\n                    value: 0,\n                    max: 8,\n                    isVisible: true,\n                    isActive: true,\n                    isNameVisible: false,\n                    isHighlighted: false\n                }]);\n        }\n        return project;\n    }\n    _clockKey;\n    get clockKey() {\n        if (this._clockKey) {\n            return this._clockKey;\n        }\n        const keysData = Object.values(this.system.clocksData);\n        if (keysData.length === 0) {\n            throw new Error(`ClockKey not initialized for Project ${this.name}`);\n        }\n        let keyID;\n        if (keysData.length === 1) {\n            keyID = keysData[0].id;\n        }\n        else if (this.isEmbedded) {\n            // Find the key data with a targetID that includes the parent document's id\n            keyID = keysData.find((keyData) => keyData.targetID.includes(this.parent?.id))?.id;\n            if (!keyID) {\n                throw new Error(`ClockKey not initialized for Project ${this.name} embedded in document '${this.parent?.name}'.`);\n            }\n        }\n        else {\n            // Find the key of form 'Item.<IDString>' in the ClockKeys collection\n            keyID = keysData.find((keyData) => /^Item\\.[^.]{16}$/.exec(keyData.targetID))?.id;\n            if (!keyID) {\n                throw new Error(`ClockKey not initialized for Project ${this.name}.`);\n            }\n        }\n        this._clockKey = game.eunoblades.ClockKeys.get(keyID) ?? new _classes_BladesClockKey__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.system.clocksData[keyID]);\n        if (!this._clockKey) {\n            throw new Error(`ClockKey not initialized for Project ${this.name}`);\n        }\n        return this._clockKey;\n    }\n    get ownerName() {\n        if (this.parent) {\n            return this.parent.name;\n        }\n        return undefined;\n    }\n    get currentClock() {\n        return this.clockKey.currentClock;\n    }\n    get isComplete() {\n        return this.clockKey.isComplete;\n    }\n    get rollOppClock() { return this.currentClock?.data; }\n    async advanceClock(segments = 1) {\n        if (!this.currentClock) {\n            return undefined;\n        }\n        return this.currentClock.fillSegments(segments);\n    }\n    get rollFactors() {\n        const factorData = {};\n        [\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier,\n            _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality\n        ].forEach((factor, i) => {\n            const factorTotal = this.getFactorTotal(factor);\n            factorData[factor] = {\n                name: factor,\n                value: factorTotal,\n                max: factorTotal,\n                baseVal: factorTotal,\n                display: factor === _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier ? _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].romanizeNum(factorTotal) : `${factorTotal}`,\n                isActive: i === 0,\n                isPrimary: i === 0,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: `factor-gold${i === 0 ? \" factor-main\" : \"\"}`\n            };\n        });\n        return factorData;\n    }\n    getFactorTotal(factor) {\n        switch (factor) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier: return this.system.tier.value;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.quality: return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier);\n            // no default\n        }\n        return 0;\n    }\n    get rollOppImg() { return \"\"; }\n    get keyElem() {\n        if (!this.clockKey) {\n            return undefined;\n        }\n        return $(`#${this.clockKey.id}`)[0];\n    }\n    get currentClockElem() {\n        if (!this.keyElem) {\n            return undefined;\n        }\n        if (!this.currentClock) {\n            return undefined;\n        }\n        return $(this.keyElem).find(`.clock[data-id=\"${this.currentClock.id}\"]`)[0];\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesProject);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/documents/items/BladesProject.ts\n");

/***/ }),

/***/ "./ts/documents/items/BladesScore.ts":
/*!*******************************************!*\
  !*** ./ts/documents/items/BladesScore.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _sheets_item_BladesScoreSheet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../sheets/item/BladesScoreSheet */ \"./ts/sheets/item/BladesScoreSheet.ts\");\n\n\n\n\n\nclass BladesScore extends _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    // #region INITIALIZATION ~\n    static async Initialize() {\n        Object.assign(globalThis, { BladesScore, BladesScoreSheet: _sheets_item_BladesScoreSheet__WEBPACK_IMPORTED_MODULE_4__[\"default\"] });\n        Items.registerSheet(\"blades\", _sheets_item_BladesScoreSheet__WEBPACK_IMPORTED_MODULE_4__[\"default\"], { types: [\"score\"], makeDefault: true });\n        return loadTemplates([\"systems/eunos-blades/templates/items/score-sheet.hbs\"]);\n    }\n    // #endregion\n    static get Active() {\n        return _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.score).find((score) => score.system.isActive);\n    }\n    static set Active(val) {\n        _BladesItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.score)\n            .find((score) => score.system.isActive)?.update({ \"system.isActive\": false })\n            .then(() => {\n            if (val) {\n                val.update({ \"system.isActive\": true });\n            }\n        });\n    }\n    // #region BladesRoll.OppositionData Implementation\n    get rollFactors() {\n        const tierTotal = this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier);\n        return {\n            [_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier]: {\n                name: \"Tier\",\n                value: tierTotal,\n                max: tierTotal,\n                baseVal: tierTotal,\n                display: _core_utilities__WEBPACK_IMPORTED_MODULE_2__[\"default\"].romanizeNum(tierTotal),\n                isActive: true,\n                isPrimary: true,\n                isDominant: false,\n                highFavorsPC: true,\n                cssClasses: \"factor-gold factor-main\"\n            }\n        };\n    }\n    get rollOppImg() { return this.img ?? \"\"; }\n    getFactorTotal(factor) {\n        switch (factor) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier: return this.system.tier.value;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.quality: return this.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.tier);\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.scale: return 0;\n            case _core_constants__WEBPACK_IMPORTED_MODULE_1__.Factor.magnitude: return 0;\n            default: return 0;\n        }\n    }\n    // #endregion\n    // #region OVERRIDES: _onUpdate\n    async _onUpdate(changed, options, userId) {\n        super._onUpdate(changed, options, userId);\n        _BladesActor__WEBPACK_IMPORTED_MODULE_3__[\"default\"].GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc).forEach((actor) => actor.render());\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesScore);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9kb2N1bWVudHMvaXRlbXMvQmxhZGVzU2NvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTBDO0FBQ3FDO0FBQzFDO0FBQ087QUFDc0I7QUFDbEUsMEJBQTBCLG1EQUFVO0FBQ3BDO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCLHlFQUFFO0FBQ25FLHNDQUFzQyxxRUFBZ0IsSUFBSSxxQ0FBcUM7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1EQUFVLGlCQUFpQiwyREFBYztBQUN4RDtBQUNBO0FBQ0EsUUFBUSxtREFBVSxpQkFBaUIsMkRBQWM7QUFDakQsOERBQThELDBCQUEwQjtBQUN4RjtBQUNBO0FBQ0EsNkJBQTZCLHlCQUF5QjtBQUN0RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsbURBQU07QUFDcEQ7QUFDQSxhQUFhLG1EQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVEQUFDO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLGlCQUFpQixtREFBTTtBQUN2QixpQkFBaUIsbURBQU0scUNBQXFDLG1EQUFNO0FBQ2xFLGlCQUFpQixtREFBTTtBQUN2QixpQkFBaUIsbURBQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9EQUFXLGlCQUFpQiw0REFBZTtBQUNuRDtBQUNBO0FBQ0EsK0RBQWUsV0FBVyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvZG9jdW1lbnRzL2l0ZW1zL0JsYWRlc1Njb3JlLnRzP2FlMjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJsYWRlc0l0ZW0gZnJvbSBcIi4uLy4uL0JsYWRlc0l0ZW1cIjtcbmltcG9ydCB7IEJsYWRlc0FjdG9yVHlwZSwgQmxhZGVzSXRlbVR5cGUsIEZhY3RvciB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbnN0YW50c1wiO1xuaW1wb3J0IFUgZnJvbSBcIi4uLy4uL2NvcmUvdXRpbGl0aWVzXCI7XG5pbXBvcnQgQmxhZGVzQWN0b3IgZnJvbSBcIi4uLy4uL0JsYWRlc0FjdG9yXCI7XG5pbXBvcnQgQmxhZGVzU2NvcmVTaGVldCBmcm9tIFwiLi4vLi4vc2hlZXRzL2l0ZW0vQmxhZGVzU2NvcmVTaGVldFwiO1xuY2xhc3MgQmxhZGVzU2NvcmUgZXh0ZW5kcyBCbGFkZXNJdGVtIHtcbiAgICAvLyAjcmVnaW9uIElOSVRJQUxJWkFUSU9OIH5cbiAgICBzdGF0aWMgYXN5bmMgSW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCB7IEJsYWRlc1Njb3JlLCBCbGFkZXNTY29yZVNoZWV0IH0pO1xuICAgICAgICBJdGVtcy5yZWdpc3RlclNoZWV0KFwiYmxhZGVzXCIsIEJsYWRlc1Njb3JlU2hlZXQsIHsgdHlwZXM6IFtcInNjb3JlXCJdLCBtYWtlRGVmYXVsdDogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIGxvYWRUZW1wbGF0ZXMoW1wic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2l0ZW1zL3Njb3JlLXNoZWV0Lmhic1wiXSk7XG4gICAgfVxuICAgIC8vICNlbmRyZWdpb25cbiAgICBzdGF0aWMgZ2V0IEFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIEJsYWRlc0l0ZW0uR2V0VHlwZVdpdGhUYWdzKEJsYWRlc0l0ZW1UeXBlLnNjb3JlKS5maW5kKChzY29yZSkgPT4gc2NvcmUuc3lzdGVtLmlzQWN0aXZlKTtcbiAgICB9XG4gICAgc3RhdGljIHNldCBBY3RpdmUodmFsKSB7XG4gICAgICAgIEJsYWRlc0l0ZW0uR2V0VHlwZVdpdGhUYWdzKEJsYWRlc0l0ZW1UeXBlLnNjb3JlKVxuICAgICAgICAgICAgLmZpbmQoKHNjb3JlKSA9PiBzY29yZS5zeXN0ZW0uaXNBY3RpdmUpPy51cGRhdGUoeyBcInN5c3RlbS5pc0FjdGl2ZVwiOiBmYWxzZSB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgICAgICAgIHZhbC51cGRhdGUoeyBcInN5c3RlbS5pc0FjdGl2ZVwiOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gI3JlZ2lvbiBCbGFkZXNSb2xsLk9wcG9zaXRpb25EYXRhIEltcGxlbWVudGF0aW9uXG4gICAgZ2V0IHJvbGxGYWN0b3JzKCkge1xuICAgICAgICBjb25zdCB0aWVyVG90YWwgPSB0aGlzLmdldEZhY3RvclRvdGFsKEZhY3Rvci50aWVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtGYWN0b3IudGllcl06IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRpZXJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGllclRvdGFsLFxuICAgICAgICAgICAgICAgIG1heDogdGllclRvdGFsLFxuICAgICAgICAgICAgICAgIGJhc2VWYWw6IHRpZXJUb3RhbCxcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBVLnJvbWFuaXplTnVtKHRpZXJUb3RhbCksXG4gICAgICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNQcmltYXJ5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGlzRG9taW5hbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGhpZ2hGYXZvcnNQQzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjc3NDbGFzc2VzOiBcImZhY3Rvci1nb2xkIGZhY3Rvci1tYWluXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0IHJvbGxPcHBJbWcoKSB7IHJldHVybiB0aGlzLmltZyA/PyBcIlwiOyB9XG4gICAgZ2V0RmFjdG9yVG90YWwoZmFjdG9yKSB7XG4gICAgICAgIHN3aXRjaCAoZmFjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIEZhY3Rvci50aWVyOiByZXR1cm4gdGhpcy5zeXN0ZW0udGllci52YWx1ZTtcbiAgICAgICAgICAgIGNhc2UgRmFjdG9yLnF1YWxpdHk6IHJldHVybiB0aGlzLmdldEZhY3RvclRvdGFsKEZhY3Rvci50aWVyKTtcbiAgICAgICAgICAgIGNhc2UgRmFjdG9yLnNjYWxlOiByZXR1cm4gMDtcbiAgICAgICAgICAgIGNhc2UgRmFjdG9yLm1hZ25pdHVkZTogcmV0dXJuIDA7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyAjZW5kcmVnaW9uXG4gICAgLy8gI3JlZ2lvbiBPVkVSUklERVM6IF9vblVwZGF0ZVxuICAgIGFzeW5jIF9vblVwZGF0ZShjaGFuZ2VkLCBvcHRpb25zLCB1c2VySWQpIHtcbiAgICAgICAgc3VwZXIuX29uVXBkYXRlKGNoYW5nZWQsIG9wdGlvbnMsIHVzZXJJZCk7XG4gICAgICAgIEJsYWRlc0FjdG9yLkdldFR5cGVXaXRoVGFncyhCbGFkZXNBY3RvclR5cGUucGMpLmZvckVhY2goKGFjdG9yKSA9PiBhY3Rvci5yZW5kZXIoKSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQmxhZGVzU2NvcmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/documents/items/BladesScore.ts\n");

/***/ }),

/***/ "./ts/sheets/actor/BladesActorSheet.ts":
/*!*********************************************!*\
  !*** ./ts/sheets/actor/BladesActorSheet.ts ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_tags__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/tags */ \"./ts/core/tags.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../classes/BladesDialog */ \"./ts/classes/BladesDialog.ts\");\n/* harmony import */ var _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../documents/BladesActiveEffect */ \"./ts/documents/BladesActiveEffect.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// #region IMPORTS~\n\n\n\n\n\n\n\n\n\n// #endregion\nclass BladesActorSheet extends ActorSheet {\n    /**\n     * Override the default getData method to provide additional data for the actor sheet.\n     * This includes: cssClass, editable, isGM, actor, system, tierTotal, rollData, activeEffects,\n     *                 hasFullVision, hasLimitedVision, hasControl, preparedItems.\n     * @returns {BladesActorSheetData} The data object for the actor sheet.\n     */\n    getData() {\n        // Get the base data context from the parent class.\n        const context = super.getData();\n        // Prepare additional data specific to this actor's sheet.\n        const sheetData = {\n            // Basic actor data.\n            cssClass: this.actor.type,\n            editable: this.options.editable,\n            isGM: game.eunoblades.Tracker?.system.is_spoofing_player ? false : game.user.isGM,\n            actor: this.actor,\n            system: this.actor.system,\n            gamePhase: game.eunoblades.Tracker?.phase || _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesPhase.Freeplay,\n            tierTotal: this.actor.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier) > 0 ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(this.actor.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier)) : \"0\",\n            rollData: this.actor.getRollData(),\n            activeEffects: Array.from(this.actor.effects),\n            hasFullVision: game.user.isGM\n                || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER),\n            hasLimitedVision: game.user.isGM\n                || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.LIMITED),\n            hasControl: game.user.isGM || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OWNER)\n        };\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.actor) || _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesCrew.IsType(this.actor)) {\n            // Prepare items for display on the actor sheet.\n            sheetData.preparedItems = {\n                abilities: [],\n                loadout: [],\n                cohorts: {\n                    gang: this.actor.cohorts\n                        .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesItemType.cohort_gang)\n                        .map((item) => {\n                        // Prepare gang cohort items.\n                        const subtypes = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique(Object.values(item.system.subtypes)\n                            .map((subtype) => subtype.trim())\n                            .filter((subtype) => /[A-Za-z]/.test(subtype)));\n                        const eliteSubtypes = [\n                            ...Object.values(item.system.elite_subtypes)\n                        ];\n                        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesCrew.IsType(item.parent)) {\n                            eliteSubtypes.push(...(item.parent.upgrades ?? [])\n                                .map((upgrade) => (upgrade.name ?? \"\").trim().replace(/^Elite /, \"\")));\n                        }\n                        // Prepare images for gang cohort items.\n                        const imgTypes = [..._core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique(eliteSubtypes.map((subtype) => subtype.trim())\n                                .filter((subtype) => /[A-Za-z]/\n                                .test(subtype) && subtypes.includes(subtype)))];\n                        if (imgTypes.length < 2) {\n                            imgTypes.push(...subtypes.filter((subtype) => !imgTypes.includes(subtype)));\n                        }\n                        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique(imgTypes).length === 1) {\n                            item.system.image = Object.values(item.system.elite_subtypes).includes(imgTypes[0]) ? `elite-${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(imgTypes[0])}.svg` : `${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(imgTypes[0])}.svg`;\n                        }\n                        else if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].unique(imgTypes).length > 1) {\n                            const [rightType, leftType] = imgTypes;\n                            item.system.imageLeft = Object.values(item.system.elite_subtypes).includes(leftType) ? `elite-${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(leftType)}.svg` : `${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(leftType)}.svg`;\n                            item.system.imageRight = Object.values(item.system.elite_subtypes).includes(rightType) ? `elite-${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(rightType)}.svg` : `${_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(rightType)}.svg`;\n                        }\n                        // Prepare additional data for gang cohort items.\n                        Object.assign(item.system, {\n                            tierTotal: item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier) > 0 ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier)) : \"0\",\n                            cohortRollData: [\n                                { mode: \"untrained\", label: \"Untrained\", color: \"transparent\", tooltip: \"<p>Roll Untrained</p>\" }\n                            ],\n                            edgeData: Object.fromEntries(Object.values(item.system.edges ?? [])\n                                .filter((edge) => /[A-Za-z]/.test(edge))\n                                .map((edge) => [edge.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EdgeTooltips[edge]])),\n                            flawData: Object.fromEntries(Object.values(item.system.flaws ?? [])\n                                .filter((flaw) => /[A-Za-z]/.test(flaw))\n                                .map((flaw) => [flaw.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FlawTooltips[flaw]]))\n                        });\n                        return item;\n                    }),\n                    expert: this.actor.activeSubItems\n                        .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesItemType.cohort_expert)\n                        .map((item) => {\n                        // Prepare expert cohort items.\n                        Object.assign(item.system, {\n                            tierTotal: item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier) > 0 ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].romanizeNum(item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor.tier)) : \"0\",\n                            cohortRollData: [\n                                { mode: \"untrained\", label: \"Untrained\", tooltip: \"<h2>Roll Untrained</h2>\" }\n                            ],\n                            edgeData: Object.fromEntries(Object.values(item.system.edges ?? [])\n                                .filter((edge) => /[A-Za-z]/.test(edge))\n                                .map((edge) => [edge.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EdgeTooltips[edge]])),\n                            flawData: Object.fromEntries(Object.values(item.system.flaws ?? [])\n                                .filter((flaw) => /[A-Za-z]/.test(flaw))\n                                .map((flaw) => [flaw.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].FlawTooltips[flaw]]))\n                        });\n                        return item;\n                    })\n                },\n                projects: []\n            };\n        }\n        // Prepare additional data for PC and Crew actors.\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesActor.IsType(this.actor, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc) || _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesActor.IsType(this.actor, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.crew)) {\n            sheetData.playbookData = {\n                dotline: {\n                    data: this.actor.system.experience.playbook,\n                    dotlineClass: \"xp-playbook\",\n                    target: \"system.experience.playbook.value\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|frame\",\n                    svgEmpty: \"full|half|frame\",\n                    advanceButton: \"advance-playbook\"\n                }\n            };\n            if (this.actor.system.experience.playbook.value !== this.actor.system.experience.playbook.max) {\n                sheetData.playbookData.tooltip = (new Handlebars.SafeString([\n                    \"<h2>At the End of the Session, Gain XP If ...</h2>\",\n                    \"<ul>\",\n                    ...Object.values(this.actor.system.experience.clues ?? []).map((line) => `<li>${line.replace(/^Y/, \"... y\")}</li>`) ?? [],\n                    \"</ul>\"\n                ].join(\"\"))).toString();\n            }\n            sheetData.coinsData = {\n                dotline: {\n                    data: this.actor.system.coins,\n                    target: \"system.coins.value\",\n                    iconEmpty: \"coin-full.svg\",\n                    iconFull: \"coin-full.svg\"\n                }\n            };\n        }\n        // Return the combined data context for the actor sheet.\n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    // #region LISTENERS & EVENT HANDLERS\n    activateListeners(html) {\n        super.activateListeners(html);\n        // Handle removal or revealing of secret information content.\n        if (game.user.isGM) {\n            html.attr(\"style\", \"--secret-text-display: initial\");\n        }\n        else {\n            html.find('.editor:not(.tinymce) [data-is-secret=\"true\"]').remove();\n        }\n        // ~ Tooltips\n        (0,_core_gsap__WEBPACK_IMPORTED_MODULE_1__.ApplyTooltipAnimations)(html);\n        _core_tags__WEBPACK_IMPORTED_MODULE_3__[\"default\"].InitListeners(html, this.actor);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        // Add dotline functionality\n        html.find(\".dotline\").each((__, elem) => {\n            if ($(elem).hasClass(\"locked\")) {\n                return;\n            }\n            let targetDoc = this.actor;\n            let targetField = $(elem).data(\"target\");\n            const comp$ = $(elem).closest(\"comp\");\n            if (targetField.startsWith(\"item\")) {\n                targetField = targetField.replace(/^item\\./, \"\");\n                const itemId = $(elem).closest(\"[data-comp-id]\").data(\"compId\");\n                if (!itemId) {\n                    return;\n                }\n                const item = this.actor.items.get(itemId);\n                if (!item) {\n                    return;\n                }\n                targetDoc = item;\n            }\n            const curValue = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt($(elem).data(\"value\"));\n            $(elem)\n                .find(\".dot\")\n                .each((_, dot) => {\n                $(dot).on(\"click\", (event) => {\n                    event.preventDefault();\n                    const thisValue = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt($(dot).data(\"value\"));\n                    if (thisValue !== curValue) {\n                        if (comp$.hasClass(\"comp-coins\")\n                            || comp$.hasClass(\"comp-stash\")) {\n                            _core_gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].effects\n                                .fillCoins($(dot).prevAll(\".dot\"))\n                                .then(() => targetDoc.update({ [targetField]: thisValue }));\n                        }\n                        else {\n                            targetDoc.update({ [targetField]: thisValue });\n                        }\n                    }\n                });\n                $(dot).on(\"contextmenu\", (event) => {\n                    event.preventDefault();\n                    const thisValue = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt($(dot).data(\"value\")) - 1;\n                    if (thisValue !== curValue) {\n                        targetDoc.update({ [targetField]: thisValue });\n                    }\n                });\n            });\n        });\n        // Component Functionality: Open, Add (via SelectorDialog), Archive, Delete, Toggle, Select\n        html\n            .find(\"[data-comp-id]\")\n            .find(\".comp-title\")\n            .on({ click: this._onItemOpenClick.bind(this) });\n        html\n            .find(\".comp-control.comp-add\")\n            .on({ click: this._onItemAddClick.bind(this) });\n        html\n            .find(\".comp-control.comp-delete\")\n            .on({ click: this._onItemRemoveClick.bind(this) });\n        html\n            .find(\".comp-control.comp-delete-full\")\n            .on({ click: this._onItemFullRemoveClick.bind(this) });\n        html\n            .find(\".comp-control.comp-toggle\")\n            .on({ click: this._onItemToggleClick.bind(this) });\n        html\n            .find(`\r\n        select[data-action='player-select'],\r\n        select[data-action='gm-select']\r\n      `)\n            .on({ change: this._onSelectChange.bind(this) });\n        html\n            .find(\"[data-action='toggle-value'\")\n            .on({ click: this._onToggleValueClick.bind(this) });\n        html\n            .find(\".advance-button\")\n            .on({ click: this._onAdvanceClick.bind(this) });\n        // Active Effects Functionality\n        html\n            .find(\".effect-control\")\n            .on({ click: this._onActiveEffectControlClick.bind(this) });\n        // Roll Functionality\n        html\n            .find(\"[data-roll-trait]\")\n            .on({ click: this._onRollTraitClick.bind(this) });\n        // Downtime Actions\n        html\n            .find(\"[data-action*='downtime-action-']\")\n            .on({ click: this._onDowntimeActionClick.bind(this) });\n        // This is a workaround until is being fixed in FoundryVTT.\n        if (this.options.submitOnChange) {\n            html.on(\"change\", \"textarea\", this._onChangeInput.bind(this)); // Use delegated listener on the form\n        }\n    }\n    async _onSubmit(event, params = {}) {\n        if (!game.user.isGM && !this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OWNER)) {\n            eLog.checkLog(\"actorSheetTrigger\", \"User does not have permission to edit this actor\", { user: game.user, actor: this.actor });\n            return {};\n        }\n        return super._onSubmit(event, params);\n    }\n    async close(options) {\n        if (this.actor.type === _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.pc) {\n            return super.close(options).then(() => this.actor.clearSubActors());\n        }\n        else if (this.actor.type === _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.npc && this.actor.parentActor) {\n            return super.close(options).then(() => this.actor.clearParentActor(false));\n        }\n        return super.close(options);\n    }\n    // #region Component Handlers\n    _getCompData(event) {\n        const elem$ = $(event.currentTarget).closest(\".comp\");\n        const compData = {\n            elem$,\n            docID: elem$.data(\"compId\"),\n            docCat: elem$.data(\"compCat\"),\n            docType: elem$.data(\"compType\"),\n            docTags: (elem$.data(\"compTags\") ?? \"\").split(/\\s+/g)\n        };\n        eLog.checkLog2(\"dialog\", \"Component Data\", { elem: elem$, ...compData });\n        if (compData.docID && compData.docType) {\n            compData.doc = {\n                Actor: this.actor.getSubActor(compData.docID),\n                Item: this.actor.getSubItem(compData.docID)\n            }[compData.docType];\n        }\n        if (compData.docCat && compData.docType && (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.actor) || _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesCrew.IsType(this.actor))) {\n            compData.dialogDocs = {\n                Actor: this.actor.getDialogActors(compData.docCat),\n                Item: this.actor.getDialogItems(compData.docCat)\n            }[compData.docType];\n        }\n        return compData;\n    }\n    _onItemOpenClick(event) {\n        event.preventDefault();\n        const { doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        doc.sheet?.render(true);\n    }\n    async _onItemAddClick(event) {\n        event.preventDefault();\n        const addType = $(event.currentTarget).closest(\".comp\").data(\"addType\");\n        if (addType && addType in _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesItemType) {\n            await this.actor.createEmbeddedDocuments(\"Item\", [\n                {\n                    name: {\n                        [_core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesItemType.cohort_gang]: \"A Gang\",\n                        [_core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesItemType.cohort_expert]: \"An Expert\"\n                    }[addType] ?? randomID(),\n                    type: addType\n                }\n            ]);\n            return;\n        }\n        const { docCat, docType, dialogDocs, docTags } = this._getCompData(event);\n        if (!dialogDocs || !docCat || !docType) {\n            return;\n        }\n        await _classes_BladesDialog__WEBPACK_IMPORTED_MODULE_6__[\"default\"].DisplaySelectionDialog(this.actor, _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(`Add ${docCat.replace(/_/g, \" \")}`), docType, dialogDocs, docTags);\n    }\n    async _onItemRemoveClick(event) {\n        event.preventDefault();\n        const { elem$, doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        await _core_gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].effects.blurRemove(elem$).then(async () => {\n            if (doc instanceof _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesItem) {\n                await this.actor.remSubItem(doc);\n            }\n            else {\n                await this.actor.remSubActor(doc);\n            }\n        });\n    }\n    async _onItemFullRemoveClick(event) {\n        event.preventDefault();\n        const { elem$, doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        await _core_gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].effects.blurRemove(elem$).then(async () => await doc.delete());\n    }\n    async _onItemToggleClick(event) {\n        event.preventDefault();\n        const target = $(event.currentTarget).data(\"target\");\n        await this.actor.update({\n            [target]: !getProperty(this.actor, target)\n        });\n    }\n    async _onSelectChange(event) {\n        event.preventDefault();\n        await _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EventHandlers.onSelectChange(this, event);\n    }\n    async _onToggleValueClick(event) {\n        event.preventDefault();\n        const elem$ = $(event.currentTarget);\n        const targetKey = elem$.data(\"target\");\n        const toggleOnVal = elem$.data(\"toggleOnVal\") || \"\";\n        const toggleOffVal = elem$.data(\"toggleOffVal\") || \"\";\n        if (getProperty(this.actor, targetKey) === toggleOnVal) {\n            await this.actor.update({ [targetKey]: toggleOffVal });\n        }\n        else {\n            await this.actor.update({ [targetKey]: toggleOnVal });\n        }\n    }\n    async _onAdvanceClick(event) {\n        event.preventDefault();\n        if ($(event.currentTarget).data(\"action\") === \"advance-playbook\") {\n            await this.actor.advancePlaybook();\n        }\n    }\n    // #endregion\n    // #region Roll Handlers\n    async _onRollTraitClick(event) {\n        const traitName = $(event.currentTarget).data(\"rollTrait\");\n        const rollType = $(event.currentTarget).data(\"rollType\");\n        const rollData = {\n            target: this.actor,\n            targetFlagKey: \"rollCollab\"\n        };\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(traitName) in { ..._core_constants__WEBPACK_IMPORTED_MODULE_2__.ActionTrait, ..._core_constants__WEBPACK_IMPORTED_MODULE_2__.AttributeTrait, ..._core_constants__WEBPACK_IMPORTED_MODULE_2__.Factor }) {\n            rollData.rollTrait = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lCase(traitName);\n        }\n        else if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(traitName)) {\n            rollData.rollTrait = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(traitName);\n        }\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(rollType) in _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType) {\n            rollData.rollType = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tCase(rollType);\n        }\n        else if (typeof rollData.rollTrait === \"string\") {\n            if (rollData.rollTrait in _core_constants__WEBPACK_IMPORTED_MODULE_2__.AttributeTrait) {\n                rollData.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Resistance;\n            }\n            else if (rollData.rollTrait in _core_constants__WEBPACK_IMPORTED_MODULE_2__.ActionTrait) {\n                rollData.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Action;\n            }\n        }\n        if (game.user.isGM) {\n            if (_classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesRollPrimary.IsDoc(this.actor)) {\n                rollData.rollPrimaryData = this.actor;\n            }\n            else if (_classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesRollOpposition.IsDoc(this.actor)) {\n                rollData.rollOppData = this.actor;\n            }\n        }\n        await _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesActionRoll.New(rollData);\n    }\n    // Returns TRUE if can proceed, FALSE if action should stop (i.e. panel revealed for another user click)\n    async _validateOrRevealSubData(downtimeAction, actionSubData) {\n        switch (downtimeAction) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.LongTermProject: {\n                // actionSubData must be \"NewProject\" or an id string to a project owned by this actor.\n                if (actionSubData === \"NewProject\") {\n                    // Create new blank project owned by this.actor and render it for actor to edit.\n                    return false;\n                }\n                const projectItem = game.items.get(actionSubData ?? \"\");\n                if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_5__.BladesProject.IsType(projectItem)) {\n                    return true;\n                }\n                // actionSubData isn't provided, which means this was the basic \"Project\" action button and sub-buttons must be revealed.\n                // Record Flip state of Downtime mid-bar\n                // Construct sub-button container, append it to Downtime mid-bar\n                // Construct \"NewProject\" button, append it to sub-button container\n                // Construct buttons for each owned project, append to sub-button container\n                // Run Flip.from animation\n                return false;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.Recover: {\n                // actionSubData must be a valid actor ID, who will become rollPrimary.\n                const healerActor = game.actors.get(actionSubData ?? \"\");\n                if (healerActor instanceof _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesActor && healerActor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_2__.Tag.NPC.CanHeal)) {\n                    return true;\n                }\n                // actionSubData isn't provided, which means this was the basic \"Recover\" action button and sub-buttons must be revealed.\n                // Record Flip state of Downtime mid-bar\n                // Construct sub-button container, append it to Downtime mid-bar\n                // Compile list of PC characters with CanHeal tag.\n                // Compile list of _visible_ NPC characters with CanHeal tag.\n                // Append buttons to sub-button container\n                // Run Flip.from animation\n                return false;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.Train: {\n                // actionSubData must be of form 'playbook:2'\n                return Boolean(/^[a-z]+:\\d$/.exec(actionSubData ?? \"\"));\n            }\n            // Other actions do not need subData validation and can always proceed:\n            default: return true;\n        }\n    }\n    async _onDowntimeActionClick(event) {\n        const elem$ = $(event.currentTarget);\n        // Extract the downtimeAction -- the substring of elem$.data(\"action\") following the last hyphen (-)\n        const downtimeAction = elem$.data(\"action\").substring(elem$.data(\"action\").lastIndexOf(\"-\") + 1);\n        // Extract the subData attribute\n        const actionSubData = elem$.data(\"actionSubData\");\n        // Validate subData: If invalid, subData buttons will be revealed -- return and wait for one to be clicked.\n        if (!(await this._validateOrRevealSubData(downtimeAction, actionSubData))) {\n            $(\"#eunos-blades-tooltips\").children(\".tooltip\").remove();\n            await this.actor.update({ \"system.downtime_actions_open_submenu\": downtimeAction });\n            $(\"#eunos-blades-tooltips\").children(\".tooltip\").remove();\n            return;\n        }\n        const config = {\n            target: this.actor,\n            targetFlagKey: \"rollCollab\",\n            rollDowntimeAction: downtimeAction\n        };\n        // Set necessary fields on roll construction config object, depending on downtime action\n        switch (downtimeAction) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.AcquireAsset:\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.LongTermProject:\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.ReduceHeat: {\n                config.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Action;\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.Recover: {\n                config.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Action;\n                if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.actor) && this.actor.healingClock) {\n                    config.rollClockKey = this.actor.healingClock.id;\n                }\n                // rollOpposition = user character's healing clock\n                // rollPrimary = this.actor is NPC?\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.IndulgeVice: {\n                config.rollType = _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.IndulgeVice;\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.Train: {\n                const [attr, value] = actionSubData.split(/:/);\n                if (attr === \"playbook\") {\n                    this.actor.update({ [`system.experience.${attr}.value`]: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt((this.actor.system.experience?.playbook?.value ?? 0)) + _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(value) });\n                }\n                else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_4__.BladesPC.IsType(this.actor)) {\n                    this.actor.update({ [`system.experience.${attr}.value`]: _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(this.actor.system.experience[attr].value) + _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(value) });\n                }\n                // Increase track XP: If above max, set rollover value\n                break;\n            }\n            default: {\n                // This is for custom downtime actions added by, e.g., ActiveEffects.\n                break;\n            }\n        }\n        // Clear any open submenus, and add one to downtime actions used.\n        await this.actor.update({\n            \"system.downtime_actions_open_submenu\": \"\",\n            \"system.downtime_actions.value\": (this.actor.system.downtime_actions?.value ?? 0) + 1\n        });\n        if (\"rollType\" in config) {\n            if (downtimeAction === _core_constants__WEBPACK_IMPORTED_MODULE_2__.DowntimeAction.IndulgeVice) {\n                _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesIndulgeViceRoll.New(config);\n            }\n            else {\n                _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesActionRoll.New(config);\n            }\n        }\n    }\n    async _onGatherInfoClick(event) {\n        const elem$ = $(event.currentTarget);\n        if (elem$.data(\"isFortuneRoll\")) {\n            _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesFortuneRoll.New({\n                target: this.actor,\n                targetFlagKey: \"rollCollab\",\n                rollType: _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Fortune\n            });\n        }\n        else {\n            _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_8__.BladesActionRoll.New({\n                target: this.actor,\n                targetFlagKey: \"rollCollab\",\n                rollType: _core_constants__WEBPACK_IMPORTED_MODULE_2__.RollType.Action,\n                rollTrait: \"\"\n            });\n        }\n    }\n    // #endregion\n    // #region Active Effect Handlers\n    _onActiveEffectControlClick(event) {\n        _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_7__[\"default\"].onManageActiveEffect(event, this.actor);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesActorSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/actor/BladesActorSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/actor/BladesCrewSheet.ts":
/*!********************************************!*\
  !*** ./ts/sheets/actor/BladesCrewSheet.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesActorSheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BladesActorSheet */ \"./ts/sheets/actor/BladesActorSheet.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n\n\nclass BladesCrewSheet extends _BladesActorSheet__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"actor\", \"crew\"],\n            template: \"systems/eunos-blades/templates/crew-sheet.hbs\",\n            width: 940,\n            height: 820,\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"claims\" }]\n        });\n    }\n    getData() {\n        const context = super.getData();\n        eLog.checkLog(\"actor\", \"[BladesCrewSheet] super.getData()\", { ...context });\n        const { activeSubItems } = this.actor;\n        const sheetData = {};\n        // ~ Assemble embedded actors and items\n        sheetData.preparedItems = Object.assign(context.preparedItems ?? {}, {\n            abilities: activeSubItems\n                .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_ability),\n            playbook: this.actor.playbook,\n            reputation: activeSubItems\n                .find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_reputation),\n            upgrades: activeSubItems\n                .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.crew_upgrade),\n            preferredOp: activeSubItems\n                .find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesItemType.preferred_op)\n        });\n        sheetData.preparedActors = {\n            members: this.actor.members,\n            contacts: this.actor.contacts\n        };\n        sheetData.tierData = {\n            label: \"Tier\",\n            dotline: {\n                data: this.actor.system.tier,\n                target: \"system.tier.value\",\n                iconEmpty: \"dot-empty.svg\",\n                iconEmptyHover: \"dot-empty-hover.svg\",\n                iconFull: \"dot-full.svg\",\n                iconFullHover: \"dot-full-hover.svg\"\n            }\n        };\n        sheetData.upgradeData = {\n            dotline: {\n                dotlineClass: \"dotline-right\",\n                data: {\n                    value: this.actor.availableUpgradePoints,\n                    max: this.actor.availableUpgradePoints\n                },\n                dotlineLabel: \"Available Upgrade Points\",\n                isLocked: true,\n                iconFull: \"dot-full.svg\"\n            }\n        };\n        sheetData.abilityData = {\n            dotline: {\n                dotlineClass: \"dotline-right\",\n                data: {\n                    value: this.actor.availableAbilityPoints,\n                    max: this.actor.availableAbilityPoints\n                },\n                dotlineLabel: \"Available Ability Points\",\n                isLocked: true,\n                iconFull: \"dot-full.svg\"\n            }\n        };\n        sheetData.cohortData = {\n            dotline: {\n                dotlineClass: \"dotline-right\",\n                data: {\n                    value: this.actor.availableCohortPoints,\n                    max: this.actor.availableCohortPoints\n                },\n                dotlineLabel: \"Available Cohort Points\",\n                isLocked: true,\n                iconFull: \"dot-full.svg\"\n            }\n        };\n        sheetData.repData = {\n            label: \"Rep\",\n            dotlines: [\n                {\n                    data: {\n                        value: Math.min(this.actor.system.rep.value, this.actor.system.rep.max - this.actor.turfCount),\n                        max: this.actor.system.rep.max - this.actor.turfCount\n                    },\n                    target: \"system.rep.value\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|half|frame\",\n                    svgEmpty: \"full|half|frame\"\n                },\n                {\n                    data: {\n                        value: this.actor.turfCount,\n                        max: this.actor.turfCount\n                    },\n                    target: \"none\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|half|frame\",\n                    svgEmpty: \"full|half|frame\",\n                    dotlineClass: \"flex-row-reverse\",\n                    isLocked: true\n                }\n            ]\n        };\n        sheetData.heatData = {\n            label: \"Heat\",\n            dotline: {\n                data: this.actor.system.heat,\n                target: \"system.heat.value\",\n                svgKey: \"teeth.tall\",\n                svgFull: \"full|half|frame\",\n                svgEmpty: \"full|half|frame\"\n            }\n        };\n        sheetData.wantedData = {\n            label: \"Wanted\",\n            dotline: {\n                data: this.actor.system.wanted,\n                target: \"system.wanted.value\",\n                svgKey: \"teeth.short\",\n                svgFull: \"full|frame\",\n                svgEmpty: \"frame\"\n            }\n        };\n        eLog.checkLog(\"actor\", \"[BladesCrewSheet] return getData()\", { ...context, ...sheetData });\n        return { ...context, ...sheetData };\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        // Update Inventory Item\n        html.find(\".item-sheet-open\").on(\"click\", (event) => {\n            const element = $(event.currentTarget).parents(\".item\");\n            const item = this.actor.items.get(element.data(\"itemId\"));\n            item?.sheet?.render(true);\n        });\n        // Toggle Hold\n        html.find(\".hold-toggle\").on(\"click\", () => {\n            this.actor.update({ \"system.hold\": this.actor.system.hold === \"weak\" ? \"strong\" : \"weak\" });\n        });\n        // Toggle Turf\n        html.find(\".turf-select\").on(\"click\", async (event) => {\n            const turf_id = $(event.currentTarget).data(\"turfId\");\n            const turf_current_status = $(event.currentTarget).data(\"turfStatus\");\n            this.actor.playbook?.update({ [`system.turfs.${turf_id}.value`]: !turf_current_status })\n                .then(() => this.render(false));\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesCrewSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/actor/BladesCrewSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/actor/BladesFactionSheet.ts":
/*!***********************************************!*\
  !*** ./ts/sheets/actor/BladesFactionSheet.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _BladesActorSheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BladesActorSheet */ \"./ts/sheets/actor/BladesActorSheet.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n\n\n\nclass BladesFactionSheet extends _BladesActorSheet__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"actor\", \"faction\"],\n            template: \"systems/eunos-blades/templates/faction-sheet.hbs\",\n            width: 900,\n            height: \"auto\",\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"overview\" }]\n        });\n    }\n    getData() {\n        const context = super.getData();\n        if (!_BladesActor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IsType(this.actor, _core_constants__WEBPACK_IMPORTED_MODULE_2__.BladesActorType.faction)) {\n            return context;\n        }\n        const sheetData = {\n            tierData: {\n                class: \"comp-tier comp-vertical comp-teeth\",\n                label: \"Tier\",\n                labelClass: \"filled-label full-width\",\n                dotline: {\n                    data: this.actor.system.tier,\n                    target: \"system.tier.value\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|half|frame\",\n                    svgEmpty: \"full|half|frame\"\n                }\n            },\n            clockKeys: this.actor.clocks\n        };\n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    async _onClockAddClick(event) {\n        event.preventDefault();\n        this.actor.addClock();\n    }\n    async _onClockDeleteClick(event) {\n        event.preventDefault();\n        const clockID = $(event.currentTarget).data(\"clockId\");\n        if (!clockID) {\n            return;\n        }\n        this.actor.deleteClock(clockID);\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        // Update Inventory Item\n        html.find(\".item-body\").on(\"click\", (event) => {\n            const element = $(event.currentTarget).parents(\".item\");\n            const item = this.actor.items.get(element.data(\"itemId\"));\n            item?.sheet?.render(true);\n        });\n        html\n            .find(\".comp-control.comp-add-clock\")\n            .on(\"click\", this._onClockAddClick.bind(this));\n        html\n            .find(\".comp-control.comp-delete-clock\")\n            .on(\"click\", this._onClockDeleteClick.bind(this));\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesFactionSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9zaGVldHMvYWN0b3IvQmxhZGVzRmFjdGlvblNoZWV0LnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNEM7QUFDTTtBQUNLO0FBQ3ZELGlDQUFpQyx5REFBZ0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGdGQUFnRjtBQUNyRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvREFBVyxvQkFBb0IsNERBQWU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLGtCQUFrQixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXVub3MtYmxhZGVzLy4vdHMvc2hlZXRzL2FjdG9yL0JsYWRlc0ZhY3Rpb25TaGVldC50cz8zNDQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGFkZXNBY3RvciBmcm9tIFwiLi4vLi4vQmxhZGVzQWN0b3JcIjtcbmltcG9ydCBCbGFkZXNBY3RvclNoZWV0IGZyb20gXCIuL0JsYWRlc0FjdG9yU2hlZXRcIjtcbmltcG9ydCB7IEJsYWRlc0FjdG9yVHlwZSB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbnN0YW50c1wiO1xuY2xhc3MgQmxhZGVzRmFjdGlvblNoZWV0IGV4dGVuZHMgQmxhZGVzQWN0b3JTaGVldCB7XG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIGZvdW5kcnkudXRpbHMubWVyZ2VPYmplY3Qoc3VwZXIuZGVmYXVsdE9wdGlvbnMsIHtcbiAgICAgICAgICAgIGNsYXNzZXM6IFtcImV1bm9zLWJsYWRlc1wiLCBcInNoZWV0XCIsIFwiYWN0b3JcIiwgXCJmYWN0aW9uXCJdLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2ZhY3Rpb24tc2hlZXQuaGJzXCIsXG4gICAgICAgICAgICB3aWR0aDogOTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiBcImF1dG9cIixcbiAgICAgICAgICAgIHRhYnM6IFt7IG5hdlNlbGVjdG9yOiBcIi5uYXYtdGFic1wiLCBjb250ZW50U2VsZWN0b3I6IFwiLnRhYi1jb250ZW50XCIsIGluaXRpYWw6IFwib3ZlcnZpZXdcIiB9XVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHN1cGVyLmdldERhdGEoKTtcbiAgICAgICAgaWYgKCFCbGFkZXNBY3Rvci5Jc1R5cGUodGhpcy5hY3RvciwgQmxhZGVzQWN0b3JUeXBlLmZhY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaGVldERhdGEgPSB7XG4gICAgICAgICAgICB0aWVyRGF0YToge1xuICAgICAgICAgICAgICAgIGNsYXNzOiBcImNvbXAtdGllciBjb21wLXZlcnRpY2FsIGNvbXAtdGVldGhcIixcbiAgICAgICAgICAgICAgICBsYWJlbDogXCJUaWVyXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxDbGFzczogXCJmaWxsZWQtbGFiZWwgZnVsbC13aWR0aFwiLFxuICAgICAgICAgICAgICAgIGRvdGxpbmU6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5hY3Rvci5zeXN0ZW0udGllcixcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBcInN5c3RlbS50aWVyLnZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIHN2Z0tleTogXCJ0ZWV0aC50YWxsXCIsXG4gICAgICAgICAgICAgICAgICAgIHN2Z0Z1bGw6IFwiZnVsbHxoYWxmfGZyYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIHN2Z0VtcHR5OiBcImZ1bGx8aGFsZnxmcmFtZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb2NrS2V5czogdGhpcy5hY3Rvci5jbG9ja3NcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLmNvbnRleHQsXG4gICAgICAgICAgICAuLi5zaGVldERhdGFcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXN5bmMgX29uQ2xvY2tBZGRDbGljayhldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmFjdG9yLmFkZENsb2NrKCk7XG4gICAgfVxuICAgIGFzeW5jIF9vbkNsb2NrRGVsZXRlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgY2xvY2tJRCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShcImNsb2NrSWRcIik7XG4gICAgICAgIGlmICghY2xvY2tJRCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0b3IuZGVsZXRlQ2xvY2soY2xvY2tJRCk7XG4gICAgfVxuICAgIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpIHtcbiAgICAgICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbCk7XG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgSW52ZW50b3J5IEl0ZW1cbiAgICAgICAgaHRtbC5maW5kKFwiLml0ZW0tYm9keVwiKS5vbihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cyhcIi5pdGVtXCIpO1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuaXRlbXMuZ2V0KGVsZW1lbnQuZGF0YShcIml0ZW1JZFwiKSk7XG4gICAgICAgICAgICBpdGVtPy5zaGVldD8ucmVuZGVyKHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaHRtbFxuICAgICAgICAgICAgLmZpbmQoXCIuY29tcC1jb250cm9sLmNvbXAtYWRkLWNsb2NrXCIpXG4gICAgICAgICAgICAub24oXCJjbGlja1wiLCB0aGlzLl9vbkNsb2NrQWRkQ2xpY2suYmluZCh0aGlzKSk7XG4gICAgICAgIGh0bWxcbiAgICAgICAgICAgIC5maW5kKFwiLmNvbXAtY29udHJvbC5jb21wLWRlbGV0ZS1jbG9ja1wiKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgdGhpcy5fb25DbG9ja0RlbGV0ZUNsaWNrLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc0ZhY3Rpb25TaGVldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./ts/sheets/actor/BladesFactionSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/actor/BladesNPCSheet.ts":
/*!*******************************************!*\
  !*** ./ts/sheets/actor/BladesNPCSheet.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _BladesActorSheet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BladesActorSheet */ \"./ts/sheets/actor/BladesActorSheet.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n\n\nclass BladesNPCSheet extends _BladesActorSheet__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"actor\", \"npc\"],\n            template: \"systems/eunos-blades/templates/npc-sheet.hbs\",\n            width: 500,\n            height: 400,\n            // height: \"auto\",\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"description\" }]\n        });\n    }\n    getData() {\n        const context = super.getData();\n        context.isSubActor = context.actor.isSubActor;\n        context.parentActor = context.actor.parentActor;\n        context.persona = context.actor.system.persona;\n        context.random = context.actor.system.random;\n        context.secret = context.actor.system.secret;\n        const rStatus = {\n            name: { size: 3, label: \"Name\" },\n            gender: { size: \"half\", label: \"Gender\" },\n            heritage: { size: \"third\", label: \"Heritage\" },\n            background: { size: \"third\", label: \"Background\" },\n            profession: { size: \"third\", label: \"Profession\" },\n            appearance: { size: 2, label: \"Appearance\" },\n            style: { size: 2, label: \"Style\" },\n            quirk: { size: 4, label: \"Quirk\" },\n            goal: { size: 2, label: \"Goal\" },\n            method: { size: 2, label: \"Method\" },\n            interests: { size: 4, label: \"Interests\" },\n            trait: { size: \"half\", label: \"Trait\" },\n            trait1: { size: \"half\", label: null },\n            trait2: { size: \"half\", label: null },\n            trait3: { size: \"half\", label: null }\n        };\n        for (const cat of [\"persona\", \"random\", \"secret\"]) {\n            for (const [key] of Object.entries(context[cat])) {\n                if (key in rStatus) {\n                    Object.assign(context[cat][key], rStatus[key]);\n                }\n            }\n        }\n        console.log({ persona: context.persona, random: context.random, secret: context.secret });\n        return context;\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        html.find(\".gm-alert-header\").on(\"click\", async (event) => {\n            event.preventDefault();\n            this.actor.clearParentActor();\n        });\n        // ~ Configure Tagify input elements\n        // const inputElement = document.querySelector('input[name=\"system.harm.severe.one\"]');\n        // if (inputElement instanceof HTMLInputElement) { new Tagify(inputElement, {}) } else { console.log(\"Not an HTMLInputElement\")}\n        // ~ Enable Randomize Button for NPCs\n        html.find(\"[data-action=\\\"randomize\\\"\").on(\"click\", () => {\n            this.actor.updateRandomizers();\n        });\n        // ~ Enable status toggles for NPC subactors\n        html.find(\".comp-status-toggle\")\n            .on(\"click\", () => {\n            const { tags } = this.actor;\n            if (this.actor.system.status === 1) {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(tags, \"Friend\");\n                tags.push(\"Rival\");\n                this.actor.update({\n                    \"system.status\": -1,\n                    \"system.tags\": _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unique(tags)\n                });\n            }\n            else {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(tags, \"Rival\");\n                tags.push(\"Friend\");\n                this.actor.update({\n                    \"system.status\": 1,\n                    \"system.tags\": _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unique(tags)\n                });\n            }\n        })\n            .on(\"contextmenu\", () => {\n            this.actor.update({ \"system.status\": 0 });\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesNPCSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9zaGVldHMvYWN0b3IvQmxhZGVzTlBDU2hlZXQudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQWtEO0FBQ2I7QUFDckMsNkJBQTZCLHlEQUFnQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtRkFBbUY7QUFDeEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUMsc0JBQXNCLCtCQUErQjtBQUNyRCx3QkFBd0Isa0NBQWtDO0FBQzFELDBCQUEwQixvQ0FBb0M7QUFDOUQsMEJBQTBCLG9DQUFvQztBQUM5RCwwQkFBMEIsOEJBQThCO0FBQ3hELHFCQUFxQix5QkFBeUI7QUFDOUMscUJBQXFCLHlCQUF5QjtBQUM5QyxvQkFBb0Isd0JBQXdCO0FBQzVDLHNCQUFzQiwwQkFBMEI7QUFDaEQseUJBQXlCLDZCQUE2QjtBQUN0RCxxQkFBcUIsOEJBQThCO0FBQ25ELHNCQUFzQiwyQkFBMkI7QUFDakQsc0JBQXNCLDJCQUEyQjtBQUNqRCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwRUFBMEU7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkRBQTJELDJCQUEyQixJQUFJLE9BQU87QUFDakc7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0EsZ0JBQWdCLHVEQUFDO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx1REFBQztBQUNwQyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGdCQUFnQix1REFBQztBQUNqQjtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsdURBQUM7QUFDcEMsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ0NBQWdDLG9CQUFvQjtBQUNwRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLCtEQUFlLGNBQWMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2V1bm9zLWJsYWRlcy8uL3RzL3NoZWV0cy9hY3Rvci9CbGFkZXNOUENTaGVldC50cz9kMzlhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbGFkZXNBY3RvclNoZWV0IGZyb20gXCIuL0JsYWRlc0FjdG9yU2hlZXRcIjtcbmltcG9ydCBVIGZyb20gXCIuLi8uLi9jb3JlL3V0aWxpdGllc1wiO1xuY2xhc3MgQmxhZGVzTlBDU2hlZXQgZXh0ZW5kcyBCbGFkZXNBY3RvclNoZWV0IHtcbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gZm91bmRyeS51dGlscy5tZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xuICAgICAgICAgICAgY2xhc3NlczogW1wiZXVub3MtYmxhZGVzXCIsIFwic2hlZXRcIiwgXCJhY3RvclwiLCBcIm5wY1wiXSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcInN5c3RlbXMvZXVub3MtYmxhZGVzL3RlbXBsYXRlcy9ucGMtc2hlZXQuaGJzXCIsXG4gICAgICAgICAgICB3aWR0aDogNTAwLFxuICAgICAgICAgICAgaGVpZ2h0OiA0MDAsXG4gICAgICAgICAgICAvLyBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgICAgdGFiczogW3sgbmF2U2VsZWN0b3I6IFwiLm5hdi10YWJzXCIsIGNvbnRlbnRTZWxlY3RvcjogXCIudGFiLWNvbnRlbnRcIiwgaW5pdGlhbDogXCJkZXNjcmlwdGlvblwiIH1dXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXREYXRhKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gc3VwZXIuZ2V0RGF0YSgpO1xuICAgICAgICBjb250ZXh0LmlzU3ViQWN0b3IgPSBjb250ZXh0LmFjdG9yLmlzU3ViQWN0b3I7XG4gICAgICAgIGNvbnRleHQucGFyZW50QWN0b3IgPSBjb250ZXh0LmFjdG9yLnBhcmVudEFjdG9yO1xuICAgICAgICBjb250ZXh0LnBlcnNvbmEgPSBjb250ZXh0LmFjdG9yLnN5c3RlbS5wZXJzb25hO1xuICAgICAgICBjb250ZXh0LnJhbmRvbSA9IGNvbnRleHQuYWN0b3Iuc3lzdGVtLnJhbmRvbTtcbiAgICAgICAgY29udGV4dC5zZWNyZXQgPSBjb250ZXh0LmFjdG9yLnN5c3RlbS5zZWNyZXQ7XG4gICAgICAgIGNvbnN0IHJTdGF0dXMgPSB7XG4gICAgICAgICAgICBuYW1lOiB7IHNpemU6IDMsIGxhYmVsOiBcIk5hbWVcIiB9LFxuICAgICAgICAgICAgZ2VuZGVyOiB7IHNpemU6IFwiaGFsZlwiLCBsYWJlbDogXCJHZW5kZXJcIiB9LFxuICAgICAgICAgICAgaGVyaXRhZ2U6IHsgc2l6ZTogXCJ0aGlyZFwiLCBsYWJlbDogXCJIZXJpdGFnZVwiIH0sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiB7IHNpemU6IFwidGhpcmRcIiwgbGFiZWw6IFwiQmFja2dyb3VuZFwiIH0sXG4gICAgICAgICAgICBwcm9mZXNzaW9uOiB7IHNpemU6IFwidGhpcmRcIiwgbGFiZWw6IFwiUHJvZmVzc2lvblwiIH0sXG4gICAgICAgICAgICBhcHBlYXJhbmNlOiB7IHNpemU6IDIsIGxhYmVsOiBcIkFwcGVhcmFuY2VcIiB9LFxuICAgICAgICAgICAgc3R5bGU6IHsgc2l6ZTogMiwgbGFiZWw6IFwiU3R5bGVcIiB9LFxuICAgICAgICAgICAgcXVpcms6IHsgc2l6ZTogNCwgbGFiZWw6IFwiUXVpcmtcIiB9LFxuICAgICAgICAgICAgZ29hbDogeyBzaXplOiAyLCBsYWJlbDogXCJHb2FsXCIgfSxcbiAgICAgICAgICAgIG1ldGhvZDogeyBzaXplOiAyLCBsYWJlbDogXCJNZXRob2RcIiB9LFxuICAgICAgICAgICAgaW50ZXJlc3RzOiB7IHNpemU6IDQsIGxhYmVsOiBcIkludGVyZXN0c1wiIH0sXG4gICAgICAgICAgICB0cmFpdDogeyBzaXplOiBcImhhbGZcIiwgbGFiZWw6IFwiVHJhaXRcIiB9LFxuICAgICAgICAgICAgdHJhaXQxOiB7IHNpemU6IFwiaGFsZlwiLCBsYWJlbDogbnVsbCB9LFxuICAgICAgICAgICAgdHJhaXQyOiB7IHNpemU6IFwiaGFsZlwiLCBsYWJlbDogbnVsbCB9LFxuICAgICAgICAgICAgdHJhaXQzOiB7IHNpemU6IFwiaGFsZlwiLCBsYWJlbDogbnVsbCB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgY2F0IG9mIFtcInBlcnNvbmFcIiwgXCJyYW5kb21cIiwgXCJzZWNyZXRcIl0pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleV0gb2YgT2JqZWN0LmVudHJpZXMoY29udGV4dFtjYXRdKSkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gclN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRleHRbY2F0XVtrZXldLCByU3RhdHVzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IHBlcnNvbmE6IGNvbnRleHQucGVyc29uYSwgcmFuZG9tOiBjb250ZXh0LnJhbmRvbSwgc2VjcmV0OiBjb250ZXh0LnNlY3JldCB9KTtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuICAgIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpIHtcbiAgICAgICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbCk7XG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgYmVsb3cgaGVyZSBpcyBvbmx5IG5lZWRlZCBpZiB0aGUgc2hlZXQgaXMgZWRpdGFibGVcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZWRpdGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBodG1sLmZpbmQoXCIuZ20tYWxlcnQtaGVhZGVyXCIpLm9uKFwiY2xpY2tcIiwgYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5hY3Rvci5jbGVhclBhcmVudEFjdG9yKCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB+IENvbmZpZ3VyZSBUYWdpZnkgaW5wdXQgZWxlbWVudHNcbiAgICAgICAgLy8gY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cInN5c3RlbS5oYXJtLnNldmVyZS5vbmVcIl0nKTtcbiAgICAgICAgLy8gaWYgKGlucHV0RWxlbWVudCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHsgbmV3IFRhZ2lmeShpbnB1dEVsZW1lbnQsIHt9KSB9IGVsc2UgeyBjb25zb2xlLmxvZyhcIk5vdCBhbiBIVE1MSW5wdXRFbGVtZW50XCIpfVxuICAgICAgICAvLyB+IEVuYWJsZSBSYW5kb21pemUgQnV0dG9uIGZvciBOUENzXG4gICAgICAgIGh0bWwuZmluZChcIltkYXRhLWFjdGlvbj1cXFwicmFuZG9taXplXFxcIlwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWN0b3IudXBkYXRlUmFuZG9taXplcnMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIH4gRW5hYmxlIHN0YXR1cyB0b2dnbGVzIGZvciBOUEMgc3ViYWN0b3JzXG4gICAgICAgIGh0bWwuZmluZChcIi5jb21wLXN0YXR1cy10b2dnbGVcIilcbiAgICAgICAgICAgIC5vbihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgdGFncyB9ID0gdGhpcy5hY3RvcjtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdG9yLnN5c3RlbS5zdGF0dXMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBVLnJlbW92ZSh0YWdzLCBcIkZyaWVuZFwiKTtcbiAgICAgICAgICAgICAgICB0YWdzLnB1c2goXCJSaXZhbFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdG9yLnVwZGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIFwic3lzdGVtLnN0YXR1c1wiOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgXCJzeXN0ZW0udGFnc1wiOiBVLnVuaXF1ZSh0YWdzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgVS5yZW1vdmUodGFncywgXCJSaXZhbFwiKTtcbiAgICAgICAgICAgICAgICB0YWdzLnB1c2goXCJGcmllbmRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGUoe1xuICAgICAgICAgICAgICAgICAgICBcInN5c3RlbS5zdGF0dXNcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgXCJzeXN0ZW0udGFnc1wiOiBVLnVuaXF1ZSh0YWdzKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKFwiY29udGV4dG1lbnVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hY3Rvci51cGRhdGUoeyBcInN5c3RlbS5zdGF0dXNcIjogMCB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGRlZmF1bHQgQmxhZGVzTlBDU2hlZXQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/sheets/actor/BladesNPCSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/actor/BladesPCSheet.ts":
/*!******************************************!*\
  !*** ./ts/sheets/actor/BladesPCSheet.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesActorSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesActorSheet */ \"./ts/sheets/actor/BladesActorSheet.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\nclass BladesPCSheet extends _BladesActorSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"actor\", \"pc\"],\n            template: \"systems/eunos-blades/templates/actor-sheet.hbs\",\n            width: 775,\n            height: 775,\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"abilities\" }]\n        });\n    }\n    getData() {\n        const context = super.getData();\n        const { activeSubItems, activeSubActors } = this.actor;\n        const sheetData = {};\n        // ~ Assemble embedded actors and items\n        sheetData.preparedItems = Object.assign(context.preparedItems ?? {}, {\n            abilities: activeSubItems\n                .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability)\n                .map((item) => {\n                // ~ Assign dotlines to abilities with usage data\n                if (item.system.uses_per_score.max) {\n                    Object.assign(item, {\n                        inRuleDotline: {\n                            data: item.system.uses_per_score,\n                            dotlineLabel: \"Uses\",\n                            target: \"item.system.uses_per_score.value\",\n                            iconEmpty: \"dot-empty.svg\",\n                            iconEmptyHover: \"dot-empty-hover.svg\",\n                            iconFull: \"dot-full.svg\",\n                            iconFullHover: \"dot-full-hover.svg\"\n                        }\n                    });\n                }\n                return item;\n            }),\n            background: activeSubItems.find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.background),\n            heritage: activeSubItems.find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.heritage),\n            vice: activeSubItems.find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice),\n            loadout: activeSubItems\n                .filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)\n                .map((item) => {\n                // Assign load and usage data to gear\n                if (item.system.load) {\n                    Object.assign(item, {\n                        numberCircle: item.system.load,\n                        numberCircleClass: \"item-load\"\n                    });\n                }\n                if (item.system.uses_per_score.max) {\n                    Object.assign(item, {\n                        inRuleDotline: {\n                            data: item.system.uses_per_score,\n                            dotlineLabel: \"Uses\",\n                            target: \"item.system.uses_per_score.value\",\n                            iconEmpty: \"dot-empty.svg\",\n                            iconEmptyHover: \"dot-empty-hover.svg\",\n                            iconFull: \"dot-full.svg\",\n                            iconFullHover: \"dot-full-hover.svg\"\n                        }\n                    });\n                }\n                return item;\n            }),\n            playbook: this.actor.playbook,\n            projects: activeSubItems.filter((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.project),\n            cohorts: context.preparedItems?.cohorts\n        });\n        sheetData.preparedActors = {\n            crew: activeSubActors\n                .find((actor) => actor.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.crew),\n            vice_purveyor: activeSubActors\n                .find((actor) => actor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.NPC.VicePurveyor)),\n            acquaintances: activeSubActors\n                .filter((actor) => actor.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.NPC.Acquaintance))\n        };\n        sheetData.hasVicePurveyor = Boolean(this.actor.playbook?.hasTag(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.Gear.Advanced) === false\n            && activeSubItems.find((item) => item.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice));\n        sheetData.healing_clock = this.actor.healingClock;\n        sheetData.stashData = {\n            label: \"Stash:\",\n            dotline: {\n                data: this.actor.system.stash,\n                target: \"system.stash.value\",\n                iconEmpty: \"coin-empty.svg\",\n                iconEmptyHover: \"coin-empty-hover.svg\",\n                iconFull: \"coin-full.svg\",\n                iconFullHover: \"coin-full-hover.svg\",\n                altIconFull: \"coin-ten.svg\",\n                altIconFullHover: \"coin-ten-hover.svg\",\n                altIconStep: 10\n            }\n        };\n        sheetData.stressData = {\n            label: this.actor.system.stress.name,\n            dotline: {\n                data: this.actor.system.stress,\n                dotlineClass: this.actor.system.stress.max >= 13 ? \"narrow-stress\" : \"\",\n                target: \"system.stress.value\",\n                svgKey: \"teeth.tall\",\n                svgFull: \"full|half|frame\",\n                svgEmpty: \"full|half|frame\"\n            }\n        };\n        if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.IsType(this.actor, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            sheetData.traumaData = {\n                label: this.actor.system.trauma.name,\n                dotline: {\n                    data: { value: this.actor.trauma, max: this.actor.system.trauma.max },\n                    svgKey: \"teeth.short\",\n                    svgFull: \"full|frame\",\n                    svgEmpty: \"frame\",\n                    isLocked: true\n                },\n                compContainer: {\n                    class: \"comp-trauma-conditions comp-vertical full-width\",\n                    blocks: [\n                        this.actor.traumaList.slice(0, Math.ceil(this.actor.traumaList.length / 2))\n                            .map((tName) => ({\n                            checkLabel: tName,\n                            checkClasses: {\n                                active: \"comp-toggle-red\",\n                                inactive: \"comp-toggle-grey\"\n                            },\n                            checkTarget: `system.trauma.checked.${tName}`,\n                            checkValue: this.actor.system.trauma.checked[tName] ?? false,\n                            tooltip: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TraumaTooltips[tName],\n                            tooltipClass: \"tooltip-trauma\"\n                        })),\n                        this.actor.traumaList.slice(Math.ceil(this.actor.traumaList.length / 2))\n                            .map((tName) => ({\n                            checkLabel: tName,\n                            checkClasses: {\n                                active: \"comp-toggle-red\",\n                                inactive: \"comp-toggle-grey\"\n                            },\n                            checkTarget: `system.trauma.checked.${tName}`,\n                            checkValue: this.actor.system.trauma.checked[tName] ?? false,\n                            tooltip: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TraumaTooltips[tName],\n                            tooltipClass: \"tooltip-trauma\"\n                        }))\n                    ]\n                }\n            };\n        }\n        sheetData.abilityData = {\n            dotline: {\n                dotlineClass: \"dotline-right dotline-glow\",\n                data: {\n                    value: this.actor.getAvailableAdvancements(\"Ability\"),\n                    max: this.actor.getAvailableAdvancements(\"Ability\")\n                },\n                dotlineLabel: \"Available Abilities\",\n                isLocked: true,\n                iconFull: \"dot-full.svg\"\n            }\n        };\n        sheetData.loadData = {\n            curLoad: this.actor.currentLoad,\n            selLoadCount: this.actor.system.loadout.levels[_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lCase(this.actor.system.loadout.selected)],\n            options: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Loadout.selections,\n            selected: this.actor.system.loadout.selected ?? \"\"\n        };\n        sheetData.armor = Object.fromEntries(Object.entries(this.actor.system.armor.active)\n            .filter(([, isActive]) => isActive)\n            .map(([armor]) => [\n            armor,\n            this.actor.system.armor.checked[armor]\n        ]));\n        sheetData.attributeData = {};\n        const attrEntries = Object.entries(this.actor.system.attributes);\n        for (const [attribute, attrData] of attrEntries) {\n            sheetData.attributeData[attribute] = {\n                tooltip: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].AttributeTooltips[attribute],\n                actions: {}\n            };\n            const actionEntries = Object.entries(attrData);\n            for (const [action, actionData] of actionEntries) {\n                sheetData.attributeData[attribute].actions[action] = {\n                    tooltip: _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ActionTooltips[action],\n                    value: actionData.value,\n                    max: game.eunoblades.Tracker.phase === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.CharGen\n                        ? 2\n                        : this.actor.system.attributes[attribute][action].max\n                };\n            }\n        }\n        if (game.eunoblades.Tracker?.phase === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Downtime) {\n            const actionsList = {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.AcquireAsset]: \"Acquire Asset\",\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.IndulgeVice]: \"Indulge Vice\",\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.LongTermProject]: \"Project\",\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Recover]: \"Recover\",\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.ReduceHeat]: \"Reduce Heat\",\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Train]: \"Train\"\n            };\n            // Get PCs, NPCs capable of rolling for the Recover action\n            const healCapableDocs = [\n                ..._documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.PC.CanHeal),\n                ..._documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.npc, _core_constants__WEBPACK_IMPORTED_MODULE_0__.Tag.NPC.CanHeal)\n                /* ALSO NEED TO INCLUDE EXPERT COHORTS WITH CANHEAL TAG */\n            ];\n            // delete any Actions that aren't applicable\n            if (this.actor.stress === 0) {\n                delete actionsList[_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.IndulgeVice];\n            }\n            if (this.actor.harmLevel === 0 || healCapableDocs.length === 0) {\n                delete actionsList[_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Recover];\n            }\n            if (!this.actor.crew || this.actor.crew.system.heat.value === 0) {\n                delete actionsList[_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.ReduceHeat];\n            }\n            let actionsSubmenuData = undefined;\n            switch (this.actor.system.downtime_actions_open_submenu) {\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.LongTermProject: {\n                    actionsSubmenuData = [\n                        {\n                            actionSubData: \"NewProject\",\n                            display: \"New Project\"\n                        }\n                    ];\n                    // ... and add one for each Project on the PC.\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Recover: {\n                    actionsSubmenuData = [];\n                    healCapableDocs.forEach((hDoc) => {\n                        if (hDoc.id === this.actor.id) {\n                            actionsSubmenuData?.unshift({\n                                actionSubData: this.actor.id,\n                                display: \"Heal Self\"\n                            });\n                        }\n                        else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesPC.IsType(hDoc)) {\n                            actionsSubmenuData?.push({\n                                actionSubData: hDoc.id,\n                                display: _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].uCase(hDoc.name)\n                            });\n                        }\n                        else if (_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesNPC.IsType(hDoc)) {\n                            actionsSubmenuData?.push({\n                                actionSubData: hDoc.id,\n                                display: hDoc.name\n                            });\n                        } /* NEED CHECK FOR COHORT HEALERS TOO */\n                    });\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Train: {\n                    const crewTrainingUpgrades = (this.actor.crew?.upgrades\n                        .filter((upgrade) => /^Training_/.exec(upgrade.system.world_name))\n                        .map((upgrade) => _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lCase(upgrade.system.world_name.split(/_/)[1])) ?? []);\n                    actionsSubmenuData = [\n                        {\n                            actionSubData: `playbook:${crewTrainingUpgrades.includes(\"playbook\") ? 2 : 1}`,\n                            display: `${crewTrainingUpgrades.includes(\"playbook\") ? 2 : 1} Playbook XP`\n                        },\n                        {\n                            actionSubData: `insight:${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.insight) ? 2 : 1}`,\n                            display: `${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.insight) ? 2 : 1} Insight XP`\n                        },\n                        {\n                            actionSubData: `prowess:${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.prowess) ? 2 : 1}`,\n                            display: `${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.prowess) ? 2 : 1} Prowess XP`\n                        },\n                        {\n                            actionSubData: `resolve:${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.resolve) ? 2 : 1}`,\n                            display: `${crewTrainingUpgrades.includes(_core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait.resolve) ? 2 : 1} Resolve XP`\n                        }\n                    ];\n                    break;\n                }\n            }\n            const actionsTooltips = {\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.AcquireAsset]: `<h1>Acquire an Asset</h1>\r\n        <p>Roll your <strong class='gold-bright'>Tier</strong> to acquire temporary use of an asset or service.</p>\r\n        <p>The <strong>Quality</strong> of the acquired asset depends on the result of your roll:</p>\r\n        <ul>\r\n        <li><strong class='gold-bright'>Critical Success</strong> &mdash; <strong class='gold-bright'>Tier</strong> <strong>+ 2</strong></li>\r\n        <li><strong>Success</strong> &mdash; <strong class='gold-bright'>Tier</strong> <strong>+ 2</strong></li>\r\n        <li><b>Partial Success</b> &mdash; <strong class='gold-bright'>Tier</strong></li>\r\n        <li><strong class='red-bright'>Fail</strong> &mdash; <strong class='gold-bright'>Tier</strong> <strong>− 1</strong></li>\r\n        </ul>`,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.IndulgeVice]: `<h1>Indulge Your Vice</h1>\r\n        <p>Roll your <strong class='red-bright'>lowest</strong> <strong>Attribute</strong>. Clear <strong>Stress</strong> equal to the <strong>highest</strong> die result.</p>\r\n        <p><strong class=\"red-bright\">Warning:</strong> If you clear more <strong>Stress</strong> than you have, you will <strong class=\"red-bright\">overindulge</strong>.</p>`,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.LongTermProject]: `<h1>Work on a Long-Term Project</h1>\r\n        <p>Work to <strong>advance the clock</strong> of one of your existing <strong>Long-Term Projects</strong>, or begin a new one.</p>\r\n        <p>Roll the <strong>Action</strong> most appropriate to the work you are doing. The results of your roll determine how far you will <strong>advance the clock</strong>:</p>\r\n        <ul>\r\n        <li><strong class='gold-bright'>Critical Success</strong> &mdash; <strong class='gold-bright'>Five</strong> Segments</li>\r\n        <li><strong>Success</strong> &mdash;  <strong>Three</strong> Segments</li>\r\n        <li><b>Partial Success</b> &mdash; <b>Two</b> Segments</li>\r\n        <li><strong class='red-bright'>Fail</strong> &mdash; <strong class='red-bright'>One</strong> Segment</li>\r\n        </ul>`,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Recover]: `<h1>Recover from Harm</h1>\r\n        <p>Make a <strong>healing treatment roll</strong> using the appropriate trait of the character healing you:</p>\r\n        <ul>\r\n        <li><strong>A PC with 'Physicker'</strong> &mdash; <strong>Tinker</strong>. <em>(You can heal yourself this way, but suffer <strong class=\"red-bright\">2 Stress</strong> for doing so.)</em></li>\r\n        <li><strong>An NPC</strong> &mdash; <strong>Quality</strong></li>\r\n        </ul>\r\n        <p>The results of your roll determine how far you will <strong>Advance your healing clock</strong>:</p>\r\n        <ul>\r\n        <li><strong class='gold-bright'>Critical Success</strong> &mdash; <strong class='gold-bright'>Five</strong> Segments</li>\r\n        <li><strong>Success</strong> &mdash;  <strong>Three</strong> Segments</li>\r\n        <li><b>Partial Success</b> &mdash; <b>Two</b> Segments</li>\r\n        <li><strong class='red-bright'>Fail</strong> &mdash; <strong class='red-bright'>One</strong> Segment</li>\r\n        </ul>\r\n        <p>When your <strong>healing clock</strong> is filled, reduce each Harm by one level of severity.</p>`,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.ReduceHeat]: `<h1>Reduce Heat</h1>\r\n        <p>Work to <strong>reduce the Heat</strong> on your Crew.</p>\r\n        <p>Roll the <strong>Action</strong> most appropriate to the measures you are taking. The results of your roll determine how much <strong class=\"red-bright\">Heat</strong> you clear:</p>\r\n        <ul>\r\n        <li><strong class='gold-bright'>Critical Success</strong> &mdash; <strong class='gold-bright'>Five</strong> Heat</li>\r\n        <li><strong>Success</strong> &mdash;  <strong>Three</strong> Heat</li>\r\n        <li><b>Partial Success</b> &mdash; <b>Two</b> Heat</li>\r\n        <li><strong class='red-bright'>Fail</strong> &mdash; <strong class='red-bright'>One</strong> Heat</li>\r\n        </ul>`,\n                [_core_constants__WEBPACK_IMPORTED_MODULE_0__.DowntimeAction.Train]: `<h1>Train</h1>\r\n        <p>Select an <strong>Experience Track</strong> <em>(i.e. Insight, Prowess, Resolve, or your Playbook)</em>. Gain <strong>1 XP</strong> in that track, or <strong>2 XP</strong> if your Crew has the corresponding <strong>Training Upgrade</strong>.</p>`\n            };\n            const actionsRemaining = this.actor.system.downtime_actions.max\n                + this.actor.system.downtime_action_bonus\n                - this.actor.system.downtime_actions.value\n                - (this.actor.isAtWar ? 1 : 0);\n            const canPayCoin = Boolean(this.actor.system.coins.value >= 1\n                || this.actor.system.stash.value >= 2);\n            const canPayRep = Boolean(this.actor.crew\n                && this.actor.crew.system.rep.value >= 1);\n            const isDisplayingCosts = actionsRemaining <= 0;\n            const isDisplayingActions = actionsRemaining > 0\n                || (canPayCoin && this.actor.system.downtime_action_selected_cost === \"Coin\")\n                || (canPayRep && this.actor.system.downtime_action_selected_cost === \"Rep\");\n            sheetData.downtimeData = {\n                actionsList,\n                actionsTooltips,\n                actionsRemaining,\n                actionsSubmenuData,\n                canPayCoin,\n                canPayRep,\n                isDisplayingCosts,\n                isDisplayingActions,\n                dotline: {\n                    dotlineClass: \"dotline-right dotline-glow\",\n                    data: {\n                        value: actionsRemaining,\n                        max: actionsRemaining\n                    },\n                    dotlineLabel: \"Actions Remaining\",\n                    isLocked: true,\n                    iconFull: \"dot-full.svg\"\n                }\n            };\n        }\n        sheetData.gatherInfoTooltip = (new Handlebars.SafeString([\n            \"<h1>Gathering Information</h1>\",\n            \"<h2>Questions to Consider</h2>\",\n            \"<ul>\",\n            ...Object.values(this.actor.system.gather_info ?? []).map((line) => `<li>${line}</li>`) ?? [],\n            \"</ul>\"\n        ].join(\"\"))).toString();\n        eLog.checkLog(\"Attribute\", \"[BladesPCSheet] attributeData\", { attributeData: sheetData.attributeData });\n        eLog.checkLog(\"actor\", \"[BladesPCSheet] getData()\", { ...context, ...sheetData });\n        return { ...context, ...sheetData };\n    }\n    get activeArmor() {\n        return Object.keys(_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objFilter(this.actor.system.armor.active, (val) => val === true));\n    }\n    get checkedArmor() {\n        return Object.keys(_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objFilter(this.actor.system.armor.checked, (val, key) => val === true\n            && this.actor.system.armor.active[key] === true));\n    }\n    get uncheckedArmor() {\n        return Object.keys(_core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].objFilter(this.actor.system.armor.active, (val, key) => val === true\n            && this.actor.system.armor.checked[key] === false));\n    }\n    _getHoverArmor() {\n        if (!this.activeArmor.length) {\n            return false;\n        }\n        if (this.activeArmor.includes(\"heavy\")) {\n            return this.checkedArmor.includes(\"heavy\") ? \"light\" : \"heavy\";\n        }\n        else if (this.activeArmor.includes(\"light\")) {\n            return \"light\";\n        }\n        return \"special\";\n    }\n    _getClickArmor() {\n        if (!this.uncheckedArmor.length) {\n            return false;\n        }\n        if (this.uncheckedArmor.includes(\"heavy\")) {\n            return \"heavy\";\n        }\n        if (this.uncheckedArmor.includes(\"light\")) {\n            return \"light\";\n        }\n        return \"special\";\n    }\n    _getContextMenuArmor() {\n        if (!this.checkedArmor.length) {\n            return false;\n        }\n        if (this.checkedArmor.includes(\"light\")) {\n            return \"light\";\n        }\n        if (this.checkedArmor.includes(\"heavy\")) {\n            return \"heavy\";\n        }\n        return \"special\";\n    }\n    async _onAdvanceClick(event) {\n        event.preventDefault();\n        super._onAdvanceClick(event);\n        const action = $(event.currentTarget).data(\"action\").replace(/^advance-/, \"\");\n        if (action in _core_constants__WEBPACK_IMPORTED_MODULE_0__.AttributeTrait) {\n            await this.actor.advanceAttribute(action);\n        }\n    }\n    activateListeners(html) {\n        super.activateListeners(html);\n        // ~ Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        const self = this;\n        // ~ Armor Control\n        html.find(\".main-armor-control\").on({\n            click() {\n                const targetArmor = self._getClickArmor();\n                if (!targetArmor) {\n                    return;\n                }\n                self.actor.update({ [`system.armor.checked.${targetArmor}`]: true });\n            },\n            contextmenu() {\n                const targetArmor = self._getContextMenuArmor();\n                if (!targetArmor) {\n                    return;\n                }\n                self.actor.update({ [`system.armor.checked.${targetArmor}`]: false });\n            },\n            mouseenter() {\n                const targetArmor = self._getHoverArmor();\n                eLog.log4(\"Mouse Enter\", targetArmor, this, $(this), $(this).next());\n                if (!targetArmor) {\n                    return;\n                }\n                $(this).siblings(`.svg-armor.armor-${targetArmor}`).addClass(\"hover-over\");\n            },\n            mouseleave() {\n                const targetArmor = self._getHoverArmor();\n                if (!targetArmor) {\n                    return;\n                }\n                $(this).siblings(`.svg-armor.armor-${targetArmor}`).removeClass(\"hover-over\");\n            }\n        });\n        html.find(\".special-control\").on({\n            click() {\n                if (!self.activeArmor.includes(\"special\")) {\n                    return;\n                }\n                self.actor.update({ \"system.armor.checked.special\": self.uncheckedArmor.includes(\"special\") });\n            },\n            contextmenu() {\n                if (!self.activeArmor.includes(\"special\")) {\n                    return;\n                }\n                self.actor.update({ \"system.armor.checked.special\": self.uncheckedArmor.includes(\"special\") });\n            },\n            mouseenter() {\n                if (!self.activeArmor.includes(\"special\") || self.activeArmor.length === 1) {\n                    return;\n                }\n                $(this).siblings(\".svg-armor.armor-special\").addClass(\"hover-over\");\n            },\n            mouseleave() {\n                if (!self.activeArmor.includes(\"special\") || self.activeArmor.length === 1) {\n                    return;\n                }\n                $(this).siblings(\".svg-armor.armor-special\").removeClass(\"hover-over\");\n            }\n        });\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesPCSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/actor/BladesPCSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/item/BladesClockKeeperSheet.ts":
/*!**************************************************!*\
  !*** ./ts/sheets/item/BladesClockKeeperSheet.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _BladesItemSheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BladesItemSheet */ \"./ts/sheets/item/BladesItemSheet.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n// import U from \"../../core/utilities\";\n\n\nclass BladesClockKeeperSheet extends _BladesItemSheet__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    // static Get() { return game.eunoblades.ClockKeeper as BladesClockKeeper; }\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\", \"clock-keeper\"],\n            template: \"systems/eunos-blades/templates/items/clock_keeper-sheet.hbs\",\n            width: 700,\n            height: 970,\n            // submitOnChange: false,\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"scene-keys\" }]\n        });\n    }\n    static async Initialize() {\n        Items.registerSheet(\"blades\", BladesClockKeeperSheet, { types: [\"clock_keeper\"], makeDefault: true });\n        return loadTemplates([\n            \"systems/eunos-blades/templates/items/clock_keeper-sheet.hbs\"\n        ]);\n    }\n    getData() {\n        const context = super.getData();\n        const sheetData = {\n            currentScene: game.scenes.current.id,\n            targetScene: this.item.targetSceneID,\n            sceneOptions: Array.from(game.scenes),\n            sceneKeys: this.item.getSceneKeys(this.item.system.targetScene ?? game.scenes.current.id),\n            pcsWithProjects: _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesPC.All.filter((pc) => pc.projects.length > 0),\n            factions: Array.from(_documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesFaction.All)\n        };\n        return { ...context, ...sheetData };\n    }\n    addKey(event) {\n        event.preventDefault();\n        this.item.addClockKey();\n    }\n    deleteKey(event) {\n        event.preventDefault();\n        const keyID = event.currentTarget.dataset.id;\n        if (keyID) {\n            this.item.deleteClockKey(keyID);\n        }\n    }\n    setSelectColor(select$, value) {\n        value ??= select$.data(\"value\");\n        switch (value) {\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockColor.yellow: {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(select$, {\n                    color: \"var(--blades-black)\",\n                    background: \"var(--blades-gold-bright)\",\n                    textShadow: \"none\"\n                });\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockColor.red: {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(select$, {\n                    color: \"var(--blades-white)\",\n                    background: \"var(--blades-red)\"\n                });\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockColor.cyan: {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(select$, {\n                    color: \"var(--blades-black)\",\n                    background: \"var(--blades-blue-bright)\",\n                    textShadow: \"none\"\n                });\n                break;\n            }\n            case _core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockColor.white: {\n                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.set(select$, {\n                    color: \"var(--blades-black)\",\n                    background: \"var(--blades-white)\",\n                    textShadow: \"none\"\n                });\n                break;\n            }\n            default: break;\n        }\n    }\n    async activateListeners(html) {\n        await super.activateListeners(html);\n        // *** CREATE CLOCK KEY *** ~\n        html.find(\"[data-action=\\\"create-clock-key\\\"\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await this.item.addClockKey();\n                // Notify GM\n            }\n        });\n        // #region Helper Functions to Retrieve Clock Keys & Clocks ~\n        function getClockKeyFromEvent(event) {\n            const id = $(event.currentTarget).data(\"keyId\")\n                || $(event.currentTarget).closest(\".control-flipper\").data(\"clockKeyId\");\n            if (!id) {\n                throw new Error(\"No id found on element\");\n            }\n            const clockKey = game.eunoblades.ClockKeys.get(id);\n            if (!clockKey) {\n                throw new Error(`Clock key with id ${id} not found`);\n            }\n            return clockKey;\n        }\n        function getClockFromEvent(event) {\n            const clockKey = getClockKeyFromEvent(event);\n            const clockID = $(event.currentTarget).data(\"clockId\")\n                || $(event.currentTarget).closest(\".control-flipper\").data(\"clockId\");\n            if (!clockID) {\n                throw new Error(\"No clockID found on element\");\n            }\n            const clock = clockKey.getClockByID(clockID);\n            if (!clock) {\n                throw new Error(`Clock with id ${clockID} not found`);\n            }\n            return [clockKey, clock];\n        }\n        // #endregion\n        // #region Initializing Flip Control Panels ~\n        // const flipControls$ = html.find(\".control-flipper\");\n        // setTimeout(() => {\n        //   U.gsap.set(flipControls$.find(\".controls-back\"), {\n        //     translateZ: -2,\n        //     rotateX: 180,\n        //     autoAlpha: 1\n        //   });\n        //   U.gsap.set(flipControls$.find(\".controls-front\"), {\n        //     translateZ: 2,\n        //     autoAlpha: 1\n        //   });\n        //   U.gsap.set(html.find(\".control-flipper.controls-flipped\"), {\n        //     rotateX: 180\n        //   });\n        // }, 500);\n        // #endregion\n        // #region *** CLOCK KEYS *** ~\n        const clockKeyControls$ = html.find(\".clock-key-control-flipper\");\n        // #region isOnDisplay === TRUE OR FALSE (Conditional Animation Checks Required) ~\n        clockKeyControls$.find(\"[data-action=\\\"toggle-name-visibility\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-key-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const clockKey = getClockKeyFromEvent(event);\n                    const isNameVisible = !clockKey.isNameVisible;\n                    clockKey.updateTarget(\"isNameVisible\", isNameVisible);\n                    // If clockKey is on display (in scene & visible), sent out animation socket calls\n                    if (clockKey.isInScene() && clockKey.isVisible) {\n                        if (isNameVisible) {\n                            clockKey.fadeInName_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                        else {\n                            clockKey.fadeOutName_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-name-visibility\\\"] i\")\n                        .toggleClass(\"fa-signature\")\n                        .toggleClass(\"fa-signature-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        clockKeyControls$.find(\"[data-action=\\\"toggle-spotlight\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-key-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const clockKey = getClockKeyFromEvent(event);\n                    const isSpotlit = !clockKey.isSpotlit;\n                    clockKey.updateTarget(\"isSpotlit\", isSpotlit);\n                    // If clockKey is on display (in scene & visible), sent out animation socket calls\n                    if (clockKey.isInScene() && clockKey.isVisible) {\n                        if (isSpotlit) {\n                            // clockKey.unspotlight_SocketCall(ClockDisplayContext.overlay);\n                        }\n                        else {\n                            // clockKey.spotlight_SocketCall(ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-spotlight\\\"] i\")\n                        .toggleClass(\"fa-message\")\n                        .toggleClass(\"fa-message-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        // #endregion\n        // #region isOnDisplay === TRUE ~\n        clockKeyControls$.find(\"[data-action=\\\"pull-clock-key\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-key-control-flipper\");\n            elem$.on({\n                click: (event) => {\n                    event.preventDefault();\n                    _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.keyControlPanelFlip(control$, { angle: 180 });\n                    const clockKey = getClockKeyFromEvent(event);\n                    clockKey.updateTarget(\"isVisible\", false);\n                    game.eunoblades.Director.pullKey_SocketCall(clockKey.id);\n                }\n            });\n        });\n        // #endregion\n        // #region isOnDisplay === FALSE ~\n        clockKeyControls$.find(\"[data-action=\\\"drop-clock-key\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-key-control-flipper\");\n            elem$.on({\n                click: (event) => {\n                    event.preventDefault();\n                    _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.effects.keyControlPanelFlip(control$, { angle: 0 });\n                    const clockKey = getClockKeyFromEvent(event);\n                    clockKey.updateTarget(\"isVisible\", true);\n                    game.eunoblades.Director.renderClockKey_SocketCall(clockKey.id);\n                }\n            });\n        });\n        clockKeyControls$.find(\"[data-action=\\\"spawn-position-dragger\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                const clockKey = getClockKeyFromEvent(event);\n                clockKey.spawnPositionDragger(game.eunoblades.Director.clockKeySection$);\n            }\n        });\n        clockKeyControls$.find(\"[data-action=\\\"delete-clock-key\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await getClockKeyFromEvent(event).delete(game.eunoblades.ClockKeys);\n            }\n        });\n        clockKeyControls$.find(\"[data-action=\\\"add-key-to-scene\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await getClockKeyFromEvent(event).addToScene(this.document.targetSceneID);\n            }\n        });\n        clockKeyControls$.find(\"[data-action=\\\"remove-key-from-scene\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await getClockKeyFromEvent(event).removeFromScene(this.document.targetSceneID);\n            }\n        });\n        clockKeyControls$.find(\"[data-action=\\\"add-clock-to-key\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await getClockKeyFromEvent(event).addClock();\n            }\n        });\n        clockKeyControls$.find(\"input.clock-key-input:not([readonly])\").on({\n            change: async (event) => {\n                event.preventDefault();\n                const input$ = $(event.currentTarget);\n                const inputVal = input$.val();\n                if (typeof inputVal === \"string\") {\n                    getClockKeyFromEvent(event).updateTarget(input$.data(\"targetProp\"), inputVal);\n                    clockKeyControls$.find(\"input.clock-key-input\").val(inputVal);\n                }\n            }\n        });\n        // #endregion\n        // #endregion\n        // #region *** CLOCKS *** ~\n        const clockControls$ = html.find(\".clock-control-flipper\");\n        // #region isOnDisplay === TRUE OR FALSE (Conditional Animation Checks Required) ~\n        clockControls$.find(\"[data-action=\\\"toggle-visible\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const [clockKey, clock] = getClockFromEvent(event);\n                    const isVisible = !clock.isVisible;\n                    clock.updateTarget(\"isVisible\", isVisible);\n                    // If clock key is on display (in scene & visible), sent out animation socket calls\n                    if (clockKey.isInScene() && clockKey.isVisible) {\n                        if (isVisible) {\n                            clock.reveal_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                        else {\n                            clock.hide_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-visible\\\"] i\")\n                        .toggleClass(\"fa-eye\")\n                        .toggleClass(\"fa-eye-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        clockControls$.find(\"[data-action=\\\"toggle-active\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const [clockKey, clock] = getClockFromEvent(event);\n                    const isActive = !clock.isActive;\n                    clock.updateTarget(\"isActive\", isActive);\n                    // If clock AND clock key is on display (in scene & visible), sent out animation socket calls\n                    if (clock.parentKey.isInScene() && clock.parentKey.isVisible && clock.isVisible) {\n                        if (isActive) {\n                            clock.activate_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                        else {\n                            clock.deactivate_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-active\\\"] i\")\n                        .toggleClass(\"fa-bolt\")\n                        .toggleClass(\"fa-bolt-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        clockControls$.find(\"[data-action=\\\"toggle-name-visibility\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const clock = getClockFromEvent(event)[1];\n                    const isNameVisible = !clock.isNameVisible;\n                    clock.updateTarget(\"isNameVisible\", isNameVisible);\n                    // If clock is on display (in scene & visible), sent out animation socket calls\n                    if (clock.parentKey.isInScene() && clock.parentKey.isVisible && clock.isVisible) {\n                        if (isNameVisible) {\n                            clock.fadeInClockName_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                        else {\n                            clock.fadeOutClockName_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-name-visibility\\\"] i\")\n                        .toggleClass(\"fa-signature\")\n                        .toggleClass(\"fa-signature-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        clockControls$.find(\"[data-action=\\\"toggle-highlight\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const [clockKey, clock] = getClockFromEvent(event);\n                    const isHighlighted = !clock.isHighlighted;\n                    clock.updateTarget(\"isHighlighted\", isHighlighted);\n                    // If clock is on display (in scene & visible), sent out animation socket calls\n                    if (clock.parentKey.isInScene() && clock.parentKey.isVisible && clock.isVisible) {\n                        if (isHighlighted) {\n                            clock.highlight_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                        else {\n                            clock.unhighlight_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay);\n                        }\n                    }\n                    // Toggle class names on icon\n                    control$.find(\"[data-action=\\\"toggle-highlight\\\"] i\")\n                        .toggleClass(\"fa-lightbulb\")\n                        .toggleClass(\"fa-lightbulb-slash\")\n                        .toggleClass(\"fa-solid\")\n                        .toggleClass(\"fa-regular\");\n                }\n            });\n        });\n        // #endregion\n        // #region isOnDisplay === TRUE ~\n        clockControls$.find(\"[data-action=\\\"change-segments\\\"]\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                click: async (event) => {\n                    event.preventDefault();\n                    const [clockKey, clock] = getClockFromEvent(event);\n                    const delta = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt($(event.currentTarget).data(\"value\"));\n                    const finalVal = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].gsap.utils.clamp(0, clock.max, clock.value + delta);\n                    if (delta > 0) {\n                        clock.fillSegments(delta, true);\n                    }\n                    else {\n                        clock.clearSegments(Math.abs(delta), true);\n                    }\n                    control$.find(\"select.clock-select-value\").val(finalVal);\n                    clock.changeSegments_SocketCall(_core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockDisplayContext.overlay, clock.value, finalVal);\n                }\n            });\n        });\n        // #endregion\n        // #region isOnDisplay === FALSE ~\n        clockControls$.find(\"select.clock-control-select\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            if (elem$.hasClass(\"clock-select-color\")) {\n                // this.setSelectColor(elem$);\n            }\n        })\n            .on({\n            change: (event) => {\n                event.preventDefault();\n                const select$ = $(event.currentTarget);\n                const value = select$.data(\"dtype\") === \"number\"\n                    ? _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(select$.val())\n                    : select$.val();\n                const prop = select$.data(\"targetProp\");\n                getClockFromEvent(event)[1].updateTarget(prop, value);\n                if (prop === \"color\" && typeof value === \"string\" && value in _core_constants__WEBPACK_IMPORTED_MODULE_2__.ClockColor) {\n                    this.setSelectColor(select$, value);\n                }\n            }\n        });\n        clockControls$.find(\"input.clock-input:not([readonly])\")\n            .each((i, elem) => {\n            const elem$ = $(elem);\n            const control$ = elem$.closest(\".clock-control-flipper\");\n            elem$.on({\n                change: (event) => {\n                    event.preventDefault();\n                    const input$ = $(event.currentTarget);\n                    const inputVal = input$.val();\n                    if (typeof inputVal === \"string\") {\n                        getClockFromEvent(event)[1].updateTarget(input$.data(\"targetProp\"), inputVal);\n                        control$.find(\"input.clock-input\").val(inputVal);\n                    }\n                }\n            });\n        });\n        clockControls$.find(\"[data-action=\\\"delete-clock\\\"]\").on({\n            click: async (event) => {\n                event.preventDefault();\n                await getClockFromEvent(event)[1].delete();\n            }\n        });\n        // #endregion\n        // #endregion\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesClockKeeperSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/item/BladesClockKeeperSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/item/BladesGMTrackerSheet.ts":
/*!************************************************!*\
  !*** ./ts/sheets/item/BladesGMTrackerSheet.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesTipContext: function() { return /* binding */ BladesTipContext; },\n/* harmony export */   BladesTipGenerator: function() { return /* binding */ BladesTipGenerator; }\n/* harmony export */ });\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesItemSheet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BladesItemSheet */ \"./ts/sheets/item/BladesItemSheet.ts\");\n/* harmony import */ var _BladesActor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../BladesActor */ \"./ts/BladesActor.ts\");\n/* harmony import */ var _documents_actors_BladesPC__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../documents/actors/BladesPC */ \"./ts/documents/actors/BladesPC.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\nvar BladesTipContext;\n(function (BladesTipContext) {\n    BladesTipContext[\"DiceRoll\"] = \"DiceRoll\";\n    BladesTipContext[\"Combat\"] = \"Combat\";\n    BladesTipContext[\"General\"] = \"General\";\n})(BladesTipContext || (BladesTipContext = {}));\nclass BladesTipGenerator {\n    static Test(pcActor) {\n        if (_BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].IsType(pcActor, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)) {\n            return pcActor;\n        }\n        return undefined;\n    }\n    testActor = new _documents_actors_BladesPC__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({ name: \"blah\", type: \"pc\" });\n    static get Tips() {\n        return {\n            [BladesTipContext.DiceRoll]: [],\n            [BladesTipContext.Combat]: [\n                \"Every combat encounter should advance the main plot, or else it's filler.\",\n                \"Inject dialogue into combat encounters, especially from important adversaries.\",\n                \"Combat encounters should be a challenge, but not a slog. Don't be afraid to end them early.\",\n                \"Infiltrate/Rescue/Destroy: Use these as additional/secondary goals in combat encounters.\",\n                \"Tell the next player in the initiative order that they're on deck.\",\n                \"Don't trigger combats automatically: Use alternate objectives to incite the players to fight, giving them agency.\",\n                \"Add another layer by drawing focus to collateral effects of the combat: a fire, a hostage, a collapsing building, innocents in danger\"\n            ],\n            [BladesTipContext.General]: [\n                \"Rolling the dice always means SOMETHING happens.\",\n                \"Jump straight to the action; don't waste time on establishing scenes or filler.\",\n                \"Invoke elements of characters' backstories or beliefs to make any scene more personal.\"\n            ]\n        };\n    }\n    tipContext;\n    constructor(tipContext) {\n        this.tipContext = tipContext;\n    }\n}\nclass BladesGMTrackerSheet extends _BladesItemSheet__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    // static Get() { return game.eunoblades.Tracker as BladesGMTracker; }\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\", \"gm-tracker\"],\n            template: \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\",\n            width: 700,\n            height: 970\n        });\n    }\n    static async Initialize() {\n        Items.registerSheet(\"blades\", BladesGMTrackerSheet, { types: [\"gm_tracker\"], makeDefault: true });\n        return loadTemplates([\n            \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\"\n        ]);\n    }\n    async activateListeners(html) {\n        super.activateListeners(html);\n    }\n    async _onSubmit(event, params = {}) {\n        const prevPhase = this.item.system.phase;\n        const submitData = await super._onSubmit(event, params);\n        const newPhase = this.item.system.phase;\n        let isForcingRender = true;\n        if (prevPhase !== newPhase) {\n            switch (prevPhase) {\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.CharGen: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Freeplay: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Score: {\n                    isForcingRender = false;\n                    game.actors.filter((actor) => _BladesActor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].IsType(actor, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc))\n                        .forEach((actor) => actor.clearLoadout());\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Downtime: {\n                    break;\n                }\n                default: break;\n            }\n            switch (newPhase) {\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.CharGen: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Freeplay: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Score: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase.Downtime: {\n                    break;\n                }\n                default: break;\n            }\n        }\n        if (isForcingRender) {\n            game.actors.filter((actor) => actor.type === _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesActorType.pc)\n                .forEach((actor) => actor.sheet?.render());\n        }\n        return submitData;\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesGMTrackerSheet);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90cy9zaGVldHMvaXRlbS9CbGFkZXNHTVRyYWNrZXJTaGVldC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNvRTtBQUNwQjtBQUNKO0FBQ1c7QUFDaEQ7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNENBQTRDO0FBQzdDO0FBQ0E7QUFDQSxZQUFZLG9EQUFXLGlCQUFpQiw0REFBZTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrRUFBUSxHQUFHLDBCQUEwQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyx3REFBZTtBQUNsRCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSw4REFBOEQsMENBQTBDO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3REFBVztBQUNoQztBQUNBO0FBQ0EscUJBQXFCLHdEQUFXO0FBQ2hDO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQVc7QUFDaEM7QUFDQSxrREFBa0Qsb0RBQVcsZUFBZSw0REFBZTtBQUMzRjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix3REFBVztBQUNoQztBQUNBO0FBQ0EscUJBQXFCLHdEQUFXO0FBQ2hDO0FBQ0E7QUFDQSxxQkFBcUIsd0RBQVc7QUFDaEM7QUFDQTtBQUNBLHFCQUFxQix3REFBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsNERBQWU7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUFlLG9CQUFvQixFQUFDO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi90cy9zaGVldHMvaXRlbS9CbGFkZXNHTVRyYWNrZXJTaGVldC50cz85YTQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHsgQmxhZGVzQWN0b3JUeXBlLCBCbGFkZXNQaGFzZSB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbnN0YW50c1wiO1xuaW1wb3J0IEJsYWRlc0l0ZW1TaGVldCBmcm9tIFwiLi9CbGFkZXNJdGVtU2hlZXRcIjtcbmltcG9ydCBCbGFkZXNBY3RvciBmcm9tIFwiLi4vLi4vQmxhZGVzQWN0b3JcIjtcbmltcG9ydCBCbGFkZXNQQyBmcm9tIFwiLi4vLi4vZG9jdW1lbnRzL2FjdG9ycy9CbGFkZXNQQ1wiO1xuZXhwb3J0IHZhciBCbGFkZXNUaXBDb250ZXh0O1xuKGZ1bmN0aW9uIChCbGFkZXNUaXBDb250ZXh0KSB7XG4gICAgQmxhZGVzVGlwQ29udGV4dFtcIkRpY2VSb2xsXCJdID0gXCJEaWNlUm9sbFwiO1xuICAgIEJsYWRlc1RpcENvbnRleHRbXCJDb21iYXRcIl0gPSBcIkNvbWJhdFwiO1xuICAgIEJsYWRlc1RpcENvbnRleHRbXCJHZW5lcmFsXCJdID0gXCJHZW5lcmFsXCI7XG59KShCbGFkZXNUaXBDb250ZXh0IHx8IChCbGFkZXNUaXBDb250ZXh0ID0ge30pKTtcbmNsYXNzIEJsYWRlc1RpcEdlbmVyYXRvciB7XG4gICAgc3RhdGljIFRlc3QocGNBY3Rvcikge1xuICAgICAgICBpZiAoQmxhZGVzQWN0b3IuSXNUeXBlKHBjQWN0b3IsIEJsYWRlc0FjdG9yVHlwZS5wYykpIHtcbiAgICAgICAgICAgIHJldHVybiBwY0FjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRlc3RBY3RvciA9IG5ldyBCbGFkZXNQQyh7IG5hbWU6IFwiYmxhaFwiLCB0eXBlOiBcInBjXCIgfSk7XG4gICAgc3RhdGljIGdldCBUaXBzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW0JsYWRlc1RpcENvbnRleHQuRGljZVJvbGxdOiBbXSxcbiAgICAgICAgICAgIFtCbGFkZXNUaXBDb250ZXh0LkNvbWJhdF06IFtcbiAgICAgICAgICAgICAgICBcIkV2ZXJ5IGNvbWJhdCBlbmNvdW50ZXIgc2hvdWxkIGFkdmFuY2UgdGhlIG1haW4gcGxvdCwgb3IgZWxzZSBpdCdzIGZpbGxlci5cIixcbiAgICAgICAgICAgICAgICBcIkluamVjdCBkaWFsb2d1ZSBpbnRvIGNvbWJhdCBlbmNvdW50ZXJzLCBlc3BlY2lhbGx5IGZyb20gaW1wb3J0YW50IGFkdmVyc2FyaWVzLlwiLFxuICAgICAgICAgICAgICAgIFwiQ29tYmF0IGVuY291bnRlcnMgc2hvdWxkIGJlIGEgY2hhbGxlbmdlLCBidXQgbm90IGEgc2xvZy4gRG9uJ3QgYmUgYWZyYWlkIHRvIGVuZCB0aGVtIGVhcmx5LlwiLFxuICAgICAgICAgICAgICAgIFwiSW5maWx0cmF0ZS9SZXNjdWUvRGVzdHJveTogVXNlIHRoZXNlIGFzIGFkZGl0aW9uYWwvc2Vjb25kYXJ5IGdvYWxzIGluIGNvbWJhdCBlbmNvdW50ZXJzLlwiLFxuICAgICAgICAgICAgICAgIFwiVGVsbCB0aGUgbmV4dCBwbGF5ZXIgaW4gdGhlIGluaXRpYXRpdmUgb3JkZXIgdGhhdCB0aGV5J3JlIG9uIGRlY2suXCIsXG4gICAgICAgICAgICAgICAgXCJEb24ndCB0cmlnZ2VyIGNvbWJhdHMgYXV0b21hdGljYWxseTogVXNlIGFsdGVybmF0ZSBvYmplY3RpdmVzIHRvIGluY2l0ZSB0aGUgcGxheWVycyB0byBmaWdodCwgZ2l2aW5nIHRoZW0gYWdlbmN5LlwiLFxuICAgICAgICAgICAgICAgIFwiQWRkIGFub3RoZXIgbGF5ZXIgYnkgZHJhd2luZyBmb2N1cyB0byBjb2xsYXRlcmFsIGVmZmVjdHMgb2YgdGhlIGNvbWJhdDogYSBmaXJlLCBhIGhvc3RhZ2UsIGEgY29sbGFwc2luZyBidWlsZGluZywgaW5ub2NlbnRzIGluIGRhbmdlclwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW0JsYWRlc1RpcENvbnRleHQuR2VuZXJhbF06IFtcbiAgICAgICAgICAgICAgICBcIlJvbGxpbmcgdGhlIGRpY2UgYWx3YXlzIG1lYW5zIFNPTUVUSElORyBoYXBwZW5zLlwiLFxuICAgICAgICAgICAgICAgIFwiSnVtcCBzdHJhaWdodCB0byB0aGUgYWN0aW9uOyBkb24ndCB3YXN0ZSB0aW1lIG9uIGVzdGFibGlzaGluZyBzY2VuZXMgb3IgZmlsbGVyLlwiLFxuICAgICAgICAgICAgICAgIFwiSW52b2tlIGVsZW1lbnRzIG9mIGNoYXJhY3RlcnMnIGJhY2tzdG9yaWVzIG9yIGJlbGllZnMgdG8gbWFrZSBhbnkgc2NlbmUgbW9yZSBwZXJzb25hbC5cIlxuICAgICAgICAgICAgXVxuICAgICAgICB9O1xuICAgIH1cbiAgICB0aXBDb250ZXh0O1xuICAgIGNvbnN0cnVjdG9yKHRpcENvbnRleHQpIHtcbiAgICAgICAgdGhpcy50aXBDb250ZXh0ID0gdGlwQ29udGV4dDtcbiAgICB9XG59XG5jbGFzcyBCbGFkZXNHTVRyYWNrZXJTaGVldCBleHRlbmRzIEJsYWRlc0l0ZW1TaGVldCB7XG4gICAgLy8gc3RhdGljIEdldCgpIHsgcmV0dXJuIGdhbWUuZXVub2JsYWRlcy5UcmFja2VyIGFzIEJsYWRlc0dNVHJhY2tlcjsgfVxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBmb3VuZHJ5LnV0aWxzLm1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XG4gICAgICAgICAgICBjbGFzc2VzOiBbXCJldW5vcy1ibGFkZXNcIiwgXCJzaGVldFwiLCBcIml0ZW1cIiwgXCJnbS10cmFja2VyXCJdLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwic3lzdGVtcy9ldW5vcy1ibGFkZXMvdGVtcGxhdGVzL2l0ZW1zL2dtX3RyYWNrZXItc2hlZXQuaGJzXCIsXG4gICAgICAgICAgICB3aWR0aDogNzAwLFxuICAgICAgICAgICAgaGVpZ2h0OiA5NzBcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBhc3luYyBJbml0aWFsaXplKCkge1xuICAgICAgICBJdGVtcy5yZWdpc3RlclNoZWV0KFwiYmxhZGVzXCIsIEJsYWRlc0dNVHJhY2tlclNoZWV0LCB7IHR5cGVzOiBbXCJnbV90cmFja2VyXCJdLCBtYWtlRGVmYXVsdDogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIGxvYWRUZW1wbGF0ZXMoW1xuICAgICAgICAgICAgXCJzeXN0ZW1zL2V1bm9zLWJsYWRlcy90ZW1wbGF0ZXMvaXRlbXMvZ21fdHJhY2tlci1zaGVldC5oYnNcIlxuICAgICAgICBdKTtcbiAgICB9XG4gICAgYXN5bmMgYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbCkge1xuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcbiAgICB9XG4gICAgYXN5bmMgX29uU3VibWl0KGV2ZW50LCBwYXJhbXMgPSB7fSkge1xuICAgICAgICBjb25zdCBwcmV2UGhhc2UgPSB0aGlzLml0ZW0uc3lzdGVtLnBoYXNlO1xuICAgICAgICBjb25zdCBzdWJtaXREYXRhID0gYXdhaXQgc3VwZXIuX29uU3VibWl0KGV2ZW50LCBwYXJhbXMpO1xuICAgICAgICBjb25zdCBuZXdQaGFzZSA9IHRoaXMuaXRlbS5zeXN0ZW0ucGhhc2U7XG4gICAgICAgIGxldCBpc0ZvcmNpbmdSZW5kZXIgPSB0cnVlO1xuICAgICAgICBpZiAocHJldlBoYXNlICE9PSBuZXdQaGFzZSkge1xuICAgICAgICAgICAgc3dpdGNoIChwcmV2UGhhc2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEJsYWRlc1BoYXNlLkNoYXJHZW46IHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgQmxhZGVzUGhhc2UuRnJlZXBsYXk6IHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgQmxhZGVzUGhhc2UuU2NvcmU6IHtcbiAgICAgICAgICAgICAgICAgICAgaXNGb3JjaW5nUmVuZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGdhbWUuYWN0b3JzLmZpbHRlcigoYWN0b3IpID0+IEJsYWRlc0FjdG9yLklzVHlwZShhY3RvciwgQmxhZGVzQWN0b3JUeXBlLnBjKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChhY3RvcikgPT4gYWN0b3IuY2xlYXJMb2Fkb3V0KCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBCbGFkZXNQaGFzZS5Eb3dudGltZToge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKG5ld1BoYXNlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBCbGFkZXNQaGFzZS5DaGFyR2VuOiB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEJsYWRlc1BoYXNlLkZyZWVwbGF5OiB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEJsYWRlc1BoYXNlLlNjb3JlOiB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEJsYWRlc1BoYXNlLkRvd250aW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGb3JjaW5nUmVuZGVyKSB7XG4gICAgICAgICAgICBnYW1lLmFjdG9ycy5maWx0ZXIoKGFjdG9yKSA9PiBhY3Rvci50eXBlID09PSBCbGFkZXNBY3RvclR5cGUucGMpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGFjdG9yKSA9PiBhY3Rvci5zaGVldD8ucmVuZGVyKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdWJtaXREYXRhO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEJsYWRlc0dNVHJhY2tlclNoZWV0O1xuZXhwb3J0IHsgQmxhZGVzVGlwR2VuZXJhdG9yIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./ts/sheets/item/BladesGMTrackerSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/item/BladesItemSheet.ts":
/*!*******************************************!*\
  !*** ./ts/sheets/item/BladesItemSheet.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/gsap */ \"./ts/core/gsap.ts\");\n/* harmony import */ var _BladesItem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../BladesItem */ \"./ts/BladesItem.ts\");\n/* harmony import */ var _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../documents/BladesActiveEffect */ \"./ts/documents/BladesActiveEffect.ts\");\n/* harmony import */ var _core_tags__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/tags */ \"./ts/core/tags.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\n\n\n// import {ApplyClockListeners} from \"../../classes/BladesClocks\";\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nclass BladesItemSheet extends ItemSheet {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\"],\n            width: 560,\n            height: 500,\n            tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"description\" }]\n        });\n    }\n    /* -------------------------------------------- */\n    // constructor(item: BladesItem, options: Partial<ItemSheet.Options> = {}) {\n    //   options.classes = [...options.classes ?? [], \"eunos-blades\", \"sheet\", \"item\", item.type];\n    //   super(item, options);\n    // }\n    // override async getData() {\n    getData() {\n        const context = super.getData();\n        const sheetData = {\n            cssClass: this.item.type,\n            editable: this.options.editable,\n            isGM: (game.eunoblades.Tracker?.system.is_spoofing_player ? false : Boolean(game.user.isGM)),\n            isEmbeddedItem: Boolean(this.item.parent),\n            item: this.item,\n            system: this.item.system,\n            tierTotal: this.item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier) > 0 ? _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].romanizeNum(this.item.getFactorTotal(_core_constants__WEBPACK_IMPORTED_MODULE_0__.Factor.tier)) : \"0\",\n            activeEffects: Array.from(this.item.effects)\n        };\n        const typedItemData = this._getTypedItemData[this.item.type];\n        if (typedItemData) {\n            return typedItemData({ ...context, ...sheetData });\n        }\n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    _getTypedItemData = {\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ability)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.background]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.background)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.clock_keeper]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.clock_keeper)) {\n                return undefined;\n            }\n            const sheetData = {\n                phases: Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase)\n            };\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert)) {\n                return undefined;\n            }\n            context.tierTotal = this.item.system.quality > 0 ? _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].romanizeNum(this.item.system.quality) : \"0\";\n            context.system.subtypes ??= {};\n            context.system.elite_subtypes ??= {};\n            const sheetData = {\n                tierData: {\n                    class: \"comp-tier comp-vertical comp-teeth\",\n                    dotline: {\n                        data: this.item.system.tier,\n                        target: \"system.tier.value\",\n                        iconEmpty: \"dot-empty.svg\",\n                        iconEmptyHover: \"dot-empty-hover.svg\",\n                        iconFull: \"dot-full.svg\",\n                        iconFullHover: \"dot-full-hover.svg\"\n                    }\n                }\n            };\n            sheetData.edgeData = Object.fromEntries(Object.values(context.system.edges ?? [])\n                .filter((edge) => /[A-Za-z]/.test(edge))\n                .map((edge) => [edge.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EdgeTooltips[edge]]));\n            sheetData.flawData = Object.fromEntries(Object.values(context.system.flaws ?? [])\n                .filter((flaw) => /[A-Za-z]/.test(flaw))\n                .map((flaw) => [flaw.trim(), _core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].FlawTooltips[flaw]]));\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert]: (context) => {\n            const typedItemData = this._getTypedItemData[_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang];\n            if (!typedItemData) {\n                throw new Error(`No data for type ${this.item.type}`);\n            }\n            return typedItemData(context);\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_ability]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_ability)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_reputation]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_reputation)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_playbook)) {\n                return undefined;\n            }\n            if (context.isGM) {\n                const expClueData = {};\n                [...Object.values(context.system.experience_clues ?? []).filter((clue) => /[A-Za-z]/.test(clue)), \" \"].forEach((clue, i) => { expClueData[(i + 1).toString()] = clue; });\n                context.system.experience_clues = expClueData;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_upgrade]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.crew_upgrade)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.feature]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.feature)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gm_tracker]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gm_tracker)) {\n                return undefined;\n            }\n            const sheetData = {\n                phase: this.item.system.phase,\n                phases: Object.values(_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesPhase)\n            };\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.heritage]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.heritage)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.gear)) {\n                return undefined;\n            }\n            const sheetData = {\n                tierData: {\n                    class: \"comp-tier comp-vertical comp-teeth\",\n                    label: \"Quality\",\n                    labelClass: \"filled-label full-width\",\n                    dotline: {\n                        data: this.item.system.tier,\n                        target: \"system.tier.value\",\n                        iconEmpty: \"dot-empty.svg\",\n                        iconEmptyHover: \"dot-empty-hover.svg\",\n                        iconFull: \"dot-full.svg\",\n                        iconFullHover: \"dot-full-hover.svg\"\n                    }\n                }\n            };\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.playbook)) {\n                return undefined;\n            }\n            if (context.isGM) {\n                const expClueData = {};\n                [...Object.values(context.system.experience_clues ?? []).filter((clue) => /[A-Za-z]/.test(clue)), \" \"].forEach((clue, i) => { expClueData[(i + 1).toString()] = clue; });\n                context.system.experience_clues = expClueData;\n                const gatherInfoData = {};\n                [...Object.values(context.system.gather_info_questions ?? []).filter((question) => /[A-Za-z]/.test(question)), \" \"].forEach((question, i) => { gatherInfoData[(i + 1).toString()] = question; });\n                context.system.gather_info_questions = gatherInfoData;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.preferred_op]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.preferred_op)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.stricture]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.stricture)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.vice)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.ritual)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.design)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.location]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.location)) {\n                return undefined;\n            }\n            const sheetData = {};\n            return {\n                ...context,\n                ...sheetData\n            };\n        },\n        [_core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.score]: (context) => {\n            if (!_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.score)) {\n                return undefined;\n            }\n            return context;\n        }\n    };\n    get template() {\n        const pathComps = [\n            \"systems/eunos-blades/templates/items\"\n        ];\n        if (_core_constants__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SimpleItemTypes.includes(this.item.type)) {\n            pathComps.push(\"simple-sheet.hbs\");\n        }\n        else {\n            pathComps.push(`${this.item.type}-sheet.hbs`);\n        }\n        return pathComps.join(\"/\");\n    }\n    /* -------------------------------------------- */\n    addDotlineListeners(html) {\n        html.find(\".dotline\").each((__, elem) => {\n            if ($(elem).hasClass(\"locked\")) {\n                return;\n            }\n            const targetDoc = this.item;\n            const targetField = $(elem).data(\"target\");\n            const comp$ = $(elem).closest(\"comp\");\n            const curValue = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(elem).data(\"value\"));\n            $(elem)\n                .find(\".dot\")\n                .each((_, dot) => {\n                $(dot).on(\"click\", (event) => {\n                    event.preventDefault();\n                    const thisValue = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(dot).data(\"value\"));\n                    if (thisValue !== curValue) {\n                        if (comp$.hasClass(\"comp-coins\")\n                            || comp$.hasClass(\"comp-stash\")) {\n                            _core_gsap__WEBPACK_IMPORTED_MODULE_2__[\"default\"].effects\n                                .fillCoins($(dot).prevAll(\".dot\"))\n                                .then(() => targetDoc.update({ [targetField]: thisValue }));\n                        }\n                        else {\n                            targetDoc.update({ [targetField]: thisValue });\n                        }\n                    }\n                });\n                $(dot).on(\"contextmenu\", (event) => {\n                    event.preventDefault();\n                    const thisValue = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(dot).data(\"value\")) - 1;\n                    if (thisValue !== curValue) {\n                        targetDoc.update({ [targetField]: thisValue });\n                    }\n                });\n            });\n        });\n    }\n    async activateListeners(html) {\n        await super.activateListeners(html);\n        const self = this;\n        _core_tags__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InitListeners(html, this.item);\n        (0,_core_gsap__WEBPACK_IMPORTED_MODULE_2__.ApplyTooltipAnimations)(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.options.editable) {\n            return;\n        }\n        // Add dotline functionality\n        this.addDotlineListeners(html);\n        // Harm Bar Functionality for Cohorts\n        if (_BladesItem__WEBPACK_IMPORTED_MODULE_3__[\"default\"].IsType(this.item, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_expert, _core_constants__WEBPACK_IMPORTED_MODULE_0__.BladesItemType.cohort_gang)) {\n            html.find(\"[data-harm-click]\").on({\n                click: (event) => {\n                    event.preventDefault();\n                    const harmLevel = _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(event.currentTarget).data(\"harmClick\"));\n                    if (this.item.system.harm?.value !== harmLevel) {\n                        this.item.update({ \"system.harm.value\": harmLevel });\n                    }\n                },\n                contextmenu: (event) => {\n                    event.preventDefault();\n                    const harmLevel = Math.max(0, _core_utilities__WEBPACK_IMPORTED_MODULE_1__[\"default\"].pInt($(event.currentTarget).data(\"harmClick\")) - 1);\n                    if (this.item.system.harm?.value !== harmLevel) {\n                        this.item.update({ \"system.harm.value\": harmLevel });\n                    }\n                }\n            });\n        }\n        // This is a workaround until is being fixed in FoundryVTT.\n        if (this.options.submitOnChange) {\n            html.on(\"change\", \"textarea\", this._onChangeInput.bind(this)); // Use delegated listener on the form\n        }\n        html.find(\".effect-control\").on(\"click\", (ev) => {\n            if (self.item.isOwned) {\n                ui.notifications?.warn(game.i18n.localize(\"BITD.EffectWarning\"));\n                return;\n            }\n            _documents_BladesActiveEffect__WEBPACK_IMPORTED_MODULE_4__[\"default\"].onManageActiveEffect(ev, self.item);\n        });\n        html.find(\"[data-action=\\\"toggle-turf-connection\\\"\").on(\"click\", this.toggleTurfConnection.bind(this));\n    }\n    toggleTurfConnection(event) {\n        const button$ = $(event.currentTarget);\n        const connector$ = button$.parent();\n        const turfNum = parseInt(connector$.data(\"index\") ?? 0, 10);\n        const turfDir = connector$.data(\"dir\");\n        if (!turfNum || !turfDir) {\n            return;\n        }\n        const toggleState = connector$.hasClass(\"no-connect\");\n        const updateData = {\n            [`system.turfs.${turfNum}.connects.${turfDir}`]: toggleState\n        };\n        const partner = connector$.data(\"partner\");\n        if (typeof partner === \"string\" && /-/.test(partner)) {\n            const [partnerNum, partnerDir] = partner.split(\"-\");\n            updateData[`system.turfs.${partnerNum}.connects.${partnerDir}`] = toggleState;\n        }\n        this.item.update(updateData);\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesItemSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/item/BladesItemSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/item/BladesProjectSheet.ts":
/*!**********************************************!*\
  !*** ./ts/sheets/item/BladesProjectSheet.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesItemSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesItemSheet */ \"./ts/sheets/item/BladesItemSheet.ts\");\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n\n\nclass BladesProjectSheet extends _BladesItemSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\", \"project-sheet\"],\n            template: \"systems/eunos-blades/templates/items/project-sheet.hbs\"\n        });\n    }\n    getData() {\n        const context = super.getData();\n        const sheetData = {};\n        sheetData.presentingClock = this.presentedClock;\n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    get presentedClock() {\n        const { clockKey } = this.document;\n        if (!clockKey) {\n            throw new Error(`ClockKey not initialized for Project ${this.document.name}`);\n        }\n        let focusedClockIndex;\n        if (_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isInt(clockKey.displayMode)) {\n            focusedClockIndex = clockKey.displayMode;\n        }\n        else if (clockKey.displayMode === _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKeyDisplayMode.presentCurrentClock) {\n            focusedClockIndex = this.document.currentClock.index;\n        }\n        else if (clockKey.displayMode.startsWith(\"present\")) {\n            focusedClockIndex = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(clockKey.displayMode.slice(7));\n        }\n        else {\n            return false;\n        }\n        return this.document.clockKey.getClockByIndex(focusedClockIndex) ?? false;\n    }\n    getClockKeyComponents(html) {\n        const { clockKey } = this.document;\n        if (!clockKey) {\n            throw new Error(`ClockKey not initialized for Project ${this.document.name}`);\n        }\n        return {\n            clockKey,\n            keyElems$: clockKey.getElements$(html.find(\".clock-key-panel\"))\n        };\n    }\n    switchToPresentAllClocks(clockKey, keyElems$) {\n        const { clocks } = keyElems$;\n        const timeline = clockKey.switchToMode(keyElems$, _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKeyDisplayMode.clocks);\n        // If there are multiple clocks, reveal labels of visible clocks\n        if (clockKey.size > 1) {\n            clockKey.visibleClocks.forEach((clock, i) => {\n                const { clockLabel$ } = clocks[clock.id];\n                timeline.blurReveal(clockLabel$, i === 0\n                    ? \">\"\n                    : \"<+0.05\");\n            });\n        }\n        timeline.play().then(() => {\n            // Change subtitle element to name of current clock\n            if (this._htmlContext && this.document.currentClock) {\n                this._htmlContext.find(\".sheet-subtitle\")\n                    .attr(\"data-action\", \"current-clock-name\")\n                    .val(this.document.currentClock.name);\n            }\n        });\n    }\n    switchToPresentClock(clockRef, clockKey, keyElems$) {\n        const timeline = clockKey.switchToMode(keyElems$, clockRef === _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKeyDisplayMode.presentCurrentClock\n            ? clockRef\n            : (`present${clockRef}`), undefined, undefined, true, () => {\n            eLog.checkLog3(\"BladesProject\", \"Clock Switch\", { clockRef, clockKey, keyElems$, htmlContext: this._htmlContext, presentedClock: this.presentedClock });\n            // Change subtitle element to name of presented clock\n            if (this._htmlContext && this.presentedClock) {\n                this._htmlContext.find(\".sheet-subtitle\")\n                    .attr(\"data-action\", \"presented-clock-name\")\n                    .val(this.presentedClock.name);\n            }\n        });\n        // Fade out any visible label elements\n        timeline.to(keyElems$.container$.find(\".clock-label, .clock-key-label\"), { autoAlpha: 0, duration: 0.5, ease: \"sine\" }, 0);\n        timeline.play().then();\n    }\n    activateClockKeyListeners(clockKey, keyElems$) {\n        eLog.checkLog2(\"BladesProject\", \"Clock Key Data\", { clockKey, keyElems$ });\n        const { container$ } = keyElems$;\n        // Activate pointer events on the container element\n        container$.css(\"pointer-events\", \"auto\");\n        container$.on(\"contextmenu\", () => {\n            this.switchToPresentAllClocks(clockKey, keyElems$);\n        });\n        // Add click listeners for player interaction to clock elements\n        Object.entries(keyElems$.clocks).forEach(([clockId, clockElems$]) => {\n            clockElems$.clockContainer$.css(\"pointer-events\", \"auto\");\n            clockElems$.clockContainer$.on(\"click\", () => {\n                this.switchToPresentClock(clockKey.clocks.get(clockId)?.index ?? _core_constants__WEBPACK_IMPORTED_MODULE_1__.ClockKeyDisplayMode.presentCurrentClock, clockKey, keyElems$);\n            });\n        });\n    }\n    _htmlContext;\n    async activateListeners(html) {\n        this._htmlContext = html;\n        await super.activateListeners(html);\n        // Get clock key and rendered clock key elements\n        const { clockKey, keyElems$ } = this.getClockKeyComponents(html);\n        // Add listener for contextual clock name depending on display mode\n        html.find(\"input.sheet-subtitle\")\n            .on({\n            change: (event) => {\n                event.preventDefault();\n                const action = $(event.currentTarget).data(\"action\");\n                eLog.checkLog3(\"BladesProject\", \"Clock Name Change\", { action, value: $(event.currentTarget).val() });\n                if (action === \"presented-clock-name\" && this.presentedClock) {\n                    this.presentedClock.updateTarget(\"name\", $(event.currentTarget).val());\n                    keyElems$.clocks[this.presentedClock.id].clockLabel$\n                        .text($(event.currentTarget).val());\n                }\n                else if (action === \"current-clock-name\") {\n                    this.document.clockKey.currentClock.updateTarget(\"name\", $(event.currentTarget).val());\n                    keyElems$.clocks[this.document.clockKey.currentClock.id].clockLabel$\n                        .text($(event.currentTarget).val());\n                }\n                clockKey.formatLabels(keyElems$);\n            }\n        });\n        // Initialize clock key elements\n        clockKey.initElementsInContext(html);\n        // Activate listeners for the rendered key\n        this.activateClockKeyListeners(clockKey, keyElems$);\n        // Reveal & activate clocks\n        await Promise.all([\n            ...clockKey.visibleClocks.map((clock) => new Promise((resolve) => {\n                const clockElems$ = keyElems$.clocks[clock.id];\n                clock.reveal_Animation(clockElems$, () => { resolve(); });\n            })),\n            ...clockKey.activeClocks.map((clock) => new Promise((resolve) => {\n                const clockElems$ = keyElems$.clocks[clock.id];\n                clock.activate_Animation(clockElems$, () => { resolve(); });\n            }))\n        ]);\n        // // Animate to present the currently-active clock\n        // clockKey.switchToMode(keyElems$, `present${this.document.currentClock.index}` as ClockKeyDisplayMode)\n        //   .play();\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesProjectSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/item/BladesProjectSheet.ts\n");

/***/ }),

/***/ "./ts/sheets/item/BladesScoreSheet.ts":
/*!********************************************!*\
  !*** ./ts/sheets/item/BladesScoreSheet.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BladesTipContext: function() { return /* binding */ BladesTipContext; },\n/* harmony export */   BladesTipGenerator: function() { return /* binding */ BladesTipGenerator; }\n/* harmony export */ });\n/* harmony import */ var _core_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/utilities */ \"./ts/core/utilities.ts\");\n/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/constants */ \"./ts/core/constants.ts\");\n/* harmony import */ var _BladesItemSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BladesItemSheet */ \"./ts/sheets/item/BladesItemSheet.ts\");\n/* harmony import */ var _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../documents/BladesActorProxy */ \"./ts/documents/BladesActorProxy.ts\");\n/* harmony import */ var _documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../documents/BladesItemProxy */ \"./ts/documents/BladesItemProxy.ts\");\n/* harmony import */ var _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../classes/BladesRoll */ \"./ts/classes/BladesRoll.ts\");\n\n\n\n\n\n\n/* #region BladesTipGenerator */\nvar BladesTipContext;\n(function (BladesTipContext) {\n    BladesTipContext[\"DiceRoll\"] = \"DiceRoll\";\n    BladesTipContext[\"Combat\"] = \"Combat\";\n    BladesTipContext[\"General\"] = \"General\";\n})(BladesTipContext || (BladesTipContext = {}));\nclass BladesTipGenerator {\n    static get Tips() {\n        return {\n            [BladesTipContext.DiceRoll]: [],\n            [BladesTipContext.Combat]: [\n                \"Every combat encounter should advance the main plot, or else it's filler.\",\n                \"Inject dialogue into combat encounters, especially from important adversaries.\",\n                \"Combat encounters should be a challenge, but not a slog. Don't be afraid to end them early.\",\n                \"Infiltrate/Rescue/Destroy: Use these as additional/secondary goals in combat encounters.\",\n                \"Tell the next player in the initiative order that they're on deck.\",\n                \"Don't trigger combats automatically: Use alternate objectives to incite the players to fight, giving them agency.\",\n                \"Add another layer by drawing focus to collateral effects of the combat: a fire, a hostage, a collapsing building, innocents in danger\"\n            ],\n            [BladesTipContext.General]: [\n                \"Rolling the dice always means SOMETHING happens.\",\n                \"Jump straight to the action; don't waste time on establishing scenes or filler.\",\n                \"Invoke elements of characters' backstories or beliefs to make any scene more personal.\"\n            ]\n        };\n    }\n    tipContext;\n    constructor(tipContext) {\n        this.tipContext = tipContext;\n    }\n}\n/* #endregion */\nclass BladesScoreSheet extends _BladesItemSheet__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\", \"score-sheet\"],\n            template: \"systems/eunos-blades/templates/items/score-sheet.hbs\",\n            width: 900,\n            submitOnChange: false,\n            height: 970\n        });\n    }\n    async generateRandomizerData(category) {\n        // Generate full set of random data.\n        const randomData = {\n            Bargains: Object.fromEntries(Object.entries(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sample(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.GM.Bargains\n                .filter((bData) => !Object.values(this.document.system.randomizers.Bargains)\n                .some((_bData) => _bData.name === bData.name || _bData.effect === bData.effect)), 3, true, (e, a) => a\n                .filter((_e) => e.category === _e.category).length === 0))\n                .map(([k, v]) => {\n                k = `${k}`;\n                Object.assign(v, { notes: \"\" });\n                return [k, v];\n            })),\n            Obstacles: Object.fromEntries(Object.entries(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sample(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.GM.Obstacles\n                .filter((bData) => !Object.values(this.document.system.randomizers.Obstacles)\n                .some((_bData) => _bData.name === bData.name || _bData.desc === bData.desc)), 3, true, (e, a) => a\n                .filter((_e) => e.category === _e.category).length === 0))\n                .map(([k, v]) => {\n                k = `${k}`;\n                Object.assign(v, { notes: \"\" });\n                return [k, v];\n            })),\n            NPCs: Object.fromEntries(Object.entries(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sample(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.GM.NPCs\n                .filter((bData) => !Object.values(this.document.system.randomizers.NPCs)\n                .some((_bData) => _bData.name === bData.name\n                || _bData.description === bData.description)), 3, true, (e, a) => a\n                .filter((_e) => e.arena === _e.arena).length === 0))\n                .map(([k, v]) => {\n                k = `${k}`;\n                Object.assign(v, { notes: \"\" });\n                return [k, v];\n            })),\n            Scores: Object.fromEntries(Object.entries(_core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].sample(_core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.GM.Scores\n                .filter((bData) => !Object.values(this.document.system.randomizers.Scores)\n                .some((_bData) => _bData.name === bData.name || _bData.desc === bData.desc)), 3, true, (e, a) => a\n                .filter((_e) => e.category === _e.category).length === 0))\n                .map(([k, v]) => {\n                k = `${k}`;\n                Object.assign(v, { notes: \"\" });\n                return [k, v];\n            }))\n        };\n        // If category specified, replace all other categories with stored data\n        if (category) {\n            Object.keys(randomData)\n                .filter((cat) => cat !== category)\n                .forEach((cat) => {\n                const _cat = cat;\n                randomData[_cat] = this.document.system.randomizers[_cat];\n            });\n        }\n        // Combine locked data stored in system with randomly-generated data\n        const finalRandomData = {\n            Bargains: {},\n            Obstacles: {},\n            NPCs: {},\n            Scores: {}\n        };\n        // Iterate through all randomizer categories. If system entry isLocked, use that, or use newly-generated data\n        Object.keys(randomData).forEach((cat) => {\n            const _cat = cat;\n            Object.keys(randomData[_cat]).forEach((index) => {\n                if (this.document.system.randomizers?.[_cat][index].isLocked) {\n                    finalRandomData[_cat][index] = this.document.system.randomizers[_cat][index];\n                }\n                else {\n                    finalRandomData[_cat][index] = randomData[_cat][index];\n                }\n            });\n        });\n        // Overwrite stored data with newly generated & merged randomizer data\n        await this.document.update({ \"system.randomizers\": finalRandomData });\n    }\n    getData() {\n        const context = super.getData();\n        const sheetData = {};\n        // Get player characters, assign simplified actionData that I probably should have coded them with from the start\n        sheetData.playerCharacters = _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.GetTypeWithTags(_core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc, _core_constants__WEBPACK_IMPORTED_MODULE_1__.Tag.PC.ActivePC)\n            .map((pc) => {\n            return Object.assign(pc, {\n                actionData: Object.fromEntries(Object.entries(pc.system.attributes)\n                    .map(([attrName, attrData]) => {\n                    return [\n                        attrName,\n                        Object.fromEntries(Object.entries(attrData)\n                            .map(([actionName, actionData]) => {\n                            return [\n                                _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].uCase(actionName).slice(0, 3),\n                                actionData\n                            ];\n                        }))\n                    ];\n                }))\n            });\n        });\n        // Prune system data for blank/empty opposition entries\n        const validOppositions = {};\n        for (const [id, data] of Object.entries(context.system.oppositions)) {\n            if (!data.rollOppName && !data.rollOppSubName) {\n                continue;\n            }\n            validOppositions[id] = data;\n        }\n        context.system.oppositions = validOppositions;\n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    _toggleRandomizerLock(event) {\n        const elem$ = $(event.currentTarget);\n        const elemCat = elem$.data(\"category\");\n        const elemIndex = `${elem$.data(\"index\")}`;\n        const elemValue = elem$.data(\"value\");\n        if (`${elemValue}` === \"true\") {\n            this.document.update({ [`system.randomizers.${elemCat}.${elemIndex}.isLocked`]: false });\n        }\n        else {\n            this.document.update({ [`system.randomizers.${elemCat}.${elemIndex}.isLocked`]: true });\n        }\n    }\n    _selectImage(event) {\n        const elem$ = $(event.currentTarget);\n        const imageNum = elem$.data(\"imgNum\");\n        this.document.update({ \"system.imageSelected\": imageNum });\n    }\n    _deselectOrDeleteImage(event) {\n        const elem$ = $(event.currentTarget);\n        const imageNum = elem$.data(\"imgNum\");\n        if (this.document.system.imageSelected === imageNum) {\n            this.document.update({ \"system.-=imageSelected\": null });\n            return;\n        }\n        const images = { ...this.document.system.images };\n        this.document.update({ \"system.-=images\": null }).then(() => this.document.update({\n            \"system.images\": Object.fromEntries(Object.entries(Object.values(images)\n                .filter((_, i) => _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pInt(imageNum) !== i)))\n        }));\n    }\n    _addImage() {\n        _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].displayImageSelector((path) => {\n            const imgIndex = _core_utilities__WEBPACK_IMPORTED_MODULE_0__[\"default\"].objSize(this.document.system.images);\n            return this.document.update({ [`system.images.${imgIndex}`]: path });\n        }, \"systems/eunos-blades/assets\", this.position);\n    }\n    _selectRollOpposition(event) {\n        eLog.checkLog3(\"Select Roll Opposition\", { event });\n        const elem$ = $(event.currentTarget);\n        const oppId = elem$.data(\"oppId\");\n        this.document.update({ \"system.oppositionSelected\": oppId });\n        if (_documents_BladesItemProxy__WEBPACK_IMPORTED_MODULE_4__.BladesScore.Active?.id === this.document.id && _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Active) {\n            _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Active.rollOpposition = new _classes_BladesRoll__WEBPACK_IMPORTED_MODULE_5__.BladesRollOpposition(_classes_BladesRoll__WEBPACK_IMPORTED_MODULE_5__[\"default\"].Active, this.document.system.oppositions[oppId]);\n        }\n    }\n    _triggerRandomize(event) {\n        const elem$ = $(event.currentTarget);\n        const category = elem$.data(\"category\");\n        if (category && category in _core_constants__WEBPACK_IMPORTED_MODULE_1__.Randomizers.GM) {\n            this.generateRandomizerData(category);\n        }\n        else {\n            this.generateRandomizerData();\n        }\n    }\n    async _updateGMNotesOnPC(event) {\n        const elem$ = $(event.currentTarget);\n        const actor = _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.Get(elem$.data(\"id\"));\n        if (!actor) {\n            throw new Error(`Unable to retrieve actor with id '${elem$.data(\"id\")}'`);\n        }\n        const updateText = event.currentTarget.innerHTML;\n        eLog.checkLog3(\"scoreSheet\", \"Retrieved Text, Updating ...\", { updateText });\n        await actor.update({ \"system.gm_notes\": updateText });\n        eLog.checkLog3(\"scoreSheet\", \"Updated!\", { gm_notes: actor.system.gm_notes });\n    }\n    async activateListeners(html) {\n        super.activateListeners(html);\n        html.find(\"[data-action='select-image']\").on({\n            click: this._selectImage.bind(this),\n            contextmenu: this._deselectOrDeleteImage.bind(this)\n        });\n        html.find(\"[data-action='add-image']\").on({\n            click: this._addImage.bind(this)\n        });\n        html.find(\".roll-opposition-name\").on({\n            dblclick: this._selectRollOpposition.bind(this)\n        });\n        html.find(\".toggle-lock\").on({\n            click: this._toggleRandomizerLock.bind(this)\n        });\n        html.find(\"[data-action='randomize'\").on({\n            click: this._triggerRandomize.bind(this)\n        });\n        html.find(\"textarea.pc-summary-notes-body\").on({\n            change: this._updateGMNotesOnPC.bind(this)\n        });\n    }\n    async _onSubmit(event, params = {}) {\n        // eLog.checkLog3(\"scoreSheet\", \"_onSubmit()\", {event, params, elemText: event.currentTarget.innerHTML});\n        let isForcingRender = true;\n        const prevPhase = this.item.system.phase;\n        const submitData = await super._onSubmit(event, params);\n        const newPhase = this.item.system.phase;\n        if (prevPhase !== newPhase) {\n            switch (prevPhase) {\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.CharGen: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Freeplay: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Score: {\n                    isForcingRender = false;\n                    game.actors.filter((actor) => _documents_BladesActorProxy__WEBPACK_IMPORTED_MODULE_3__.BladesActor.IsType(actor, _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc))\n                        .forEach((actor) => actor.clearLoadout());\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Downtime: {\n                    break;\n                }\n                // No default\n            }\n            switch (newPhase) {\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.CharGen: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Freeplay: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Score: {\n                    break;\n                }\n                case _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesPhase.Downtime: {\n                    break;\n                }\n                // No default\n            }\n        }\n        if (isForcingRender) {\n            game.actors.filter((actor) => actor.type === _core_constants__WEBPACK_IMPORTED_MODULE_1__.BladesActorType.pc)\n                .forEach((actor) => actor.sheet?.render());\n        }\n        return submitData;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (BladesScoreSheet);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./ts/sheets/item/BladesScoreSheet.ts\n");

/***/ }),

/***/ "gsap/all":
/*!***********************!*\
  !*** external "gsap" ***!
  \***********************/
/***/ (function(module) {

module.exports = gsap;

/***/ }),

/***/ "./lib/tagify/tagify.esm.js":
/*!**********************************!*\
  !*** ./lib/tagify/tagify.esm.js ***!
  \**********************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Tagify; }\n/* harmony export */ });\nfunction _defineProperty2(obj, key, value) { key = _toPropertyKey2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey2(t) { var i = _toPrimitive2(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive2(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n * Tagify (v 4.17.8) - tags input component\n * By undefined\n * https://github.com/yairEO/tagify\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.\n */\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\n// console.json = console.json || function(argument){\n//     for(var arg=0; arg < arguments.length; ++arg)\n//         console.log(  JSON.stringify(arguments[arg], null, 4)  )\n// }\n\n// const isEdge = /Edge/.test(navigator.userAgent)\nvar sameStr = function sameStr(s1, s2, caseSensitive, trim) {\n  // cast to String\n  s1 = \"\" + s1;\n  s2 = \"\" + s2;\n  if (trim) {\n    s1 = s1.trim();\n    s2 = s2.trim();\n  }\n  return caseSensitive ? s1 == s2 : s1.toLowerCase() == s2.toLowerCase();\n};\n\n// const getUID = () => (new Date().getTime() + Math.floor((Math.random()*10000)+1)).toString(16)\nvar removeCollectionProp = function removeCollectionProp(collection, unwantedProps) {\n  return collection && Array.isArray(collection) && collection.map(function (v) {\n    return omit(v, unwantedProps);\n  });\n};\nfunction omit(obj, props) {\n  var newObj = {},\n    p;\n  for (p in obj) if (props.indexOf(p) < 0) newObj[p] = obj[p];\n  return newObj;\n}\nfunction decode(s) {\n  var el = document.createElement('div');\n  return s.replace(/\\&#?[0-9a-z]+;/gi, function (enc) {\n    el.innerHTML = enc;\n    return el.innerText;\n  });\n}\n\n/**\r\n * utility method\r\n * https://stackoverflow.com/a/35385518/104380\r\n * @param  {String} s [HTML string]\r\n * @return {Object}   [DOM node]\r\n */\nfunction parseHTML(s) {\n  var parser = new DOMParser(),\n    node = parser.parseFromString(s.trim(), \"text/html\");\n  return node.body.firstElementChild;\n}\n\n/**\r\n * Removed new lines and irrelevant spaces which might affect layout, and are better gone\r\n * @param {string} s [HTML string]\r\n */\nfunction minify(s) {\n  return s ? s.replace(/\\>[\\r\\n ]+\\</g, \"><\").replace(/(<.*?>)|\\s+/g, function (m, $1) {\n    return $1 ? $1 : ' ';\n  }) // https://stackoverflow.com/a/44841484/104380\n  : \"\";\n}\nfunction removeTextChildNodes(elm) {\n  var iter = document.createNodeIterator(elm, NodeFilter.SHOW_TEXT, null, false),\n    textnode;\n\n  // print all text nodes\n  while (textnode = iter.nextNode()) {\n    if (!textnode.textContent.trim()) textnode.parentNode.removeChild(textnode);\n  }\n}\nfunction getfirstTextNode(elm, action) {\n  action = action || 'previous';\n  while (elm = elm[action + 'Sibling']) if (elm.nodeType == 3) return elm;\n}\n\n/**\r\n * utility method\r\n * https://stackoverflow.com/a/6234804/104380\r\n */\nfunction escapeHTML(s) {\n  return typeof s == 'string' ? s.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/`|'/g, \"&#039;\") : s;\n}\n\n/**\r\n * Checks if an argument is a javascript Object\r\n */\nfunction isObject(obj) {\n  var type = Object.prototype.toString.call(obj).split(' ')[1].slice(0, -1);\n  return obj === Object(obj) && type != 'Array' && type != 'Function' && type != 'RegExp' && type != 'HTMLUnknownElement';\n}\n\n/**\r\n * merge objects into a single new one\r\n * TEST: extend({}, {a:{foo:1}, b:[]}, {a:{bar:2}, b:[1], c:()=>{}})\r\n */\nfunction extend(o, o1, o2) {\n  if (!(o instanceof Object)) o = {};\n  copy(o, o1);\n  if (o2) copy(o, o2);\n  function copy(a, b) {\n    // copy o2 to o\n    for (var key in b) if (b.hasOwnProperty(key)) {\n      if (isObject(b[key])) {\n        if (!isObject(a[key])) a[key] = Object.assign({}, b[key]);else copy(a[key], b[key]);\n        continue;\n      }\n      if (Array.isArray(b[key])) {\n        a[key] = Object.assign([], b[key]);\n        continue;\n      }\n      a[key] = b[key];\n    }\n  }\n  return o;\n}\n\n/**\r\n * concatenates N arrays without dups.\r\n * If an array's item is an Object, compare by `value`\r\n */\nfunction concatWithoutDups() {\n  var newArr = [],\n    existingObj = {};\n  var _iterator = _createForOfIteratorHelper(arguments),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var arr = _step.value;\n      var _iterator2 = _createForOfIteratorHelper(arr),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          // if current item is an object which has yet to be added to the new array\n          if (isObject(item)) {\n            if (!existingObj[item.value]) {\n              newArr.push(item);\n              existingObj[item.value] = 1;\n            }\n          }\n\n          // if current item is not an object and is not in the new array\n          else if (!newArr.includes(item)) newArr.push(item);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return newArr;\n}\n\n/**\r\n *  Extracted from: https://stackoverflow.com/a/37511463/104380\r\n * @param {String} s\r\n */\nfunction unaccent(s) {\n  // if not supported, do not continue.\n  // developers should use a polyfill:\n  // https://github.com/walling/unorm\n  if (!String.prototype.normalize) return s;\n  if (typeof s === 'string') return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n}\n\n/**\r\n * Meassures an element's height, which might yet have been added DOM\r\n * https://stackoverflow.com/q/5944038/104380\r\n * @param {DOM} node\r\n */\nfunction getNodeHeight(node) {\n  var height,\n    clone = node.cloneNode(true);\n  clone.style.cssText = \"position:fixed; top:-9999px; opacity:0\";\n  document.body.appendChild(clone);\n  height = clone.clientHeight;\n  clone.parentNode.removeChild(clone);\n  return height;\n}\nvar isChromeAndroidBrowser = function isChromeAndroidBrowser() {\n  return /(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);\n};\nfunction getUID() {\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {\n    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);\n  });\n}\nfunction isNodeTag(node) {\n  return node && node.classList && node.classList.contains(this.settings.classNames.tag);\n}\n\n/**\r\n* Get the caret position relative to the viewport\r\n* https://stackoverflow.com/q/58985076/104380\r\n*\r\n* @returns {object} left, top distance in pixels\r\n*/\nfunction getCaretGlobalPosition() {\n  var sel = document.getSelection();\n  if (sel.rangeCount) {\n    var r = sel.getRangeAt(0);\n    var node = r.startContainer;\n    var offset = r.startOffset;\n    var rect, r2;\n    if (offset > 0) {\n      r2 = document.createRange();\n      r2.setStart(node, offset - 1);\n      r2.setEnd(node, offset);\n      rect = r2.getBoundingClientRect();\n      return {\n        left: rect.right,\n        top: rect.top,\n        bottom: rect.bottom\n      };\n    }\n    if (node.getBoundingClientRect) return node.getBoundingClientRect();\n  }\n  return {\n    left: -9999,\n    top: -9999\n  };\n}\n\n/**\r\n * Injects content (either string or node) at the current the current (or specificed) caret position\r\n * @param {content} string/node\r\n * @param {range} Object (optional, a range other than the current window selection)\r\n */\nfunction _injectAtCaret(content, range) {\n  var selection = window.getSelection();\n  range = range || selection.getRangeAt(0);\n  if (typeof content == 'string') content = document.createTextNode(content);\n  if (range) {\n    range.deleteContents();\n    range.insertNode(content);\n  }\n  return content;\n}\n\n/** Setter/Getter\r\n * Each tag DOM node contains a custom property called \"__tagifyTagData\" which hosts its data\r\n * @param {Node}   tagElm\r\n * @param {Object} data\r\n */\nfunction getSetTagData(tagElm, data, override) {\n  if (!tagElm) {\n    console.warn(\"tag element doesn't exist\", tagElm, data);\n    return data;\n  }\n  if (data) tagElm.__tagifyTagData = override ? data : extend({}, tagElm.__tagifyTagData || {}, data);\n  return tagElm.__tagifyTagData;\n}\nvar DEFAULTS = {\n  delimiters: \",\",\n  // [RegEx] split tags by any of these delimiters (\"null\" to cancel) Example: \",| |.\"\n  pattern: null,\n  // RegEx pattern to validate input by. Ex: /[1-9]/\n  tagTextProp: 'value',\n  // tag data Object property which will be displayed as the tag's text\n  maxTags: Infinity,\n  // Maximum number of tags\n  callbacks: {},\n  // Exposed callbacks object to be triggered on certain events\n  addTagOnBlur: true,\n  // automatically adds the text which was inputed as a tag when blur event happens\n  onChangeAfterBlur: true,\n  // By default, the native way of inputs' onChange events is kept, and it only fires when the field is blured.\n  duplicates: false,\n  // \"true\" - allow duplicate tags\n  whitelist: [],\n  // Array of tags to suggest as the user types (can be used along with \"enforceWhitelist\" setting)\n  blacklist: [],\n  // A list of non-allowed tags\n  enforceWhitelist: false,\n  // Only allow tags from the whitelist\n  userInput: true,\n  // disable manually typing/pasting/editing tags (tags may only be added from the whitelist)\n  keepInvalidTags: false,\n  // if true, do not remove tags which did not pass validation\n  createInvalidTags: true,\n  // if false, do not create invalid tags from invalid user input\n  mixTagsAllowedAfter: /,|\\.|\\:|\\s/,\n  // RegEx - Define conditions in which mix-tags content allows a tag to be added after\n  mixTagsInterpolator: ['[[', ']]'],\n  // Interpolation for mix mode. Everything between these will become a tag, if is a valid Object\n  backspace: true,\n  // false / true / \"edit\"\n  skipInvalid: false,\n  // If `true`, do not add invalid, temporary, tags before automatically removing them\n  pasteAsTags: true,\n  // automatically converts pasted text into tags. if \"false\", allows for further text editing\n\n  editTags: {\n    clicks: 2,\n    // clicks to enter \"edit-mode\": 1 for single click. any other value is considered as double-click\n    keepInvalid: true // keeps invalid edits as-is until `esc` is pressed while in focus\n  },\n  // 1 or 2 clicks to edit a tag. false/null for not allowing editing\n  transformTag: function transformTag() {},\n  // Takes a tag input string as argument and returns a transformed value\n  trim: true,\n  // whether or not the value provided should be trimmed, before being added as a tag\n  a11y: {\n    focusableTags: false\n  },\n  mixMode: {\n    insertAfterTag: \"\\xA0\" // String/Node to inject after a tag has been added (see #588)\n  },\n  autoComplete: {\n    enabled: true,\n    // Tries to suggest the input's value while typing (match from whitelist) by adding the rest of term as grayed-out text\n    rightKey: false // If `true`, when Right key is pressed, use the suggested value to create a tag, else just auto-completes the input. in mixed-mode this is set to \"true\"\n  },\n  classNames: {\n    namespace: 'tagify',\n    mixMode: 'tagify--mix',\n    selectMode: 'tagify--select',\n    input: 'tagify__input',\n    focus: 'tagify--focus',\n    tagNoAnimation: 'tagify--noAnim',\n    tagInvalid: 'tagify--invalid',\n    tagNotAllowed: 'tagify--notAllowed',\n    scopeLoading: 'tagify--loading',\n    hasMaxTags: 'tagify--hasMaxTags',\n    hasNoTags: 'tagify--noTags',\n    empty: 'tagify--empty',\n    inputInvalid: 'tagify__input--invalid',\n    dropdown: 'tagify__dropdown',\n    dropdownWrapper: 'tagify__dropdown__wrapper',\n    dropdownHeader: 'tagify__dropdown__header',\n    dropdownFooter: 'tagify__dropdown__footer',\n    dropdownItem: 'tagify__dropdown__item',\n    dropdownItemActive: 'tagify__dropdown__item--active',\n    dropdownItemHidden: 'tagify__dropdown__item--hidden',\n    dropdownInital: 'tagify__dropdown--initial',\n    tag: 'tagify__tag',\n    tagText: 'tagify__tag-text',\n    tagX: 'tagify__tag__removeBtn',\n    tagLoading: 'tagify__tag--loading',\n    tagEditing: 'tagify__tag--editable',\n    tagFlash: 'tagify__tag--flash',\n    tagHide: 'tagify__tag--hide'\n  },\n  dropdown: {\n    classname: '',\n    enabled: 2,\n    // minimum input characters to be typed for the suggestions dropdown to show\n    maxItems: 10,\n    searchKeys: [\"value\", \"searchBy\"],\n    fuzzySearch: true,\n    caseSensitive: false,\n    accentedSearch: true,\n    includeSelectedTags: false,\n    // Should the suggestions list Include already-selected tags (after filtering)\n    highlightFirst: false,\n    // highlights first-matched item in the list\n    closeOnSelect: true,\n    // closes the dropdown after selecting an item, if `enabled:0` (which means always show dropdown)\n    clearOnSelect: true,\n    // after selecting a suggetion, should the typed text input remain or be cleared\n    position: 'all',\n    // 'manual' / 'text' / 'all'\n    appendTarget: null // defaults to document.body once DOM has been loaded\n  },\n  hooks: {\n    beforeRemoveTag: function beforeRemoveTag() {\n      return Promise.resolve();\n    },\n    beforePaste: function beforePaste() {\n      return Promise.resolve();\n    },\n    suggestionClick: function suggestionClick() {\n      return Promise.resolve();\n    }\n  }\n};\nfunction initDropdown() {\n  this.dropdown = {};\n\n  // auto-bind \"this\" to all the dropdown methods\n  for (var p in this._dropdown) this.dropdown[p] = typeof this._dropdown[p] === 'function' ? this._dropdown[p].bind(this) : this._dropdown[p];\n  this.dropdown.refs();\n}\nvar _dropdown = {\n  refs: function refs() {\n    this.DOM.dropdown = this.parseTemplate('dropdown', [this.settings]);\n    this.DOM.dropdown.content = this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\");\n  },\n  getHeaderRef: function getHeaderRef() {\n    return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\");\n  },\n  getFooterRef: function getFooterRef() {\n    return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\");\n  },\n  getAllSuggestionsRefs: function getAllSuggestionsRefs() {\n    return _toConsumableArray(this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector));\n  },\n  /**\r\n   * shows the suggestions select box\r\n   * @param {String} value [optional, filter the whitelist by this value]\r\n   */\n  show: function show(value) {\n    var _this2 = this;\n    var _s = this.settings,\n      firstListItem,\n      firstListItemValue,\n      allowNewTags = _s.mode == 'mix' && !_s.enforceWhitelist,\n      noWhitelist = !_s.whitelist || !_s.whitelist.length,\n      noMatchListItem,\n      isManual = _s.dropdown.position == 'manual';\n\n    // if text still exists in the input, and `show` method has no argument, then the input's text should be used\n    value = value === undefined ? this.state.inputText : value;\n\n    // ⚠️ Do not render suggestions list  if:\n    // 1. there's no whitelist (can happen while async loading) AND new tags arn't allowed\n    // 2. dropdown is disabled\n    // 3. loader is showing (controlled outside of this code)\n    if (noWhitelist && !allowNewTags && !_s.templates.dropdownItemNoMatch || _s.dropdown.enable === false || this.state.isLoading || this.settings.readonly) return;\n    clearTimeout(this.dropdownHide__bindEventsTimeout);\n\n    // if no value was supplied, show all the \"whitelist\" items in the dropdown\n    // @type [Array] listItems\n    // TODO: add a Setting to control items' sort order for \"listItems\"\n    this.suggestedListItems = this.dropdown.filterListItems(value);\n\n    // trigger at this exact point to let the developer the chance to manually set \"this.suggestedListItems\"\n    if (value && !this.suggestedListItems.length) {\n      this.trigger('dropdown:noMatch', value);\n      if (_s.templates.dropdownItemNoMatch) noMatchListItem = _s.templates.dropdownItemNoMatch.call(this, {\n        value: value\n      });\n    }\n\n    // if \"dropdownItemNoMatch\" was no defined, procceed regular flow.\n    //\n    if (!noMatchListItem) {\n      // in mix-mode, if the value isn't included in the whilelist & \"enforceWhitelist\" setting is \"false\",\n      // then add a custom suggestion item to the dropdown\n      if (this.suggestedListItems.length) {\n        if (value && allowNewTags && !this.state.editing.scope && !sameStr(this.suggestedListItems[0].value, value)) this.suggestedListItems.unshift({\n          value: value\n        });\n      } else {\n        if (value && allowNewTags && !this.state.editing.scope) {\n          this.suggestedListItems = [{\n            value: value\n          }];\n        }\n        // hide suggestions list if no suggestion matched\n        else {\n          this.input.autocomplete.suggest.call(this);\n          this.dropdown.hide();\n          return;\n        }\n      }\n      firstListItem = this.suggestedListItems[0];\n      firstListItemValue = \"\" + (isObject(firstListItem) ? firstListItem.value : firstListItem);\n      if (_s.autoComplete && firstListItemValue) {\n        // only fill the sugegstion if the value of the first list item STARTS with the input value (regardless of \"fuzzysearch\" setting)\n        if (firstListItemValue.indexOf(value) == 0) this.input.autocomplete.suggest.call(this, firstListItem);\n      }\n    }\n    this.dropdown.fill(noMatchListItem);\n    if (_s.dropdown.highlightFirst) {\n      this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(_s.classNames.dropdownItemSelector));\n    }\n\n    // bind events, exactly at this stage of the code. \"dropdown.show\" method is allowed to be\n    // called multiple times, regardless if the dropdown is currently visible, but the events-binding\n    // should only be called if the dropdown wasn't previously visible.\n    if (!this.state.dropdown.visible)\n      // timeout is needed for when pressing arrow down to show the dropdown,\n      // so the key event won't get registered in the dropdown events listeners\n      setTimeout(this.dropdown.events.binding.bind(this));\n\n    // set the dropdown visible state to be the same as the searched value.\n    // MUST be set *before* position() is called\n    this.state.dropdown.visible = value || true;\n    this.state.dropdown.query = value;\n    this.setStateSelection();\n\n    // try to positioning the dropdown (it might not yet be on the page, doesn't matter, next code handles this)\n    if (!isManual) {\n      // a slight delay is needed if the dropdown \"position\" setting is \"text\", and nothing was typed in the input,\n      // so sadly the \"getCaretGlobalPosition\" method doesn't recognize the caret position without this delay\n      setTimeout(function () {\n        _this2.dropdown.position();\n        _this2.dropdown.render();\n      });\n    }\n\n    // a delay is needed because of the previous delay reason.\n    // this event must be fired after the dropdown was rendered & positioned\n    setTimeout(function () {\n      _this2.trigger(\"dropdown:show\", _this2.DOM.dropdown);\n    });\n  },\n  /**\r\n   * Hides the dropdown (if it's not managed manually by the developer)\r\n   * @param {Boolean} overrideManual\r\n   */\n  hide: function hide(overrideManual) {\n    var _this3 = this;\n    var _this$DOM = this.DOM,\n      scope = _this$DOM.scope,\n      dropdown = _this$DOM.dropdown,\n      isManual = this.settings.dropdown.position == 'manual' && !overrideManual;\n\n    // if there's no dropdown, this means the dropdown events aren't binded\n    if (!dropdown || !document.body.contains(dropdown) || isManual) return;\n    window.removeEventListener('resize', this.dropdown.position);\n    this.dropdown.events.binding.call(this, false); // unbind all events\n\n    // if the dropdown is open, and the input (scope) is clicked,\n    // the dropdown should be now \"close\", and the next click (on the scope)\n    // should re-open it, and without a timeout, clicking to close will re-open immediately\n    //  clearTimeout(this.dropdownHide__bindEventsTimeout)\n    //  this.dropdownHide__bindEventsTimeout = setTimeout(this.events.binding.bind(this), 250)  // re-bind main events\n\n    scope.setAttribute(\"aria-expanded\", false);\n    dropdown.parentNode.removeChild(dropdown);\n\n    // scenario: clicking the scope to show the dropdown, clicking again to hide -> calls dropdown.hide() and then re-focuses the input\n    // which casues another onFocus event, which checked \"this.state.dropdown.visible\" and see it as \"false\" and re-open the dropdown\n    setTimeout(function () {\n      _this3.state.dropdown.visible = false;\n    }, 100);\n    this.state.dropdown.query = this.state.ddItemData = this.state.ddItemElm = this.state.selection = null;\n\n    // if the user closed the dropdown (in mix-mode) while a potential tag was detected, flag the current tag\n    // so the dropdown won't be shown on following user input for that \"tag\"\n    if (this.state.tag && this.state.tag.value.length) {\n      this.state.flaggedTags[this.state.tag.baseOffset] = this.state.tag;\n    }\n    this.trigger(\"dropdown:hide\", dropdown);\n    return this;\n  },\n  /**\r\n   * Toggles dropdown show/hide\r\n   * @param {Boolean} show forces the dropdown to show\r\n   */\n  toggle: function toggle(show) {\n    this.dropdown[this.state.dropdown.visible && !show ? 'hide' : 'show']();\n  },\n  render: function render() {\n    var _this4 = this;\n    // let the element render in the DOM first, to accurately measure it.\n    // this.DOM.dropdown.style.cssText = \"left:-9999px; top:-9999px;\";\n    var ddHeight = getNodeHeight(this.DOM.dropdown),\n      _s = this.settings,\n      enabled = typeof _s.dropdown.enabled == 'number' && _s.dropdown.enabled >= 0;\n    if (!enabled) return this;\n    this.DOM.scope.setAttribute(\"aria-expanded\", true);\n\n    // if the dropdown has yet to be appended to the DOM,\n    // append the dropdown to the body element & handle events\n    if (!document.body.contains(this.DOM.dropdown)) {\n      this.DOM.dropdown.classList.add(_s.classNames.dropdownInital);\n      this.dropdown.position(ddHeight);\n      _s.dropdown.appendTarget.appendChild(this.DOM.dropdown);\n      setTimeout(function () {\n        return _this4.DOM.dropdown.classList.remove(_s.classNames.dropdownInital);\n      });\n    }\n    return this;\n  },\n  /**\r\n   * re-renders the dropdown content element (see \"dropdownContent\" in templates file)\r\n   * @param {String/Array} HTMLContent - optional\r\n   */\n  fill: function fill(HTMLContent) {\n    HTMLContent = typeof HTMLContent == 'string' ? HTMLContent : this.dropdown.createListHTML(HTMLContent || this.suggestedListItems);\n    var dropdownContent = this.settings.templates.dropdownContent.call(this, HTMLContent);\n    this.DOM.dropdown.content.innerHTML = minify(dropdownContent);\n  },\n  /**\r\n   * Re-renders only the header & footer.\r\n   * Used when selecting a suggestion and it is wanted that the suggestions dropdown stays open.\r\n   * Since the list of sugegstions is not being re-rendered completely every time a suggestion is selected (the item is transitioned-out)\r\n   * then the header & footer should be kept in sync with the suggestions data change\r\n   */\n  fillHeaderFooter: function fillHeaderFooter() {\n    var suggestions = this.dropdown.filterListItems(this.state.dropdown.query),\n      newHeaderElem = this.parseTemplate('dropdownHeader', [suggestions]),\n      newFooterElem = this.parseTemplate('dropdownFooter', [suggestions]),\n      headerRef = this.dropdown.getHeaderRef(),\n      footerRef = this.dropdown.getFooterRef();\n    newHeaderElem && (headerRef === null || headerRef === void 0 ? void 0 : headerRef.parentNode.replaceChild(newHeaderElem, headerRef));\n    newFooterElem && (footerRef === null || footerRef === void 0 ? void 0 : footerRef.parentNode.replaceChild(newFooterElem, footerRef));\n  },\n  /**\r\n   * fill data into the suggestions list\r\n   * (mainly used to update the list when removing tags while the suggestions dropdown is visible, so they will be re-added to the list. not efficient)\r\n   */\n  refilter: function refilter(value) {\n    value = value || this.state.dropdown.query || '';\n    this.suggestedListItems = this.dropdown.filterListItems(value);\n    this.dropdown.fill();\n    if (!this.suggestedListItems.length) this.dropdown.hide();\n    this.trigger(\"dropdown:updated\", this.DOM.dropdown);\n  },\n  position: function position(ddHeight) {\n    var _sd = this.settings.dropdown;\n    if (_sd.position == 'manual') return;\n    var rect,\n      top,\n      bottom,\n      left,\n      width,\n      parentsPositions,\n      ddElm = this.DOM.dropdown,\n      placeAbove = _sd.placeAbove,\n      isDefaultAppendTarget = _sd.appendTarget === document.body,\n      appendTargetScrollTop = isDefaultAppendTarget ? window.pageYOffset : _sd.appendTarget.scrollTop,\n      root = document.fullscreenElement || document.webkitFullscreenElement || document.documentElement,\n      viewportHeight = root.clientHeight,\n      viewportWidth = Math.max(root.clientWidth || 0, window.innerWidth || 0),\n      positionTo = viewportWidth > 480 ? _sd.position : 'all',\n      ddTarget = this.DOM[positionTo == 'input' ? 'input' : 'scope'];\n    ddHeight = ddHeight || ddElm.clientHeight;\n    function getParentsPositions(p) {\n      var left = 0,\n        top = 0;\n\n      // when in element-fullscreen mode, do not go above the fullscreened-element\n      while (p && p != root) {\n        left += p.offsetLeft || 0;\n        top += p.offsetTop || 0;\n        p = p.parentNode;\n      }\n      return {\n        left: left,\n        top: top\n      };\n    }\n    function getAccumulatedAncestorsScrollTop() {\n      var scrollTop = 0,\n        p = _sd.appendTarget.parentNode;\n      while (p) {\n        scrollTop += p.scrollTop || 0;\n        p = p.parentNode;\n      }\n      return scrollTop;\n    }\n    if (!this.state.dropdown.visible) return;\n    if (positionTo == 'text') {\n      rect = getCaretGlobalPosition();\n      bottom = rect.bottom;\n      top = rect.top;\n      left = rect.left;\n      width = 'auto';\n    } else {\n      parentsPositions = getParentsPositions(_sd.appendTarget);\n      rect = ddTarget.getBoundingClientRect();\n      top = rect.top - parentsPositions.top;\n      bottom = rect.bottom - 1 - parentsPositions.top;\n      left = rect.left - parentsPositions.left;\n      width = rect.width + 'px';\n    }\n\n    // if the \"append target\" isn't the default, correct the `top` variable by ignoring any scrollTop of the target's Ancestors\n    if (!isDefaultAppendTarget) {\n      var accumulatedAncestorsScrollTop = getAccumulatedAncestorsScrollTop();\n      top += accumulatedAncestorsScrollTop;\n      bottom += accumulatedAncestorsScrollTop;\n    }\n    top = Math.floor(top);\n    bottom = Math.ceil(bottom);\n    placeAbove = placeAbove === undefined ? viewportHeight - rect.bottom < ddHeight : placeAbove;\n\n    // flip vertically if there is no space for the dropdown below the input\n    ddElm.style.cssText = \"left:\" + (left + window.pageXOffset) + \"px; width:\" + width + \";\" + (placeAbove ? \"top: \" + (top + appendTargetScrollTop) + \"px\" : \"top: \" + (bottom + appendTargetScrollTop) + \"px\");\n    ddElm.setAttribute('placement', placeAbove ? \"top\" : \"bottom\");\n    ddElm.setAttribute('position', positionTo);\n  },\n  events: {\n    /**\r\n     * Events should only be binded when the dropdown is rendered and removed when isn't\r\n     * because there might be multiple Tagify instances on a certain page\r\n     * @param  {Boolean} bindUnbind [optional. true when wanting to unbind all the events]\r\n     */\n    binding: function binding() {\n      var bindUnbind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      // references to the \".bind()\" methods must be saved so they could be unbinded later\n      var _CB = this.dropdown.events.callbacks,\n        // callback-refs\n        _CBR = this.listeners.dropdown = this.listeners.dropdown || {\n          position: this.dropdown.position.bind(this, null),\n          onKeyDown: _CB.onKeyDown.bind(this),\n          onMouseOver: _CB.onMouseOver.bind(this),\n          onMouseLeave: _CB.onMouseLeave.bind(this),\n          onClick: _CB.onClick.bind(this),\n          onScroll: _CB.onScroll.bind(this)\n        },\n        action = bindUnbind ? 'addEventListener' : 'removeEventListener';\n      if (this.settings.dropdown.position != 'manual') {\n        document[action]('scroll', _CBR.position, true);\n        window[action]('resize', _CBR.position);\n        window[action]('keydown', _CBR.onKeyDown);\n      }\n      this.DOM.dropdown[action]('mouseover', _CBR.onMouseOver);\n      this.DOM.dropdown[action]('mouseleave', _CBR.onMouseLeave);\n      this.DOM.dropdown[action]('mousedown', _CBR.onClick);\n      this.DOM.dropdown.content[action]('scroll', _CBR.onScroll);\n    },\n    callbacks: {\n      onKeyDown: function onKeyDown(e) {\n        var _this5 = this;\n        // ignore keys during IME composition\n        if (!this.state.hasFocus || this.state.composing) return;\n\n        // get the \"active\" element, and if there was none (yet) active, use first child\n        var selectedElm = this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector),\n          selectedElmData = this.dropdown.getSuggestionDataByNode(selectedElm);\n        switch (e.key) {\n          case 'ArrowDown':\n          case 'ArrowUp':\n          case 'Down': // >IE11\n          case 'Up':\n            {\n              // >IE11\n              e.preventDefault();\n              var dropdownItems = this.dropdown.getAllSuggestionsRefs(),\n                actionUp = e.key == 'ArrowUp' || e.key == 'Up';\n              if (selectedElm) {\n                selectedElm = this.dropdown.getNextOrPrevOption(selectedElm, !actionUp);\n              }\n\n              // if no element was found OR current item is not a \"real\" item, loop\n              if (!selectedElm || !selectedElm.matches(this.settings.classNames.dropdownItemSelector)) {\n                selectedElm = dropdownItems[actionUp ? dropdownItems.length - 1 : 0];\n              }\n              this.dropdown.highlightOption(selectedElm, true);\n              // selectedElm.scrollIntoView({inline: 'nearest', behavior: 'smooth'})\n              break;\n            }\n          case 'Escape':\n          case 'Esc':\n            // IE11\n            this.dropdown.hide();\n            break;\n          case 'ArrowRight':\n            if (this.state.actions.ArrowLeft) return;\n          case 'Tab':\n            {\n              // in mix-mode, treat arrowRight like Enter key, so a tag will be created\n              if (this.settings.mode != 'mix' && selectedElm && !this.settings.autoComplete.rightKey && !this.state.editing) {\n                e.preventDefault(); // prevents blur so the autocomplete suggestion will not become a tag\n                var value = this.dropdown.getMappedValue(selectedElmData);\n                this.input.autocomplete.set.call(this, value);\n                return false;\n              }\n              return true;\n            }\n          case 'Enter':\n            {\n              e.preventDefault();\n              this.settings.hooks.suggestionClick(e, {\n                tagify: this,\n                tagData: selectedElmData,\n                suggestionElm: selectedElm\n              }).then(function () {\n                if (selectedElm) {\n                  _this5.dropdown.selectOption(selectedElm);\n                  // highlight next option\n                  selectedElm = _this5.dropdown.getNextOrPrevOption(selectedElm, !actionUp);\n                  _this5.dropdown.highlightOption(selectedElm);\n                  return;\n                } else _this5.dropdown.hide();\n                if (_this5.settings.mode != 'mix') _this5.addTags(_this5.state.inputText.trim(), true);\n              }).catch(function (err) {\n                return err;\n              });\n              break;\n            }\n          case 'Backspace':\n            {\n              if (this.settings.mode == 'mix' || this.state.editing.scope) return;\n              var _value = this.input.raw.call(this);\n              if (_value == \"\" || _value.charCodeAt(0) == 8203) {\n                if (this.settings.backspace === true) this.removeTags();else if (this.settings.backspace == 'edit') setTimeout(this.editTag.bind(this), 0);\n              }\n            }\n        }\n      },\n      onMouseOver: function onMouseOver(e) {\n        var ddItem = e.target.closest(this.settings.classNames.dropdownItemSelector);\n        // event delegation check\n        ddItem && this.dropdown.highlightOption(ddItem);\n      },\n      onMouseLeave: function onMouseLeave(e) {\n        // de-highlight any previously highlighted option\n        this.dropdown.highlightOption();\n      },\n      onClick: function onClick(e) {\n        var _this6 = this;\n        if (e.button != 0 || e.target == this.DOM.dropdown || e.target == this.DOM.dropdown.content) return; // allow only mouse left-clicks\n\n        var selectedElm = e.target.closest(this.settings.classNames.dropdownItemSelector),\n          selectedElmData = this.dropdown.getSuggestionDataByNode(selectedElm);\n\n        // temporary set the \"actions\" state to indicate to the main \"blur\" event it shouldn't run\n        this.state.actions.selectOption = true;\n        setTimeout(function () {\n          return _this6.state.actions.selectOption = false;\n        }, 50);\n        this.settings.hooks.suggestionClick(e, {\n          tagify: this,\n          tagData: selectedElmData,\n          suggestionElm: selectedElm\n        }).then(function () {\n          if (selectedElm) _this6.dropdown.selectOption(selectedElm, e);else _this6.dropdown.hide();\n        }).catch(function (err) {\n          return console.warn(err);\n        });\n      },\n      onScroll: function onScroll(e) {\n        var elm = e.target,\n          pos = elm.scrollTop / (elm.scrollHeight - elm.parentNode.clientHeight) * 100;\n        this.trigger(\"dropdown:scroll\", {\n          percentage: Math.round(pos)\n        });\n      }\n    }\n  },\n  /**\r\n   * Given a suggestion-item, return the data associated with it\r\n   * @param {HTMLElement} tagElm\r\n   * @returns Object\r\n   */\n  getSuggestionDataByNode: function getSuggestionDataByNode(tagElm) {\n    var value = tagElm && tagElm.getAttribute('value');\n    return this.suggestedListItems.find(function (item) {\n      return item.value == value;\n    }) || null;\n  },\n  getNextOrPrevOption: function getNextOrPrevOption(selected) {\n    var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var dropdownItems = this.dropdown.getAllSuggestionsRefs(),\n      selectedIdx = dropdownItems.findIndex(function (item) {\n        return item === selected;\n      });\n    return next ? dropdownItems[selectedIdx + 1] : dropdownItems[selectedIdx - 1];\n  },\n  /**\r\n   * mark the currently active suggestion option\r\n   * @param {Object}  elm            option DOM node\r\n   * @param {Boolean} adjustScroll   when navigation with keyboard arrows (up/down), aut-scroll to always show the highlighted element\r\n   */\n  highlightOption: function highlightOption(elm, adjustScroll) {\n    var className = this.settings.classNames.dropdownItemActive,\n      itemData;\n\n    // focus casues a bug in Firefox with the placeholder been shown on the input element\n    // if( this.settings.dropdown.position != 'manual' )\n    //     elm.focus();\n\n    if (this.state.ddItemElm) {\n      this.state.ddItemElm.classList.remove(className);\n      this.state.ddItemElm.removeAttribute(\"aria-selected\");\n    }\n    if (!elm) {\n      this.state.ddItemData = null;\n      this.state.ddItemElm = null;\n      this.input.autocomplete.suggest.call(this);\n      return;\n    }\n    itemData = this.dropdown.getSuggestionDataByNode(elm);\n    this.state.ddItemData = itemData;\n    this.state.ddItemElm = elm;\n\n    // this.DOM.dropdown.querySelectorAll(\".\" + this.settings.classNames.dropdownItemActive).forEach(activeElm => activeElm.classList.remove(className));\n    elm.classList.add(className);\n    elm.setAttribute(\"aria-selected\", true);\n    if (adjustScroll) elm.parentNode.scrollTop = elm.clientHeight + elm.offsetTop - elm.parentNode.clientHeight;\n\n    // Try to autocomplete the typed value with the currently highlighted dropdown item\n    if (this.settings.autoComplete) {\n      this.input.autocomplete.suggest.call(this, itemData);\n      this.dropdown.position(); // suggestions might alter the height of the tagify wrapper because of unkown suggested term length that could drop to the next line\n    }\n  },\n  /**\r\n   * Create a tag from the currently active suggestion option\r\n   * @param {Object} elm  DOM node to select\r\n   * @param {Object} event The original Click event, if available (since keyboard ENTER key also triggers this method)\r\n   */\n  selectOption: function selectOption(elm, event) {\n    var _this7 = this;\n    var _this$settings$dropdo = this.settings.dropdown,\n      clearOnSelect = _this$settings$dropdo.clearOnSelect,\n      closeOnSelect = _this$settings$dropdo.closeOnSelect;\n    if (!elm) {\n      this.addTags(this.state.inputText, true);\n      closeOnSelect && this.dropdown.hide();\n      return;\n    }\n    event = event || {};\n\n    // if in edit-mode, do not continue but instead replace the tag's text.\n    // the scenario is that \"addTags\" was called from a dropdown suggested option selected while editing\n\n    var value = elm.getAttribute('value'),\n      isNoMatch = value == 'noMatch',\n      tagData = this.suggestedListItems.find(function (item) {\n        var _item$value;\n        return ((_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : item) == value;\n      });\n\n    // The below event must be triggered, regardless of anything else which might go wrong\n    this.trigger('dropdown:select', {\n      data: tagData,\n      elm: elm,\n      event: event\n    });\n    if (!value || !tagData && !isNoMatch) {\n      closeOnSelect && setTimeout(this.dropdown.hide.bind(this));\n      return;\n    }\n    if (this.state.editing) {\n      // normalizing value, because \"tagData\" might be a string, and therefore will not be able to extend the object\n      this.onEditTagDone(null, extend({\n        __isValid: true\n      }, this.normalizeTags([tagData])[0]));\n    }\n    // Tagify instances should re-focus to the input element once an option was selected, to allow continuous typing\n    else {\n      this[this.settings.mode == 'mix' ? \"addMixTags\" : \"addTags\"]([tagData || this.input.raw.call(this)], clearOnSelect);\n    }\n\n    // todo: consider not doing this on mix-mode\n    if (!this.DOM.input.parentNode) return;\n    setTimeout(function () {\n      _this7.DOM.input.focus();\n      _this7.toggleFocusClass(true);\n    });\n    closeOnSelect && setTimeout(this.dropdown.hide.bind(this));\n\n    // hide selected suggestion\n    elm.addEventListener('transitionend', function () {\n      _this7.dropdown.fillHeaderFooter();\n      setTimeout(function () {\n        return elm.remove();\n      }, 100);\n    }, {\n      once: true\n    });\n    elm.classList.add(this.settings.classNames.dropdownItemHidden);\n  },\n  // adds all the suggested items, including the ones which are not currently rendered,\n  // unless specified otherwise (by the \"onlyRendered\" argument)\n  selectAll: function selectAll(onlyRendered) {\n    // having suggestedListItems with items messes with \"normalizeTags\" when wanting\n    // to add all tags\n    this.suggestedListItems.length = 0;\n    this.dropdown.hide();\n    this.dropdown.filterListItems('');\n    var tagsToAdd = this.dropdown.filterListItems('');\n    if (!onlyRendered) tagsToAdd = this.state.dropdown.suggestions;\n\n    // some whitelist items might have already been added as tags so when addings all of them,\n    // skip adding already-added ones, so best to use \"filterListItems\" method over \"settings.whitelist\"\n    this.addTags(tagsToAdd, true);\n    return this;\n  },\n  /**\r\n   * returns an HTML string of the suggestions' list items\r\n   * @param {String} value string to filter the whitelist by\r\n   * @param {Object} options \"exact\" - for exact complete match\r\n   * @return {Array} list of filtered whitelist items according to the settings provided and current value\r\n   */\n  filterListItems: function filterListItems(value, options) {\n    var _this8 = this;\n    var _s = this.settings,\n      _sd = _s.dropdown,\n      options = options || {},\n      list = [],\n      exactMatchesList = [],\n      whitelist = _s.whitelist,\n      suggestionsCount = _sd.maxItems >= 0 ? _sd.maxItems : Infinity,\n      searchKeys = _sd.searchKeys,\n      whitelistItem,\n      valueIsInWhitelist,\n      searchBy,\n      isDuplicate,\n      niddle,\n      i = 0;\n    value = _s.mode == 'select' && this.value.length && this.value[0][_s.tagTextProp] == value ? '' // do not filter if the tag, which is already selecetd in \"select\" mode, is the same as the typed text\n    : value;\n    if (!value || !searchKeys.length) {\n      list = _sd.includeSelectedTags ? whitelist : whitelist.filter(function (item) {\n        return !_this8.isTagDuplicate(isObject(item) ? item.value : item);\n      }); // don't include tags which have already been added.\n\n      this.state.dropdown.suggestions = list;\n      return list.slice(0, suggestionsCount); // respect \"maxItems\" dropdown setting\n    }\n    niddle = _sd.caseSensitive ? \"\" + value : (\"\" + value).toLowerCase();\n\n    // checks if ALL of the words in the search query exists in the current whitelist item, regardless of their order\n    function stringHasAll(s, query) {\n      return query.toLowerCase().split(' ').every(function (q) {\n        return s.includes(q.toLowerCase());\n      });\n    }\n    var _loop = function _loop() {\n      var startsWithMatch, exactMatch;\n      whitelistItem = whitelist[i] instanceof Object ? whitelist[i] : {\n        value: whitelist[i]\n      }; //normalize value as an Object\n\n      var itemWithoutSearchKeys = !Object.keys(whitelistItem).some(function (k) {\n          return searchKeys.includes(k);\n        }),\n        _searchKeys = itemWithoutSearchKeys ? [\"value\"] : searchKeys;\n      if (_sd.fuzzySearch && !options.exact) {\n        searchBy = _searchKeys.reduce(function (values, k) {\n          return values + \" \" + (whitelistItem[k] || \"\");\n        }, \"\").toLowerCase().trim();\n        if (_sd.accentedSearch) {\n          searchBy = unaccent(searchBy);\n          niddle = unaccent(niddle);\n        }\n        startsWithMatch = searchBy.indexOf(niddle) == 0;\n        exactMatch = searchBy === niddle;\n        valueIsInWhitelist = stringHasAll(searchBy, niddle);\n      } else {\n        startsWithMatch = true;\n        valueIsInWhitelist = _searchKeys.some(function (k) {\n          var v = '' + (whitelistItem[k] || ''); // if key exists, cast to type String\n\n          if (_sd.accentedSearch) {\n            v = unaccent(v);\n            niddle = unaccent(niddle);\n          }\n          if (!_sd.caseSensitive) v = v.toLowerCase();\n          exactMatch = v === niddle;\n          return options.exact ? v === niddle : v.indexOf(niddle) == 0;\n        });\n      }\n      isDuplicate = !_sd.includeSelectedTags && _this8.isTagDuplicate(isObject(whitelistItem) ? whitelistItem.value : whitelistItem);\n\n      // match for the value within each \"whitelist\" item\n      if (valueIsInWhitelist && !isDuplicate) if (exactMatch && startsWithMatch) exactMatchesList.push(whitelistItem);else if (_sd.sortby == 'startsWith' && startsWithMatch) list.unshift(whitelistItem);else list.push(whitelistItem);\n    };\n    for (; i < whitelist.length; i++) {\n      _loop();\n    }\n    this.state.dropdown.suggestions = exactMatchesList.concat(list);\n\n    // custom sorting function\n    return typeof _sd.sortby == 'function' ? _sd.sortby(exactMatchesList.concat(list), niddle) : exactMatchesList.concat(list).slice(0, suggestionsCount);\n  },\n  /**\r\n   * Returns the final value of a tag data (object) with regards to the \"mapValueTo\" dropdown setting\r\n   * @param {Object} tagData\r\n   * @returns\r\n   */\n  getMappedValue: function getMappedValue(tagData) {\n    var mapValueTo = this.settings.dropdown.mapValueTo,\n      value = mapValueTo ? typeof mapValueTo == 'function' ? mapValueTo(tagData) : tagData[mapValueTo] || tagData.value : tagData.value;\n    return value;\n  },\n  /**\r\n   * Creates the dropdown items' HTML\r\n   * @param  {Array} sugegstionsList  [Array of Objects]\r\n   * @return {String}\r\n   */\n  createListHTML: function createListHTML(sugegstionsList) {\n    var _this9 = this;\n    return extend([], sugegstionsList).map(function (suggestion, idx) {\n      if (typeof suggestion == 'string' || typeof suggestion == 'number') suggestion = {\n        value: suggestion\n      };\n      var mappedValue = _this9.dropdown.getMappedValue(suggestion);\n      mappedValue = typeof mappedValue == 'string' ? escapeHTML(mappedValue) : mappedValue;\n      return _this9.settings.templates.dropdownItem.apply(_this9, [_objectSpread2(_objectSpread2({}, suggestion), {}, {\n        mappedValue: mappedValue\n      }), _this9]);\n    }).join(\"\");\n  }\n};\nvar VERSION = 1; // current version of persisted data. if code change breaks persisted data, verison number should be bumped.\nvar STORE_KEY = '@yaireo/tagify/';\nvar getPersistedData = function getPersistedData(id) {\n  return function (key) {\n    // if \"persist\" is \"false\", do not save to localstorage\n    var customKey = '/' + key,\n      persistedData,\n      versionMatch = localStorage.getItem(STORE_KEY + id + '/v', VERSION) == VERSION;\n    if (versionMatch) {\n      try {\n        persistedData = JSON.parse(localStorage[STORE_KEY + id + customKey]);\n      } catch (err) {}\n    }\n    return persistedData;\n  };\n};\nvar setPersistedData = function setPersistedData(id) {\n  if (!id) return function () {};\n\n  // for storage invalidation\n  localStorage.setItem(STORE_KEY + id + '/v', VERSION);\n  return function (data, key) {\n    var customKey = '/' + key,\n      persistedData = JSON.stringify(data);\n    if (data && key) {\n      localStorage.setItem(STORE_KEY + id + customKey, persistedData);\n      dispatchEvent(new Event('storage'));\n    }\n  };\n};\nvar clearPersistedData = function clearPersistedData(id) {\n  return function (key) {\n    var base = STORE_KEY + '/' + id + '/';\n\n    // delete specific key in the storage\n    if (key) localStorage.removeItem(base + key);\n\n    // delete all keys in the storage with a specific tagify id\n    else {\n      for (var k in localStorage) if (k.includes(base)) localStorage.removeItem(k);\n    }\n  };\n};\nvar TEXTS = {\n  empty: \"empty\",\n  exceed: \"number of tags exceeded\",\n  pattern: \"pattern mismatch\",\n  duplicate: \"already exists\",\n  notAllowed: \"not allowed\"\n};\nvar templates = {\n  /**\r\n   *\r\n   * @param {DOM Object} input     Original input DOm element\r\n   * @param {Object}     settings  Tagify instance settings Object\r\n   */\n  wrapper: function wrapper(input, _s) {\n    return \"<tags class=\\\"\".concat(_s.classNames.namespace, \" \").concat(_s.mode ? \"\".concat(_s.classNames[_s.mode + \"Mode\"]) : \"\", \" \").concat(input.className, \"\\\"\\n                    \").concat(_s.readonly ? 'readonly' : '', \"\\n                    \").concat(_s.disabled ? 'disabled' : '', \"\\n                    \").concat(_s.required ? 'required' : '', \"\\n                    \").concat(_s.mode === 'select' ? \"spellcheck='false'\" : '', \"\\n                    tabIndex=\\\"-1\\\">\\n            <span \").concat(!_s.readonly && _s.userInput ? 'contenteditable' : '', \" tabIndex=\\\"0\\\" data-placeholder=\\\"\").concat(_s.placeholder || '&#8203;', \"\\\" aria-placeholder=\\\"\").concat(_s.placeholder || '', \"\\\"\\n                class=\\\"\").concat(_s.classNames.input, \"\\\"\\n                role=\\\"textbox\\\"\\n                aria-autocomplete=\\\"both\\\"\\n                aria-multiline=\\\"\").concat(_s.mode == 'mix' ? true : false, \"\\\"></span>\\n                &#8203;\\n        </tags>\");\n  },\n  tag: function tag(tagData, _ref) {\n    var _s = _ref.settings;\n    return \"<tag title=\\\"\".concat(tagData.title || tagData.value, \"\\\"\\n                    contenteditable='false'\\n                    spellcheck='false'\\n                    tabIndex=\\\"\").concat(_s.a11y.focusableTags ? 0 : -1, \"\\\"\\n                    class=\\\"\").concat(_s.classNames.tag, \" \").concat(tagData.class || \"\", \"\\\"\\n                    \").concat(this.getAttributes(tagData), \">\\n            <x title='' class=\\\"\").concat(_s.classNames.tagX, \"\\\" role='button' aria-label='remove tag'></x>\\n            <div>\\n                <span class=\\\"\").concat(_s.classNames.tagText, \"\\\">\").concat(tagData[_s.tagTextProp] || tagData.value, \"</span>\\n            </div>\\n        </tag>\");\n  },\n  dropdown: function dropdown(settings) {\n    var _sd = settings.dropdown,\n      isManual = _sd.position == 'manual',\n      className = \"\".concat(settings.classNames.dropdown);\n    return \"<div class=\\\"\".concat(isManual ? \"\" : className, \" \").concat(_sd.classname, \"\\\" role=\\\"listbox\\\" aria-labelledby=\\\"dropdown\\\">\\n                    <div data-selector='tagify-suggestions-wrapper' class=\\\"\").concat(settings.classNames.dropdownWrapper, \"\\\"></div>\\n                </div>\");\n  },\n  dropdownContent: function dropdownContent(HTMLContent) {\n    var _s = this.settings,\n      suggestions = this.state.dropdown.suggestions;\n    return \"\\n            \".concat(_s.templates.dropdownHeader.call(this, suggestions), \"\\n            \").concat(HTMLContent, \"\\n            \").concat(_s.templates.dropdownFooter.call(this, suggestions), \"\\n        \");\n  },\n  dropdownItem: function dropdownItem(item) {\n    return \"<div \".concat(this.getAttributes(item), \"\\n                    class='\").concat(this.settings.classNames.dropdownItem, \" \").concat(item.class ? item.class : \"\", \"'\\n                    tabindex=\\\"0\\\"\\n                    role=\\\"option\\\">\").concat(item.mappedValue || item.value, \"</div>\");\n  },\n  /**\r\n   * @param {Array} suggestions An array of all the matched suggested items, including those which were sliced away due to the \"dropdown.maxItems\" setting\r\n   */\n  dropdownHeader: function dropdownHeader(suggestions) {\n    return \"<header data-selector='tagify-suggestions-header' class=\\\"\".concat(this.settings.classNames.dropdownHeader, \"\\\"></header>\");\n  },\n  dropdownFooter: function dropdownFooter(suggestions) {\n    var hasMore = suggestions.length - this.settings.dropdown.maxItems;\n    return hasMore > 0 ? \"<footer data-selector='tagify-suggestions-footer' class=\\\"\".concat(this.settings.classNames.dropdownFooter, \"\\\">\\n                \").concat(hasMore, \" more items. Refine your search.\\n            </footer>\") : '';\n  },\n  dropdownItemNoMatch: null\n};\nfunction EventDispatcher(instance) {\n  // Create a DOM EventTarget object\n  var target = document.createTextNode('');\n  function addRemove(op, events, cb) {\n    if (cb) events.split(/\\s+/g).forEach(function (name) {\n      return target[op + 'EventListener'].call(target, name, cb);\n    });\n  }\n\n  // Pass EventTarget interface calls to DOM EventTarget object\n  return {\n    off: function off(events, cb) {\n      addRemove('remove', events, cb);\n      return this;\n    },\n    on: function on(events, cb) {\n      if (cb && typeof cb == 'function') addRemove('add', events, cb);\n      return this;\n    },\n    trigger: function trigger(eventName, data, opts) {\n      var e;\n      opts = opts || {\n        cloneData: true\n      };\n      if (!eventName) return;\n      if (instance.settings.isJQueryPlugin) {\n        if (eventName == 'remove') eventName = 'removeTag'; // issue #222\n        jQuery(instance.DOM.originalInput).triggerHandler(eventName, [data]);\n      } else {\n        try {\n          var eventData = _typeof(data) === 'object' ? data : {\n            value: data\n          };\n          eventData = opts.cloneData ? extend({}, eventData) : eventData;\n          eventData.tagify = this;\n          if (data.event) eventData.event = this.cloneEvent(data.event);\n\n          // TODO: move the below to the \"extend\" function\n          if (data instanceof Object) for (var prop in data) if (data[prop] instanceof HTMLElement) eventData[prop] = data[prop];\n          e = new CustomEvent(eventName, {\n            \"detail\": eventData\n          });\n        } catch (err) {\n          console.warn(err);\n        }\n        target.dispatchEvent(e);\n      }\n    }\n  };\n}\nvar deleteBackspaceTimeout;\nfunction triggerChangeEvent() {\n  if (this.settings.mixMode.integrated) return;\n  var inputElm = this.DOM.originalInput,\n    changed = this.state.lastOriginalValueReported !== inputElm.value,\n    event = new CustomEvent(\"change\", {\n      bubbles: true\n    }); // must use \"CustomEvent\" and not \"Event\" to support IE\n\n  if (!changed) return;\n\n  // must apply this BEFORE triggering the simulated event\n  this.state.lastOriginalValueReported = inputElm.value;\n\n  // React hack: https://github.com/facebook/react/issues/11488\n  event.simulated = true;\n  if (inputElm._valueTracker) inputElm._valueTracker.setValue(Math.random());\n  inputElm.dispatchEvent(event);\n\n  // also trigger a Tagify event\n  this.trigger(\"change\", this.state.lastOriginalValueReported);\n\n  // React, for some reason, clears the input's value after \"dispatchEvent\" is fired\n  inputElm.value = this.state.lastOriginalValueReported;\n}\nvar events = {\n  // bind custom events which were passed in the settings\n  customBinding: function customBinding() {\n    var _this10 = this;\n    this.customEventsList.forEach(function (name) {\n      _this10.on(name, _this10.settings.callbacks[name]);\n    });\n  },\n  binding: function binding() {\n    var bindUnbind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _CB = this.events.callbacks,\n      _CBR,\n      action = bindUnbind ? 'addEventListener' : 'removeEventListener';\n\n    // do not allow the main events to be bound more than once\n    if (this.state.mainEvents && bindUnbind) return;\n\n    // set the binding state of the main events, so they will not be bound more than once\n    this.state.mainEvents = bindUnbind;\n\n    // everything inside gets executed only once-per instance\n    if (bindUnbind && !this.listeners.main) {\n      this.events.bindGlobal.call(this);\n      if (this.settings.isJQueryPlugin) jQuery(this.DOM.originalInput).on('tagify.removeAllTags', this.removeAllTags.bind(this));\n    }\n\n    // setup callback references so events could be removed later\n    _CBR = this.listeners.main = this.listeners.main || {\n      focus: ['input', _CB.onFocusBlur.bind(this)],\n      keydown: ['input', _CB.onKeydown.bind(this)],\n      click: ['scope', _CB.onClickScope.bind(this)],\n      dblclick: ['scope', _CB.onDoubleClickScope.bind(this)],\n      paste: ['input', _CB.onPaste.bind(this)],\n      drop: ['input', _CB.onDrop.bind(this)],\n      compositionstart: ['input', _CB.onCompositionStart.bind(this)],\n      compositionend: ['input', _CB.onCompositionEnd.bind(this)]\n    };\n    for (var eventName in _CBR) {\n      this.DOM[_CBR[eventName][0]][action](eventName, _CBR[eventName][1]);\n    }\n\n    // listen to original input changes (unfortunetly this is the best way...)\n    // https://stackoverflow.com/a/1949416/104380\n    clearInterval(this.listeners.main.originalInputValueObserverInterval);\n    this.listeners.main.originalInputValueObserverInterval = setInterval(_CB.observeOriginalInputValue.bind(this), 500);\n\n    // observers\n    var inputMutationObserver = this.listeners.main.inputMutationObserver || new MutationObserver(_CB.onInputDOMChange.bind(this));\n\n    // cleaup just-in-case\n    inputMutationObserver.disconnect();\n\n    // observe stuff\n    if (this.settings.mode == 'mix') inputMutationObserver.observe(this.DOM.input, {\n      childList: true\n    });\n  },\n  bindGlobal: function bindGlobal(unbind) {\n    var _CB = this.events.callbacks,\n      action = unbind ? 'removeEventListener' : 'addEventListener',\n      e;\n    if (!this.listeners || !unbind && this.listeners.global) return; // do not re-bind\n\n    // these events are global event should never be unbinded, unless the instance is destroyed:\n    this.listeners.global = this.listeners.global || [{\n      type: this.isIE ? 'keydown' : 'input',\n      // IE cannot register \"input\" events on contenteditable elements, so the \"keydown\" should be used instead..\n      target: this.DOM.input,\n      cb: _CB[this.isIE ? 'onInputIE' : 'onInput'].bind(this)\n    }, {\n      type: 'keydown',\n      target: window,\n      cb: _CB.onWindowKeyDown.bind(this)\n    }, {\n      type: 'blur',\n      target: this.DOM.input,\n      cb: _CB.onFocusBlur.bind(this)\n    }, {\n      type: 'click',\n      target: document,\n      cb: _CB.onClickAnywhere.bind(this)\n    }];\n    var _iterator3 = _createForOfIteratorHelper(this.listeners.global),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        e = _step3.value;\n        e.target[action](e.type, e.cb);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  },\n  unbindGlobal: function unbindGlobal() {\n    this.events.bindGlobal.call(this, true);\n  },\n  /**\r\n   * DOM events callbacks\r\n   */\n  callbacks: {\n    onFocusBlur: function onFocusBlur(e) {\n      var _this$value;\n      var _s = this.settings,\n        text = e.target ? this.trim(e.target.textContent) : '',\n        // a string\n        currentDisplayValue = (_this$value = this.value) === null || _this$value === void 0 || (_this$value = _this$value[0]) === null || _this$value === void 0 ? void 0 : _this$value[_s.tagTextProp],\n        type = e.type,\n        ddEnabled = _s.dropdown.enabled >= 0,\n        eventData = {\n          relatedTarget: e.relatedTarget\n        },\n        isTargetSelectOption = this.state.actions.selectOption && (ddEnabled || !_s.dropdown.closeOnSelect),\n        isTargetAddNewBtn = this.state.actions.addNew && ddEnabled,\n        isRelatedTargetX = e.relatedTarget && isNodeTag.call(this, e.relatedTarget) && this.DOM.scope.contains(e.relatedTarget),\n        shouldAddTags;\n      if (type == 'blur') {\n        if (e.relatedTarget === this.DOM.scope) {\n          this.dropdown.hide();\n          this.DOM.input.focus();\n          return;\n        }\n        this.postUpdate();\n        _s.onChangeAfterBlur && this.triggerChangeEvent();\n      }\n      if (isTargetSelectOption || isTargetAddNewBtn) return;\n      this.state.hasFocus = type == \"focus\" ? +new Date() : false;\n      this.toggleFocusClass(this.state.hasFocus);\n      if (_s.mode == 'mix') {\n        if (type == \"focus\") {\n          this.trigger(\"focus\", eventData);\n        } else if (e.type == \"blur\") {\n          this.trigger(\"blur\", eventData);\n          this.loading(false);\n          this.dropdown.hide();\n          // reset state which needs reseting\n          this.state.dropdown.visible = undefined;\n          this.setStateSelection();\n        }\n        return;\n      }\n      if (type == \"focus\") {\n        this.trigger(\"focus\", eventData);\n        //  e.target.classList.remove('placeholder');\n        if (_s.dropdown.enabled === 0 || !_s.userInput) {\n          // && _s.mode != \"select\"\n          this.dropdown.show(this.value.length ? '' : undefined);\n        }\n        return;\n      } else if (type == \"blur\") {\n        this.trigger(\"blur\", eventData);\n        this.loading(false);\n\n        // when clicking the X button of a selected tag, it is unwanted for it to be added back\n        // again in a few more lines of code (shouldAddTags && addTags)\n        if (_s.mode == 'select') {\n          if (isRelatedTargetX) {\n            this.removeTags();\n            text = '';\n          }\n\n          // if nothing has changed (same display value), do not add a tag\n          if (currentDisplayValue === text) text = '';\n        }\n        shouldAddTags = text && !this.state.actions.selectOption && _s.addTagOnBlur;\n\n        // do not add a tag if \"selectOption\" action was just fired (this means a tag was just added from the dropdown)\n        shouldAddTags && this.addTags(text, true);\n      }\n      this.DOM.input.removeAttribute('style');\n      this.dropdown.hide();\n    },\n    onCompositionStart: function onCompositionStart(e) {\n      this.state.composing = true;\n    },\n    onCompositionEnd: function onCompositionEnd(e) {\n      this.state.composing = false;\n    },\n    onWindowKeyDown: function onWindowKeyDown(e) {\n      var focusedElm = document.activeElement,\n        isTag = isNodeTag.call(this, focusedElm),\n        isBelong = isTag && this.DOM.scope.contains(document.activeElement),\n        isReadyOnlyTag = isBelong && focusedElm.hasAttribute('readonly'),\n        nextTag;\n      if (!isBelong || isReadyOnlyTag) return;\n      nextTag = focusedElm.nextElementSibling;\n      switch (e.key) {\n        // remove tag if has focus\n        case 'Backspace':\n          {\n            if (!this.settings.readonly) {\n              this.removeTags(focusedElm);\n              (nextTag ? nextTag : this.DOM.input).focus();\n            }\n            break;\n          }\n\n        // edit tag if has focus\n        case 'Enter':\n          {\n            setTimeout(this.editTag.bind(this), 0, focusedElm);\n            break;\n          }\n      }\n    },\n    onKeydown: function onKeydown(e) {\n      var _this11 = this;\n      var _s = this.settings;\n\n      // ignore keys during IME composition or when user input is not allowed\n      if (this.state.composing || !_s.userInput) return;\n      if (_s.mode == 'select' && _s.enforceWhitelist && this.value.length && e.key != 'Tab') {\n        e.preventDefault();\n      }\n      var s = this.trim(e.target.textContent);\n      this.trigger(\"keydown\", {\n        event: e\n      });\n\n      /**\r\n       * ONLY FOR MIX-MODE:\r\n       */\n      if (_s.mode == 'mix') {\n        switch (e.key) {\n          case 'Left':\n          case 'ArrowLeft':\n            {\n              // when left arrow was pressed, set a flag so when the dropdown is shown, right-arrow will be ignored\n              // because it seems likely the user wishes to use the arrows to move the caret\n              this.state.actions.ArrowLeft = true;\n              break;\n            }\n          case 'Delete':\n          case 'Backspace':\n            {\n              if (this.state.editing) return;\n              var sel = document.getSelection(),\n                deleteKeyTagDetected = e.key == 'Delete' && sel.anchorOffset == (sel.anchorNode.length || 0),\n                prevAnchorSibling = sel.anchorNode.previousSibling,\n                isCaretAfterTag = sel.anchorNode.nodeType == 1 || !sel.anchorOffset && prevAnchorSibling && prevAnchorSibling.nodeType == 1 && sel.anchorNode.previousSibling;\n              decode(this.DOM.input.innerHTML);\n              var lastTagElems = this.getTagElms(),\n                //  isCaretInsideTag = sel.anchorNode.parentNode('.' + _s.classNames.tag),\n                tagBeforeCaret,\n                tagElmToBeDeleted,\n                firstTextNodeBeforeTag;\n              if (_s.backspace == 'edit' && isCaretAfterTag) {\n                tagBeforeCaret = sel.anchorNode.nodeType == 1 ? null : sel.anchorNode.previousElementSibling;\n                setTimeout(this.editTag.bind(this), 0, tagBeforeCaret); // timeout is needed to the last cahacrter in the edited tag won't get deleted\n                e.preventDefault(); // needed so the tag elm won't get deleted\n                return;\n              }\n              if (isChromeAndroidBrowser() && isCaretAfterTag instanceof Element) {\n                firstTextNodeBeforeTag = getfirstTextNode(isCaretAfterTag);\n                if (!isCaretAfterTag.hasAttribute('readonly')) isCaretAfterTag.remove(); // since this is Chrome, can safetly use this \"new\" DOM API\n\n                // Android-Chrome wrongly hides the keyboard, and loses focus,\n                // so this hack below is needed to regain focus at the correct place:\n                this.DOM.input.focus();\n                setTimeout(function () {\n                  _this11.placeCaretAfterNode(firstTextNodeBeforeTag);\n                  _this11.DOM.input.click();\n                });\n                return;\n              }\n              if (sel.anchorNode.nodeName == 'BR') return;\n              if ((deleteKeyTagDetected || isCaretAfterTag) && sel.anchorNode.nodeType == 1) {\n                if (sel.anchorOffset == 0)\n                  // caret is at the very begining, before a tag\n                  tagElmToBeDeleted = deleteKeyTagDetected // delete key pressed\n                  ? lastTagElems[0] : null;else tagElmToBeDeleted = lastTagElems[Math.min(lastTagElems.length, sel.anchorOffset) - 1];\n\n                // find out if a tag *might* be a candidate for deletion, and if so, which\n              } else if (deleteKeyTagDetected) tagElmToBeDeleted = sel.anchorNode.nextElementSibling;else if (isCaretAfterTag instanceof Element) tagElmToBeDeleted = isCaretAfterTag;\n\n              // tagElm.hasAttribute('readonly')\n              if (sel.anchorNode.nodeType == 3 &&\n              // node at caret location is a Text node\n              !sel.anchorNode.nodeValue &&\n              // has some text\n              sel.anchorNode.previousElementSibling)\n                // text node has a Tag node before it\n                e.preventDefault();\n\n              // if backspace not allowed, do nothing\n              // TODO: a better way to detect if nodes were deleted is to simply check the \"this.value\" before & after\n              if ((isCaretAfterTag || deleteKeyTagDetected) && !_s.backspace) {\n                e.preventDefault();\n                return;\n              }\n              if (sel.type != 'Range' && !sel.anchorOffset && sel.anchorNode == this.DOM.input && e.key != 'Delete') {\n                e.preventDefault();\n                return;\n              }\n              if (sel.type != 'Range' && tagElmToBeDeleted && tagElmToBeDeleted.hasAttribute('readonly')) {\n                // allows the continuation of deletion by placing the caret on the first previous textNode.\n                // since a few readonly-tags might be one after the other, iteration is needed:\n\n                this.placeCaretAfterNode(getfirstTextNode(tagElmToBeDeleted));\n                return;\n              }\n\n              // update regarding https://github.com/yairEO/tagify/issues/762#issuecomment-786464317:\n              // the bug described is more severe than the fix below, therefore I disable the fix until a solution\n              // is found which work well for both cases.\n              // -------\n              // nodeType is \"1\" only when the caret is at the end after last tag (no text after), or before first first (no text before)\n              /*\r\n              if( this.isFirefox && sel.anchorNode.nodeType == 1 && sel.anchorOffset != 0 ){\r\n                  this.removeTags() // removes last tag by default if no parameter supplied\r\n                  // place caret inside last textNode, if exist. it's an annoying bug only in FF,\r\n                  // if the last tag is removed, and there is a textNode before it, the caret is not placed at its end\r\n                  this.placeCaretAfterNode( setRangeAtStartEnd(false, this.DOM.input) )\r\n              }\r\n              */\n\n              clearTimeout(deleteBackspaceTimeout);\n              // a minimum delay is needed before the node actually gets detached from the document (don't know why),\n              // to know exactly which tag was deleted. This is the easiest way of knowing besides using MutationObserver\n              deleteBackspaceTimeout = setTimeout(function () {\n                var sel = document.getSelection();\n                decode(_this11.DOM.input.innerHTML);\n                !deleteKeyTagDetected && sel.anchorNode.previousSibling;\n\n                // fixes #384, where the first and only tag will not get removed with backspace\n                /*\r\n                 * [UPDATE DEC 3, 22] SEEMS BELOEW CODE IS NOT NEEDED ANY MORE\r\n                 *\r\n                if( currentValue.length > lastInputValue.length && prevElm ){\r\n                    if( isNodeTag.call(this, prevElm) && !prevElm.hasAttribute('readonly') ){\r\n                        this.removeTags(prevElm)\r\n                        this.fixFirefoxLastTagNoCaret()\r\n                          // the above \"removeTag\" methods removes the tag with a transition. Chrome adds a <br> element for some reason at this stage\r\n                        if( this.DOM.input.children.length == 2 && this.DOM.input.children[1].tagName == \"BR\" ){\r\n                            this.DOM.input.innerHTML = \"\"\r\n                            this.value.length = 0\r\n                            return true\r\n                        }\r\n                    }\r\n                      else\r\n                        prevElm.remove()\r\n                }\r\n                */\n\n                // find out which tag(s) were deleted and trigger \"remove\" event\n                // iterate over the list of tags still in the document and then filter only those from the \"this.value\" collection\n                _this11.value = [].map.call(lastTagElems, function (node, nodeIdx) {\n                  var tagData = getSetTagData(node);\n\n                  // since readonly cannot be removed (it's technically resurrected if removed somehow)\n                  if (node.parentNode || tagData.readonly) return tagData;else _this11.trigger('remove', {\n                    tag: node,\n                    index: nodeIdx,\n                    data: tagData\n                  });\n                }).filter(function (n) {\n                  return n;\n                }); // remove empty items in the mapped array\n              }, 20); // Firefox needs this higher duration for some reason or things get buggy when deleting text from the end\n              break;\n            }\n          // currently commented to allow new lines in mixed-mode\n          // case 'Enter' :\n          //     // e.preventDefault(); // solves Chrome bug - http://stackoverflow.com/a/20398191/104380\n        }\n        return true;\n      }\n      switch (e.key) {\n        case 'Backspace':\n          if (_s.mode == 'select' && _s.enforceWhitelist && this.value.length) this.removeTags();else if (!this.state.dropdown.visible || _s.dropdown.position == 'manual') {\n            if (e.target.textContent == \"\" || s.charCodeAt(0) == 8203) {\n              // 8203: ZERO WIDTH SPACE unicode\n              if (_s.backspace === true) this.removeTags();else if (_s.backspace == 'edit') setTimeout(this.editTag.bind(this), 0); // timeout reason: when edited tag gets focused and the caret is placed at the end, the last character gets deletec (because of backspace)\n            }\n          }\n          break;\n        case 'Esc':\n        case 'Escape':\n          if (this.state.dropdown.visible) return;\n          e.target.blur();\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          // if( _s.mode == 'select' ) // issue #333\n          if (!this.state.dropdown.visible) this.dropdown.show();\n          break;\n        case 'ArrowRight':\n          {\n            var tagData = this.state.inputSuggestion || this.state.ddItemData;\n            if (tagData && _s.autoComplete.rightKey) {\n              this.addTags([tagData], true);\n              return;\n            }\n            break;\n          }\n        case 'Tab':\n          {\n            var selectMode = _s.mode == 'select';\n            if (s && !selectMode) e.preventDefault();else return true;\n          }\n        case 'Enter':\n          // manual suggestion boxes are assumed to always be visible\n          if (this.state.dropdown.visible && _s.dropdown.position != 'manual') return;\n          e.preventDefault(); // solves Chrome bug - http://stackoverflow.com/a/20398191/104380\n          // because the main \"keydown\" event is bound before the dropdown events, this will fire first and will not *yet*\n          // know if an option was just selected from the dropdown menu. If an option was selected,\n          // the dropdown events should handle adding the tag\n          setTimeout(function () {\n            if (_this11.state.dropdown.visible || _this11.state.actions.selectOption) return;\n            _this11.addTags(s, true);\n          });\n      }\n    },\n    onInput: function onInput(e) {\n      this.postUpdate(); // toggles \"tagify--empty\" class\n\n      var _s = this.settings;\n      if (_s.mode == 'mix') return this.events.callbacks.onMixTagsInput.call(this, e);\n      var value = this.input.normalize.call(this),\n        showSuggestions = value.length >= _s.dropdown.enabled,\n        eventData = {\n          value: value,\n          inputElm: this.DOM.input\n        },\n        validation = this.validateTag({\n          value: value\n        });\n      if (_s.mode == 'select') {\n        this.toggleScopeValidation(validation);\n      }\n      eventData.isValid = validation;\n\n      // for IE; since IE doesn't have an \"input\" event so \"keyDown\" is used instead to trigger the \"onInput\" callback,\n      // and so many keys do not change the input, and for those do not continue.\n      if (this.state.inputText == value) return;\n\n      // save the value on the input's State object\n      this.input.set.call(this, value, false); // update the input with the normalized value and run validations\n      // this.setRangeAtStartEnd(false, this.DOM.input); // fix caret position\n\n      // if delimiters detected, add tags\n      if (value.search(_s.delimiters) != -1) {\n        if (this.addTags(value)) {\n          this.input.set.call(this); // clear the input field's value\n        }\n      } else if (_s.dropdown.enabled >= 0) {\n        this.dropdown[showSuggestions ? \"show\" : \"hide\"](value);\n      }\n      this.trigger('input', eventData); // \"input\" event must be triggered at this point, before the dropdown is shown\n    },\n    onMixTagsInput: function onMixTagsInput(e) {\n      var _this12 = this;\n      var rangeText,\n        match,\n        matchedPatternCount,\n        tag,\n        showSuggestions,\n        selection,\n        _s = this.settings,\n        lastTagsCount = this.value.length,\n        matchFlaggedTag,\n        matchDelimiters,\n        tagsElems = this.getTagElms(),\n        fragment = document.createDocumentFragment(),\n        range = window.getSelection().getRangeAt(0),\n        remainingTagsValues = [].map.call(tagsElems, function (node) {\n          return getSetTagData(node).value;\n        });\n\n      // Android Chrome \"keydown\" event argument does not report the correct \"key\".\n      // this workaround is needed to manually call \"onKeydown\" method with a synthesized event object\n      if (e.inputType == \"deleteContentBackward\" && isChromeAndroidBrowser()) {\n        this.events.callbacks.onKeydown.call(this, {\n          target: e.target,\n          key: \"Backspace\"\n        });\n      }\n\n      // re-add \"readonly\" tags which might have been removed\n      this.value.slice().forEach(function (item) {\n        if (item.readonly && !remainingTagsValues.includes(item.value)) fragment.appendChild(_this12.createTagElem(item));\n      });\n      if (fragment.childNodes.length) {\n        range.insertNode(fragment);\n        this.setRangeAtStartEnd(false, fragment.lastChild);\n      }\n\n      // check if tags were \"magically\" added/removed (browser redo/undo or CTRL-A -> delete)\n      if (tagsElems.length != lastTagsCount) {\n        this.value = [].map.call(this.getTagElms(), function (node) {\n          return getSetTagData(node);\n        });\n        this.update({\n          withoutChangeEvent: true\n        });\n        return;\n      }\n      if (this.hasMaxTags()) return true;\n      if (window.getSelection) {\n        selection = window.getSelection();\n\n        // only detect tags if selection is inside a textNode (not somehow on already-existing tag)\n        if (selection.rangeCount > 0 && selection.anchorNode.nodeType == 3) {\n          range = selection.getRangeAt(0).cloneRange();\n          range.collapse(true);\n          range.setStart(selection.focusNode, 0);\n          rangeText = range.toString().slice(0, range.endOffset); // slice the range so everything AFTER the caret will be trimmed\n          // split = range.toString().split(_s.mixTagsAllowedAfter)  // [\"foo\", \"bar\", \"@baz\"]\n          matchedPatternCount = rangeText.split(_s.pattern).length - 1;\n          match = rangeText.match(_s.pattern);\n          if (match)\n            // tag string, example: \"@aaa ccc\"\n            tag = rangeText.slice(rangeText.lastIndexOf(match[match.length - 1]));\n          if (tag) {\n            this.state.actions.ArrowLeft = false; // start fresh, assuming the user did not (yet) used any arrow to move the caret\n            this.state.tag = {\n              prefix: tag.match(_s.pattern)[0],\n              value: tag.replace(_s.pattern, '') // get rid of the prefix\n            };\n            this.state.tag.baseOffset = selection.baseOffset - this.state.tag.value.length;\n            matchDelimiters = this.state.tag.value.match(_s.delimiters);\n            // if a delimeter exists, add the value as tag (exluding the delimiter)\n            if (matchDelimiters) {\n              this.state.tag.value = this.state.tag.value.replace(_s.delimiters, '');\n              this.state.tag.delimiters = matchDelimiters[0];\n              this.addTags(this.state.tag.value, _s.dropdown.clearOnSelect);\n              this.dropdown.hide();\n              return;\n            }\n            showSuggestions = this.state.tag.value.length >= _s.dropdown.enabled;\n\n            // When writing something that might look like a tag (an email address) but isn't one - it is unwanted\n            // the suggestions dropdown be shown, so the user can close it (in any way), and while continue typing,\n            // dropdown should stay closed until another tag is typed.\n            // if( this.state.tag.value.length && this.state.dropdown.visible === false )\n            //     showSuggestions = false\n\n            // test for similar flagged tags to the current tag\n\n            try {\n              matchFlaggedTag = this.state.flaggedTags[this.state.tag.baseOffset];\n              matchFlaggedTag = matchFlaggedTag.prefix == this.state.tag.prefix && matchFlaggedTag.value[0] == this.state.tag.value[0];\n\n              // reset\n              if (this.state.flaggedTags[this.state.tag.baseOffset] && !this.state.tag.value) delete this.state.flaggedTags[this.state.tag.baseOffset];\n            } catch (err) {}\n\n            // scenario: (do not show suggestions of another matched tag, if more than one detected)\n            // (2 tags exist)                          \" a@a.com and @\"\n            // (second tag is removed by backspace)    \" a@a.com and \"\n            if (matchFlaggedTag || matchedPatternCount < this.state.mixMode.matchedPatternCount) showSuggestions = false;\n          }\n          // no (potential) tag found\n          else {\n            this.state.flaggedTags = {};\n          }\n          this.state.mixMode.matchedPatternCount = matchedPatternCount;\n        }\n      }\n\n      // wait until the \"this.value\" has been updated (see \"onKeydown\" method for \"mix-mode\")\n      // the dropdown must be shown only after this event has been triggered, so an implementer could\n      // dynamically change the whitelist.\n      setTimeout(function () {\n        _this12.update({\n          withoutChangeEvent: true\n        });\n        _this12.trigger(\"input\", extend({}, _this12.state.tag, {\n          textContent: _this12.DOM.input.textContent\n        }));\n        if (_this12.state.tag) _this12.dropdown[showSuggestions ? \"show\" : \"hide\"](_this12.state.tag.value);\n      }, 10);\n    },\n    onInputIE: function onInputIE(e) {\n      var _this = this;\n      // for the \"e.target.textContent\" to be changed, the browser requires a small delay\n      setTimeout(function () {\n        _this.events.callbacks.onInput.call(_this, e);\n      });\n    },\n    observeOriginalInputValue: function observeOriginalInputValue() {\n      // if, for some reason, the Tagified element is no longer in the DOM,\n      // call the \"destroy\" method to kill all references to timeouts/intervals\n      if (!this.DOM.originalInput.parentNode) this.destroy();\n\n      // if original input value changed for some reason (for exmaple a form reset)\n      if (this.DOM.originalInput.value != this.DOM.originalInput.tagifyValue) this.loadOriginalValues();\n    },\n    onClickAnywhere: function onClickAnywhere(e) {\n      if (e.target != this.DOM.scope && !this.DOM.scope.contains(e.target)) {\n        this.toggleFocusClass(false);\n        this.state.hasFocus = false;\n      }\n    },\n    onClickScope: function onClickScope(e) {\n      var _s = this.settings,\n        tagElm = e.target.closest('.' + _s.classNames.tag),\n        timeDiffFocus = +new Date() - this.state.hasFocus;\n      if (e.target == this.DOM.scope) {\n        // if( !this.state.hasFocus )\n        this.DOM.input.focus();\n        return;\n      } else if (e.target.classList.contains(_s.classNames.tagX)) {\n        this.removeTags(e.target.parentNode);\n        return;\n      } else if (tagElm) {\n        this.trigger(\"click\", {\n          tag: tagElm,\n          index: this.getNodeIndex(tagElm),\n          data: getSetTagData(tagElm),\n          event: e\n        });\n        if (_s.editTags === 1 || _s.editTags.clicks === 1) this.events.callbacks.onDoubleClickScope.call(this, e);\n        return;\n      }\n\n      // when clicking on the input itself\n      else if (e.target == this.DOM.input) {\n        if (_s.mode == 'mix') {\n          // firefox won't show caret if last element is a tag (and not a textNode),\n          // so an empty textnode should be added\n          this.fixFirefoxLastTagNoCaret();\n        }\n        if (timeDiffFocus > 500) {\n          if (this.state.dropdown.visible) this.dropdown.hide();else if (_s.dropdown.enabled === 0 && _s.mode != 'mix') this.dropdown.show(this.value.length ? '' : undefined);\n          return;\n        }\n      }\n      if (_s.mode == 'select' && _s.dropdown.enabled === 0 && !this.state.dropdown.visible) this.dropdown.show();\n    },\n    // special proccess is needed for pasted content in order to \"clean\" it\n    onPaste: function onPaste(e) {\n      var _this13 = this;\n      e.preventDefault();\n      var _s = this.settings,\n        selectModeWithoutInput = _s.mode == 'select' && _s.enforceWhitelist;\n      if (selectModeWithoutInput || !_s.userInput) {\n        return false;\n      }\n      var clipboardData, pastedText;\n      if (_s.readonly) return;\n\n      // Get pasted data via clipboard API\n      clipboardData = e.clipboardData || window.clipboardData;\n      pastedText = clipboardData.getData('Text');\n      _s.hooks.beforePaste(e, {\n        tagify: this,\n        pastedText: pastedText,\n        clipboardData: clipboardData\n      }).then(function (result) {\n        if (result === undefined) result = pastedText;\n        if (result) {\n          _this13.injectAtCaret(result, window.getSelection().getRangeAt(0));\n          if (_this13.settings.mode == 'mix') {\n            _this13.events.callbacks.onMixTagsInput.call(_this13, e);\n          } else if (_this13.settings.pasteAsTags) {\n            _this13.addTags(_this13.state.inputText + result, true);\n          } else _this13.state.inputText = result;\n        }\n      }).catch(function (err) {\n        return err;\n      });\n    },\n    onDrop: function onDrop(e) {\n      e.preventDefault();\n    },\n    onEditTagInput: function onEditTagInput(editableElm, e) {\n      var tagElm = editableElm.closest('.' + this.settings.classNames.tag),\n        tagElmIdx = this.getNodeIndex(tagElm),\n        tagData = getSetTagData(tagElm),\n        textValue = this.input.normalize.call(this, editableElm),\n        dataForChangedProp = _defineProperty2(_defineProperty2({}, this.settings.tagTextProp, textValue), \"__tagId\", tagData.__tagId),\n        // \"__tagId\" is needed so validation will skip current tag when checking for dups\n        isValid = this.validateTag(dataForChangedProp),\n        // the value could have been invalid in the first-place so make sure to re-validate it (via \"addEmptyTag\" method)\n        hasChanged = this.editTagChangeDetected(extend(tagData, dataForChangedProp));\n\n      // if the value is same as before-editing and the tag was valid before as well, ignore the  current \"isValid\" result, which is false-positive\n      if (!hasChanged && editableElm.originalIsValid === true) isValid = true;\n      tagElm.classList.toggle(this.settings.classNames.tagInvalid, isValid !== true);\n      tagData.__isValid = isValid;\n      tagElm.title = isValid === true ? tagData.title || tagData.value : isValid; // change the tag's title to indicate why is the tag invalid (if it's so)\n\n      // show dropdown if typed text is equal or more than the \"enabled\" dropdown setting\n      if (textValue.length >= this.settings.dropdown.enabled) {\n        // this check is needed apparently because doing browser \"undo\" will fire\n        //  \"onEditTagInput\" but \"this.state.editing\" will be \"false\"\n        if (this.state.editing) this.state.editing.value = textValue;\n        this.dropdown.show(textValue);\n      }\n      this.trigger(\"edit:input\", {\n        tag: tagElm,\n        index: tagElmIdx,\n        data: extend({}, this.value[tagElmIdx], {\n          newValue: textValue\n        }),\n        event: e\n      });\n    },\n    onEditTagPaste: function onEditTagPaste(tagElm, e) {\n      // Get pasted data via clipboard API\n      var clipboardData = e.clipboardData || window.clipboardData,\n        pastedText = clipboardData.getData('Text');\n      e.preventDefault();\n      var newNode = _injectAtCaret(pastedText);\n      this.setRangeAtStartEnd(false, newNode);\n    },\n    onEditTagFocus: function onEditTagFocus(tagElm) {\n      this.state.editing = {\n        scope: tagElm,\n        input: tagElm.querySelector(\"[contenteditable]\")\n      };\n    },\n    onEditTagBlur: function onEditTagBlur(editableElm) {\n      if (!this.state.hasFocus) this.toggleFocusClass();\n\n      // one scenario is when selecting a suggestion from the dropdown, when editing, and by selecting it\n      // the \"onEditTagDone\" is called directly, already replacing the tag, so the argument \"editableElm\"\n      // node isn't in the DOM anynmore because it has been replaced.\n      if (!this.DOM.scope.contains(editableElm)) return;\n      var _s = this.settings,\n        tagElm = editableElm.closest('.' + _s.classNames.tag),\n        tagData = getSetTagData(tagElm),\n        textValue = this.input.normalize.call(this, editableElm),\n        dataForChangedProp = _defineProperty2(_defineProperty2({}, _s.tagTextProp, textValue), \"__tagId\", tagData.__tagId),\n        // \"__tagId\" is needed so validation will skip current tag when checking for dups\n        originalData = tagData.__originalData,\n        // pre-edit data\n        hasChanged = this.editTagChangeDetected(extend(tagData, dataForChangedProp)),\n        isValid = this.validateTag(dataForChangedProp),\n        // \"__tagId\" is needed so validation will skip current tag when checking for dups\n        hasMaxTags,\n        newTagData;\n      if (!textValue) {\n        this.onEditTagDone(tagElm);\n        return;\n      }\n\n      // if nothing changed revert back to how it was before editing\n      if (!hasChanged) {\n        this.onEditTagDone(tagElm, originalData);\n        return;\n      }\n\n      // need to know this because if \"keepInvalidTags\" setting is \"true\" and an invalid tag is edited as a valid one,\n      // but the maximum number of tags have alreay been reached, so it should not allow saving the new valid value.\n      // only if the tag was already valid before editing, ignore this check (see a few lines below)\n      hasMaxTags = this.hasMaxTags();\n      newTagData = extend({}, originalData, _defineProperty2(_defineProperty2({}, _s.tagTextProp, this.trim(textValue)), \"__isValid\", isValid));\n\n      // pass through optional transformer defined in settings\n      _s.transformTag.call(this, newTagData, originalData);\n\n      // MUST re-validate after tag transformation\n      // only validate the \"tagTextProp\" because is the only thing that metters for validating an edited tag.\n      // -- Scenarios: --\n      // 1. max 3 tags allowd. there are 4 tags, one has invalid input and is edited to a valid one, and now should be marked as \"not allowed\" because limit of tags has reached\n      // 2. max 3 tags allowed. there are 3 tags, one is edited, and so max-tags vaildation should be OK\n      isValid = (!hasMaxTags || originalData.__isValid === true) && this.validateTag(newTagData);\n      if (isValid !== true) {\n        this.trigger(\"invalid\", {\n          data: newTagData,\n          tag: tagElm,\n          message: isValid\n        });\n\n        // do nothing if invalid, stay in edit-mode until corrected or reverted by presssing esc\n        if (_s.editTags.keepInvalid) return;\n        if (_s.keepInvalidTags) newTagData.__isValid = isValid;else\n          // revert back if not specified to keep\n          newTagData = originalData;\n      } else if (_s.keepInvalidTags) {\n        // cleaup any previous leftovers if the tag was invalid\n        delete newTagData.title;\n        delete newTagData[\"aria-invalid\"];\n        delete newTagData.class;\n      }\n\n      // tagElm.classList.toggle(_s.classNames.tagInvalid, true)\n\n      this.onEditTagDone(tagElm, newTagData);\n    },\n    onEditTagkeydown: function onEditTagkeydown(e, tagElm) {\n      // ignore keys during IME composition\n      if (this.state.composing) return;\n      this.trigger(\"edit:keydown\", {\n        event: e\n      });\n      switch (e.key) {\n        case 'Esc':\n        case 'Escape':\n          {\n            // revert the tag to how it was before editing\n            // replace current tag with original one (pre-edited one)\n            tagElm.parentNode.replaceChild(tagElm.__tagifyTagData.__originalHTML, tagElm);\n            this.state.editing = false;\n          }\n        case 'Enter':\n        case 'Tab':\n          e.preventDefault();\n          e.target.blur();\n      }\n    },\n    onDoubleClickScope: function onDoubleClickScope(e) {\n      var tagElm = e.target.closest('.' + this.settings.classNames.tag),\n        tagData = getSetTagData(tagElm),\n        _s = this.settings,\n        isEditingTag,\n        isReadyOnlyTag;\n      if (!tagElm || !_s.userInput || tagData.editable === false) return;\n      isEditingTag = tagElm.classList.contains(this.settings.classNames.tagEditing);\n      isReadyOnlyTag = tagElm.hasAttribute('readonly');\n      if (_s.mode != 'select' && !_s.readonly && !isEditingTag && !isReadyOnlyTag && this.settings.editTags) this.editTag(tagElm);\n      this.toggleFocusClass(true);\n      this.trigger('dblclick', {\n        tag: tagElm,\n        index: this.getNodeIndex(tagElm),\n        data: getSetTagData(tagElm)\n      });\n    },\n    /**\r\n     *\r\n     * @param {Object} m an object representing the observed DOM changes\r\n     */\n    onInputDOMChange: function onInputDOMChange(m) {\n      var _this14 = this;\n      // iterate all DOm mutation\n      m.forEach(function (record) {\n        // only the ADDED nodes\n        record.addedNodes.forEach(function (addedNode) {\n          // fix chrome's placing '<div><br></div>' everytime ENTER key is pressed, and replace with just `<br'\n          if (addedNode.outerHTML == '<div><br></div>') {\n            addedNode.replaceWith(document.createElement('br'));\n          }\n\n          // if the added element is a div containing a tag within it (chrome does this when pressing ENTER before a tag)\n          else if (addedNode.nodeType == 1 && addedNode.querySelector(_this14.settings.classNames.tagSelector)) {\n            var newlineText = document.createTextNode('');\n            if (addedNode.childNodes[0].nodeType == 3 && addedNode.previousSibling.nodeName != 'BR') newlineText = document.createTextNode('\\n');\n\n            // unwrap the useless div\n            // chrome adds a BR at the end which should be removed\n            addedNode.replaceWith.apply(addedNode, [newlineText].concat(_toConsumableArray(_toConsumableArray(addedNode.childNodes).slice(0, -1))));\n            _this14.placeCaretAfterNode(newlineText);\n          }\n\n          // if this is a tag\n          else if (isNodeTag.call(_this14, addedNode)) {\n            var _addedNode$previousSi;\n            if (((_addedNode$previousSi = addedNode.previousSibling) === null || _addedNode$previousSi === void 0 ? void 0 : _addedNode$previousSi.nodeType) == 3 && !addedNode.previousSibling.textContent) addedNode.previousSibling.remove();\n            // and it is the first node in a new line\n            if (addedNode.previousSibling && addedNode.previousSibling.nodeName == 'BR') {\n              // allows placing the caret just before the tag, when the tag is the first node in that line\n              addedNode.previousSibling.replaceWith(\"\\n\\u200B\");\n              var nextNode = addedNode.nextSibling,\n                anythingAfterNode = '';\n              while (nextNode) {\n                anythingAfterNode += nextNode.textContent;\n                nextNode = nextNode.nextSibling;\n              }\n\n              // when hitting ENTER for new line just before an existing tag, but skip below logic when a tag has been addded\n              anythingAfterNode.trim() && _this14.placeCaretAfterNode(addedNode.previousSibling);\n            }\n          }\n        });\n        record.removedNodes.forEach(function (removedNode) {\n          // when trying to delete a tag which is in a new line and there's nothing else there (caret is after the tag)\n          if (removedNode && removedNode.nodeName == 'BR' && isNodeTag.call(_this14, lastInputChild)) {\n            _this14.removeTags(lastInputChild);\n            _this14.fixFirefoxLastTagNoCaret();\n          }\n        });\n      });\n\n      // get the last child only after the above DOM modifications\n      // check these scenarios:\n      // 1. after a single line, press ENTER once - should add only 1 BR\n      // 2. presss ENTER right before a tag\n      // 3. press enter within a text node before a tag\n      var lastInputChild = this.DOM.input.lastChild;\n      if (lastInputChild && lastInputChild.nodeValue == '') lastInputChild.remove();\n\n      // make sure the last element is always a BR\n      if (!lastInputChild || lastInputChild.nodeName != 'BR') {\n        this.DOM.input.appendChild(document.createElement('br'));\n      }\n    }\n  }\n};\n\n/**\r\n * @constructor\r\n * @param {Object} input    DOM element\r\n * @param {Object} settings settings object\r\n */\nfunction Tagify(input, settings) {\n  if (!input) {\n    console.warn('Tagify:', 'input element not found', input);\n    // return an empty mock of all methods, so the code using tagify will not break\n    // because it might be calling methods even though the input element does not exist\n    var mockInstance = new Proxy(this, {\n      get: function get() {\n        return function () {\n          return mockInstance;\n        };\n      }\n    });\n    return mockInstance;\n  }\n  if (input.__tagify) {\n    console.warn('Tagify: ', 'input element is already Tagified - Same instance is returned.', input);\n    return input.__tagify;\n  }\n  extend(this, EventDispatcher(this));\n  this.isFirefox = /firefox|fxios/i.test(navigator.userAgent) && !/seamonkey/i.test(navigator.userAgent);\n  this.isIE = window.document.documentMode; // https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode#Browser_compatibility\n\n  settings = settings || {};\n  this.getPersistedData = getPersistedData(settings.id);\n  this.setPersistedData = setPersistedData(settings.id);\n  this.clearPersistedData = clearPersistedData(settings.id);\n  this.applySettings(input, settings);\n  this.state = {\n    inputText: '',\n    editing: false,\n    composing: false,\n    actions: {},\n    // UI actions for state-locking\n    mixMode: {},\n    dropdown: {},\n    flaggedTags: {} // in mix-mode, when a string is detetced as potential tag, and the user has chocen to close the suggestions dropdown, keep the record of the tasg here\n  };\n  this.value = []; // tags' data\n\n  // events' callbacks references will be stores here, so events could be unbinded\n  this.listeners = {};\n  this.DOM = {}; // Store all relevant DOM elements in an Object\n\n  this.build(input);\n  initDropdown.call(this);\n  this.getCSSVars();\n  this.loadOriginalValues();\n  this.events.customBinding.call(this);\n  this.events.binding.call(this);\n  input.autofocus && this.DOM.input.focus();\n  input.__tagify = this;\n}\nTagify.prototype = {\n  _dropdown: _dropdown,\n  getSetTagData: getSetTagData,\n  helpers: {\n    sameStr: sameStr,\n    removeCollectionProp: removeCollectionProp,\n    omit: omit,\n    isObject: isObject,\n    parseHTML: parseHTML,\n    escapeHTML: escapeHTML,\n    extend: extend,\n    concatWithoutDups: concatWithoutDups,\n    getUID: getUID,\n    isNodeTag: isNodeTag\n  },\n  customEventsList: ['change', 'add', 'remove', 'invalid', 'input', 'click', 'keydown', 'focus', 'blur', 'edit:input', 'edit:beforeUpdate', 'edit:updated', 'edit:start', 'edit:keydown', 'dropdown:show', 'dropdown:hide', 'dropdown:select', 'dropdown:updated', 'dropdown:noMatch', 'dropdown:scroll'],\n  dataProps: ['__isValid', '__removed', '__originalData', '__originalHTML', '__tagId'],\n  // internal-uasge props\n  trim: function trim(text) {\n    return this.settings.trim && text && typeof text == \"string\" ? text.trim() : text;\n  },\n  // expose this handy utility function\n  parseHTML: parseHTML,\n  templates: templates,\n  parseTemplate: function parseTemplate(template, data) {\n    template = this.settings.templates[template] || template;\n    return parseHTML(template.apply(this, data));\n  },\n  set whitelist(arr) {\n    var isArray = arr && Array.isArray(arr);\n    this.settings.whitelist = isArray ? arr : [];\n    this.setPersistedData(isArray ? arr : [], 'whitelist');\n  },\n  get whitelist() {\n    return this.settings.whitelist;\n  },\n  generateClassSelectors: function generateClassSelectors(classNames) {\n    var _loop2 = function _loop2() {\n      var currentName = name;\n      Object.defineProperty(classNames, currentName + \"Selector\", {\n        get: function get() {\n          return \".\" + this[currentName].split(\" \")[0];\n        }\n      });\n    };\n    for (var name in classNames) {\n      _loop2();\n    }\n  },\n  applySettings: function applySettings(input, settings) {\n    var _settings$dropdown, _settings$dropdown2;\n    DEFAULTS.templates = this.templates;\n    var mixModeDefaults = {\n      dropdown: {\n        position: \"text\"\n      }\n    };\n    var mergedDefaults = extend({}, DEFAULTS, settings.mode == 'mix' ? mixModeDefaults : {});\n    var _s = this.settings = extend({}, mergedDefaults, settings);\n    _s.disabled = input.hasAttribute('disabled');\n    _s.readonly = _s.readonly || input.hasAttribute('readonly');\n    _s.placeholder = escapeHTML(input.getAttribute('placeholder') || _s.placeholder || \"\");\n    _s.required = input.hasAttribute('required');\n    this.generateClassSelectors(_s.classNames);\n    if (_s.dropdown.includeSelectedTags === undefined) _s.dropdown.includeSelectedTags = _s.duplicates;\n    if (this.isIE) _s.autoComplete = false; // IE goes crazy if this isn't false\n\n    [\"whitelist\", \"blacklist\"].forEach(function (name) {\n      var attrVal = input.getAttribute('data-' + name);\n      if (attrVal) {\n        attrVal = attrVal.split(_s.delimiters);\n        if (attrVal instanceof Array) _s[name] = attrVal;\n      }\n    });\n\n    // backward-compatibility for old version of \"autoComplete\" setting:\n    if (\"autoComplete\" in settings && !isObject(settings.autoComplete)) {\n      _s.autoComplete = DEFAULTS.autoComplete;\n      _s.autoComplete.enabled = settings.autoComplete;\n    }\n    if (_s.mode == 'mix') {\n      _s.pattern = _s.pattern || /@/;\n      _s.autoComplete.rightKey = true;\n      _s.delimiters = settings.delimiters || null; // default dlimiters in mix-mode must be NULL\n\n      // needed for \"filterListItems\". This assumes the user might have forgotten to manually\n      // define the same term in \"dropdown.searchKeys\" as defined in \"tagTextProp\" setting, so\n      // by automatically adding it, tagify is \"helping\" out, guessing the intesntions of the developer.\n      if (_s.tagTextProp && !_s.dropdown.searchKeys.includes(_s.tagTextProp)) _s.dropdown.searchKeys.push(_s.tagTextProp);\n    }\n    if (input.pattern) try {\n      _s.pattern = new RegExp(input.pattern);\n    } catch (e) {}\n\n    // Convert the \"delimiters\" setting into a REGEX object\n    if (_s.delimiters) {\n      _s._delimiters = _s.delimiters;\n      try {\n        _s.delimiters = new RegExp(this.settings.delimiters, \"g\");\n      } catch (e) {}\n    }\n    if (_s.disabled) _s.userInput = false;\n    this.TEXTS = _objectSpread2(_objectSpread2({}, TEXTS), _s.texts || {});\n\n    // make sure the dropdown will be shown on \"focus\" and not only after typing something (in \"select\" mode)\n    if (_s.mode == 'select' && !((_settings$dropdown = settings.dropdown) !== null && _settings$dropdown !== void 0 && _settings$dropdown.enabled) || !_s.userInput) {\n      _s.dropdown.enabled = 0;\n    }\n    _s.dropdown.appendTarget = ((_settings$dropdown2 = settings.dropdown) === null || _settings$dropdown2 === void 0 ? void 0 : _settings$dropdown2.appendTarget) || document.body;\n\n    // get & merge persisted data with current data\n    var persistedWhitelist = this.getPersistedData('whitelist');\n    if (Array.isArray(persistedWhitelist)) this.whitelist = Array.isArray(_s.whitelist) ? concatWithoutDups(_s.whitelist, persistedWhitelist) : persistedWhitelist;\n  },\n  /**\r\n   * Returns a string of HTML element attributes\r\n   * @param {Object} data [Tag data]\r\n   */\n  getAttributes: function getAttributes(data) {\n    var attrs = this.getCustomAttributes(data),\n      s = '',\n      k;\n    for (k in attrs) s += \" \" + k + (data[k] !== undefined ? \"=\\\"\".concat(attrs[k], \"\\\"\") : \"\");\n    return s;\n  },\n  /**\r\n   * Returns an object of attributes to be used for the templates\r\n   */\n  getCustomAttributes: function getCustomAttributes(data) {\n    // only items which are objects have properties which can be used as attributes\n    if (!isObject(data)) return '';\n    var output = {},\n      propName;\n    for (propName in data) {\n      if (propName.slice(0, 2) != '__' && propName != 'class' && data.hasOwnProperty(propName) && data[propName] !== undefined) output[propName] = escapeHTML(data[propName]);\n    }\n    return output;\n  },\n  setStateSelection: function setStateSelection() {\n    var selection = window.getSelection();\n\n    // save last selection place to be able to inject anything from outside to that specific place\n    var sel = {\n      anchorOffset: selection.anchorOffset,\n      anchorNode: selection.anchorNode,\n      range: selection.getRangeAt && selection.rangeCount && selection.getRangeAt(0)\n    };\n    this.state.selection = sel;\n    return sel;\n  },\n  /**\r\n   * Get specific CSS variables which are relevant to this script and parse them as needed.\r\n   * The result is saved on the instance in \"this.CSSVars\"\r\n   */\n  getCSSVars: function getCSSVars() {\n    var compStyle = getComputedStyle(this.DOM.scope, null);\n    var getProp = function getProp(name) {\n      return compStyle.getPropertyValue('--' + name);\n    };\n    function seprateUnitFromValue(a) {\n      if (!a) return {};\n      a = a.trim().split(' ')[0];\n      var unit = a.split(/\\d+/g).filter(function (n) {\n          return n;\n        }).pop().trim(),\n        value = +a.split(unit).filter(function (n) {\n          return n;\n        })[0].trim();\n      return {\n        value: value,\n        unit: unit\n      };\n    }\n    this.CSSVars = {\n      tagHideTransition: function (_ref) {\n        var value = _ref.value,\n          unit = _ref.unit;\n        return unit == 's' ? value * 1000 : value;\n      }(seprateUnitFromValue(getProp('tag-hide-transition')))\n    };\n  },\n  /**\r\n   * builds the HTML of this component\r\n   * @param  {Object} input [DOM element which would be \"transformed\" into \"Tags\"]\r\n   */\n  build: function build(input) {\n    var DOM = this.DOM;\n    if (this.settings.mixMode.integrated) {\n      DOM.originalInput = null;\n      DOM.scope = input;\n      DOM.input = input;\n    } else {\n      DOM.originalInput = input;\n      DOM.originalInput_tabIndex = input.tabIndex;\n      DOM.scope = this.parseTemplate('wrapper', [input, this.settings]);\n      DOM.input = DOM.scope.querySelector(this.settings.classNames.inputSelector);\n      input.parentNode.insertBefore(DOM.scope, input);\n      input.tabIndex = -1; // do not allow focus or typing directly, once tagified\n    }\n  },\n  /**\r\n   * revert any changes made by this component\r\n   */\n  destroy: function destroy() {\n    this.events.unbindGlobal.call(this);\n    this.DOM.scope.parentNode.removeChild(this.DOM.scope);\n    this.DOM.originalInput.tabIndex = this.DOM.originalInput_tabIndex;\n    delete this.DOM.originalInput.__tagify;\n    this.dropdown.hide(true);\n    clearTimeout(this.dropdownHide__bindEventsTimeout);\n    clearInterval(this.listeners.main.originalInputValueObserverInterval);\n  },\n  /**\r\n   * if the original input has any values, add them as tags\r\n   */\n  loadOriginalValues: function loadOriginalValues(value) {\n    var lastChild,\n      _s = this.settings;\n\n    // temporarily block firing the \"change\" event on the original input until\n    // this method finish removing current value and adding a new one\n    this.state.blockChangeEvent = true;\n    if (value === undefined) {\n      var persistedOriginalValue = this.getPersistedData('value');\n\n      // if the field already has a field, trust its the desired\n      // one to be rendered and do not use the persisted one\n      if (persistedOriginalValue && !this.DOM.originalInput.value) value = persistedOriginalValue;else value = _s.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value;\n    }\n    this.removeAllTags();\n    if (value) {\n      if (_s.mode == 'mix') {\n        this.parseMixTags(value);\n        lastChild = this.DOM.input.lastChild;\n\n        // fixes a Chrome bug, when the last node in `mix-mode` is a tag, the caret appears at the far-top-top, outside the field\n        if (!lastChild || lastChild.tagName != 'BR') this.DOM.input.insertAdjacentHTML('beforeend', '<br>');\n      } else {\n        try {\n          if (JSON.parse(value) instanceof Array) value = JSON.parse(value);\n        } catch (err) {}\n        this.addTags(value, true).forEach(function (tag) {\n          return tag && tag.classList.add(_s.classNames.tagNoAnimation);\n        });\n      }\n    } else this.postUpdate();\n    this.state.lastOriginalValueReported = _s.mixMode.integrated ? '' : this.DOM.originalInput.value;\n  },\n  cloneEvent: function cloneEvent(e) {\n    var clonedEvent = {};\n    for (var v in e) if (v != 'path') clonedEvent[v] = e[v];\n    return clonedEvent;\n  },\n  /**\r\n   * Toogle global loading state on/off\r\n   * Useful when fetching async whitelist while user is typing\r\n   * @param {Boolean} isLoading\r\n   */\n  loading: function loading(isLoading) {\n    this.state.isLoading = isLoading;\n    // IE11 doesn't support toggle with second parameter\n    this.DOM.scope.classList[isLoading ? \"add\" : \"remove\"](this.settings.classNames.scopeLoading);\n    return this;\n  },\n  /**\r\n   * Toogle a tag loading state on/off\r\n   * @param {Boolean} isLoading\r\n   */\n  tagLoading: function tagLoading(tagElm, isLoading) {\n    if (tagElm)\n      // IE11 doesn't support toggle with second parameter\n      tagElm.classList[isLoading ? \"add\" : \"remove\"](this.settings.classNames.tagLoading);\n    return this;\n  },\n  /**\r\n   * Toggles class on the main tagify container (\"scope\")\r\n   * @param {String} className\r\n   * @param {Boolean} force\r\n   */\n  toggleClass: function toggleClass(className, force) {\n    if (typeof className == 'string') this.DOM.scope.classList.toggle(className, force);\n  },\n  toggleScopeValidation: function toggleScopeValidation(validation) {\n    var isValid = validation === true || validation === undefined; // initially it is undefined\n\n    if (!this.settings.required && validation && validation === this.TEXTS.empty) isValid = true;\n    this.toggleClass(this.settings.classNames.tagInvalid, !isValid);\n    this.DOM.scope.title = isValid ? '' : validation;\n  },\n  toggleFocusClass: function toggleFocusClass(force) {\n    this.toggleClass(this.settings.classNames.focus, !!force);\n  },\n  triggerChangeEvent: triggerChangeEvent,\n  events: events,\n  fixFirefoxLastTagNoCaret: function fixFirefoxLastTagNoCaret() {\n    return; // seems to be fixed in newer version of FF, so retiring below code (for now)\n    // var inputElm = this.DOM.input\n\n    // if( this.isFirefox && inputElm.childNodes.length && inputElm.lastChild.nodeType == 1 ){\n    //     inputElm.appendChild(document.createTextNode(\"\\u200b\"))\n    //     this.setRangeAtStartEnd(true, inputElm)\n    //     return true\n    // }\n  },\n  /** https://stackoverflow.com/a/59156872/104380\r\n   * @param {Boolean} start indicating where to place it (start or end of the node)\r\n   * @param {Object}  node  DOM node to place the caret at\r\n   */\n  setRangeAtStartEnd: function setRangeAtStartEnd(start, node) {\n    if (!node) return;\n    start = typeof start == 'number' ? start : !!start;\n    node = node.lastChild || node;\n    var sel = document.getSelection();\n\n    // do not force caret placement if the current selection (focus) is on another element (not this tagify instance)\n    if (sel.focusNode instanceof Element && !this.DOM.input.contains(sel.focusNode)) {\n      return true;\n    }\n    try {\n      if (sel.rangeCount >= 1) {\n        ['Start', 'End'].forEach(function (pos) {\n          return sel.getRangeAt(0)[\"set\" + pos](node, start ? start : node.length);\n        });\n      }\n    } catch (err) {\n      // console.warn(\"Tagify: \", err)\n    }\n  },\n  placeCaretAfterNode: function placeCaretAfterNode(node) {\n    if (!node || !node.parentNode) return;\n    var nextSibling = node,\n      sel = window.getSelection(),\n      range = sel.getRangeAt(0);\n    if (sel.rangeCount) {\n      range.setStartAfter(nextSibling);\n      range.collapse(true);\n      // range.setEndBefore(nextSibling || node);\n      sel.removeAllRanges();\n      sel.addRange(range);\n    }\n  },\n  insertAfterTag: function insertAfterTag(tagElm, newNode) {\n    newNode = newNode || this.settings.mixMode.insertAfterTag;\n    if (!tagElm || !tagElm.parentNode || !newNode) return;\n    newNode = typeof newNode == 'string' ? document.createTextNode(newNode) : newNode;\n    tagElm.parentNode.insertBefore(newNode, tagElm.nextSibling);\n    return newNode;\n  },\n  // compares all \"__originalData\" property values with the current \"tagData\" properties\n  // and returns \"true\" if something changed.\n  editTagChangeDetected: function editTagChangeDetected(tagData) {\n    var originalData = tagData.__originalData;\n    for (var prop in originalData) if (!this.dataProps.includes(prop) && tagData[prop] != originalData[prop]) return true;\n    return false; // not changed\n  },\n  // returns the node which has the actual tag's content\n  getTagTextNode: function getTagTextNode(tagElm) {\n    return tagElm.querySelector(this.settings.classNames.tagTextSelector);\n  },\n  // sets the text of a tag\n  setTagTextNode: function setTagTextNode(tagElm, HTML) {\n    this.getTagTextNode(tagElm).innerHTML = escapeHTML(HTML);\n  },\n  /**\r\n   * Enters a tag into \"edit\" mode\r\n   * @param {Node} tagElm the tag element to edit. if nothing specified, use last last\r\n   */\n  editTag: function editTag(tagElm, opts) {\n    var _this15 = this;\n    tagElm = tagElm || this.getLastTag();\n    opts = opts || {};\n    this.dropdown.hide();\n    var _s = this.settings,\n      editableElm = this.getTagTextNode(tagElm),\n      tagIdx = this.getNodeIndex(tagElm),\n      tagData = getSetTagData(tagElm),\n      _CB = this.events.callbacks,\n      that = this,\n      isValid = true,\n      delayed_onEditTagBlur = function delayed_onEditTagBlur() {\n        setTimeout(function () {\n          return _CB.onEditTagBlur.call(that, that.getTagTextNode(tagElm));\n        });\n      };\n    if (!editableElm) {\n      console.warn('Cannot find element in Tag template: .', _s.classNames.tagTextSelector);\n      return;\n    }\n    if (tagData instanceof Object && \"editable\" in tagData && !tagData.editable) return;\n\n    // cache the original data, on the DOM node, before any modification ocurs, for possible revert\n    tagData = getSetTagData(tagElm, {\n      __originalData: extend({}, tagData),\n      __originalHTML: tagElm.cloneNode(true)\n    });\n    // re-set the tagify custom-prop on the clones element (because cloning removed it)\n    getSetTagData(tagData.__originalHTML, tagData.__originalData);\n    editableElm.setAttribute('contenteditable', true);\n    tagElm.classList.add(_s.classNames.tagEditing);\n    editableElm.addEventListener('focus', _CB.onEditTagFocus.bind(this, tagElm));\n    editableElm.addEventListener('blur', delayed_onEditTagBlur);\n    editableElm.addEventListener('input', _CB.onEditTagInput.bind(this, editableElm));\n    editableElm.addEventListener('paste', _CB.onEditTagPaste.bind(this, editableElm));\n    editableElm.addEventListener('keydown', function (e) {\n      return _CB.onEditTagkeydown.call(_this15, e, tagElm);\n    });\n    editableElm.addEventListener('compositionstart', _CB.onCompositionStart.bind(this));\n    editableElm.addEventListener('compositionend', _CB.onCompositionEnd.bind(this));\n    if (!opts.skipValidation) isValid = this.editTagToggleValidity(tagElm);\n    editableElm.originalIsValid = isValid;\n    this.trigger(\"edit:start\", {\n      tag: tagElm,\n      index: tagIdx,\n      data: tagData,\n      isValid: isValid\n    });\n    editableElm.focus();\n    this.setRangeAtStartEnd(false, editableElm); // place the caret at the END of the editable tag text\n\n    return this;\n  },\n  /**\r\n   * If a tag is invalid, for any reason, set its class to \"not allowed\" (see defaults file)\r\n   * @param {Node} tagElm required\r\n   * @param {Object} tagData optional\r\n   * @returns true if valid, a string (reason) if not\r\n   */\n  editTagToggleValidity: function editTagToggleValidity(tagElm, tagData) {\n    var tagData = tagData || getSetTagData(tagElm),\n      isValid;\n    if (!tagData) {\n      console.warn(\"tag has no data: \", tagElm, tagData);\n      return;\n    }\n    isValid = !(\"__isValid\" in tagData) || tagData.__isValid === true;\n    if (!isValid) {\n      this.removeTagsFromValue(tagElm);\n    }\n    this.update();\n\n    //this.validateTag(tagData);\n\n    tagElm.classList.toggle(this.settings.classNames.tagNotAllowed, !isValid);\n    return tagData.__isValid;\n  },\n  onEditTagDone: function onEditTagDone(tagElm, tagData) {\n    tagElm = tagElm || this.state.editing.scope;\n    tagData = tagData || {};\n    var eventData = {\n      tag: tagElm,\n      index: this.getNodeIndex(tagElm),\n      previousData: getSetTagData(tagElm),\n      data: tagData\n    };\n    this.trigger(\"edit:beforeUpdate\", eventData, {\n      cloneData: false\n    });\n    this.state.editing = false;\n    delete tagData.__originalData;\n    delete tagData.__originalHTML;\n    if (tagElm && tagData[this.settings.tagTextProp]) {\n      tagElm = this.replaceTag(tagElm, tagData);\n      this.editTagToggleValidity(tagElm, tagData);\n      if (this.settings.a11y.focusableTags) tagElm.focus();else\n        // place caret after edited tag\n        this.placeCaretAfterNode(tagElm);\n    } else if (tagElm) this.removeTags(tagElm);\n    this.trigger(\"edit:updated\", eventData);\n    this.dropdown.hide();\n\n    // check if any of the current tags which might have been marked as \"duplicate\" should be now un-marked\n    if (this.settings.keepInvalidTags) this.reCheckInvalidTags();\n  },\n  /**\r\n   * Replaces an exisitng tag with a new one. Used for updating a tag's data\r\n   * @param {Object} tagElm  [DOM node to replace]\r\n   * @param {Object} tagData [data to create new tag from]\r\n   */\n  replaceTag: function replaceTag(tagElm, tagData) {\n    if (!tagData || !tagData.value) tagData = tagElm.__tagifyTagData;\n\n    // if tag is invalid, make the according changes in the newly created element\n    if (tagData.__isValid && tagData.__isValid != true) extend(tagData, this.getInvalidTagAttrs(tagData, tagData.__isValid));\n    var newTagElm = this.createTagElem(tagData);\n\n    // update DOM\n    tagElm.parentNode.replaceChild(newTagElm, tagElm);\n    this.updateValueByDOMTags();\n    return newTagElm;\n  },\n  /**\r\n   * update \"value\" (Array of Objects) by traversing all valid tags\r\n   */\n  updateValueByDOMTags: function updateValueByDOMTags() {\n    var _this16 = this;\n    this.value.length = 0;\n    [].forEach.call(this.getTagElms(), function (node) {\n      if (node.classList.contains(_this16.settings.classNames.tagNotAllowed.split(' ')[0])) return;\n      _this16.value.push(getSetTagData(node));\n    });\n    this.update();\n  },\n  /**\r\n   * injects nodes/text at caret position, which is saved on the \"state\" when \"blur\" event gets triggered\r\n   * @param {Node} injectedNode [the node to inject at the caret position]\r\n   * @param {Object} selection [optional range Object. must have \"anchorNode\" & \"anchorOffset\"]\r\n   */\n  injectAtCaret: function injectAtCaret(injectedNode, range) {\n    var _this$state$selection;\n    range = range || ((_this$state$selection = this.state.selection) === null || _this$state$selection === void 0 ? void 0 : _this$state$selection.range);\n    if (!range && injectedNode) {\n      this.appendMixTags(injectedNode);\n      return this;\n    }\n    _injectAtCaret(injectedNode, range);\n    this.setRangeAtStartEnd(false, injectedNode);\n    this.updateValueByDOMTags(); // updates internal \"this.value\"\n    this.update(); // updates original input/textarea\n\n    return this;\n  },\n  /**\r\n   * input bridge for accessing & setting\r\n   * @type {Object}\r\n   */\n  input: {\n    set: function set() {\n      var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var updateDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var hideDropdown = this.settings.dropdown.closeOnSelect;\n      this.state.inputText = s;\n      if (updateDOM) this.DOM.input.innerHTML = escapeHTML(\"\" + s);\n      if (!s && hideDropdown) this.dropdown.hide.bind(this);\n      this.input.autocomplete.suggest.call(this);\n      this.input.validate.call(this);\n    },\n    raw: function raw() {\n      return this.DOM.input.textContent;\n    },\n    /**\r\n     * Marks the tagify's input as \"invalid\" if the value did not pass \"validateTag()\"\r\n     */\n    validate: function validate() {\n      var isValid = !this.state.inputText || this.validateTag({\n        value: this.state.inputText\n      }) === true;\n      this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid, !isValid);\n      return isValid;\n    },\n    // remove any child DOM elements that aren't of type TEXT (like <br>)\n    normalize: function normalize(node) {\n      var clone = node || this.DOM.input,\n        //.cloneNode(true),\n        v = [];\n\n      // when a text was pasted in FF, the \"this.DOM.input\" element will have <br> but no newline symbols (\\n), and this will\n      // result in tags not being properly created if one wishes to create a separate tag per newline.\n      clone.childNodes.forEach(function (n) {\n        return n.nodeType == 3 && v.push(n.nodeValue);\n      });\n      v = v.join(\"\\n\");\n      try {\n        // \"delimiters\" might be of a non-regex value, where this will fail (\"Tags With Properties\" example in demo page):\n        v = v.replace(/(?:\\r\\n|\\r|\\n)/g, this.settings.delimiters.source.charAt(0));\n      } catch (err) {}\n      v = v.replace(/\\s/g, ' '); // replace NBSPs with spaces characters\n\n      return this.trim(v);\n    },\n    /**\r\n     * suggest the rest of the input's value (via CSS \"::after\" using \"content:attr(...)\")\r\n     * @param  {String} s [description]\r\n     */\n    autocomplete: {\n      suggest: function suggest(data) {\n        if (!this.settings.autoComplete.enabled) return;\n        data = data || {\n          value: ''\n        };\n        if (typeof data == 'string') data = {\n          value: data\n        };\n        var suggestedText = this.dropdown.getMappedValue(data);\n        if (typeof suggestedText === 'number') return;\n        var suggestionStart = suggestedText.substr(0, this.state.inputText.length).toLowerCase(),\n          suggestionTrimmed = suggestedText.substring(this.state.inputText.length);\n        if (!suggestedText || !this.state.inputText || suggestionStart != this.state.inputText.toLowerCase()) {\n          this.DOM.input.removeAttribute(\"data-suggest\");\n          delete this.state.inputSuggestion;\n        } else {\n          this.DOM.input.setAttribute(\"data-suggest\", suggestionTrimmed);\n          this.state.inputSuggestion = data;\n        }\n      },\n      /**\r\n       * sets the suggested text as the input's value & cleanup the suggestion autocomplete.\r\n       * @param {String} s [text]\r\n       */\n      set: function set(s) {\n        var dataSuggest = this.DOM.input.getAttribute('data-suggest'),\n          suggestion = s || (dataSuggest ? this.state.inputText + dataSuggest : null);\n        if (suggestion) {\n          if (this.settings.mode == 'mix') {\n            this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix + suggestion));\n          } else {\n            this.input.set.call(this, suggestion);\n            this.setRangeAtStartEnd(false, this.DOM.input);\n          }\n          this.input.autocomplete.suggest.call(this);\n          this.dropdown.hide();\n          return true;\n        }\n        return false;\n      }\n    }\n  },\n  /**\r\n   * returns the index of the the tagData within the \"this.value\" array collection.\r\n   * since values should be unique, it is suffice to only search by \"value\" property\r\n   * @param {Object} tagData\r\n   */\n  getTagIdx: function getTagIdx(tagData) {\n    return this.value.findIndex(function (item) {\n      return item.__tagId == (tagData || {}).__tagId;\n    });\n  },\n  getNodeIndex: function getNodeIndex(node) {\n    var index = 0;\n    if (node) while (node = node.previousElementSibling) index++;\n    return index;\n  },\n  getTagElms: function getTagElms() {\n    for (var _len = arguments.length, classess = new Array(_len), _key = 0; _key < _len; _key++) {\n      classess[_key] = arguments[_key];\n    }\n    var classname = '.' + [].concat(_toConsumableArray(this.settings.classNames.tag.split(' ')), classess).join('.');\n    return [].slice.call(this.DOM.scope.querySelectorAll(classname)); // convert nodeList to Array - https://stackoverflow.com/a/3199627/104380\n  },\n  /**\r\n   * gets the last non-readonly, not-in-the-proccess-of-removal tag\r\n   */\n  getLastTag: function getLastTag() {\n    var lastTag = this.DOM.scope.querySelectorAll(\"\".concat(this.settings.classNames.tagSelector, \":not(.\").concat(this.settings.classNames.tagHide, \"):not([readonly])\"));\n    return lastTag[lastTag.length - 1];\n  },\n  /**\r\n   * Searches if any tag with a certain value already exis\r\n   * @param  {String/Object} value [text value / tag data object]\r\n   * @param  {Boolean} caseSensitive\r\n   * @return {Number}\r\n   */\n  isTagDuplicate: function isTagDuplicate(value, caseSensitive, tagId) {\n    var dupsCount = 0,\n      _s = this.settings;\n\n    // duplications are irrelevant for this scenario\n    if (_s.mode == 'select') return false;\n    var _iterator4 = _createForOfIteratorHelper(this.value),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var item = _step4.value;\n        var isSameStr = sameStr(this.trim(\"\" + value), item.value, caseSensitive);\n        if (isSameStr && tagId != item.__tagId) dupsCount++;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    return dupsCount;\n  },\n  getTagIndexByValue: function getTagIndexByValue(value) {\n    var _this17 = this;\n    var indices = [];\n    this.getTagElms().forEach(function (tagElm, i) {\n      if (sameStr(_this17.trim(tagElm.textContent), value, _this17.settings.dropdown.caseSensitive)) indices.push(i);\n    });\n    return indices;\n  },\n  getTagElmByValue: function getTagElmByValue(value) {\n    var tagIdx = this.getTagIndexByValue(value)[0];\n    return this.getTagElms()[tagIdx];\n  },\n  /**\r\n   * Temporarily marks a tag element (by value or Node argument)\r\n   * @param  {Object} tagElm [a specific \"tag\" element to compare to the other tag elements siblings]\r\n   */\n  flashTag: function flashTag(tagElm) {\n    var _this18 = this;\n    if (tagElm) {\n      tagElm.classList.add(this.settings.classNames.tagFlash);\n      setTimeout(function () {\n        tagElm.classList.remove(_this18.settings.classNames.tagFlash);\n      }, 100);\n    }\n  },\n  /**\r\n   * checks if text is in the blacklist\r\n   */\n  isTagBlacklisted: function isTagBlacklisted(v) {\n    v = this.trim(v.toLowerCase());\n    return this.settings.blacklist.filter(function (x) {\n      return (\"\" + x).toLowerCase() == v;\n    }).length;\n  },\n  /**\r\n   * checks if text is in the whitelist\r\n   */\n  isTagWhitelisted: function isTagWhitelisted(v) {\n    return !!this.getWhitelistItem(v);\n    /*\r\n    return this.settings.whitelist.some(item =>\r\n        typeof v == 'string'\r\n            ? sameStr(this.trim(v), (item.value || item))\r\n            : sameStr(JSON.stringify(item), JSON.stringify(v))\r\n    )\r\n    */\n  },\n  /**\r\n   * Returns the first whitelist item matched, by value (if match found)\r\n   * @param {String} value [text to match by]\r\n   */\n  getWhitelistItem: function getWhitelistItem(value, prop, whitelist) {\n    var result,\n      prop = prop || 'value',\n      _s = this.settings,\n      whitelist = whitelist || _s.whitelist;\n    whitelist.some(function (_wi) {\n      var _wiv = typeof _wi == 'string' ? _wi : _wi[prop] || _wi.value,\n        isSameStr = sameStr(_wiv, value, _s.dropdown.caseSensitive, _s.trim);\n      if (isSameStr) {\n        result = typeof _wi == 'string' ? {\n          value: _wi\n        } : _wi;\n        return true;\n      }\n    });\n\n    // first iterate the whitelist, try find matches by \"value\" and if that fails\n    // and a \"tagTextProp\" is set to be other than \"value\", try that also\n    if (!result && prop == 'value' && _s.tagTextProp != 'value') {\n      // if found, adds the first which matches\n      result = this.getWhitelistItem(value, _s.tagTextProp, whitelist);\n    }\n    return result;\n  },\n  /**\r\n   * validate a tag object BEFORE the actual tag will be created & appeneded\r\n   * @param  {String} s\r\n   * @param  {String} uid      [unique ID, to not inclue own tag when cheking for duplicates]\r\n   * @return {Boolean/String}  [\"true\" if validation has passed, String for a fail]\r\n   */\n  validateTag: function validateTag(tagData) {\n    var _s = this.settings,\n      // when validating a tag in edit-mode, need to take \"tagTextProp\" into consideration\n      prop = \"value\" in tagData ? \"value\" : _s.tagTextProp,\n      v = this.trim(tagData[prop] + \"\");\n\n    // check for definitive empty value\n    if (!(tagData[prop] + \"\").trim()) return this.TEXTS.empty;\n\n    // check if pattern should be used and if so, use it to test the value\n    if (_s.pattern && _s.pattern instanceof RegExp && !_s.pattern.test(v)) return this.TEXTS.pattern;\n\n    // check for duplicates\n    if (!_s.duplicates && this.isTagDuplicate(v, _s.dropdown.caseSensitive, tagData.__tagId)) return this.TEXTS.duplicate;\n    if (this.isTagBlacklisted(v) || _s.enforceWhitelist && !this.isTagWhitelisted(v)) return this.TEXTS.notAllowed;\n    if (_s.validate) return _s.validate(tagData);\n    return true;\n  },\n  getInvalidTagAttrs: function getInvalidTagAttrs(tagData, validation) {\n    return {\n      \"aria-invalid\": true,\n      \"class\": \"\".concat(tagData.class || '', \" \").concat(this.settings.classNames.tagNotAllowed).trim(),\n      \"title\": validation\n    };\n  },\n  hasMaxTags: function hasMaxTags() {\n    return this.value.length >= this.settings.maxTags ? this.TEXTS.exceed : false;\n  },\n  setReadonly: function setReadonly(toggle, attrribute) {\n    var _s = this.settings;\n    document.activeElement.blur(); // exit possible edit-mode\n    _s[attrribute || 'readonly'] = toggle;\n    this.DOM.scope[(toggle ? 'set' : 'remove') + 'Attribute'](attrribute || 'readonly', true);\n    this.setContentEditable(!toggle);\n  },\n  setContentEditable: function setContentEditable(state) {\n    if (!this.settings.userInput) return;\n    this.DOM.input.contentEditable = state;\n    this.DOM.input.tabIndex = !!state ? 0 : -1;\n  },\n  setDisabled: function setDisabled(isDisabled) {\n    this.setReadonly(isDisabled, 'disabled');\n  },\n  /**\r\n   * pre-proccess the tagsItems, which can be a complex tagsItems like an Array of Objects or a string comprised of multiple words\r\n   * so each item should be iterated on and a tag created for.\r\n   * @return {Array} [Array of Objects]\r\n   */\n  normalizeTags: function normalizeTags(tagsItems) {\n    var _this19 = this;\n    var _this$settings = this.settings,\n      whitelist = _this$settings.whitelist,\n      delimiters = _this$settings.delimiters,\n      mode = _this$settings.mode,\n      tagTextProp = _this$settings.tagTextProp,\n      whitelistMatches = [],\n      whitelistWithProps = whitelist ? whitelist[0] instanceof Object : false,\n      isArray = Array.isArray(tagsItems),\n      isCollection = isArray && tagsItems[0].value,\n      mapStringToCollection = function mapStringToCollection(s) {\n        return (s + \"\").split(delimiters).filter(function (n) {\n          return n;\n        }).map(function (v) {\n          return _defineProperty2(_defineProperty2({}, tagTextProp, _this19.trim(v)), \"value\", _this19.trim(v));\n        });\n      };\n    if (typeof tagsItems == 'number') tagsItems = tagsItems.toString();\n\n    // if the argument is a \"simple\" String, ex: \"aaa, bbb, ccc\"\n    if (typeof tagsItems == 'string') {\n      if (!tagsItems.trim()) return [];\n\n      // go over each tag and add it (if there were multiple ones)\n      tagsItems = mapStringToCollection(tagsItems);\n    }\n\n    // if is an Array of Strings, convert to an Array of Objects\n    else if (isArray) {\n      var _ref3;\n      // flatten the 2D array\n      tagsItems = (_ref3 = []).concat.apply(_ref3, _toConsumableArray(tagsItems.map(function (item) {\n        return item.value != undefined ? item // mapStringToCollection(item.value).map(newItem => ({...item,...newItem}))\n        : mapStringToCollection(item);\n      })));\n    }\n\n    // search if the tag exists in the whitelist as an Object (has props),\n    // to be able to use its properties.\n    // skip matching collections with whitelist items as they are considered \"whole\"\n    if (whitelistWithProps && !isCollection) {\n      tagsItems.forEach(function (item) {\n        var whitelistMatchesValues = whitelistMatches.map(function (a) {\n          return a.value;\n        });\n\n        // if suggestions are shown, they are already filtered, so it's easier to use them,\n        // because the whitelist might also include items which have already been added\n        var filteredList = _this19.dropdown.filterListItems.call(_this19, item[tagTextProp], {\n          exact: true\n        });\n        if (!_this19.settings.duplicates)\n          // also filter out items which have already been matched in previous iterations\n          filteredList = filteredList.filter(function (filteredItem) {\n            return !whitelistMatchesValues.includes(filteredItem.value);\n          });\n\n        // get the best match out of list of possible matches.\n        // if there was a single item in the filtered list, use that one\n        var matchObj = filteredList.length > 1 ? _this19.getWhitelistItem(item[tagTextProp], tagTextProp, filteredList) : filteredList[0];\n        if (matchObj && matchObj instanceof Object) {\n          whitelistMatches.push(matchObj); // set the Array (with the found Object) as the new value\n        } else if (mode != 'mix') {\n          if (item.value == undefined) item.value = item[tagTextProp];\n          whitelistMatches.push(item);\n        }\n      });\n      if (whitelistMatches.length) tagsItems = whitelistMatches;\n    }\n    return tagsItems;\n  },\n  /**\r\n   * Parse the initial value of a textarea (or input) element and generate mixed text w/ tags\r\n   * https://stackoverflow.com/a/57598892/104380\r\n   * @param {String} s\r\n   */\n  parseMixTags: function parseMixTags(s) {\n    var _this20 = this;\n    var _this$settings2 = this.settings,\n      mixTagsInterpolator = _this$settings2.mixTagsInterpolator,\n      duplicates = _this$settings2.duplicates,\n      transformTag = _this$settings2.transformTag,\n      enforceWhitelist = _this$settings2.enforceWhitelist,\n      maxTags = _this$settings2.maxTags,\n      tagTextProp = _this$settings2.tagTextProp,\n      tagsDataSet = [];\n    s = s.split(mixTagsInterpolator[0]).map(function (s1, i) {\n      var s2 = s1.split(mixTagsInterpolator[1]),\n        preInterpolated = s2[0],\n        maxTagsReached = tagsDataSet.length == maxTags,\n        textProp,\n        tagData,\n        tagElm;\n      try {\n        // skip numbers and go straight to the \"catch\" statement\n        if (preInterpolated == +preInterpolated) throw Error;\n        tagData = JSON.parse(preInterpolated);\n      } catch (err) {\n        tagData = _this20.normalizeTags(preInterpolated)[0] || {\n          value: preInterpolated\n        };\n      }\n      transformTag.call(_this20, tagData);\n      if (!maxTagsReached && s2.length > 1 && (!enforceWhitelist || _this20.isTagWhitelisted(tagData.value)) && !(!duplicates && _this20.isTagDuplicate(tagData.value))) {\n        // in case \"tagTextProp\" setting is set to other than \"value\" and this tag does not have this prop\n        textProp = tagData[tagTextProp] ? tagTextProp : 'value';\n        tagData[textProp] = _this20.trim(tagData[textProp]);\n        tagElm = _this20.createTagElem(tagData);\n        tagsDataSet.push(tagData);\n        tagElm.classList.add(_this20.settings.classNames.tagNoAnimation);\n        s2[0] = tagElm.outerHTML; //+ \"&#8288;\"  // put a zero-space at the end so the caret won't jump back to the start (when the last input's child element is a tag)\n        _this20.value.push(tagData);\n      } else if (s1) return i ? mixTagsInterpolator[0] + s1 : s1;\n      return s2.join('');\n    }).join('');\n    this.DOM.input.innerHTML = s;\n    this.DOM.input.appendChild(document.createTextNode(''));\n    this.DOM.input.normalize();\n    this.getTagElms().forEach(function (elm, idx) {\n      return getSetTagData(elm, tagsDataSet[idx]);\n    });\n    this.update({\n      withoutChangeEvent: true\n    });\n    return s;\n  },\n  /**\r\n   * For mixed-mode: replaces a text starting with a prefix with a wrapper element (tag or something)\r\n   * First there *has* to be a \"this.state.tag\" which is a string that was just typed and is staring with a prefix\r\n   */\n  replaceTextWithNode: function replaceTextWithNode(newWrapperNode, strToReplace) {\n    if (!this.state.tag && !strToReplace) return;\n    strToReplace = strToReplace || this.state.tag.prefix + this.state.tag.value;\n    var idx,\n      nodeToReplace,\n      selection = this.state.selection || window.getSelection(),\n      nodeAtCaret = selection.anchorNode,\n      firstSplitOffset = this.state.tag.delimiters ? this.state.tag.delimiters.length : 0;\n\n    // STEP 1: ex. replace #ba with the tag \"bart\" where \"|\" is where the caret is:\n    // CURRENT STATE: \"foo #ba #ba| #ba\"\n\n    // split the text node at the index of the caret\n    nodeAtCaret.splitText(selection.anchorOffset - firstSplitOffset);\n\n    // node 0: \"foo #ba #ba|\"\n    // node 1: \" #ba\"\n\n    // get index of LAST occurence of \"#ba\"\n    idx = nodeAtCaret.nodeValue.lastIndexOf(strToReplace);\n    if (idx == -1) return true;\n    nodeToReplace = nodeAtCaret.splitText(idx);\n\n    // node 0: \"foo #ba \"\n    // node 1: \"#ba\"    <- nodeToReplace\n\n    newWrapperNode && nodeAtCaret.parentNode.replaceChild(newWrapperNode, nodeToReplace);\n\n    // must NOT normalize contenteditable or it will cause unwanted issues:\n    // https://monosnap.com/file/ZDVmRvq5upYkidiFedvrwzSswegWk7\n    // nodeAtCaret.parentNode.normalize()\n\n    return true;\n  },\n  /**\r\n   * For selecting a single option (not used for multiple tags, but for \"mode:select\" only)\r\n   * @param {Object} tagElm   Tag DOM node\r\n   * @param {Object} tagData  Tag data\r\n   */\n  selectTag: function selectTag(tagElm, tagData) {\n    var _this21 = this;\n    var _s = this.settings;\n    if (_s.enforceWhitelist && !this.isTagWhitelisted(tagData.value)) return;\n    this.input.set.call(this, tagData[_s.tagTextProp] || tagData.value, true);\n\n    // place the caret at the end of the input, only if a dropdown option was selected (and not by manually typing another value and clicking \"TAB\")\n    if (this.state.actions.selectOption) setTimeout(function () {\n      return _this21.setRangeAtStartEnd(false, _this21.DOM.input);\n    });\n    var lastTagElm = this.getLastTag();\n    if (lastTagElm) this.replaceTag(lastTagElm, tagData);else this.appendTag(tagElm);\n\n    // if( _s.enforceWhitelist )\n    //     this.setContentEditable(false);\n\n    this.value[0] = tagData;\n    this.update();\n    this.trigger('add', {\n      tag: tagElm,\n      data: tagData\n    });\n    return [tagElm];\n  },\n  /**\r\n   * add an empty \"tag\" element in an editable state\r\n   */\n  addEmptyTag: function addEmptyTag(initialData) {\n    var tagData = extend({\n        value: \"\"\n      }, initialData || {}),\n      tagElm = this.createTagElem(tagData);\n    getSetTagData(tagElm, tagData);\n\n    // add the tag to the component's DOM\n    this.appendTag(tagElm);\n    this.editTag(tagElm, {\n      skipValidation: true\n    });\n  },\n  /**\r\n   * add a \"tag\" element to the \"tags\" component\r\n   * @param {String/Array} tagsItems   [A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings]\r\n   * @param {Boolean}      clearInput  [flag if the input's value should be cleared after adding tags]\r\n   * @param {Boolean}      skipInvalid [do not add, mark & remove invalid tags]\r\n   * @return {Array} Array of DOM elements (tags)\r\n   */\n  addTags: function addTags(tagsItems, clearInput, skipInvalid) {\n    var _this22 = this;\n    var tagElems = [],\n      _s = this.settings,\n      aggregatedinvalidInput = [],\n      frag = document.createDocumentFragment();\n    skipInvalid = skipInvalid || _s.skipInvalid;\n    if (!tagsItems || tagsItems.length == 0) {\n      return tagElems;\n    }\n\n    // converts Array/String/Object to an Array of Objects\n    tagsItems = this.normalizeTags(tagsItems);\n    switch (_s.mode) {\n      case 'mix':\n        return this.addMixTags(tagsItems);\n      case 'select':\n        {\n          clearInput = false;\n          this.removeAllTags();\n        }\n    }\n    this.DOM.input.removeAttribute('style');\n    tagsItems.forEach(function (tagData) {\n      var tagElm,\n        tagElmParams = {},\n        originalData = Object.assign({}, tagData, {\n          value: tagData.value + \"\"\n        });\n\n      // shallow-clone tagData so later modifications will not apply to the source\n      tagData = Object.assign({}, originalData);\n      _s.transformTag.call(_this22, tagData);\n      tagData.__isValid = _this22.hasMaxTags() || _this22.validateTag(tagData);\n      if (tagData.__isValid !== true) {\n        if (skipInvalid) return;\n\n        // originalData is kept because it might be that this tag is invalid because it is a duplicate of another,\n        // and if that other tags is edited/deleted, this one should be re-validated and if is no more a duplicate - restored\n        extend(tagElmParams, _this22.getInvalidTagAttrs(tagData, tagData.__isValid), {\n          __preInvalidData: originalData\n        });\n        if (tagData.__isValid == _this22.TEXTS.duplicate)\n          // mark, for a brief moment, the tag (this this one) which THIS CURRENT tag is a duplcate of\n          _this22.flashTag(_this22.getTagElmByValue(tagData.value));\n        if (!_s.createInvalidTags) {\n          aggregatedinvalidInput.push(tagData.value);\n          return;\n        }\n      }\n      if ('readonly' in tagData) {\n        if (tagData.readonly) tagElmParams[\"aria-readonly\"] = true;\n        // if \"readonly\" is \"false\", remove it from the tagData so it won't be added as an attribute in the template\n        else delete tagData.readonly;\n      }\n\n      // Create tag HTML element\n      tagElm = _this22.createTagElem(tagData, tagElmParams);\n      tagElems.push(tagElm);\n\n      // mode-select overrides\n      if (_s.mode == 'select') {\n        return _this22.selectTag(tagElm, tagData);\n      }\n\n      // add the tag to the component's DOM\n      // this.appendTag(tagElm)\n      frag.appendChild(tagElm);\n      if (tagData.__isValid && tagData.__isValid === true) {\n        // update state\n        _this22.value.push(tagData);\n        _this22.trigger('add', {\n          tag: tagElm,\n          index: _this22.value.length - 1,\n          data: tagData\n        });\n      } else {\n        _this22.trigger(\"invalid\", {\n          data: tagData,\n          index: _this22.value.length,\n          tag: tagElm,\n          message: tagData.__isValid\n        });\n        if (!_s.keepInvalidTags)\n          // remove invalid tags (if \"keepInvalidTags\" is set to \"false\")\n          setTimeout(function () {\n            return _this22.removeTags(tagElm, true);\n          }, 1000);\n      }\n      _this22.dropdown.position(); // reposition the dropdown because the just-added tag might cause a new-line\n    });\n    this.appendTag(frag);\n    this.update();\n    if (tagsItems.length && clearInput) {\n      this.input.set.call(this, _s.createInvalidTags ? '' : aggregatedinvalidInput.join(_s._delimiters));\n      this.setRangeAtStartEnd(false, this.DOM.input);\n    }\n    _s.dropdown.enabled && this.dropdown.refilter();\n    return tagElems;\n  },\n  /**\r\n   * Adds a mix-content tag\r\n   * @param {String/Array} tagData    A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings\r\n   */\n  addMixTags: function addMixTags(tagsData) {\n    var _this23 = this;\n    tagsData = this.normalizeTags(tagsData);\n    if (tagsData[0].prefix || this.state.tag) {\n      return this.prefixedTextToTag(tagsData[0]);\n    }\n    var frag = document.createDocumentFragment();\n    tagsData.forEach(function (tagData) {\n      var tagElm = _this23.createTagElem(tagData);\n      frag.appendChild(tagElm);\n    });\n    this.appendMixTags(frag);\n    return frag;\n  },\n  appendMixTags: function appendMixTags(node) {\n    var selection = !!this.state.selection;\n\n    // if \"selection\" exists, assumes intention of inecting the new tag at the last\n    // saved location of the caret inside \"this.DOM.input\"\n    if (selection) {\n      this.injectAtCaret(node);\n    }\n    // else, create a range and inject the new tag as the last child of \"this.DOM.input\"\n    else {\n      this.DOM.input.focus();\n      selection = this.setStateSelection();\n      selection.range.setStart(this.DOM.input, selection.range.endOffset);\n      selection.range.setEnd(this.DOM.input, selection.range.endOffset);\n      this.DOM.input.appendChild(node);\n      this.updateValueByDOMTags(); // updates internal \"this.value\"\n      this.update(); // updates original input/textarea\n    }\n  },\n  /**\r\n   * Adds a tag which was activly typed by the user\r\n   * @param {String/Array} tagItem   [A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings]\r\n   */\n  prefixedTextToTag: function prefixedTextToTag(tagItem) {\n    var _this24 = this;\n    var _s = this.settings,\n      tagElm,\n      createdFromDelimiters = this.state.tag.delimiters;\n    _s.transformTag.call(this, tagItem);\n    tagItem.prefix = tagItem.prefix || this.state.tag ? this.state.tag.prefix : (_s.pattern.source || _s.pattern)[0];\n\n    // TODO: should check if the tag is valid\n    tagElm = this.createTagElem(tagItem);\n\n    // tries to replace a taged textNode with a tagElm, and if not able,\n    // insert the new tag to the END if \"addTags\" was called from outside\n    if (!this.replaceTextWithNode(tagElm)) {\n      this.DOM.input.appendChild(tagElm);\n    }\n    setTimeout(function () {\n      return tagElm.classList.add(_this24.settings.classNames.tagNoAnimation);\n    }, 300);\n    this.value.push(tagItem);\n    this.update();\n    if (!createdFromDelimiters) {\n      var elm = this.insertAfterTag(tagElm) || tagElm;\n      // a timeout is needed when selecting a tag from the suggestions via mouse.\n      // Without it, it seems the caret is placed right after the tag and not after the\n      // node which was inserted after the tag (whitespace by default)\n      setTimeout(this.placeCaretAfterNode, 0, elm);\n    }\n    this.state.tag = null;\n    this.trigger('add', extend({}, {\n      tag: tagElm\n    }, {\n      data: tagItem\n    }));\n    return tagElm;\n  },\n  /**\r\n   * appened (validated) tag to the component's DOM scope\r\n   */\n  appendTag: function appendTag(tagElm) {\n    var DOM = this.DOM,\n      insertBeforeNode = DOM.input;\n\n    //if( insertBeforeNode === DOM.input )\n    DOM.scope.insertBefore(tagElm, insertBeforeNode);\n    //else\n    //    DOM.scope.appendChild(tagElm)\n  },\n  /**\r\n   * creates a DOM tag element and injects it into the component (this.DOM.scope)\r\n   * @param  {Object}  tagData [text value & properties for the created tag]\r\n   * @param  {Object}  extraData [properties which are for the HTML template only]\r\n   * @return {Object} [DOM element]\r\n   */\n  createTagElem: function createTagElem(tagData, extraData) {\n    tagData.__tagId = getUID();\n    var tagElm,\n      templateData = extend({}, tagData, _objectSpread2({\n        value: escapeHTML(tagData.value + \"\")\n      }, extraData));\n\n    // if( this.settings.readonly )\n    //     tagData.readonly = true\n\n    tagElm = this.parseTemplate('tag', [templateData, this]);\n\n    // crucial for proper caret placement when deleting content. if textNodes are allowed as children of a tag element,\n    // a browser bug casues the caret to be misplaced inside the tag element (especially affects \"readonly\" tags)\n    removeTextChildNodes(tagElm);\n    // while( tagElm.lastChild.nodeType == 3 )\n    //     tagElm.lastChild.parentNode.removeChild(tagElm.lastChild)\n\n    getSetTagData(tagElm, tagData);\n    return tagElm;\n  },\n  /**\r\n   * re-check all invalid tags.\r\n   * called after a tag was edited or removed\r\n   */\n  reCheckInvalidTags: function reCheckInvalidTags() {\n    var _this25 = this;\n    var _s = this.settings;\n    this.getTagElms(_s.classNames.tagNotAllowed).forEach(function (tagElm, i) {\n      var tagData = getSetTagData(tagElm),\n        hasMaxTags = _this25.hasMaxTags(),\n        tagValidation = _this25.validateTag(tagData),\n        isValid = tagValidation === true && !hasMaxTags;\n      if (_s.mode == 'select') _this25.toggleScopeValidation(tagValidation);\n\n      // if the tag has become valid\n      if (isValid) {\n        tagData = tagData.__preInvalidData ? tagData.__preInvalidData : {\n          value: tagData.value\n        };\n        return _this25.replaceTag(tagElm, tagData);\n      }\n\n      // if the tag is still invaild, set its title as such (reson of invalid might have changed)\n      tagElm.title = hasMaxTags || tagValidation;\n    });\n  },\n  /**\r\n   * Removes a tag\r\n   * @param  {Array|Node|String}  tagElms         [DOM element(s) or a String value. if undefined or null, remove last added tag]\r\n   * @param  {Boolean}            silent          [A flag, which when turned on, does not remove any value and does not update the original input value but simply removes the tag from tagify]\r\n   * @param  {Number}             tranDuration    [Transition duration in MS]\r\n   * TODO: Allow multiple tags to be removed at-once\r\n   */\n  removeTags: function removeTags(tagElms, silent, tranDuration) {\n    var _this26 = this;\n    var tagsToRemove,\n      _s = this.settings;\n    tagElms = tagElms && tagElms instanceof HTMLElement ? [tagElms] : tagElms instanceof Array ? tagElms : tagElms ? [tagElms] : [this.getLastTag()];\n\n    // normalize tagElms array values:\n    // 1. removing invalid items\n    // 2, if an item is String try to get the matching Tag HTML node\n    // 3. get the tag data\n    // 4. return a collection of Objects\n    tagsToRemove = tagElms.reduce(function (elms, tagElm) {\n      if (tagElm && typeof tagElm == 'string') tagElm = _this26.getTagElmByValue(tagElm);\n      var tagData = getSetTagData(tagElm);\n      if (tagElm && tagData && !tagData.readonly)\n        // make sure it's a tag and not some other node\n        // because the DOM node might be removed by async animation, the state will be updated while\n        // the node might still be in the DOM, so the \"update\" method should know which nodes to ignore\n        elms.push({\n          node: tagElm,\n          idx: _this26.getTagIdx(tagData),\n          // this.getNodeIndex(tagElm); // this.getTagIndexByValue(tagElm.textContent)\n          data: getSetTagData(tagElm, {\n            '__removed': true\n          })\n        });\n      return elms;\n    }, []);\n    tranDuration = typeof tranDuration == \"number\" ? tranDuration : this.CSSVars.tagHideTransition;\n    if (_s.mode == 'select') {\n      tranDuration = 0;\n      this.input.set.call(this);\n    }\n\n    // if only a single tag is to be removed.\n    // skip \"select\" mode because invalid tags are actually set to `this.value`\n    if (tagsToRemove.length == 1 && _s.mode != 'select') {\n      if (tagsToRemove[0].node.classList.contains(_s.classNames.tagNotAllowed)) silent = true;\n    }\n    if (!tagsToRemove.length) return;\n    return _s.hooks.beforeRemoveTag(tagsToRemove, {\n      tagify: this\n    }).then(function () {\n      function removeNode(tag) {\n        if (!tag.node.parentNode) return;\n        tag.node.parentNode.removeChild(tag.node);\n        if (!silent) {\n          // this.removeValueById(tagData.__uid)\n          this.trigger('remove', {\n            tag: tag.node,\n            index: tag.idx,\n            data: tag.data\n          });\n          this.dropdown.refilter();\n          this.dropdown.position();\n          this.DOM.input.normalize(); // best-practice when in mix-mode (safe to do always anyways)\n\n          // check if any of the current tags which might have been marked as \"duplicate\" should be un-marked\n          if (_s.keepInvalidTags) this.reCheckInvalidTags();\n\n          // below code is unfinished. it should iterate all currently invalid edited tags, which their edits have not\n          // changed the value yet, and should re-trigger the check, but since nothing has changed, it does not work...\n          // this.getTagElms(_s.classNames.tagEditing).forEach( this.events.callbacks.onEditTagBlur.bind )\n        } else if (_s.keepInvalidTags) this.trigger('remove', {\n          tag: tag.node,\n          index: tag.idx\n        });\n      }\n      function animation(tag) {\n        tag.node.style.width = parseFloat(window.getComputedStyle(tag.node).width) + 'px';\n        document.body.clientTop; // force repaint for the width to take affect before the \"hide\" class below\n        tag.node.classList.add(_s.classNames.tagHide);\n\n        // manual timeout (hack, since transitionend cannot be used because of hover)\n        setTimeout(removeNode.bind(this), tranDuration, tag);\n      }\n      if (tranDuration && tranDuration > 10 && tagsToRemove.length == 1) animation.call(_this26, tagsToRemove[0]);else tagsToRemove.forEach(removeNode.bind(_this26));\n\n      // update state regardless of animation\n      if (!silent) {\n        _this26.removeTagsFromValue(tagsToRemove.map(function (tag) {\n          return tag.node;\n        }));\n        _this26.update(); // update the original input with the current value\n\n        if (_s.mode == 'select') _this26.setContentEditable(true);\n      }\n    }).catch(function (reason) {});\n  },\n  removeTagsFromDOM: function removeTagsFromDOM() {\n    [].slice.call(this.getTagElms()).forEach(function (elm) {\n      return elm.parentNode.removeChild(elm);\n    });\n  },\n  /**\r\n   * @param {Array/Node} tags to be removed from the this.value array\r\n   */\n  removeTagsFromValue: function removeTagsFromValue(tags) {\n    var _this27 = this;\n    tags = Array.isArray(tags) ? tags : [tags];\n    tags.forEach(function (tag) {\n      var tagData = getSetTagData(tag),\n        tagIdx = _this27.getTagIdx(tagData);\n\n      //  delete tagData.__removed\n\n      if (tagIdx > -1) _this27.value.splice(tagIdx, 1);\n    });\n  },\n  removeAllTags: function removeAllTags(opts) {\n    var _this28 = this;\n    opts = opts || {};\n    this.value = [];\n    if (this.settings.mode == 'mix') this.DOM.input.innerHTML = '';else this.removeTagsFromDOM();\n    this.dropdown.refilter();\n    this.dropdown.position();\n    if (this.state.dropdown.visible) setTimeout(function () {\n      _this28.DOM.input.focus();\n    });\n    if (this.settings.mode == 'select') {\n      this.input.set.call(this);\n      this.setContentEditable(true);\n    }\n\n    // technically for now only \"withoutChangeEvent\" exists in the opts.\n    // if more properties will be added later, only pass what's needed to \"update\"\n    this.update(opts);\n  },\n  postUpdate: function postUpdate() {\n    this.state.blockChangeEvent = false;\n    var _s = this.settings,\n      classNames = _s.classNames,\n      hasValue = _s.mode == 'mix' ? _s.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value.trim() : this.value.length + this.input.raw.call(this).length;\n    this.toggleClass(classNames.hasMaxTags, this.value.length >= _s.maxTags);\n    this.toggleClass(classNames.hasNoTags, !this.value.length);\n    this.toggleClass(classNames.empty, !hasValue);\n\n    // specifically the \"select mode\" might have the \"invalid\" classname set when the field is changed, so it must be toggled on add/remove/edit\n    if (_s.mode == 'select') {\n      var _this$value2;\n      this.toggleScopeValidation((_this$value2 = this.value) === null || _this$value2 === void 0 || (_this$value2 = _this$value2[0]) === null || _this$value2 === void 0 ? void 0 : _this$value2.__isValid);\n    }\n  },\n  setOriginalInputValue: function setOriginalInputValue(v) {\n    var inputElm = this.DOM.originalInput;\n    if (!this.settings.mixMode.integrated) {\n      inputElm.value = v;\n      inputElm.tagifyValue = inputElm.value; // must set to \"inputElm.value\" and not again to \"inputValue\" because for some reason the browser changes the string afterwards a bit.\n      this.setPersistedData(v, 'value');\n    }\n  },\n  /**\r\n   * update the origianl (hidden) input field's value\r\n   * see - https://stackoverflow.com/q/50957841/104380\r\n   */\n  update: function update(args) {\n    var UPDATE_DELAY = 100;\n    clearTimeout(this.debouncedUpdateTimeout);\n    this.debouncedUpdateTimeout = setTimeout(reallyUpdate.bind(this), UPDATE_DELAY);\n    function reallyUpdate() {\n      var inputValue = this.getInputValue();\n      this.setOriginalInputValue(inputValue);\n      if ((!this.settings.onChangeAfterBlur || !(args || {}).withoutChangeEvent) && !this.state.blockChangeEvent) this.triggerChangeEvent();\n      this.postUpdate();\n    }\n  },\n  getInputValue: function getInputValue() {\n    var value = this.getCleanValue();\n    return this.settings.mode == 'mix' ? this.getMixedTagsAsString(value) : value.length ? this.settings.originalInputValueFormat ? this.settings.originalInputValueFormat(value) : JSON.stringify(value) : \"\";\n  },\n  /**\r\n   * removes properties from `this.value` which are only used internally\r\n   */\n  getCleanValue: function getCleanValue(v) {\n    return removeCollectionProp(v || this.value, this.dataProps);\n  },\n  getMixedTagsAsString: function getMixedTagsAsString() {\n    var result = \"\",\n      that = this,\n      _s = this.settings,\n      originalInputValueFormat = _s.originalInputValueFormat || JSON.stringify,\n      _interpolator = _s.mixTagsInterpolator;\n    function iterateChildren(rootNode) {\n      rootNode.childNodes.forEach(function (node) {\n        if (node.nodeType == 1) {\n          var tagData = getSetTagData(node);\n          if (node.tagName == 'BR') {\n            result += \"\\r\\n\";\n          }\n          if (tagData && isNodeTag.call(that, node)) {\n            if (tagData.__removed) return;else result += _interpolator[0] + originalInputValueFormat(omit(tagData, that.dataProps)) + _interpolator[1];\n          } else if (node.getAttribute('style') || ['B', 'I', 'U'].includes(node.tagName)) result += node.textContent;else if (node.tagName == 'DIV' || node.tagName == 'P') {\n            result += \"\\r\\n\";\n            //  if( !node.children.length && node.textContent )\n            //  result += node.textContent;\n            iterateChildren(node);\n          }\n        } else result += node.textContent;\n      });\n    }\n    iterateChildren(this.DOM.input);\n    return result;\n  }\n};\n\n// legacy support for changed methods names\nTagify.prototype.removeTag = Tagify.prototype.removeTags;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU0sSUFBSTl5QixJQUFJLENBQUM4VSxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDN1IsUUFBUSxDQUFDakQsSUFBSSxDQUFDMHBCLE9BQU8sQ0FBQyxFQUFFcEYsTUFBTSxJQUFJdGtCLElBQUksQ0FBQ2UsV0FBVyxDQUFDLEtBQUssSUFBSWYsSUFBSSxDQUFDMHBCLE9BQU8sSUFBSSxLQUFLLElBQUkxcEIsSUFBSSxDQUFDMHBCLE9BQU8sSUFBSSxHQUFHLEVBQUU7WUFDaktwRixNQUFNLElBQUksTUFBTTtZQUNoQjtZQUNBO1lBQ0F5TyxlQUFlLENBQUMveUIsSUFBSSxDQUFDO1VBQ3ZCO1FBQ0YsQ0FBQyxNQUFNc2tCLE1BQU0sSUFBSXRrQixJQUFJLENBQUNlLFdBQVc7TUFDbkMsQ0FBQyxDQUFDO0lBQ0o7SUFDQWd5QixlQUFlLENBQUMsSUFBSSxDQUFDam5CLEdBQUcsQ0FBQ3pPLEtBQUssQ0FBQztJQUMvQixPQUFPaW5CLE1BQU07RUFDZjtBQUNGLENBQUM7O0FBRUQ7QUFDQXNDLE1BQU0sQ0FBQ3BsQixTQUFTLENBQUMweEIsU0FBUyxHQUFHdE0sTUFBTSxDQUFDcGxCLFNBQVMsQ0FBQzRTLFVBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ldW5vcy1ibGFkZXMvLi9saWIvdGFnaWZ5L3RhZ2lmeS5lc20uanM/NjBmNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRhZ2lmeSAodiA0LjE3LjgpIC0gdGFncyBpbnB1dCBjb21wb25lbnRcbiAqIEJ5IHVuZGVmaW5lZFxuICogaHR0cHM6Ly9naXRodWIuY29tL3lhaXJFTy90YWdpZnlcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqIFxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICogXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuICogVEhFIFNPRlRXQVJFLlxyXG4gKiBcclxuICogVEhFIFNPRlRXQVJFIElTIE5PVCBQRVJNSVNTSUJMRSBUTyBCRSBTT0xELlxuICovXG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpO1xufVxuXG4vLyBjb25zb2xlLmpzb24gPSBjb25zb2xlLmpzb24gfHwgZnVuY3Rpb24oYXJndW1lbnQpe1xuLy8gICAgIGZvcih2YXIgYXJnPTA7IGFyZyA8IGFyZ3VtZW50cy5sZW5ndGg7ICsrYXJnKVxuLy8gICAgICAgICBjb25zb2xlLmxvZyggIEpTT04uc3RyaW5naWZ5KGFyZ3VtZW50c1thcmddLCBudWxsLCA0KSAgKVxuLy8gfVxuXG4vLyBjb25zdCBpc0VkZ2UgPSAvRWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KVxuY29uc3Qgc2FtZVN0ciA9IChzMSwgczIsIGNhc2VTZW5zaXRpdmUsIHRyaW0pID0+IHtcbiAgLy8gY2FzdCB0byBTdHJpbmdcbiAgczEgPSBcIlwiICsgczE7XG4gIHMyID0gXCJcIiArIHMyO1xuICBpZiAodHJpbSkge1xuICAgIHMxID0gczEudHJpbSgpO1xuICAgIHMyID0gczIudHJpbSgpO1xuICB9XG4gIHJldHVybiBjYXNlU2Vuc2l0aXZlID8gczEgPT0gczIgOiBzMS50b0xvd2VyQ2FzZSgpID09IHMyLnRvTG93ZXJDYXNlKCk7XG59O1xuXG4vLyBjb25zdCBnZXRVSUQgPSAoKSA9PiAobmV3IERhdGUoKS5nZXRUaW1lKCkgKyBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpKjEwMDAwKSsxKSkudG9TdHJpbmcoMTYpXG5jb25zdCByZW1vdmVDb2xsZWN0aW9uUHJvcCA9IChjb2xsZWN0aW9uLCB1bndhbnRlZFByb3BzKSA9PiBjb2xsZWN0aW9uICYmIEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikgJiYgY29sbGVjdGlvbi5tYXAodiA9PiBvbWl0KHYsIHVud2FudGVkUHJvcHMpKTtcbmZ1bmN0aW9uIG9taXQob2JqLCBwcm9wcykge1xuICB2YXIgbmV3T2JqID0ge30sXG4gICAgcDtcbiAgZm9yIChwIGluIG9iaikgaWYgKHByb3BzLmluZGV4T2YocCkgPCAwKSBuZXdPYmpbcF0gPSBvYmpbcF07XG4gIHJldHVybiBuZXdPYmo7XG59XG5mdW5jdGlvbiBkZWNvZGUocykge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcmV0dXJuIHMucmVwbGFjZSgvXFwmIz9bMC05YS16XSs7L2dpLCBmdW5jdGlvbiAoZW5jKSB7XG4gICAgZWwuaW5uZXJIVE1MID0gZW5jO1xuICAgIHJldHVybiBlbC5pbm5lclRleHQ7XG4gIH0pO1xufVxuXG4vKipcclxuICogdXRpbGl0eSBtZXRob2RcclxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM1Mzg1NTE4LzEwNDM4MFxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHMgW0hUTUwgc3RyaW5nXVxyXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgW0RPTSBub2RlXVxyXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSFRNTChzKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCksXG4gICAgbm9kZSA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocy50cmltKCksIFwidGV4dC9odG1sXCIpO1xuICByZXR1cm4gbm9kZS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xufVxuXG4vKipcclxuICogUmVtb3ZlZCBuZXcgbGluZXMgYW5kIGlycmVsZXZhbnQgc3BhY2VzIHdoaWNoIG1pZ2h0IGFmZmVjdCBsYXlvdXQsIGFuZCBhcmUgYmV0dGVyIGdvbmVcclxuICogQHBhcmFtIHtzdHJpbmd9IHMgW0hUTUwgc3RyaW5nXVxyXG4gKi9cbmZ1bmN0aW9uIG1pbmlmeShzKSB7XG4gIHJldHVybiBzID8gcy5yZXBsYWNlKC9cXD5bXFxyXFxuIF0rXFw8L2csIFwiPjxcIikucmVwbGFjZSgvKDwuKj8+KXxcXHMrL2csIChtLCAkMSkgPT4gJDEgPyAkMSA6ICcgJykgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ0ODQxNDg0LzEwNDM4MFxuICA6IFwiXCI7XG59XG5mdW5jdGlvbiByZW1vdmVUZXh0Q2hpbGROb2RlcyhlbG0pIHtcbiAgdmFyIGl0ZXIgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3IoZWxtLCBOb2RlRmlsdGVyLlNIT1dfVEVYVCwgbnVsbCwgZmFsc2UpLFxuICAgIHRleHRub2RlO1xuXG4gIC8vIHByaW50IGFsbCB0ZXh0IG5vZGVzXG4gIHdoaWxlICh0ZXh0bm9kZSA9IGl0ZXIubmV4dE5vZGUoKSkge1xuICAgIGlmICghdGV4dG5vZGUudGV4dENvbnRlbnQudHJpbSgpKSB0ZXh0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRleHRub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Zmlyc3RUZXh0Tm9kZShlbG0sIGFjdGlvbikge1xuICBhY3Rpb24gPSBhY3Rpb24gfHwgJ3ByZXZpb3VzJztcbiAgd2hpbGUgKGVsbSA9IGVsbVthY3Rpb24gKyAnU2libGluZyddKSBpZiAoZWxtLm5vZGVUeXBlID09IDMpIHJldHVybiBlbG07XG59XG5cbi8qKlxyXG4gKiB1dGlsaXR5IG1ldGhvZFxyXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjIzNDgwNC8xMDQzODBcclxuICovXG5mdW5jdGlvbiBlc2NhcGVIVE1MKHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBzID09ICdzdHJpbmcnID8gcy5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIikucmVwbGFjZSgvPC9nLCBcIiZsdDtcIikucmVwbGFjZSgvPi9nLCBcIiZndDtcIikucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIikucmVwbGFjZSgvYHwnL2csIFwiJiMwMzk7XCIpIDogcztcbn1cblxuLyoqXHJcbiAqIENoZWNrcyBpZiBhbiBhcmd1bWVudCBpcyBhIGphdmFzY3JpcHQgT2JqZWN0XHJcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikuc3BsaXQoJyAnKVsxXS5zbGljZSgwLCAtMSk7XG4gIHJldHVybiBvYmogPT09IE9iamVjdChvYmopICYmIHR5cGUgIT0gJ0FycmF5JyAmJiB0eXBlICE9ICdGdW5jdGlvbicgJiYgdHlwZSAhPSAnUmVnRXhwJyAmJiB0eXBlICE9ICdIVE1MVW5rbm93bkVsZW1lbnQnO1xufVxuXG4vKipcclxuICogbWVyZ2Ugb2JqZWN0cyBpbnRvIGEgc2luZ2xlIG5ldyBvbmVcclxuICogVEVTVDogZXh0ZW5kKHt9LCB7YTp7Zm9vOjF9LCBiOltdfSwge2E6e2JhcjoyfSwgYjpbMV0sIGM6KCk9Pnt9fSlcclxuICovXG5mdW5jdGlvbiBleHRlbmQobywgbzEsIG8yKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBPYmplY3QpKSBvID0ge307XG4gIGNvcHkobywgbzEpO1xuICBpZiAobzIpIGNvcHkobywgbzIpO1xuICBmdW5jdGlvbiBjb3B5KGEsIGIpIHtcbiAgICAvLyBjb3B5IG8yIHRvIG9cbiAgICBmb3IgKHZhciBrZXkgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGJba2V5XSkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChhW2tleV0pKSBhW2tleV0gPSBPYmplY3QuYXNzaWduKHt9LCBiW2tleV0pO2Vsc2UgY29weShhW2tleV0sIGJba2V5XSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYltrZXldKSkge1xuICAgICAgICBhW2tleV0gPSBPYmplY3QuYXNzaWduKFtdLCBiW2tleV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFba2V5XSA9IGJba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbi8qKlxyXG4gKiBjb25jYXRlbmF0ZXMgTiBhcnJheXMgd2l0aG91dCBkdXBzLlxyXG4gKiBJZiBhbiBhcnJheSdzIGl0ZW0gaXMgYW4gT2JqZWN0LCBjb21wYXJlIGJ5IGB2YWx1ZWBcclxuICovXG5mdW5jdGlvbiBjb25jYXRXaXRob3V0RHVwcygpIHtcbiAgY29uc3QgbmV3QXJyID0gW10sXG4gICAgZXhpc3RpbmdPYmogPSB7fTtcbiAgZm9yIChsZXQgYXJyIG9mIGFyZ3VtZW50cykge1xuICAgIGZvciAobGV0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICAvLyBpZiBjdXJyZW50IGl0ZW0gaXMgYW4gb2JqZWN0IHdoaWNoIGhhcyB5ZXQgdG8gYmUgYWRkZWQgdG8gdGhlIG5ldyBhcnJheVxuICAgICAgaWYgKGlzT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgIGlmICghZXhpc3RpbmdPYmpbaXRlbS52YWx1ZV0pIHtcbiAgICAgICAgICBuZXdBcnIucHVzaChpdGVtKTtcbiAgICAgICAgICBleGlzdGluZ09ialtpdGVtLnZhbHVlXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaWYgY3VycmVudCBpdGVtIGlzIG5vdCBhbiBvYmplY3QgYW5kIGlzIG5vdCBpbiB0aGUgbmV3IGFycmF5XG4gICAgICBlbHNlIGlmICghbmV3QXJyLmluY2x1ZGVzKGl0ZW0pKSBuZXdBcnIucHVzaChpdGVtKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0Fycjtcbn1cblxuLyoqXHJcbiAqICBFeHRyYWN0ZWQgZnJvbTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM3NTExNDYzLzEwNDM4MFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc1xyXG4gKi9cbmZ1bmN0aW9uIHVuYWNjZW50KHMpIHtcbiAgLy8gaWYgbm90IHN1cHBvcnRlZCwgZG8gbm90IGNvbnRpbnVlLlxuICAvLyBkZXZlbG9wZXJzIHNob3VsZCB1c2UgYSBwb2x5ZmlsbDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dhbGxpbmcvdW5vcm1cbiAgaWYgKCFTdHJpbmcucHJvdG90eXBlLm5vcm1hbGl6ZSkgcmV0dXJuIHM7XG4gIGlmICh0eXBlb2YgcyA9PT0gJ3N0cmluZycpIHJldHVybiBzLm5vcm1hbGl6ZShcIk5GRFwiKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCBcIlwiKTtcbn1cblxuLyoqXHJcbiAqIE1lYXNzdXJlcyBhbiBlbGVtZW50J3MgaGVpZ2h0LCB3aGljaCBtaWdodCB5ZXQgaGF2ZSBiZWVuIGFkZGVkIERPTVxyXG4gKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvNTk0NDAzOC8xMDQzODBcclxuICogQHBhcmFtIHtET019IG5vZGVcclxuICovXG5mdW5jdGlvbiBnZXROb2RlSGVpZ2h0KG5vZGUpIHtcbiAgdmFyIGhlaWdodCxcbiAgICBjbG9uZSA9IG5vZGUuY2xvbmVOb2RlKHRydWUpO1xuICBjbG9uZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjpmaXhlZDsgdG9wOi05OTk5cHg7IG9wYWNpdHk6MFwiO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNsb25lKTtcbiAgaGVpZ2h0ID0gY2xvbmUuY2xpZW50SGVpZ2h0O1xuICBjbG9uZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgcmV0dXJuIGhlaWdodDtcbn1cbnZhciBpc0Nocm9tZUFuZHJvaWRCcm93c2VyID0gKCkgPT4gLyg/PS4qY2hyb21lKSg/PS4qYW5kcm9pZCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuZnVuY3Rpb24gZ2V0VUlEKCkge1xuICByZXR1cm4gKFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGMgPT4gKGMgXiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmIDE1ID4+IGMgLyA0KS50b1N0cmluZygxNikpO1xufVxuZnVuY3Rpb24gaXNOb2RlVGFnKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5jbGFzc0xpc3QgJiYgbm9kZS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZyk7XG59XG5cbi8qKlxyXG4qIEdldCB0aGUgY2FyZXQgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0XHJcbiogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzU4OTg1MDc2LzEwNDM4MFxyXG4qXHJcbiogQHJldHVybnMge29iamVjdH0gbGVmdCwgdG9wIGRpc3RhbmNlIGluIHBpeGVsc1xyXG4qL1xuZnVuY3Rpb24gZ2V0Q2FyZXRHbG9iYWxQb3NpdGlvbigpIHtcbiAgY29uc3Qgc2VsID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gIGlmIChzZWwucmFuZ2VDb3VudCkge1xuICAgIGNvbnN0IHIgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICBjb25zdCBub2RlID0gci5zdGFydENvbnRhaW5lcjtcbiAgICBjb25zdCBvZmZzZXQgPSByLnN0YXJ0T2Zmc2V0O1xuICAgIGxldCByZWN0LCByMjtcbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgcjIgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgcjIuc2V0U3RhcnQobm9kZSwgb2Zmc2V0IC0gMSk7XG4gICAgICByMi5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICAgIHJlY3QgPSByMi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IHJlY3QucmlnaHQsXG4gICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b21cbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgcmV0dXJuIG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiAtOTk5OSxcbiAgICB0b3A6IC05OTk5XG4gIH07XG59XG5cbi8qKlxyXG4gKiBJbmplY3RzIGNvbnRlbnQgKGVpdGhlciBzdHJpbmcgb3Igbm9kZSkgYXQgdGhlIGN1cnJlbnQgdGhlIGN1cnJlbnQgKG9yIHNwZWNpZmljZWQpIGNhcmV0IHBvc2l0aW9uXHJcbiAqIEBwYXJhbSB7Y29udGVudH0gc3RyaW5nL25vZGVcclxuICogQHBhcmFtIHtyYW5nZX0gT2JqZWN0IChvcHRpb25hbCwgYSByYW5nZSBvdGhlciB0aGFuIHRoZSBjdXJyZW50IHdpbmRvdyBzZWxlY3Rpb24pXHJcbiAqL1xuZnVuY3Rpb24gaW5qZWN0QXRDYXJldChjb250ZW50LCByYW5nZSkge1xuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICByYW5nZSA9IHJhbmdlIHx8IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICBpZiAodHlwZW9mIGNvbnRlbnQgPT0gJ3N0cmluZycpIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjb250ZW50KTtcbiAgaWYgKHJhbmdlKSB7XG4gICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcbiAgICByYW5nZS5pbnNlcnROb2RlKGNvbnRlbnQpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKiogU2V0dGVyL0dldHRlclxyXG4gKiBFYWNoIHRhZyBET00gbm9kZSBjb250YWlucyBhIGN1c3RvbSBwcm9wZXJ0eSBjYWxsZWQgXCJfX3RhZ2lmeVRhZ0RhdGFcIiB3aGljaCBob3N0cyBpdHMgZGF0YVxyXG4gKiBAcGFyYW0ge05vZGV9ICAgdGFnRWxtXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXHJcbiAqL1xuZnVuY3Rpb24gZ2V0U2V0VGFnRGF0YSh0YWdFbG0sIGRhdGEsIG92ZXJyaWRlKSB7XG4gIGlmICghdGFnRWxtKSB7XG4gICAgY29uc29sZS53YXJuKFwidGFnIGVsZW1lbnQgZG9lc24ndCBleGlzdFwiLCB0YWdFbG0sIGRhdGEpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGlmIChkYXRhKSB0YWdFbG0uX190YWdpZnlUYWdEYXRhID0gb3ZlcnJpZGUgPyBkYXRhIDogZXh0ZW5kKHt9LCB0YWdFbG0uX190YWdpZnlUYWdEYXRhIHx8IHt9LCBkYXRhKTtcbiAgcmV0dXJuIHRhZ0VsbS5fX3RhZ2lmeVRhZ0RhdGE7XG59XG5cbnZhciBERUZBVUxUUyA9IHtcbiAgZGVsaW1pdGVyczogXCIsXCIsXG4gIC8vIFtSZWdFeF0gc3BsaXQgdGFncyBieSBhbnkgb2YgdGhlc2UgZGVsaW1pdGVycyAoXCJudWxsXCIgdG8gY2FuY2VsKSBFeGFtcGxlOiBcIix8IHwuXCJcbiAgcGF0dGVybjogbnVsbCxcbiAgLy8gUmVnRXggcGF0dGVybiB0byB2YWxpZGF0ZSBpbnB1dCBieS4gRXg6IC9bMS05XS9cbiAgdGFnVGV4dFByb3A6ICd2YWx1ZScsXG4gIC8vIHRhZyBkYXRhIE9iamVjdCBwcm9wZXJ0eSB3aGljaCB3aWxsIGJlIGRpc3BsYXllZCBhcyB0aGUgdGFnJ3MgdGV4dFxuICBtYXhUYWdzOiBJbmZpbml0eSxcbiAgLy8gTWF4aW11bSBudW1iZXIgb2YgdGFnc1xuICBjYWxsYmFja3M6IHt9LFxuICAvLyBFeHBvc2VkIGNhbGxiYWNrcyBvYmplY3QgdG8gYmUgdHJpZ2dlcmVkIG9uIGNlcnRhaW4gZXZlbnRzXG4gIGFkZFRhZ09uQmx1cjogdHJ1ZSxcbiAgLy8gYXV0b21hdGljYWxseSBhZGRzIHRoZSB0ZXh0IHdoaWNoIHdhcyBpbnB1dGVkIGFzIGEgdGFnIHdoZW4gYmx1ciBldmVudCBoYXBwZW5zXG4gIG9uQ2hhbmdlQWZ0ZXJCbHVyOiB0cnVlLFxuICAvLyBCeSBkZWZhdWx0LCB0aGUgbmF0aXZlIHdheSBvZiBpbnB1dHMnIG9uQ2hhbmdlIGV2ZW50cyBpcyBrZXB0LCBhbmQgaXQgb25seSBmaXJlcyB3aGVuIHRoZSBmaWVsZCBpcyBibHVyZWQuXG4gIGR1cGxpY2F0ZXM6IGZhbHNlLFxuICAvLyBcInRydWVcIiAtIGFsbG93IGR1cGxpY2F0ZSB0YWdzXG4gIHdoaXRlbGlzdDogW10sXG4gIC8vIEFycmF5IG9mIHRhZ3MgdG8gc3VnZ2VzdCBhcyB0aGUgdXNlciB0eXBlcyAoY2FuIGJlIHVzZWQgYWxvbmcgd2l0aCBcImVuZm9yY2VXaGl0ZWxpc3RcIiBzZXR0aW5nKVxuICBibGFja2xpc3Q6IFtdLFxuICAvLyBBIGxpc3Qgb2Ygbm9uLWFsbG93ZWQgdGFnc1xuICBlbmZvcmNlV2hpdGVsaXN0OiBmYWxzZSxcbiAgLy8gT25seSBhbGxvdyB0YWdzIGZyb20gdGhlIHdoaXRlbGlzdFxuICB1c2VySW5wdXQ6IHRydWUsXG4gIC8vIGRpc2FibGUgbWFudWFsbHkgdHlwaW5nL3Bhc3RpbmcvZWRpdGluZyB0YWdzICh0YWdzIG1heSBvbmx5IGJlIGFkZGVkIGZyb20gdGhlIHdoaXRlbGlzdClcbiAga2VlcEludmFsaWRUYWdzOiBmYWxzZSxcbiAgLy8gaWYgdHJ1ZSwgZG8gbm90IHJlbW92ZSB0YWdzIHdoaWNoIGRpZCBub3QgcGFzcyB2YWxpZGF0aW9uXG4gIGNyZWF0ZUludmFsaWRUYWdzOiB0cnVlLFxuICAvLyBpZiBmYWxzZSwgZG8gbm90IGNyZWF0ZSBpbnZhbGlkIHRhZ3MgZnJvbSBpbnZhbGlkIHVzZXIgaW5wdXRcbiAgbWl4VGFnc0FsbG93ZWRBZnRlcjogLyx8XFwufFxcOnxcXHMvLFxuICAvLyBSZWdFeCAtIERlZmluZSBjb25kaXRpb25zIGluIHdoaWNoIG1peC10YWdzIGNvbnRlbnQgYWxsb3dzIGEgdGFnIHRvIGJlIGFkZGVkIGFmdGVyXG4gIG1peFRhZ3NJbnRlcnBvbGF0b3I6IFsnW1snLCAnXV0nXSxcbiAgLy8gSW50ZXJwb2xhdGlvbiBmb3IgbWl4IG1vZGUuIEV2ZXJ5dGhpbmcgYmV0d2VlbiB0aGVzZSB3aWxsIGJlY29tZSBhIHRhZywgaWYgaXMgYSB2YWxpZCBPYmplY3RcbiAgYmFja3NwYWNlOiB0cnVlLFxuICAvLyBmYWxzZSAvIHRydWUgLyBcImVkaXRcIlxuICBza2lwSW52YWxpZDogZmFsc2UsXG4gIC8vIElmIGB0cnVlYCwgZG8gbm90IGFkZCBpbnZhbGlkLCB0ZW1wb3JhcnksIHRhZ3MgYmVmb3JlIGF1dG9tYXRpY2FsbHkgcmVtb3ZpbmcgdGhlbVxuICBwYXN0ZUFzVGFnczogdHJ1ZSxcbiAgLy8gYXV0b21hdGljYWxseSBjb252ZXJ0cyBwYXN0ZWQgdGV4dCBpbnRvIHRhZ3MuIGlmIFwiZmFsc2VcIiwgYWxsb3dzIGZvciBmdXJ0aGVyIHRleHQgZWRpdGluZ1xuXG4gIGVkaXRUYWdzOiB7XG4gICAgY2xpY2tzOiAyLFxuICAgIC8vIGNsaWNrcyB0byBlbnRlciBcImVkaXQtbW9kZVwiOiAxIGZvciBzaW5nbGUgY2xpY2suIGFueSBvdGhlciB2YWx1ZSBpcyBjb25zaWRlcmVkIGFzIGRvdWJsZS1jbGlja1xuICAgIGtlZXBJbnZhbGlkOiB0cnVlIC8vIGtlZXBzIGludmFsaWQgZWRpdHMgYXMtaXMgdW50aWwgYGVzY2AgaXMgcHJlc3NlZCB3aGlsZSBpbiBmb2N1c1xuICB9LFxuXG4gIC8vIDEgb3IgMiBjbGlja3MgdG8gZWRpdCBhIHRhZy4gZmFsc2UvbnVsbCBmb3Igbm90IGFsbG93aW5nIGVkaXRpbmdcbiAgdHJhbnNmb3JtVGFnOiAoKSA9PiB7fSxcbiAgLy8gVGFrZXMgYSB0YWcgaW5wdXQgc3RyaW5nIGFzIGFyZ3VtZW50IGFuZCByZXR1cm5zIGEgdHJhbnNmb3JtZWQgdmFsdWVcbiAgdHJpbTogdHJ1ZSxcbiAgLy8gd2hldGhlciBvciBub3QgdGhlIHZhbHVlIHByb3ZpZGVkIHNob3VsZCBiZSB0cmltbWVkLCBiZWZvcmUgYmVpbmcgYWRkZWQgYXMgYSB0YWdcbiAgYTExeToge1xuICAgIGZvY3VzYWJsZVRhZ3M6IGZhbHNlXG4gIH0sXG4gIG1peE1vZGU6IHtcbiAgICBpbnNlcnRBZnRlclRhZzogJ1xcdTAwQTAnIC8vIFN0cmluZy9Ob2RlIHRvIGluamVjdCBhZnRlciBhIHRhZyBoYXMgYmVlbiBhZGRlZCAoc2VlICM1ODgpXG4gIH0sXG5cbiAgYXV0b0NvbXBsZXRlOiB7XG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvLyBUcmllcyB0byBzdWdnZXN0IHRoZSBpbnB1dCdzIHZhbHVlIHdoaWxlIHR5cGluZyAobWF0Y2ggZnJvbSB3aGl0ZWxpc3QpIGJ5IGFkZGluZyB0aGUgcmVzdCBvZiB0ZXJtIGFzIGdyYXllZC1vdXQgdGV4dFxuICAgIHJpZ2h0S2V5OiBmYWxzZSAvLyBJZiBgdHJ1ZWAsIHdoZW4gUmlnaHQga2V5IGlzIHByZXNzZWQsIHVzZSB0aGUgc3VnZ2VzdGVkIHZhbHVlIHRvIGNyZWF0ZSBhIHRhZywgZWxzZSBqdXN0IGF1dG8tY29tcGxldGVzIHRoZSBpbnB1dC4gaW4gbWl4ZWQtbW9kZSB0aGlzIGlzIHNldCB0byBcInRydWVcIlxuICB9LFxuXG4gIGNsYXNzTmFtZXM6IHtcbiAgICBuYW1lc3BhY2U6ICd0YWdpZnknLFxuICAgIG1peE1vZGU6ICd0YWdpZnktLW1peCcsXG4gICAgc2VsZWN0TW9kZTogJ3RhZ2lmeS0tc2VsZWN0JyxcbiAgICBpbnB1dDogJ3RhZ2lmeV9faW5wdXQnLFxuICAgIGZvY3VzOiAndGFnaWZ5LS1mb2N1cycsXG4gICAgdGFnTm9BbmltYXRpb246ICd0YWdpZnktLW5vQW5pbScsXG4gICAgdGFnSW52YWxpZDogJ3RhZ2lmeS0taW52YWxpZCcsXG4gICAgdGFnTm90QWxsb3dlZDogJ3RhZ2lmeS0tbm90QWxsb3dlZCcsXG4gICAgc2NvcGVMb2FkaW5nOiAndGFnaWZ5LS1sb2FkaW5nJyxcbiAgICBoYXNNYXhUYWdzOiAndGFnaWZ5LS1oYXNNYXhUYWdzJyxcbiAgICBoYXNOb1RhZ3M6ICd0YWdpZnktLW5vVGFncycsXG4gICAgZW1wdHk6ICd0YWdpZnktLWVtcHR5JyxcbiAgICBpbnB1dEludmFsaWQ6ICd0YWdpZnlfX2lucHV0LS1pbnZhbGlkJyxcbiAgICBkcm9wZG93bjogJ3RhZ2lmeV9fZHJvcGRvd24nLFxuICAgIGRyb3Bkb3duV3JhcHBlcjogJ3RhZ2lmeV9fZHJvcGRvd25fX3dyYXBwZXInLFxuICAgIGRyb3Bkb3duSGVhZGVyOiAndGFnaWZ5X19kcm9wZG93bl9faGVhZGVyJyxcbiAgICBkcm9wZG93bkZvb3RlcjogJ3RhZ2lmeV9fZHJvcGRvd25fX2Zvb3RlcicsXG4gICAgZHJvcGRvd25JdGVtOiAndGFnaWZ5X19kcm9wZG93bl9faXRlbScsXG4gICAgZHJvcGRvd25JdGVtQWN0aXZlOiAndGFnaWZ5X19kcm9wZG93bl9faXRlbS0tYWN0aXZlJyxcbiAgICBkcm9wZG93bkl0ZW1IaWRkZW46ICd0YWdpZnlfX2Ryb3Bkb3duX19pdGVtLS1oaWRkZW4nLFxuICAgIGRyb3Bkb3duSW5pdGFsOiAndGFnaWZ5X19kcm9wZG93bi0taW5pdGlhbCcsXG4gICAgdGFnOiAndGFnaWZ5X190YWcnLFxuICAgIHRhZ1RleHQ6ICd0YWdpZnlfX3RhZy10ZXh0JyxcbiAgICB0YWdYOiAndGFnaWZ5X190YWdfX3JlbW92ZUJ0bicsXG4gICAgdGFnTG9hZGluZzogJ3RhZ2lmeV9fdGFnLS1sb2FkaW5nJyxcbiAgICB0YWdFZGl0aW5nOiAndGFnaWZ5X190YWctLWVkaXRhYmxlJyxcbiAgICB0YWdGbGFzaDogJ3RhZ2lmeV9fdGFnLS1mbGFzaCcsXG4gICAgdGFnSGlkZTogJ3RhZ2lmeV9fdGFnLS1oaWRlJ1xuICB9LFxuICBkcm9wZG93bjoge1xuICAgIGNsYXNzbmFtZTogJycsXG4gICAgZW5hYmxlZDogMixcbiAgICAvLyBtaW5pbXVtIGlucHV0IGNoYXJhY3RlcnMgdG8gYmUgdHlwZWQgZm9yIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93biB0byBzaG93XG4gICAgbWF4SXRlbXM6IDEwLFxuICAgIHNlYXJjaEtleXM6IFtcInZhbHVlXCIsIFwic2VhcmNoQnlcIl0sXG4gICAgZnV6enlTZWFyY2g6IHRydWUsXG4gICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgYWNjZW50ZWRTZWFyY2g6IHRydWUsXG4gICAgaW5jbHVkZVNlbGVjdGVkVGFnczogZmFsc2UsXG4gICAgLy8gU2hvdWxkIHRoZSBzdWdnZXN0aW9ucyBsaXN0IEluY2x1ZGUgYWxyZWFkeS1zZWxlY3RlZCB0YWdzIChhZnRlciBmaWx0ZXJpbmcpXG4gICAgaGlnaGxpZ2h0Rmlyc3Q6IGZhbHNlLFxuICAgIC8vIGhpZ2hsaWdodHMgZmlyc3QtbWF0Y2hlZCBpdGVtIGluIHRoZSBsaXN0XG4gICAgY2xvc2VPblNlbGVjdDogdHJ1ZSxcbiAgICAvLyBjbG9zZXMgdGhlIGRyb3Bkb3duIGFmdGVyIHNlbGVjdGluZyBhbiBpdGVtLCBpZiBgZW5hYmxlZDowYCAod2hpY2ggbWVhbnMgYWx3YXlzIHNob3cgZHJvcGRvd24pXG4gICAgY2xlYXJPblNlbGVjdDogdHJ1ZSxcbiAgICAvLyBhZnRlciBzZWxlY3RpbmcgYSBzdWdnZXRpb24sIHNob3VsZCB0aGUgdHlwZWQgdGV4dCBpbnB1dCByZW1haW4gb3IgYmUgY2xlYXJlZFxuICAgIHBvc2l0aW9uOiAnYWxsJyxcbiAgICAvLyAnbWFudWFsJyAvICd0ZXh0JyAvICdhbGwnXG4gICAgYXBwZW5kVGFyZ2V0OiBudWxsIC8vIGRlZmF1bHRzIHRvIGRvY3VtZW50LmJvZHkgb25jZSBET00gaGFzIGJlZW4gbG9hZGVkXG4gIH0sXG5cbiAgaG9va3M6IHtcbiAgICBiZWZvcmVSZW1vdmVUYWc6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpLFxuICAgIGJlZm9yZVBhc3RlOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKSxcbiAgICBzdWdnZXN0aW9uQ2xpY2s6ICgpID0+IFByb21pc2UucmVzb2x2ZSgpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGluaXREcm9wZG93bigpIHtcbiAgdGhpcy5kcm9wZG93biA9IHt9O1xuXG4gIC8vIGF1dG8tYmluZCBcInRoaXNcIiB0byBhbGwgdGhlIGRyb3Bkb3duIG1ldGhvZHNcbiAgZm9yIChsZXQgcCBpbiB0aGlzLl9kcm9wZG93bikgdGhpcy5kcm9wZG93bltwXSA9IHR5cGVvZiB0aGlzLl9kcm9wZG93bltwXSA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2Ryb3Bkb3duW3BdLmJpbmQodGhpcykgOiB0aGlzLl9kcm9wZG93bltwXTtcbiAgdGhpcy5kcm9wZG93bi5yZWZzKCk7XG59XG52YXIgX2Ryb3Bkb3duID0ge1xuICByZWZzKCkge1xuICAgIHRoaXMuRE9NLmRyb3Bkb3duID0gdGhpcy5wYXJzZVRlbXBsYXRlKCdkcm9wZG93bicsIFt0aGlzLnNldHRpbmdzXSk7XG4gICAgdGhpcy5ET00uZHJvcGRvd24uY29udGVudCA9IHRoaXMuRE9NLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1zZWxlY3Rvcj0ndGFnaWZ5LXN1Z2dlc3Rpb25zLXdyYXBwZXInXVwiKTtcbiAgfSxcbiAgZ2V0SGVhZGVyUmVmKCkge1xuICAgIHJldHVybiB0aGlzLkRPTS5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtc2VsZWN0b3I9J3RhZ2lmeS1zdWdnZXN0aW9ucy1oZWFkZXInXVwiKTtcbiAgfSxcbiAgZ2V0Rm9vdGVyUmVmKCkge1xuICAgIHJldHVybiB0aGlzLkRPTS5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtc2VsZWN0b3I9J3RhZ2lmeS1zdWdnZXN0aW9ucy1mb290ZXInXVwiKTtcbiAgfSxcbiAgZ2V0QWxsU3VnZ2VzdGlvbnNSZWZzKCkge1xuICAgIHJldHVybiBbLi4udGhpcy5ET00uZHJvcGRvd24uY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1TZWxlY3RvcildO1xuICB9LFxuICAvKipcclxuICAgKiBzaG93cyB0aGUgc3VnZ2VzdGlvbnMgc2VsZWN0IGJveFxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBbb3B0aW9uYWwsIGZpbHRlciB0aGUgd2hpdGVsaXN0IGJ5IHRoaXMgdmFsdWVdXHJcbiAgICovXG4gIHNob3codmFsdWUpIHtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgZmlyc3RMaXN0SXRlbSxcbiAgICAgIGZpcnN0TGlzdEl0ZW1WYWx1ZSxcbiAgICAgIGFsbG93TmV3VGFncyA9IF9zLm1vZGUgPT0gJ21peCcgJiYgIV9zLmVuZm9yY2VXaGl0ZWxpc3QsXG4gICAgICBub1doaXRlbGlzdCA9ICFfcy53aGl0ZWxpc3QgfHwgIV9zLndoaXRlbGlzdC5sZW5ndGgsXG4gICAgICBub01hdGNoTGlzdEl0ZW0sXG4gICAgICBpc01hbnVhbCA9IF9zLmRyb3Bkb3duLnBvc2l0aW9uID09ICdtYW51YWwnO1xuXG4gICAgLy8gaWYgdGV4dCBzdGlsbCBleGlzdHMgaW4gdGhlIGlucHV0LCBhbmQgYHNob3dgIG1ldGhvZCBoYXMgbm8gYXJndW1lbnQsIHRoZW4gdGhlIGlucHV0J3MgdGV4dCBzaG91bGQgYmUgdXNlZFxuICAgIHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHRoaXMuc3RhdGUuaW5wdXRUZXh0IDogdmFsdWU7XG5cbiAgICAvLyDimqDvuI8gRG8gbm90IHJlbmRlciBzdWdnZXN0aW9ucyBsaXN0ICBpZjpcbiAgICAvLyAxLiB0aGVyZSdzIG5vIHdoaXRlbGlzdCAoY2FuIGhhcHBlbiB3aGlsZSBhc3luYyBsb2FkaW5nKSBBTkQgbmV3IHRhZ3MgYXJuJ3QgYWxsb3dlZFxuICAgIC8vIDIuIGRyb3Bkb3duIGlzIGRpc2FibGVkXG4gICAgLy8gMy4gbG9hZGVyIGlzIHNob3dpbmcgKGNvbnRyb2xsZWQgb3V0c2lkZSBvZiB0aGlzIGNvZGUpXG4gICAgaWYgKG5vV2hpdGVsaXN0ICYmICFhbGxvd05ld1RhZ3MgJiYgIV9zLnRlbXBsYXRlcy5kcm9wZG93bkl0ZW1Ob01hdGNoIHx8IF9zLmRyb3Bkb3duLmVuYWJsZSA9PT0gZmFsc2UgfHwgdGhpcy5zdGF0ZS5pc0xvYWRpbmcgfHwgdGhpcy5zZXR0aW5ncy5yZWFkb25seSkgcmV0dXJuO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmRyb3Bkb3duSGlkZV9fYmluZEV2ZW50c1RpbWVvdXQpO1xuXG4gICAgLy8gaWYgbm8gdmFsdWUgd2FzIHN1cHBsaWVkLCBzaG93IGFsbCB0aGUgXCJ3aGl0ZWxpc3RcIiBpdGVtcyBpbiB0aGUgZHJvcGRvd25cbiAgICAvLyBAdHlwZSBbQXJyYXldIGxpc3RJdGVtc1xuICAgIC8vIFRPRE86IGFkZCBhIFNldHRpbmcgdG8gY29udHJvbCBpdGVtcycgc29ydCBvcmRlciBmb3IgXCJsaXN0SXRlbXNcIlxuICAgIHRoaXMuc3VnZ2VzdGVkTGlzdEl0ZW1zID0gdGhpcy5kcm9wZG93bi5maWx0ZXJMaXN0SXRlbXModmFsdWUpO1xuXG4gICAgLy8gdHJpZ2dlciBhdCB0aGlzIGV4YWN0IHBvaW50IHRvIGxldCB0aGUgZGV2ZWxvcGVyIHRoZSBjaGFuY2UgdG8gbWFudWFsbHkgc2V0IFwidGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXNcIlxuICAgIGlmICh2YWx1ZSAmJiAhdGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2Ryb3Bkb3duOm5vTWF0Y2gnLCB2YWx1ZSk7XG4gICAgICBpZiAoX3MudGVtcGxhdGVzLmRyb3Bkb3duSXRlbU5vTWF0Y2gpIG5vTWF0Y2hMaXN0SXRlbSA9IF9zLnRlbXBsYXRlcy5kcm9wZG93bkl0ZW1Ob01hdGNoLmNhbGwodGhpcywge1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gaWYgXCJkcm9wZG93bkl0ZW1Ob01hdGNoXCIgd2FzIG5vIGRlZmluZWQsIHByb2NjZWVkIHJlZ3VsYXIgZmxvdy5cbiAgICAvL1xuICAgIGlmICghbm9NYXRjaExpc3RJdGVtKSB7XG4gICAgICAvLyBpbiBtaXgtbW9kZSwgaWYgdGhlIHZhbHVlIGlzbid0IGluY2x1ZGVkIGluIHRoZSB3aGlsZWxpc3QgJiBcImVuZm9yY2VXaGl0ZWxpc3RcIiBzZXR0aW5nIGlzIFwiZmFsc2VcIixcbiAgICAgIC8vIHRoZW4gYWRkIGEgY3VzdG9tIHN1Z2dlc3Rpb24gaXRlbSB0byB0aGUgZHJvcGRvd25cbiAgICAgIGlmICh0aGlzLnN1Z2dlc3RlZExpc3RJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIGFsbG93TmV3VGFncyAmJiAhdGhpcy5zdGF0ZS5lZGl0aW5nLnNjb3BlICYmICFzYW1lU3RyKHRoaXMuc3VnZ2VzdGVkTGlzdEl0ZW1zWzBdLnZhbHVlLCB2YWx1ZSkpIHRoaXMuc3VnZ2VzdGVkTGlzdEl0ZW1zLnVuc2hpZnQoe1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbHVlICYmIGFsbG93TmV3VGFncyAmJiAhdGhpcy5zdGF0ZS5lZGl0aW5nLnNjb3BlKSB7XG4gICAgICAgICAgdGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXMgPSBbe1xuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoaWRlIHN1Z2dlc3Rpb25zIGxpc3QgaWYgbm8gc3VnZ2VzdGlvbiBtYXRjaGVkXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5wdXQuYXV0b2NvbXBsZXRlLnN1Z2dlc3QuY2FsbCh0aGlzKTtcbiAgICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZpcnN0TGlzdEl0ZW0gPSB0aGlzLnN1Z2dlc3RlZExpc3RJdGVtc1swXTtcbiAgICAgIGZpcnN0TGlzdEl0ZW1WYWx1ZSA9IFwiXCIgKyAoaXNPYmplY3QoZmlyc3RMaXN0SXRlbSkgPyBmaXJzdExpc3RJdGVtLnZhbHVlIDogZmlyc3RMaXN0SXRlbSk7XG4gICAgICBpZiAoX3MuYXV0b0NvbXBsZXRlICYmIGZpcnN0TGlzdEl0ZW1WYWx1ZSkge1xuICAgICAgICAvLyBvbmx5IGZpbGwgdGhlIHN1Z2Vnc3Rpb24gaWYgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBsaXN0IGl0ZW0gU1RBUlRTIHdpdGggdGhlIGlucHV0IHZhbHVlIChyZWdhcmRsZXNzIG9mIFwiZnV6enlzZWFyY2hcIiBzZXR0aW5nKVxuICAgICAgICBpZiAoZmlyc3RMaXN0SXRlbVZhbHVlLmluZGV4T2YodmFsdWUpID09IDApIHRoaXMuaW5wdXQuYXV0b2NvbXBsZXRlLnN1Z2dlc3QuY2FsbCh0aGlzLCBmaXJzdExpc3RJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kcm9wZG93bi5maWxsKG5vTWF0Y2hMaXN0SXRlbSk7XG4gICAgaWYgKF9zLmRyb3Bkb3duLmhpZ2hsaWdodEZpcnN0KSB7XG4gICAgICB0aGlzLmRyb3Bkb3duLmhpZ2hsaWdodE9wdGlvbih0aGlzLkRPTS5kcm9wZG93bi5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoX3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1TZWxlY3RvcikpO1xuICAgIH1cblxuICAgIC8vIGJpbmQgZXZlbnRzLCBleGFjdGx5IGF0IHRoaXMgc3RhZ2Ugb2YgdGhlIGNvZGUuIFwiZHJvcGRvd24uc2hvd1wiIG1ldGhvZCBpcyBhbGxvd2VkIHRvIGJlXG4gICAgLy8gY2FsbGVkIG11bHRpcGxlIHRpbWVzLCByZWdhcmRsZXNzIGlmIHRoZSBkcm9wZG93biBpcyBjdXJyZW50bHkgdmlzaWJsZSwgYnV0IHRoZSBldmVudHMtYmluZGluZ1xuICAgIC8vIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgZHJvcGRvd24gd2Fzbid0IHByZXZpb3VzbHkgdmlzaWJsZS5cbiAgICBpZiAoIXRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSlcbiAgICAgIC8vIHRpbWVvdXQgaXMgbmVlZGVkIGZvciB3aGVuIHByZXNzaW5nIGFycm93IGRvd24gdG8gc2hvdyB0aGUgZHJvcGRvd24sXG4gICAgICAvLyBzbyB0aGUga2V5IGV2ZW50IHdvbid0IGdldCByZWdpc3RlcmVkIGluIHRoZSBkcm9wZG93biBldmVudHMgbGlzdGVuZXJzXG4gICAgICBzZXRUaW1lb3V0KHRoaXMuZHJvcGRvd24uZXZlbnRzLmJpbmRpbmcuYmluZCh0aGlzKSk7XG5cbiAgICAvLyBzZXQgdGhlIGRyb3Bkb3duIHZpc2libGUgc3RhdGUgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIHNlYXJjaGVkIHZhbHVlLlxuICAgIC8vIE1VU1QgYmUgc2V0ICpiZWZvcmUqIHBvc2l0aW9uKCkgaXMgY2FsbGVkXG4gICAgdGhpcy5zdGF0ZS5kcm9wZG93bi52aXNpYmxlID0gdmFsdWUgfHwgdHJ1ZTtcbiAgICB0aGlzLnN0YXRlLmRyb3Bkb3duLnF1ZXJ5ID0gdmFsdWU7XG4gICAgdGhpcy5zZXRTdGF0ZVNlbGVjdGlvbigpO1xuXG4gICAgLy8gdHJ5IHRvIHBvc2l0aW9uaW5nIHRoZSBkcm9wZG93biAoaXQgbWlnaHQgbm90IHlldCBiZSBvbiB0aGUgcGFnZSwgZG9lc24ndCBtYXR0ZXIsIG5leHQgY29kZSBoYW5kbGVzIHRoaXMpXG4gICAgaWYgKCFpc01hbnVhbCkge1xuICAgICAgLy8gYSBzbGlnaHQgZGVsYXkgaXMgbmVlZGVkIGlmIHRoZSBkcm9wZG93biBcInBvc2l0aW9uXCIgc2V0dGluZyBpcyBcInRleHRcIiwgYW5kIG5vdGhpbmcgd2FzIHR5cGVkIGluIHRoZSBpbnB1dCxcbiAgICAgIC8vIHNvIHNhZGx5IHRoZSBcImdldENhcmV0R2xvYmFsUG9zaXRpb25cIiBtZXRob2QgZG9lc24ndCByZWNvZ25pemUgdGhlIGNhcmV0IHBvc2l0aW9uIHdpdGhvdXQgdGhpcyBkZWxheVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJvcGRvd24ucG9zaXRpb24oKTtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5yZW5kZXIoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGEgZGVsYXkgaXMgbmVlZGVkIGJlY2F1c2Ugb2YgdGhlIHByZXZpb3VzIGRlbGF5IHJlYXNvbi5cbiAgICAvLyB0aGlzIGV2ZW50IG11c3QgYmUgZmlyZWQgYWZ0ZXIgdGhlIGRyb3Bkb3duIHdhcyByZW5kZXJlZCAmIHBvc2l0aW9uZWRcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihcImRyb3Bkb3duOnNob3dcIiwgdGhpcy5ET00uZHJvcGRvd24pO1xuICAgIH0pO1xuICB9LFxuICAvKipcclxuICAgKiBIaWRlcyB0aGUgZHJvcGRvd24gKGlmIGl0J3Mgbm90IG1hbmFnZWQgbWFudWFsbHkgYnkgdGhlIGRldmVsb3BlcilcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG92ZXJyaWRlTWFudWFsXHJcbiAgICovXG4gIGhpZGUob3ZlcnJpZGVNYW51YWwpIHtcbiAgICB2YXIgX3RoaXMkRE9NID0gdGhpcy5ET00sXG4gICAgICBzY29wZSA9IF90aGlzJERPTS5zY29wZSxcbiAgICAgIGRyb3Bkb3duID0gX3RoaXMkRE9NLmRyb3Bkb3duLFxuICAgICAgaXNNYW51YWwgPSB0aGlzLnNldHRpbmdzLmRyb3Bkb3duLnBvc2l0aW9uID09ICdtYW51YWwnICYmICFvdmVycmlkZU1hbnVhbDtcblxuICAgIC8vIGlmIHRoZXJlJ3Mgbm8gZHJvcGRvd24sIHRoaXMgbWVhbnMgdGhlIGRyb3Bkb3duIGV2ZW50cyBhcmVuJ3QgYmluZGVkXG4gICAgaWYgKCFkcm9wZG93biB8fCAhZG9jdW1lbnQuYm9keS5jb250YWlucyhkcm9wZG93bikgfHwgaXNNYW51YWwpIHJldHVybjtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kcm9wZG93bi5wb3NpdGlvbik7XG4gICAgdGhpcy5kcm9wZG93bi5ldmVudHMuYmluZGluZy5jYWxsKHRoaXMsIGZhbHNlKTsgLy8gdW5iaW5kIGFsbCBldmVudHNcblxuICAgIC8vIGlmIHRoZSBkcm9wZG93biBpcyBvcGVuLCBhbmQgdGhlIGlucHV0IChzY29wZSkgaXMgY2xpY2tlZCxcbiAgICAvLyB0aGUgZHJvcGRvd24gc2hvdWxkIGJlIG5vdyBcImNsb3NlXCIsIGFuZCB0aGUgbmV4dCBjbGljayAob24gdGhlIHNjb3BlKVxuICAgIC8vIHNob3VsZCByZS1vcGVuIGl0LCBhbmQgd2l0aG91dCBhIHRpbWVvdXQsIGNsaWNraW5nIHRvIGNsb3NlIHdpbGwgcmUtb3BlbiBpbW1lZGlhdGVseVxuICAgIC8vICBjbGVhclRpbWVvdXQodGhpcy5kcm9wZG93bkhpZGVfX2JpbmRFdmVudHNUaW1lb3V0KVxuICAgIC8vICB0aGlzLmRyb3Bkb3duSGlkZV9fYmluZEV2ZW50c1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuZXZlbnRzLmJpbmRpbmcuYmluZCh0aGlzKSwgMjUwKSAgLy8gcmUtYmluZCBtYWluIGV2ZW50c1xuXG4gICAgc2NvcGUuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBmYWxzZSk7XG4gICAgZHJvcGRvd24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcm9wZG93bik7XG5cbiAgICAvLyBzY2VuYXJpbzogY2xpY2tpbmcgdGhlIHNjb3BlIHRvIHNob3cgdGhlIGRyb3Bkb3duLCBjbGlja2luZyBhZ2FpbiB0byBoaWRlIC0+IGNhbGxzIGRyb3Bkb3duLmhpZGUoKSBhbmQgdGhlbiByZS1mb2N1c2VzIHRoZSBpbnB1dFxuICAgIC8vIHdoaWNoIGNhc3VlcyBhbm90aGVyIG9uRm9jdXMgZXZlbnQsIHdoaWNoIGNoZWNrZWQgXCJ0aGlzLnN0YXRlLmRyb3Bkb3duLnZpc2libGVcIiBhbmQgc2VlIGl0IGFzIFwiZmFsc2VcIiBhbmQgcmUtb3BlbiB0aGUgZHJvcGRvd25cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSA9IGZhbHNlO1xuICAgIH0sIDEwMCk7XG4gICAgdGhpcy5zdGF0ZS5kcm9wZG93bi5xdWVyeSA9IHRoaXMuc3RhdGUuZGRJdGVtRGF0YSA9IHRoaXMuc3RhdGUuZGRJdGVtRWxtID0gdGhpcy5zdGF0ZS5zZWxlY3Rpb24gPSBudWxsO1xuXG4gICAgLy8gaWYgdGhlIHVzZXIgY2xvc2VkIHRoZSBkcm9wZG93biAoaW4gbWl4LW1vZGUpIHdoaWxlIGEgcG90ZW50aWFsIHRhZyB3YXMgZGV0ZWN0ZWQsIGZsYWcgdGhlIGN1cnJlbnQgdGFnXG4gICAgLy8gc28gdGhlIGRyb3Bkb3duIHdvbid0IGJlIHNob3duIG9uIGZvbGxvd2luZyB1c2VyIGlucHV0IGZvciB0aGF0IFwidGFnXCJcbiAgICBpZiAodGhpcy5zdGF0ZS50YWcgJiYgdGhpcy5zdGF0ZS50YWcudmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnN0YXRlLmZsYWdnZWRUYWdzW3RoaXMuc3RhdGUudGFnLmJhc2VPZmZzZXRdID0gdGhpcy5zdGF0ZS50YWc7XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlcihcImRyb3Bkb3duOmhpZGVcIiwgZHJvcGRvd24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvKipcclxuICAgKiBUb2dnbGVzIGRyb3Bkb3duIHNob3cvaGlkZVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvdyBmb3JjZXMgdGhlIGRyb3Bkb3duIHRvIHNob3dcclxuICAgKi9cbiAgdG9nZ2xlKHNob3cpIHtcbiAgICB0aGlzLmRyb3Bkb3duW3RoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSAmJiAhc2hvdyA/ICdoaWRlJyA6ICdzaG93J10oKTtcbiAgfSxcbiAgcmVuZGVyKCkge1xuICAgIC8vIGxldCB0aGUgZWxlbWVudCByZW5kZXIgaW4gdGhlIERPTSBmaXJzdCwgdG8gYWNjdXJhdGVseSBtZWFzdXJlIGl0LlxuICAgIC8vIHRoaXMuRE9NLmRyb3Bkb3duLnN0eWxlLmNzc1RleHQgPSBcImxlZnQ6LTk5OTlweDsgdG9wOi05OTk5cHg7XCI7XG4gICAgdmFyIGRkSGVpZ2h0ID0gZ2V0Tm9kZUhlaWdodCh0aGlzLkRPTS5kcm9wZG93biksXG4gICAgICBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICBlbmFibGVkID0gdHlwZW9mIF9zLmRyb3Bkb3duLmVuYWJsZWQgPT0gJ251bWJlcicgJiYgX3MuZHJvcGRvd24uZW5hYmxlZCA+PSAwO1xuICAgIGlmICghZW5hYmxlZCkgcmV0dXJuIHRoaXM7XG4gICAgdGhpcy5ET00uc2NvcGUuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCB0cnVlKTtcblxuICAgIC8vIGlmIHRoZSBkcm9wZG93biBoYXMgeWV0IHRvIGJlIGFwcGVuZGVkIHRvIHRoZSBET00sXG4gICAgLy8gYXBwZW5kIHRoZSBkcm9wZG93biB0byB0aGUgYm9keSBlbGVtZW50ICYgaGFuZGxlIGV2ZW50c1xuICAgIGlmICghZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLkRPTS5kcm9wZG93bikpIHtcbiAgICAgIHRoaXMuRE9NLmRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoX3MuY2xhc3NOYW1lcy5kcm9wZG93bkluaXRhbCk7XG4gICAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKGRkSGVpZ2h0KTtcbiAgICAgIF9zLmRyb3Bkb3duLmFwcGVuZFRhcmdldC5hcHBlbmRDaGlsZCh0aGlzLkRPTS5kcm9wZG93bik7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuRE9NLmRyb3Bkb3duLmNsYXNzTGlzdC5yZW1vdmUoX3MuY2xhc3NOYW1lcy5kcm9wZG93bkluaXRhbCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLyoqXHJcbiAgICogcmUtcmVuZGVycyB0aGUgZHJvcGRvd24gY29udGVudCBlbGVtZW50IChzZWUgXCJkcm9wZG93bkNvbnRlbnRcIiBpbiB0ZW1wbGF0ZXMgZmlsZSlcclxuICAgKiBAcGFyYW0ge1N0cmluZy9BcnJheX0gSFRNTENvbnRlbnQgLSBvcHRpb25hbFxyXG4gICAqL1xuICBmaWxsKEhUTUxDb250ZW50KSB7XG4gICAgSFRNTENvbnRlbnQgPSB0eXBlb2YgSFRNTENvbnRlbnQgPT0gJ3N0cmluZycgPyBIVE1MQ29udGVudCA6IHRoaXMuZHJvcGRvd24uY3JlYXRlTGlzdEhUTUwoSFRNTENvbnRlbnQgfHwgdGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXMpO1xuICAgIHZhciBkcm9wZG93bkNvbnRlbnQgPSB0aGlzLnNldHRpbmdzLnRlbXBsYXRlcy5kcm9wZG93bkNvbnRlbnQuY2FsbCh0aGlzLCBIVE1MQ29udGVudCk7XG4gICAgdGhpcy5ET00uZHJvcGRvd24uY29udGVudC5pbm5lckhUTUwgPSBtaW5pZnkoZHJvcGRvd25Db250ZW50KTtcbiAgfSxcbiAgLyoqXHJcbiAgICogUmUtcmVuZGVycyBvbmx5IHRoZSBoZWFkZXIgJiBmb290ZXIuXHJcbiAgICogVXNlZCB3aGVuIHNlbGVjdGluZyBhIHN1Z2dlc3Rpb24gYW5kIGl0IGlzIHdhbnRlZCB0aGF0IHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93biBzdGF5cyBvcGVuLlxyXG4gICAqIFNpbmNlIHRoZSBsaXN0IG9mIHN1Z2Vnc3Rpb25zIGlzIG5vdCBiZWluZyByZS1yZW5kZXJlZCBjb21wbGV0ZWx5IGV2ZXJ5IHRpbWUgYSBzdWdnZXN0aW9uIGlzIHNlbGVjdGVkICh0aGUgaXRlbSBpcyB0cmFuc2l0aW9uZWQtb3V0KVxyXG4gICAqIHRoZW4gdGhlIGhlYWRlciAmIGZvb3RlciBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHN1Z2dlc3Rpb25zIGRhdGEgY2hhbmdlXHJcbiAgICovXG4gIGZpbGxIZWFkZXJGb290ZXIoKSB7XG4gICAgdmFyIHN1Z2dlc3Rpb25zID0gdGhpcy5kcm9wZG93bi5maWx0ZXJMaXN0SXRlbXModGhpcy5zdGF0ZS5kcm9wZG93bi5xdWVyeSksXG4gICAgICBuZXdIZWFkZXJFbGVtID0gdGhpcy5wYXJzZVRlbXBsYXRlKCdkcm9wZG93bkhlYWRlcicsIFtzdWdnZXN0aW9uc10pLFxuICAgICAgbmV3Rm9vdGVyRWxlbSA9IHRoaXMucGFyc2VUZW1wbGF0ZSgnZHJvcGRvd25Gb290ZXInLCBbc3VnZ2VzdGlvbnNdKSxcbiAgICAgIGhlYWRlclJlZiA9IHRoaXMuZHJvcGRvd24uZ2V0SGVhZGVyUmVmKCksXG4gICAgICBmb290ZXJSZWYgPSB0aGlzLmRyb3Bkb3duLmdldEZvb3RlclJlZigpO1xuICAgIG5ld0hlYWRlckVsZW0gJiYgaGVhZGVyUmVmPy5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdIZWFkZXJFbGVtLCBoZWFkZXJSZWYpO1xuICAgIG5ld0Zvb3RlckVsZW0gJiYgZm9vdGVyUmVmPy5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdGb290ZXJFbGVtLCBmb290ZXJSZWYpO1xuICB9LFxuICAvKipcclxuICAgKiBmaWxsIGRhdGEgaW50byB0aGUgc3VnZ2VzdGlvbnMgbGlzdFxyXG4gICAqIChtYWlubHkgdXNlZCB0byB1cGRhdGUgdGhlIGxpc3Qgd2hlbiByZW1vdmluZyB0YWdzIHdoaWxlIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93biBpcyB2aXNpYmxlLCBzbyB0aGV5IHdpbGwgYmUgcmUtYWRkZWQgdG8gdGhlIGxpc3QuIG5vdCBlZmZpY2llbnQpXHJcbiAgICovXG4gIHJlZmlsdGVyKHZhbHVlKSB7XG4gICAgdmFsdWUgPSB2YWx1ZSB8fCB0aGlzLnN0YXRlLmRyb3Bkb3duLnF1ZXJ5IHx8ICcnO1xuICAgIHRoaXMuc3VnZ2VzdGVkTGlzdEl0ZW1zID0gdGhpcy5kcm9wZG93bi5maWx0ZXJMaXN0SXRlbXModmFsdWUpO1xuICAgIHRoaXMuZHJvcGRvd24uZmlsbCgpO1xuICAgIGlmICghdGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXMubGVuZ3RoKSB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJkcm9wZG93bjp1cGRhdGVkXCIsIHRoaXMuRE9NLmRyb3Bkb3duKTtcbiAgfSxcbiAgcG9zaXRpb24oZGRIZWlnaHQpIHtcbiAgICB2YXIgX3NkID0gdGhpcy5zZXR0aW5ncy5kcm9wZG93bjtcbiAgICBpZiAoX3NkLnBvc2l0aW9uID09ICdtYW51YWwnKSByZXR1cm47XG4gICAgdmFyIHJlY3QsXG4gICAgICB0b3AsXG4gICAgICBib3R0b20sXG4gICAgICBsZWZ0LFxuICAgICAgd2lkdGgsXG4gICAgICBwYXJlbnRzUG9zaXRpb25zLFxuICAgICAgZGRFbG0gPSB0aGlzLkRPTS5kcm9wZG93bixcbiAgICAgIHBsYWNlQWJvdmUgPSBfc2QucGxhY2VBYm92ZSxcbiAgICAgIGlzRGVmYXVsdEFwcGVuZFRhcmdldCA9IF9zZC5hcHBlbmRUYXJnZXQgPT09IGRvY3VtZW50LmJvZHksXG4gICAgICBhcHBlbmRUYXJnZXRTY3JvbGxUb3AgPSBpc0RlZmF1bHRBcHBlbmRUYXJnZXQgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiBfc2QuYXBwZW5kVGFyZ2V0LnNjcm9sbFRvcCxcbiAgICAgIHJvb3QgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICB2aWV3cG9ydEhlaWdodCA9IHJvb3QuY2xpZW50SGVpZ2h0LFxuICAgICAgdmlld3BvcnRXaWR0aCA9IE1hdGgubWF4KHJvb3QuY2xpZW50V2lkdGggfHwgMCwgd2luZG93LmlubmVyV2lkdGggfHwgMCksXG4gICAgICBwb3NpdGlvblRvID0gdmlld3BvcnRXaWR0aCA+IDQ4MCA/IF9zZC5wb3NpdGlvbiA6ICdhbGwnLFxuICAgICAgZGRUYXJnZXQgPSB0aGlzLkRPTVtwb3NpdGlvblRvID09ICdpbnB1dCcgPyAnaW5wdXQnIDogJ3Njb3BlJ107XG4gICAgZGRIZWlnaHQgPSBkZEhlaWdodCB8fCBkZEVsbS5jbGllbnRIZWlnaHQ7XG4gICAgZnVuY3Rpb24gZ2V0UGFyZW50c1Bvc2l0aW9ucyhwKSB7XG4gICAgICB2YXIgbGVmdCA9IDAsXG4gICAgICAgIHRvcCA9IDA7XG5cbiAgICAgIC8vIHdoZW4gaW4gZWxlbWVudC1mdWxsc2NyZWVuIG1vZGUsIGRvIG5vdCBnbyBhYm92ZSB0aGUgZnVsbHNjcmVlbmVkLWVsZW1lbnRcbiAgICAgIHdoaWxlIChwICYmIHAgIT0gcm9vdCkge1xuICAgICAgICBsZWZ0ICs9IHAub2Zmc2V0TGVmdCB8fCAwO1xuICAgICAgICB0b3AgKz0gcC5vZmZzZXRUb3AgfHwgMDtcbiAgICAgICAgcCA9IHAucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcFxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QWNjdW11bGF0ZWRBbmNlc3RvcnNTY3JvbGxUb3AoKSB7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gMCxcbiAgICAgICAgcCA9IF9zZC5hcHBlbmRUYXJnZXQucGFyZW50Tm9kZTtcbiAgICAgIHdoaWxlIChwKSB7XG4gICAgICAgIHNjcm9sbFRvcCArPSBwLnNjcm9sbFRvcCB8fCAwO1xuICAgICAgICBwID0gcC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjcm9sbFRvcDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN0YXRlLmRyb3Bkb3duLnZpc2libGUpIHJldHVybjtcbiAgICBpZiAocG9zaXRpb25UbyA9PSAndGV4dCcpIHtcbiAgICAgIHJlY3QgPSBnZXRDYXJldEdsb2JhbFBvc2l0aW9uKCk7XG4gICAgICBib3R0b20gPSByZWN0LmJvdHRvbTtcbiAgICAgIHRvcCA9IHJlY3QudG9wO1xuICAgICAgbGVmdCA9IHJlY3QubGVmdDtcbiAgICAgIHdpZHRoID0gJ2F1dG8nO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRzUG9zaXRpb25zID0gZ2V0UGFyZW50c1Bvc2l0aW9ucyhfc2QuYXBwZW5kVGFyZ2V0KTtcbiAgICAgIHJlY3QgPSBkZFRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRvcCA9IHJlY3QudG9wIC0gcGFyZW50c1Bvc2l0aW9ucy50b3A7XG4gICAgICBib3R0b20gPSByZWN0LmJvdHRvbSAtIDEgLSBwYXJlbnRzUG9zaXRpb25zLnRvcDtcbiAgICAgIGxlZnQgPSByZWN0LmxlZnQgLSBwYXJlbnRzUG9zaXRpb25zLmxlZnQ7XG4gICAgICB3aWR0aCA9IHJlY3Qud2lkdGggKyAncHgnO1xuICAgIH1cblxuICAgIC8vIGlmIHRoZSBcImFwcGVuZCB0YXJnZXRcIiBpc24ndCB0aGUgZGVmYXVsdCwgY29ycmVjdCB0aGUgYHRvcGAgdmFyaWFibGUgYnkgaWdub3JpbmcgYW55IHNjcm9sbFRvcCBvZiB0aGUgdGFyZ2V0J3MgQW5jZXN0b3JzXG4gICAgaWYgKCFpc0RlZmF1bHRBcHBlbmRUYXJnZXQpIHtcbiAgICAgIGxldCBhY2N1bXVsYXRlZEFuY2VzdG9yc1Njcm9sbFRvcCA9IGdldEFjY3VtdWxhdGVkQW5jZXN0b3JzU2Nyb2xsVG9wKCk7XG4gICAgICB0b3AgKz0gYWNjdW11bGF0ZWRBbmNlc3RvcnNTY3JvbGxUb3A7XG4gICAgICBib3R0b20gKz0gYWNjdW11bGF0ZWRBbmNlc3RvcnNTY3JvbGxUb3A7XG4gICAgfVxuICAgIHRvcCA9IE1hdGguZmxvb3IodG9wKTtcbiAgICBib3R0b20gPSBNYXRoLmNlaWwoYm90dG9tKTtcbiAgICBwbGFjZUFib3ZlID0gcGxhY2VBYm92ZSA9PT0gdW5kZWZpbmVkID8gdmlld3BvcnRIZWlnaHQgLSByZWN0LmJvdHRvbSA8IGRkSGVpZ2h0IDogcGxhY2VBYm92ZTtcblxuICAgIC8vIGZsaXAgdmVydGljYWxseSBpZiB0aGVyZSBpcyBubyBzcGFjZSBmb3IgdGhlIGRyb3Bkb3duIGJlbG93IHRoZSBpbnB1dFxuICAgIGRkRWxtLnN0eWxlLmNzc1RleHQgPSBcImxlZnQ6XCIgKyAobGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCkgKyBcInB4OyB3aWR0aDpcIiArIHdpZHRoICsgXCI7XCIgKyAocGxhY2VBYm92ZSA/IFwidG9wOiBcIiArICh0b3AgKyBhcHBlbmRUYXJnZXRTY3JvbGxUb3ApICsgXCJweFwiIDogXCJ0b3A6IFwiICsgKGJvdHRvbSArIGFwcGVuZFRhcmdldFNjcm9sbFRvcCkgKyBcInB4XCIpO1xuICAgIGRkRWxtLnNldEF0dHJpYnV0ZSgncGxhY2VtZW50JywgcGxhY2VBYm92ZSA/IFwidG9wXCIgOiBcImJvdHRvbVwiKTtcbiAgICBkZEVsbS5zZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgcG9zaXRpb25Ubyk7XG4gIH0sXG4gIGV2ZW50czoge1xuICAgIC8qKlxyXG4gICAgICogRXZlbnRzIHNob3VsZCBvbmx5IGJlIGJpbmRlZCB3aGVuIHRoZSBkcm9wZG93biBpcyByZW5kZXJlZCBhbmQgcmVtb3ZlZCB3aGVuIGlzbid0XHJcbiAgICAgKiBiZWNhdXNlIHRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIFRhZ2lmeSBpbnN0YW5jZXMgb24gYSBjZXJ0YWluIHBhZ2VcclxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IGJpbmRVbmJpbmQgW29wdGlvbmFsLiB0cnVlIHdoZW4gd2FudGluZyB0byB1bmJpbmQgYWxsIHRoZSBldmVudHNdXHJcbiAgICAgKi9cbiAgICBiaW5kaW5nKCkge1xuICAgICAgbGV0IGJpbmRVbmJpbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRydWU7XG4gICAgICAvLyByZWZlcmVuY2VzIHRvIHRoZSBcIi5iaW5kKClcIiBtZXRob2RzIG11c3QgYmUgc2F2ZWQgc28gdGhleSBjb3VsZCBiZSB1bmJpbmRlZCBsYXRlclxuICAgICAgdmFyIF9DQiA9IHRoaXMuZHJvcGRvd24uZXZlbnRzLmNhbGxiYWNrcyxcbiAgICAgICAgLy8gY2FsbGJhY2stcmVmc1xuICAgICAgICBfQ0JSID0gdGhpcy5saXN0ZW5lcnMuZHJvcGRvd24gPSB0aGlzLmxpc3RlbmVycy5kcm9wZG93biB8fCB7XG4gICAgICAgICAgcG9zaXRpb246IHRoaXMuZHJvcGRvd24ucG9zaXRpb24uYmluZCh0aGlzLCBudWxsKSxcbiAgICAgICAgICBvbktleURvd246IF9DQi5vbktleURvd24uYmluZCh0aGlzKSxcbiAgICAgICAgICBvbk1vdXNlT3ZlcjogX0NCLm9uTW91c2VPdmVyLmJpbmQodGhpcyksXG4gICAgICAgICAgb25Nb3VzZUxlYXZlOiBfQ0Iub25Nb3VzZUxlYXZlLmJpbmQodGhpcyksXG4gICAgICAgICAgb25DbGljazogX0NCLm9uQ2xpY2suYmluZCh0aGlzKSxcbiAgICAgICAgICBvblNjcm9sbDogX0NCLm9uU2Nyb2xsLmJpbmQodGhpcylcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aW9uID0gYmluZFVuYmluZCA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRyb3Bkb3duLnBvc2l0aW9uICE9ICdtYW51YWwnKSB7XG4gICAgICAgIGRvY3VtZW50W2FjdGlvbl0oJ3Njcm9sbCcsIF9DQlIucG9zaXRpb24sIHRydWUpO1xuICAgICAgICB3aW5kb3dbYWN0aW9uXSgncmVzaXplJywgX0NCUi5wb3NpdGlvbik7XG4gICAgICAgIHdpbmRvd1thY3Rpb25dKCdrZXlkb3duJywgX0NCUi5vbktleURvd24pO1xuICAgICAgfVxuICAgICAgdGhpcy5ET00uZHJvcGRvd25bYWN0aW9uXSgnbW91c2VvdmVyJywgX0NCUi5vbk1vdXNlT3Zlcik7XG4gICAgICB0aGlzLkRPTS5kcm9wZG93blthY3Rpb25dKCdtb3VzZWxlYXZlJywgX0NCUi5vbk1vdXNlTGVhdmUpO1xuICAgICAgdGhpcy5ET00uZHJvcGRvd25bYWN0aW9uXSgnbW91c2Vkb3duJywgX0NCUi5vbkNsaWNrKTtcbiAgICAgIHRoaXMuRE9NLmRyb3Bkb3duLmNvbnRlbnRbYWN0aW9uXSgnc2Nyb2xsJywgX0NCUi5vblNjcm9sbCk7XG4gICAgfSxcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIG9uS2V5RG93bihlKSB7XG4gICAgICAgIC8vIGlnbm9yZSBrZXlzIGR1cmluZyBJTUUgY29tcG9zaXRpb25cbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmhhc0ZvY3VzIHx8IHRoaXMuc3RhdGUuY29tcG9zaW5nKSByZXR1cm47XG5cbiAgICAgICAgLy8gZ2V0IHRoZSBcImFjdGl2ZVwiIGVsZW1lbnQsIGFuZCBpZiB0aGVyZSB3YXMgbm9uZSAoeWV0KSBhY3RpdmUsIHVzZSBmaXJzdCBjaGlsZFxuICAgICAgICB2YXIgc2VsZWN0ZWRFbG0gPSB0aGlzLkRPTS5kcm9wZG93bi5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1BY3RpdmVTZWxlY3RvciksXG4gICAgICAgICAgc2VsZWN0ZWRFbG1EYXRhID0gdGhpcy5kcm9wZG93bi5nZXRTdWdnZXN0aW9uRGF0YUJ5Tm9kZShzZWxlY3RlZEVsbSk7XG4gICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICAgIGNhc2UgJ0Rvd24nOiAvLyA+SUUxMVxuICAgICAgICAgIGNhc2UgJ1VwJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gPklFMTFcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB2YXIgZHJvcGRvd25JdGVtcyA9IHRoaXMuZHJvcGRvd24uZ2V0QWxsU3VnZ2VzdGlvbnNSZWZzKCksXG4gICAgICAgICAgICAgICAgYWN0aW9uVXAgPSBlLmtleSA9PSAnQXJyb3dVcCcgfHwgZS5rZXkgPT0gJ1VwJztcbiAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRWxtKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRFbG0gPSB0aGlzLmRyb3Bkb3duLmdldE5leHRPclByZXZPcHRpb24oc2VsZWN0ZWRFbG0sICFhY3Rpb25VcCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBpZiBubyBlbGVtZW50IHdhcyBmb3VuZCBPUiBjdXJyZW50IGl0ZW0gaXMgbm90IGEgXCJyZWFsXCIgaXRlbSwgbG9vcFxuICAgICAgICAgICAgICBpZiAoIXNlbGVjdGVkRWxtIHx8ICFzZWxlY3RlZEVsbS5tYXRjaGVzKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1TZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEVsbSA9IGRyb3Bkb3duSXRlbXNbYWN0aW9uVXAgPyBkcm9wZG93bkl0ZW1zLmxlbmd0aCAtIDEgOiAwXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZ2hsaWdodE9wdGlvbihzZWxlY3RlZEVsbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIC8vIHNlbGVjdGVkRWxtLnNjcm9sbEludG9WaWV3KHtpbmxpbmU6ICduZWFyZXN0JywgYmVoYXZpb3I6ICdzbW9vdGgnfSlcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICBjYXNlICdFc2MnOlxuICAgICAgICAgICAgLy8gSUUxMVxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5oaWRlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmFjdGlvbnMuQXJyb3dMZWZ0KSByZXR1cm47XG4gICAgICAgICAgY2FzZSAnVGFiJzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gaW4gbWl4LW1vZGUsIHRyZWF0IGFycm93UmlnaHQgbGlrZSBFbnRlciBrZXksIHNvIGEgdGFnIHdpbGwgYmUgY3JlYXRlZFxuICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlICE9ICdtaXgnICYmIHNlbGVjdGVkRWxtICYmICF0aGlzLnNldHRpbmdzLmF1dG9Db21wbGV0ZS5yaWdodEtleSAmJiAhdGhpcy5zdGF0ZS5lZGl0aW5nKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50cyBibHVyIHNvIHRoZSBhdXRvY29tcGxldGUgc3VnZ2VzdGlvbiB3aWxsIG5vdCBiZWNvbWUgYSB0YWdcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmRyb3Bkb3duLmdldE1hcHBlZFZhbHVlKHNlbGVjdGVkRWxtRGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dC5hdXRvY29tcGxldGUuc2V0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5ob29rcy5zdWdnZXN0aW9uQ2xpY2soZSwge1xuICAgICAgICAgICAgICAgIHRhZ2lmeTogdGhpcyxcbiAgICAgICAgICAgICAgICB0YWdEYXRhOiBzZWxlY3RlZEVsbURhdGEsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbkVsbTogc2VsZWN0ZWRFbG1cbiAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkRWxtKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLnNlbGVjdE9wdGlvbihzZWxlY3RlZEVsbSk7XG4gICAgICAgICAgICAgICAgICAvLyBoaWdobGlnaHQgbmV4dCBvcHRpb25cbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRWxtID0gdGhpcy5kcm9wZG93bi5nZXROZXh0T3JQcmV2T3B0aW9uKHNlbGVjdGVkRWxtLCAhYWN0aW9uVXApO1xuICAgICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5oaWdobGlnaHRPcHRpb24oc2VsZWN0ZWRFbG0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlICE9ICdtaXgnKSB0aGlzLmFkZFRhZ3ModGhpcy5zdGF0ZS5pbnB1dFRleHQudHJpbSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IGVycik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgPT0gJ21peCcgfHwgdGhpcy5zdGF0ZS5lZGl0aW5nLnNjb3BlKSByZXR1cm47XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnB1dC5yYXcuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiXCIgfHwgdmFsdWUuY2hhckNvZGVBdCgwKSA9PSA4MjAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYmFja3NwYWNlID09PSB0cnVlKSB0aGlzLnJlbW92ZVRhZ3MoKTtlbHNlIGlmICh0aGlzLnNldHRpbmdzLmJhY2tzcGFjZSA9PSAnZWRpdCcpIHNldFRpbWVvdXQodGhpcy5lZGl0VGFnLmJpbmQodGhpcyksIDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdXNlT3ZlcihlKSB7XG4gICAgICAgIHZhciBkZEl0ZW0gPSBlLnRhcmdldC5jbG9zZXN0KHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1TZWxlY3Rvcik7XG4gICAgICAgIC8vIGV2ZW50IGRlbGVnYXRpb24gY2hlY2tcbiAgICAgICAgZGRJdGVtICYmIHRoaXMuZHJvcGRvd24uaGlnaGxpZ2h0T3B0aW9uKGRkSXRlbSk7XG4gICAgICB9LFxuICAgICAgb25Nb3VzZUxlYXZlKGUpIHtcbiAgICAgICAgLy8gZGUtaGlnaGxpZ2h0IGFueSBwcmV2aW91c2x5IGhpZ2hsaWdodGVkIG9wdGlvblxuICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZ2hsaWdodE9wdGlvbigpO1xuICAgICAgfSxcbiAgICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBpZiAoZS5idXR0b24gIT0gMCB8fCBlLnRhcmdldCA9PSB0aGlzLkRPTS5kcm9wZG93biB8fCBlLnRhcmdldCA9PSB0aGlzLkRPTS5kcm9wZG93bi5jb250ZW50KSByZXR1cm47IC8vIGFsbG93IG9ubHkgbW91c2UgbGVmdC1jbGlja3NcblxuICAgICAgICB2YXIgc2VsZWN0ZWRFbG0gPSBlLnRhcmdldC5jbG9zZXN0KHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1TZWxlY3RvciksXG4gICAgICAgICAgc2VsZWN0ZWRFbG1EYXRhID0gdGhpcy5kcm9wZG93bi5nZXRTdWdnZXN0aW9uRGF0YUJ5Tm9kZShzZWxlY3RlZEVsbSk7XG5cbiAgICAgICAgLy8gdGVtcG9yYXJ5IHNldCB0aGUgXCJhY3Rpb25zXCIgc3RhdGUgdG8gaW5kaWNhdGUgdG8gdGhlIG1haW4gXCJibHVyXCIgZXZlbnQgaXQgc2hvdWxkbid0IHJ1blxuICAgICAgICB0aGlzLnN0YXRlLmFjdGlvbnMuc2VsZWN0T3B0aW9uID0gdHJ1ZTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnN0YXRlLmFjdGlvbnMuc2VsZWN0T3B0aW9uID0gZmFsc2UsIDUwKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5ob29rcy5zdWdnZXN0aW9uQ2xpY2soZSwge1xuICAgICAgICAgIHRhZ2lmeTogdGhpcyxcbiAgICAgICAgICB0YWdEYXRhOiBzZWxlY3RlZEVsbURhdGEsXG4gICAgICAgICAgc3VnZ2VzdGlvbkVsbTogc2VsZWN0ZWRFbG1cbiAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKHNlbGVjdGVkRWxtKSB0aGlzLmRyb3Bkb3duLnNlbGVjdE9wdGlvbihzZWxlY3RlZEVsbSwgZSk7ZWxzZSB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IGNvbnNvbGUud2FybihlcnIpKTtcbiAgICAgIH0sXG4gICAgICBvblNjcm9sbChlKSB7XG4gICAgICAgIHZhciBlbG0gPSBlLnRhcmdldCxcbiAgICAgICAgICBwb3MgPSBlbG0uc2Nyb2xsVG9wIC8gKGVsbS5zY3JvbGxIZWlnaHQgLSBlbG0ucGFyZW50Tm9kZS5jbGllbnRIZWlnaHQpICogMTAwO1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJkcm9wZG93bjpzY3JvbGxcIiwge1xuICAgICAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucm91bmQocG9zKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxyXG4gICAqIEdpdmVuIGEgc3VnZ2VzdGlvbi1pdGVtLCByZXR1cm4gdGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGl0XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnRWxtXHJcbiAgICogQHJldHVybnMgT2JqZWN0XHJcbiAgICovXG4gIGdldFN1Z2dlc3Rpb25EYXRhQnlOb2RlKHRhZ0VsbSkge1xuICAgIHZhciB2YWx1ZSA9IHRhZ0VsbSAmJiB0YWdFbG0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgIHJldHVybiB0aGlzLnN1Z2dlc3RlZExpc3RJdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS52YWx1ZSA9PSB2YWx1ZSkgfHwgbnVsbDtcbiAgfSxcbiAgZ2V0TmV4dE9yUHJldk9wdGlvbihzZWxlY3RlZCkge1xuICAgIGxldCBuZXh0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgIHZhciBkcm9wZG93bkl0ZW1zID0gdGhpcy5kcm9wZG93bi5nZXRBbGxTdWdnZXN0aW9uc1JlZnMoKSxcbiAgICAgIHNlbGVjdGVkSWR4ID0gZHJvcGRvd25JdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSBzZWxlY3RlZCk7XG4gICAgcmV0dXJuIG5leHQgPyBkcm9wZG93bkl0ZW1zW3NlbGVjdGVkSWR4ICsgMV0gOiBkcm9wZG93bkl0ZW1zW3NlbGVjdGVkSWR4IC0gMV07XG4gIH0sXG4gIC8qKlxyXG4gICAqIG1hcmsgdGhlIGN1cnJlbnRseSBhY3RpdmUgc3VnZ2VzdGlvbiBvcHRpb25cclxuICAgKiBAcGFyYW0ge09iamVjdH0gIGVsbSAgICAgICAgICAgIG9wdGlvbiBET00gbm9kZVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWRqdXN0U2Nyb2xsICAgd2hlbiBuYXZpZ2F0aW9uIHdpdGgga2V5Ym9hcmQgYXJyb3dzICh1cC9kb3duKSwgYXV0LXNjcm9sbCB0byBhbHdheXMgc2hvdyB0aGUgaGlnaGxpZ2h0ZWQgZWxlbWVudFxyXG4gICAqL1xuICBoaWdobGlnaHRPcHRpb24oZWxtLCBhZGp1c3RTY3JvbGwpIHtcbiAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLmRyb3Bkb3duSXRlbUFjdGl2ZSxcbiAgICAgIGl0ZW1EYXRhO1xuXG4gICAgLy8gZm9jdXMgY2FzdWVzIGEgYnVnIGluIEZpcmVmb3ggd2l0aCB0aGUgcGxhY2Vob2xkZXIgYmVlbiBzaG93biBvbiB0aGUgaW5wdXQgZWxlbWVudFxuICAgIC8vIGlmKCB0aGlzLnNldHRpbmdzLmRyb3Bkb3duLnBvc2l0aW9uICE9ICdtYW51YWwnIClcbiAgICAvLyAgICAgZWxtLmZvY3VzKCk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5kZEl0ZW1FbG0pIHtcbiAgICAgIHRoaXMuc3RhdGUuZGRJdGVtRWxtLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgIHRoaXMuc3RhdGUuZGRJdGVtRWxtLnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIik7XG4gICAgfVxuICAgIGlmICghZWxtKSB7XG4gICAgICB0aGlzLnN0YXRlLmRkSXRlbURhdGEgPSBudWxsO1xuICAgICAgdGhpcy5zdGF0ZS5kZEl0ZW1FbG0gPSBudWxsO1xuICAgICAgdGhpcy5pbnB1dC5hdXRvY29tcGxldGUuc3VnZ2VzdC5jYWxsKHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpdGVtRGF0YSA9IHRoaXMuZHJvcGRvd24uZ2V0U3VnZ2VzdGlvbkRhdGFCeU5vZGUoZWxtKTtcbiAgICB0aGlzLnN0YXRlLmRkSXRlbURhdGEgPSBpdGVtRGF0YTtcbiAgICB0aGlzLnN0YXRlLmRkSXRlbUVsbSA9IGVsbTtcblxuICAgIC8vIHRoaXMuRE9NLmRyb3Bkb3duLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMuZHJvcGRvd25JdGVtQWN0aXZlKS5mb3JFYWNoKGFjdGl2ZUVsbSA9PiBhY3RpdmVFbG0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpKTtcbiAgICBlbG0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIHRydWUpO1xuICAgIGlmIChhZGp1c3RTY3JvbGwpIGVsbS5wYXJlbnROb2RlLnNjcm9sbFRvcCA9IGVsbS5jbGllbnRIZWlnaHQgKyBlbG0ub2Zmc2V0VG9wIC0gZWxtLnBhcmVudE5vZGUuY2xpZW50SGVpZ2h0O1xuXG4gICAgLy8gVHJ5IHRvIGF1dG9jb21wbGV0ZSB0aGUgdHlwZWQgdmFsdWUgd2l0aCB0aGUgY3VycmVudGx5IGhpZ2hsaWdodGVkIGRyb3Bkb3duIGl0ZW1cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvQ29tcGxldGUpIHtcbiAgICAgIHRoaXMuaW5wdXQuYXV0b2NvbXBsZXRlLnN1Z2dlc3QuY2FsbCh0aGlzLCBpdGVtRGF0YSk7XG4gICAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKCk7IC8vIHN1Z2dlc3Rpb25zIG1pZ2h0IGFsdGVyIHRoZSBoZWlnaHQgb2YgdGhlIHRhZ2lmeSB3cmFwcGVyIGJlY2F1c2Ugb2YgdW5rb3duIHN1Z2dlc3RlZCB0ZXJtIGxlbmd0aCB0aGF0IGNvdWxkIGRyb3AgdG8gdGhlIG5leHQgbGluZVxuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiBDcmVhdGUgYSB0YWcgZnJvbSB0aGUgY3VycmVudGx5IGFjdGl2ZSBzdWdnZXN0aW9uIG9wdGlvblxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbG0gIERPTSBub2RlIHRvIHNlbGVjdFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBUaGUgb3JpZ2luYWwgQ2xpY2sgZXZlbnQsIGlmIGF2YWlsYWJsZSAoc2luY2Uga2V5Ym9hcmQgRU5URVIga2V5IGFsc28gdHJpZ2dlcnMgdGhpcyBtZXRob2QpXHJcbiAgICovXG4gIHNlbGVjdE9wdGlvbihlbG0sIGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHNldHRpbmdzJGRyb3BkbyA9IHRoaXMuc2V0dGluZ3MuZHJvcGRvd24sXG4gICAgICBjbGVhck9uU2VsZWN0ID0gX3RoaXMkc2V0dGluZ3MkZHJvcGRvLmNsZWFyT25TZWxlY3QsXG4gICAgICBjbG9zZU9uU2VsZWN0ID0gX3RoaXMkc2V0dGluZ3MkZHJvcGRvLmNsb3NlT25TZWxlY3Q7XG4gICAgaWYgKCFlbG0pIHtcbiAgICAgIHRoaXMuYWRkVGFncyh0aGlzLnN0YXRlLmlucHV0VGV4dCwgdHJ1ZSk7XG4gICAgICBjbG9zZU9uU2VsZWN0ICYmIHRoaXMuZHJvcGRvd24uaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudCA9IGV2ZW50IHx8IHt9O1xuXG4gICAgLy8gaWYgaW4gZWRpdC1tb2RlLCBkbyBub3QgY29udGludWUgYnV0IGluc3RlYWQgcmVwbGFjZSB0aGUgdGFnJ3MgdGV4dC5cbiAgICAvLyB0aGUgc2NlbmFyaW8gaXMgdGhhdCBcImFkZFRhZ3NcIiB3YXMgY2FsbGVkIGZyb20gYSBkcm9wZG93biBzdWdnZXN0ZWQgb3B0aW9uIHNlbGVjdGVkIHdoaWxlIGVkaXRpbmdcblxuICAgIHZhciB2YWx1ZSA9IGVsbS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyksXG4gICAgICBpc05vTWF0Y2ggPSB2YWx1ZSA9PSAnbm9NYXRjaCcsXG4gICAgICB0YWdEYXRhID0gdGhpcy5zdWdnZXN0ZWRMaXN0SXRlbXMuZmluZChpdGVtID0+IChpdGVtLnZhbHVlID8/IGl0ZW0pID09IHZhbHVlKTtcblxuICAgIC8vIFRoZSBiZWxvdyBldmVudCBtdXN0IGJlIHRyaWdnZXJlZCwgcmVnYXJkbGVzcyBvZiBhbnl0aGluZyBlbHNlIHdoaWNoIG1pZ2h0IGdvIHdyb25nXG4gICAgdGhpcy50cmlnZ2VyKCdkcm9wZG93bjpzZWxlY3QnLCB7XG4gICAgICBkYXRhOiB0YWdEYXRhLFxuICAgICAgZWxtLFxuICAgICAgZXZlbnRcbiAgICB9KTtcbiAgICBpZiAoIXZhbHVlIHx8ICF0YWdEYXRhICYmICFpc05vTWF0Y2gpIHtcbiAgICAgIGNsb3NlT25TZWxlY3QgJiYgc2V0VGltZW91dCh0aGlzLmRyb3Bkb3duLmhpZGUuYmluZCh0aGlzKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcpIHtcbiAgICAgIC8vIG5vcm1hbGl6aW5nIHZhbHVlLCBiZWNhdXNlIFwidGFnRGF0YVwiIG1pZ2h0IGJlIGEgc3RyaW5nLCBhbmQgdGhlcmVmb3JlIHdpbGwgbm90IGJlIGFibGUgdG8gZXh0ZW5kIHRoZSBvYmplY3RcbiAgICAgIHRoaXMub25FZGl0VGFnRG9uZShudWxsLCBleHRlbmQoe1xuICAgICAgICBfX2lzVmFsaWQ6IHRydWVcbiAgICAgIH0sIHRoaXMubm9ybWFsaXplVGFncyhbdGFnRGF0YV0pWzBdKSk7XG4gICAgfVxuICAgIC8vIFRhZ2lmeSBpbnN0YW5jZXMgc2hvdWxkIHJlLWZvY3VzIHRvIHRoZSBpbnB1dCBlbGVtZW50IG9uY2UgYW4gb3B0aW9uIHdhcyBzZWxlY3RlZCwgdG8gYWxsb3cgY29udGludW91cyB0eXBpbmdcbiAgICBlbHNlIHtcbiAgICAgIHRoaXNbdGhpcy5zZXR0aW5ncy5tb2RlID09ICdtaXgnID8gXCJhZGRNaXhUYWdzXCIgOiBcImFkZFRhZ3NcIl0oW3RhZ0RhdGEgfHwgdGhpcy5pbnB1dC5yYXcuY2FsbCh0aGlzKV0sIGNsZWFyT25TZWxlY3QpO1xuICAgIH1cblxuICAgIC8vIHRvZG86IGNvbnNpZGVyIG5vdCBkb2luZyB0aGlzIG9uIG1peC1tb2RlXG4gICAgaWYgKCF0aGlzLkRPTS5pbnB1dC5wYXJlbnROb2RlKSByZXR1cm47XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLkRPTS5pbnB1dC5mb2N1cygpO1xuICAgICAgdGhpcy50b2dnbGVGb2N1c0NsYXNzKHRydWUpO1xuICAgIH0pO1xuICAgIGNsb3NlT25TZWxlY3QgJiYgc2V0VGltZW91dCh0aGlzLmRyb3Bkb3duLmhpZGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyBoaWRlIHNlbGVjdGVkIHN1Z2dlc3Rpb25cbiAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHtcbiAgICAgIHRoaXMuZHJvcGRvd24uZmlsbEhlYWRlckZvb3RlcigpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBlbG0ucmVtb3ZlKCksIDEwMCk7XG4gICAgfSwge1xuICAgICAgb25jZTogdHJ1ZVxuICAgIH0pO1xuICAgIGVsbS5jbGFzc0xpc3QuYWRkKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkl0ZW1IaWRkZW4pO1xuICB9LFxuICAvLyBhZGRzIGFsbCB0aGUgc3VnZ2VzdGVkIGl0ZW1zLCBpbmNsdWRpbmcgdGhlIG9uZXMgd2hpY2ggYXJlIG5vdCBjdXJyZW50bHkgcmVuZGVyZWQsXG4gIC8vIHVubGVzcyBzcGVjaWZpZWQgb3RoZXJ3aXNlIChieSB0aGUgXCJvbmx5UmVuZGVyZWRcIiBhcmd1bWVudClcbiAgc2VsZWN0QWxsKG9ubHlSZW5kZXJlZCkge1xuICAgIC8vIGhhdmluZyBzdWdnZXN0ZWRMaXN0SXRlbXMgd2l0aCBpdGVtcyBtZXNzZXMgd2l0aCBcIm5vcm1hbGl6ZVRhZ3NcIiB3aGVuIHdhbnRpbmdcbiAgICAvLyB0byBhZGQgYWxsIHRhZ3NcbiAgICB0aGlzLnN1Z2dlc3RlZExpc3RJdGVtcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZHJvcGRvd24uaGlkZSgpO1xuICAgIHRoaXMuZHJvcGRvd24uZmlsdGVyTGlzdEl0ZW1zKCcnKTtcbiAgICB2YXIgdGFnc1RvQWRkID0gdGhpcy5kcm9wZG93bi5maWx0ZXJMaXN0SXRlbXMoJycpO1xuICAgIGlmICghb25seVJlbmRlcmVkKSB0YWdzVG9BZGQgPSB0aGlzLnN0YXRlLmRyb3Bkb3duLnN1Z2dlc3Rpb25zO1xuXG4gICAgLy8gc29tZSB3aGl0ZWxpc3QgaXRlbXMgbWlnaHQgaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQgYXMgdGFncyBzbyB3aGVuIGFkZGluZ3MgYWxsIG9mIHRoZW0sXG4gICAgLy8gc2tpcCBhZGRpbmcgYWxyZWFkeS1hZGRlZCBvbmVzLCBzbyBiZXN0IHRvIHVzZSBcImZpbHRlckxpc3RJdGVtc1wiIG1ldGhvZCBvdmVyIFwic2V0dGluZ3Mud2hpdGVsaXN0XCJcbiAgICB0aGlzLmFkZFRhZ3ModGFnc1RvQWRkLCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgLyoqXHJcbiAgICogcmV0dXJucyBhbiBIVE1MIHN0cmluZyBvZiB0aGUgc3VnZ2VzdGlvbnMnIGxpc3QgaXRlbXNcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgc3RyaW5nIHRvIGZpbHRlciB0aGUgd2hpdGVsaXN0IGJ5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgXCJleGFjdFwiIC0gZm9yIGV4YWN0IGNvbXBsZXRlIG1hdGNoXHJcbiAgICogQHJldHVybiB7QXJyYXl9IGxpc3Qgb2YgZmlsdGVyZWQgd2hpdGVsaXN0IGl0ZW1zIGFjY29yZGluZyB0byB0aGUgc2V0dGluZ3MgcHJvdmlkZWQgYW5kIGN1cnJlbnQgdmFsdWVcclxuICAgKi9cbiAgZmlsdGVyTGlzdEl0ZW1zKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgIF9zZCA9IF9zLmRyb3Bkb3duLFxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge30sXG4gICAgICBsaXN0ID0gW10sXG4gICAgICBleGFjdE1hdGNoZXNMaXN0ID0gW10sXG4gICAgICB3aGl0ZWxpc3QgPSBfcy53aGl0ZWxpc3QsXG4gICAgICBzdWdnZXN0aW9uc0NvdW50ID0gX3NkLm1heEl0ZW1zID49IDAgPyBfc2QubWF4SXRlbXMgOiBJbmZpbml0eSxcbiAgICAgIHNlYXJjaEtleXMgPSBfc2Quc2VhcmNoS2V5cyxcbiAgICAgIHdoaXRlbGlzdEl0ZW0sXG4gICAgICB2YWx1ZUlzSW5XaGl0ZWxpc3QsXG4gICAgICBzZWFyY2hCeSxcbiAgICAgIGlzRHVwbGljYXRlLFxuICAgICAgbmlkZGxlLFxuICAgICAgaSA9IDA7XG4gICAgdmFsdWUgPSBfcy5tb2RlID09ICdzZWxlY3QnICYmIHRoaXMudmFsdWUubGVuZ3RoICYmIHRoaXMudmFsdWVbMF1bX3MudGFnVGV4dFByb3BdID09IHZhbHVlID8gJycgLy8gZG8gbm90IGZpbHRlciBpZiB0aGUgdGFnLCB3aGljaCBpcyBhbHJlYWR5IHNlbGVjZXRkIGluIFwic2VsZWN0XCIgbW9kZSwgaXMgdGhlIHNhbWUgYXMgdGhlIHR5cGVkIHRleHRcbiAgICA6IHZhbHVlO1xuICAgIGlmICghdmFsdWUgfHwgIXNlYXJjaEtleXMubGVuZ3RoKSB7XG4gICAgICBsaXN0ID0gX3NkLmluY2x1ZGVTZWxlY3RlZFRhZ3MgPyB3aGl0ZWxpc3QgOiB3aGl0ZWxpc3QuZmlsdGVyKGl0ZW0gPT4gIXRoaXMuaXNUYWdEdXBsaWNhdGUoaXNPYmplY3QoaXRlbSkgPyBpdGVtLnZhbHVlIDogaXRlbSkpOyAvLyBkb24ndCBpbmNsdWRlIHRhZ3Mgd2hpY2ggaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQuXG5cbiAgICAgIHRoaXMuc3RhdGUuZHJvcGRvd24uc3VnZ2VzdGlvbnMgPSBsaXN0O1xuICAgICAgcmV0dXJuIGxpc3Quc2xpY2UoMCwgc3VnZ2VzdGlvbnNDb3VudCk7IC8vIHJlc3BlY3QgXCJtYXhJdGVtc1wiIGRyb3Bkb3duIHNldHRpbmdcbiAgICB9XG5cbiAgICBuaWRkbGUgPSBfc2QuY2FzZVNlbnNpdGl2ZSA/IFwiXCIgKyB2YWx1ZSA6IChcIlwiICsgdmFsdWUpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBjaGVja3MgaWYgQUxMIG9mIHRoZSB3b3JkcyBpbiB0aGUgc2VhcmNoIHF1ZXJ5IGV4aXN0cyBpbiB0aGUgY3VycmVudCB3aGl0ZWxpc3QgaXRlbSwgcmVnYXJkbGVzcyBvZiB0aGVpciBvcmRlclxuICAgIGZ1bmN0aW9uIHN0cmluZ0hhc0FsbChzLCBxdWVyeSkge1xuICAgICAgcmV0dXJuIHF1ZXJ5LnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKS5ldmVyeShxID0+IHMuaW5jbHVkZXMocS50b0xvd2VyQ2FzZSgpKSk7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgd2hpdGVsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc3RhcnRzV2l0aE1hdGNoLCBleGFjdE1hdGNoO1xuICAgICAgd2hpdGVsaXN0SXRlbSA9IHdoaXRlbGlzdFtpXSBpbnN0YW5jZW9mIE9iamVjdCA/IHdoaXRlbGlzdFtpXSA6IHtcbiAgICAgICAgdmFsdWU6IHdoaXRlbGlzdFtpXVxuICAgICAgfTsgLy9ub3JtYWxpemUgdmFsdWUgYXMgYW4gT2JqZWN0XG5cbiAgICAgIGxldCBpdGVtV2l0aG91dFNlYXJjaEtleXMgPSAhT2JqZWN0LmtleXMod2hpdGVsaXN0SXRlbSkuc29tZShrID0+IHNlYXJjaEtleXMuaW5jbHVkZXMoaykpLFxuICAgICAgICBfc2VhcmNoS2V5cyA9IGl0ZW1XaXRob3V0U2VhcmNoS2V5cyA/IFtcInZhbHVlXCJdIDogc2VhcmNoS2V5cztcbiAgICAgIGlmIChfc2QuZnV6enlTZWFyY2ggJiYgIW9wdGlvbnMuZXhhY3QpIHtcbiAgICAgICAgc2VhcmNoQnkgPSBfc2VhcmNoS2V5cy5yZWR1Y2UoKHZhbHVlcywgaykgPT4gdmFsdWVzICsgXCIgXCIgKyAod2hpdGVsaXN0SXRlbVtrXSB8fCBcIlwiKSwgXCJcIikudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICAgIGlmIChfc2QuYWNjZW50ZWRTZWFyY2gpIHtcbiAgICAgICAgICBzZWFyY2hCeSA9IHVuYWNjZW50KHNlYXJjaEJ5KTtcbiAgICAgICAgICBuaWRkbGUgPSB1bmFjY2VudChuaWRkbGUpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0c1dpdGhNYXRjaCA9IHNlYXJjaEJ5LmluZGV4T2YobmlkZGxlKSA9PSAwO1xuICAgICAgICBleGFjdE1hdGNoID0gc2VhcmNoQnkgPT09IG5pZGRsZTtcbiAgICAgICAgdmFsdWVJc0luV2hpdGVsaXN0ID0gc3RyaW5nSGFzQWxsKHNlYXJjaEJ5LCBuaWRkbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRzV2l0aE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgdmFsdWVJc0luV2hpdGVsaXN0ID0gX3NlYXJjaEtleXMuc29tZShrID0+IHtcbiAgICAgICAgICB2YXIgdiA9ICcnICsgKHdoaXRlbGlzdEl0ZW1ba10gfHwgJycpOyAvLyBpZiBrZXkgZXhpc3RzLCBjYXN0IHRvIHR5cGUgU3RyaW5nXG5cbiAgICAgICAgICBpZiAoX3NkLmFjY2VudGVkU2VhcmNoKSB7XG4gICAgICAgICAgICB2ID0gdW5hY2NlbnQodik7XG4gICAgICAgICAgICBuaWRkbGUgPSB1bmFjY2VudChuaWRkbGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV9zZC5jYXNlU2Vuc2l0aXZlKSB2ID0gdi50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGV4YWN0TWF0Y2ggPSB2ID09PSBuaWRkbGU7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZXhhY3QgPyB2ID09PSBuaWRkbGUgOiB2LmluZGV4T2YobmlkZGxlKSA9PSAwO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlzRHVwbGljYXRlID0gIV9zZC5pbmNsdWRlU2VsZWN0ZWRUYWdzICYmIHRoaXMuaXNUYWdEdXBsaWNhdGUoaXNPYmplY3Qod2hpdGVsaXN0SXRlbSkgPyB3aGl0ZWxpc3RJdGVtLnZhbHVlIDogd2hpdGVsaXN0SXRlbSk7XG5cbiAgICAgIC8vIG1hdGNoIGZvciB0aGUgdmFsdWUgd2l0aGluIGVhY2ggXCJ3aGl0ZWxpc3RcIiBpdGVtXG4gICAgICBpZiAodmFsdWVJc0luV2hpdGVsaXN0ICYmICFpc0R1cGxpY2F0ZSkgaWYgKGV4YWN0TWF0Y2ggJiYgc3RhcnRzV2l0aE1hdGNoKSBleGFjdE1hdGNoZXNMaXN0LnB1c2god2hpdGVsaXN0SXRlbSk7ZWxzZSBpZiAoX3NkLnNvcnRieSA9PSAnc3RhcnRzV2l0aCcgJiYgc3RhcnRzV2l0aE1hdGNoKSBsaXN0LnVuc2hpZnQod2hpdGVsaXN0SXRlbSk7ZWxzZSBsaXN0LnB1c2god2hpdGVsaXN0SXRlbSk7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUuZHJvcGRvd24uc3VnZ2VzdGlvbnMgPSBleGFjdE1hdGNoZXNMaXN0LmNvbmNhdChsaXN0KTtcblxuICAgIC8vIGN1c3RvbSBzb3J0aW5nIGZ1bmN0aW9uXG4gICAgcmV0dXJuIHR5cGVvZiBfc2Quc29ydGJ5ID09ICdmdW5jdGlvbicgPyBfc2Quc29ydGJ5KGV4YWN0TWF0Y2hlc0xpc3QuY29uY2F0KGxpc3QpLCBuaWRkbGUpIDogZXhhY3RNYXRjaGVzTGlzdC5jb25jYXQobGlzdCkuc2xpY2UoMCwgc3VnZ2VzdGlvbnNDb3VudCk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgdGFnIGRhdGEgKG9iamVjdCkgd2l0aCByZWdhcmRzIHRvIHRoZSBcIm1hcFZhbHVlVG9cIiBkcm9wZG93biBzZXR0aW5nXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0RhdGFcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqL1xuICBnZXRNYXBwZWRWYWx1ZSh0YWdEYXRhKSB7XG4gICAgdmFyIG1hcFZhbHVlVG8gPSB0aGlzLnNldHRpbmdzLmRyb3Bkb3duLm1hcFZhbHVlVG8sXG4gICAgICB2YWx1ZSA9IG1hcFZhbHVlVG8gPyB0eXBlb2YgbWFwVmFsdWVUbyA9PSAnZnVuY3Rpb24nID8gbWFwVmFsdWVUbyh0YWdEYXRhKSA6IHRhZ0RhdGFbbWFwVmFsdWVUb10gfHwgdGFnRGF0YS52YWx1ZSA6IHRhZ0RhdGEudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBkcm9wZG93biBpdGVtcycgSFRNTFxyXG4gICAqIEBwYXJhbSAge0FycmF5fSBzdWdlZ3N0aW9uc0xpc3QgIFtBcnJheSBvZiBPYmplY3RzXVxyXG4gICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgKi9cbiAgY3JlYXRlTGlzdEhUTUwoc3VnZWdzdGlvbnNMaXN0KSB7XG4gICAgcmV0dXJuIGV4dGVuZChbXSwgc3VnZWdzdGlvbnNMaXN0KS5tYXAoKHN1Z2dlc3Rpb24sIGlkeCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzdWdnZXN0aW9uID09ICdzdHJpbmcnIHx8IHR5cGVvZiBzdWdnZXN0aW9uID09ICdudW1iZXInKSBzdWdnZXN0aW9uID0ge1xuICAgICAgICB2YWx1ZTogc3VnZ2VzdGlvblxuICAgICAgfTtcbiAgICAgIHZhciBtYXBwZWRWYWx1ZSA9IHRoaXMuZHJvcGRvd24uZ2V0TWFwcGVkVmFsdWUoc3VnZ2VzdGlvbik7XG4gICAgICBtYXBwZWRWYWx1ZSA9IHR5cGVvZiBtYXBwZWRWYWx1ZSA9PSAnc3RyaW5nJyA/IGVzY2FwZUhUTUwobWFwcGVkVmFsdWUpIDogbWFwcGVkVmFsdWU7XG4gICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuZHJvcGRvd25JdGVtLmFwcGx5KHRoaXMsIFtfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgc3VnZ2VzdGlvbiksIHt9LCB7XG4gICAgICAgIG1hcHBlZFZhbHVlXG4gICAgICB9KSwgdGhpc10pO1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH1cbn07XG5cbmNvbnN0IFZFUlNJT04gPSAxOyAvLyBjdXJyZW50IHZlcnNpb24gb2YgcGVyc2lzdGVkIGRhdGEuIGlmIGNvZGUgY2hhbmdlIGJyZWFrcyBwZXJzaXN0ZWQgZGF0YSwgdmVyaXNvbiBudW1iZXIgc2hvdWxkIGJlIGJ1bXBlZC5cbmNvbnN0IFNUT1JFX0tFWSA9ICdAeWFpcmVvL3RhZ2lmeS8nO1xuY29uc3QgZ2V0UGVyc2lzdGVkRGF0YSA9IGlkID0+IGtleSA9PiB7XG4gIC8vIGlmIFwicGVyc2lzdFwiIGlzIFwiZmFsc2VcIiwgZG8gbm90IHNhdmUgdG8gbG9jYWxzdG9yYWdlXG4gIGxldCBjdXN0b21LZXkgPSAnLycgKyBrZXksXG4gICAgcGVyc2lzdGVkRGF0YSxcbiAgICB2ZXJzaW9uTWF0Y2ggPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShTVE9SRV9LRVkgKyBpZCArICcvdicsIFZFUlNJT04pID09IFZFUlNJT047XG4gIGlmICh2ZXJzaW9uTWF0Y2gpIHtcbiAgICB0cnkge1xuICAgICAgcGVyc2lzdGVkRGF0YSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlW1NUT1JFX0tFWSArIGlkICsgY3VzdG9tS2V5XSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICB9XG4gIHJldHVybiBwZXJzaXN0ZWREYXRhO1xufTtcbmNvbnN0IHNldFBlcnNpc3RlZERhdGEgPSBpZCA9PiB7XG4gIGlmICghaWQpIHJldHVybiAoKSA9PiB7fTtcblxuICAvLyBmb3Igc3RvcmFnZSBpbnZhbGlkYXRpb25cbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkVfS0VZICsgaWQgKyAnL3YnLCBWRVJTSU9OKTtcbiAgcmV0dXJuIChkYXRhLCBrZXkpID0+IHtcbiAgICBsZXQgY3VzdG9tS2V5ID0gJy8nICsga2V5LFxuICAgICAgcGVyc2lzdGVkRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIGlmIChkYXRhICYmIGtleSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oU1RPUkVfS0VZICsgaWQgKyBjdXN0b21LZXksIHBlcnNpc3RlZERhdGEpO1xuICAgICAgZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3N0b3JhZ2UnKSk7XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IGNsZWFyUGVyc2lzdGVkRGF0YSA9IGlkID0+IGtleSA9PiB7XG4gIGNvbnN0IGJhc2UgPSBTVE9SRV9LRVkgKyAnLycgKyBpZCArICcvJztcblxuICAvLyBkZWxldGUgc3BlY2lmaWMga2V5IGluIHRoZSBzdG9yYWdlXG4gIGlmIChrZXkpIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGJhc2UgKyBrZXkpO1xuXG4gIC8vIGRlbGV0ZSBhbGwga2V5cyBpbiB0aGUgc3RvcmFnZSB3aXRoIGEgc3BlY2lmaWMgdGFnaWZ5IGlkXG4gIGVsc2Uge1xuICAgIGZvciAobGV0IGsgaW4gbG9jYWxTdG9yYWdlKSBpZiAoay5pbmNsdWRlcyhiYXNlKSkgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oayk7XG4gIH1cbn07XG5cbnZhciBURVhUUyA9IHtcbiAgZW1wdHk6IFwiZW1wdHlcIixcbiAgZXhjZWVkOiBcIm51bWJlciBvZiB0YWdzIGV4Y2VlZGVkXCIsXG4gIHBhdHRlcm46IFwicGF0dGVybiBtaXNtYXRjaFwiLFxuICBkdXBsaWNhdGU6IFwiYWxyZWFkeSBleGlzdHNcIixcbiAgbm90QWxsb3dlZDogXCJub3QgYWxsb3dlZFwiXG59O1xuXG52YXIgdGVtcGxhdGVzID0ge1xuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RE9NIE9iamVjdH0gaW5wdXQgICAgIE9yaWdpbmFsIGlucHV0IERPbSBlbGVtZW50XHJcbiAgICogQHBhcmFtIHtPYmplY3R9ICAgICBzZXR0aW5ncyAgVGFnaWZ5IGluc3RhbmNlIHNldHRpbmdzIE9iamVjdFxyXG4gICAqL1xuICB3cmFwcGVyKGlucHV0LCBfcykge1xuICAgIHJldHVybiBgPHRhZ3MgY2xhc3M9XCIke19zLmNsYXNzTmFtZXMubmFtZXNwYWNlfSAke19zLm1vZGUgPyBgJHtfcy5jbGFzc05hbWVzW19zLm1vZGUgKyBcIk1vZGVcIl19YCA6IFwiXCJ9ICR7aW5wdXQuY2xhc3NOYW1lfVwiXG4gICAgICAgICAgICAgICAgICAgICR7X3MucmVhZG9ubHkgPyAncmVhZG9ubHknIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7X3MuZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7X3MucmVxdWlyZWQgPyAncmVxdWlyZWQnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7X3MubW9kZSA9PT0gJ3NlbGVjdCcgPyBcInNwZWxsY2hlY2s9J2ZhbHNlJ1wiIDogJyd9XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PVwiLTFcIj5cbiAgICAgICAgICAgIDxzcGFuICR7IV9zLnJlYWRvbmx5ICYmIF9zLnVzZXJJbnB1dCA/ICdjb250ZW50ZWRpdGFibGUnIDogJyd9IHRhYkluZGV4PVwiMFwiIGRhdGEtcGxhY2Vob2xkZXI9XCIke19zLnBsYWNlaG9sZGVyIHx8ICcmIzgyMDM7J31cIiBhcmlhLXBsYWNlaG9sZGVyPVwiJHtfcy5wbGFjZWhvbGRlciB8fCAnJ31cIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiJHtfcy5jbGFzc05hbWVzLmlucHV0fVwiXG4gICAgICAgICAgICAgICAgcm9sZT1cInRleHRib3hcIlxuICAgICAgICAgICAgICAgIGFyaWEtYXV0b2NvbXBsZXRlPVwiYm90aFwiXG4gICAgICAgICAgICAgICAgYXJpYS1tdWx0aWxpbmU9XCIke19zLm1vZGUgPT0gJ21peCcgPyB0cnVlIDogZmFsc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICYjODIwMztcbiAgICAgICAgPC90YWdzPmA7XG4gIH0sXG4gIHRhZyh0YWdEYXRhLCBfcmVmKSB7XG4gICAgbGV0IF9zID0gX3JlZi5zZXR0aW5ncztcbiAgICByZXR1cm4gYDx0YWcgdGl0bGU9XCIke3RhZ0RhdGEudGl0bGUgfHwgdGFnRGF0YS52YWx1ZX1cIlxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ZWRpdGFibGU9J2ZhbHNlJ1xuICAgICAgICAgICAgICAgICAgICBzcGVsbGNoZWNrPSdmYWxzZSdcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9XCIke19zLmExMXkuZm9jdXNhYmxlVGFncyA/IDAgOiAtMX1cIlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIiR7X3MuY2xhc3NOYW1lcy50YWd9ICR7dGFnRGF0YS5jbGFzcyB8fCBcIlwifVwiXG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5nZXRBdHRyaWJ1dGVzKHRhZ0RhdGEpfT5cbiAgICAgICAgICAgIDx4IHRpdGxlPScnIGNsYXNzPVwiJHtfcy5jbGFzc05hbWVzLnRhZ1h9XCIgcm9sZT0nYnV0dG9uJyBhcmlhLWxhYmVsPSdyZW1vdmUgdGFnJz48L3g+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiJHtfcy5jbGFzc05hbWVzLnRhZ1RleHR9XCI+JHt0YWdEYXRhW19zLnRhZ1RleHRQcm9wXSB8fCB0YWdEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RhZz5gO1xuICB9LFxuICBkcm9wZG93bihzZXR0aW5ncykge1xuICAgIHZhciBfc2QgPSBzZXR0aW5ncy5kcm9wZG93bixcbiAgICAgIGlzTWFudWFsID0gX3NkLnBvc2l0aW9uID09ICdtYW51YWwnLFxuICAgICAgY2xhc3NOYW1lID0gYCR7c2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bn1gO1xuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIiR7aXNNYW51YWwgPyBcIlwiIDogY2xhc3NOYW1lfSAke19zZC5jbGFzc25hbWV9XCIgcm9sZT1cImxpc3Rib3hcIiBhcmlhLWxhYmVsbGVkYnk9XCJkcm9wZG93blwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhdGEtc2VsZWN0b3I9J3RhZ2lmeS1zdWdnZXN0aW9ucy13cmFwcGVyJyBjbGFzcz1cIiR7c2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bldyYXBwZXJ9XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcbiAgfSxcbiAgZHJvcGRvd25Db250ZW50KEhUTUxDb250ZW50KSB7XG4gICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgIHN1Z2dlc3Rpb25zID0gdGhpcy5zdGF0ZS5kcm9wZG93bi5zdWdnZXN0aW9ucztcbiAgICByZXR1cm4gYFxuICAgICAgICAgICAgJHtfcy50ZW1wbGF0ZXMuZHJvcGRvd25IZWFkZXIuY2FsbCh0aGlzLCBzdWdnZXN0aW9ucyl9XG4gICAgICAgICAgICAke0hUTUxDb250ZW50fVxuICAgICAgICAgICAgJHtfcy50ZW1wbGF0ZXMuZHJvcGRvd25Gb290ZXIuY2FsbCh0aGlzLCBzdWdnZXN0aW9ucyl9XG4gICAgICAgIGA7XG4gIH0sXG4gIGRyb3Bkb3duSXRlbShpdGVtKSB7XG4gICAgcmV0dXJuIGA8ZGl2ICR7dGhpcy5nZXRBdHRyaWJ1dGVzKGl0ZW0pfVxuICAgICAgICAgICAgICAgICAgICBjbGFzcz0nJHt0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMuZHJvcGRvd25JdGVtfSAke2l0ZW0uY2xhc3MgPyBpdGVtLmNsYXNzIDogXCJcIn0nXG4gICAgICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAgICAgICAgIHJvbGU9XCJvcHRpb25cIj4ke2l0ZW0ubWFwcGVkVmFsdWUgfHwgaXRlbS52YWx1ZX08L2Rpdj5gO1xuICB9LFxuICAvKipcclxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWdnZXN0aW9ucyBBbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZWQgc3VnZ2VzdGVkIGl0ZW1zLCBpbmNsdWRpbmcgdGhvc2Ugd2hpY2ggd2VyZSBzbGljZWQgYXdheSBkdWUgdG8gdGhlIFwiZHJvcGRvd24ubWF4SXRlbXNcIiBzZXR0aW5nXHJcbiAgICovXG4gIGRyb3Bkb3duSGVhZGVyKHN1Z2dlc3Rpb25zKSB7XG4gICAgcmV0dXJuIGA8aGVhZGVyIGRhdGEtc2VsZWN0b3I9J3RhZ2lmeS1zdWdnZXN0aW9ucy1oZWFkZXInIGNsYXNzPVwiJHt0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMuZHJvcGRvd25IZWFkZXJ9XCI+PC9oZWFkZXI+YDtcbiAgfSxcbiAgZHJvcGRvd25Gb290ZXIoc3VnZ2VzdGlvbnMpIHtcbiAgICB2YXIgaGFzTW9yZSA9IHN1Z2dlc3Rpb25zLmxlbmd0aCAtIHRoaXMuc2V0dGluZ3MuZHJvcGRvd24ubWF4SXRlbXM7XG4gICAgcmV0dXJuIGhhc01vcmUgPiAwID8gYDxmb290ZXIgZGF0YS1zZWxlY3Rvcj0ndGFnaWZ5LXN1Z2dlc3Rpb25zLWZvb3RlcicgY2xhc3M9XCIke3RoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5kcm9wZG93bkZvb3Rlcn1cIj5cbiAgICAgICAgICAgICAgICAke2hhc01vcmV9IG1vcmUgaXRlbXMuIFJlZmluZSB5b3VyIHNlYXJjaC5cbiAgICAgICAgICAgIDwvZm9vdGVyPmAgOiAnJztcbiAgfSxcbiAgZHJvcGRvd25JdGVtTm9NYXRjaDogbnVsbFxufTtcblxuZnVuY3Rpb24gRXZlbnREaXNwYXRjaGVyKGluc3RhbmNlKSB7XG4gIC8vIENyZWF0ZSBhIERPTSBFdmVudFRhcmdldCBvYmplY3RcbiAgdmFyIHRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgZnVuY3Rpb24gYWRkUmVtb3ZlKG9wLCBldmVudHMsIGNiKSB7XG4gICAgaWYgKGNiKSBldmVudHMuc3BsaXQoL1xccysvZykuZm9yRWFjaChuYW1lID0+IHRhcmdldFtvcCArICdFdmVudExpc3RlbmVyJ10uY2FsbCh0YXJnZXQsIG5hbWUsIGNiKSk7XG4gIH1cblxuICAvLyBQYXNzIEV2ZW50VGFyZ2V0IGludGVyZmFjZSBjYWxscyB0byBET00gRXZlbnRUYXJnZXQgb2JqZWN0XG4gIHJldHVybiB7XG4gICAgb2ZmKGV2ZW50cywgY2IpIHtcbiAgICAgIGFkZFJlbW92ZSgncmVtb3ZlJywgZXZlbnRzLCBjYik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIG9uKGV2ZW50cywgY2IpIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT0gJ2Z1bmN0aW9uJykgYWRkUmVtb3ZlKCdhZGQnLCBldmVudHMsIGNiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdHJpZ2dlcihldmVudE5hbWUsIGRhdGEsIG9wdHMpIHtcbiAgICAgIHZhciBlO1xuICAgICAgb3B0cyA9IG9wdHMgfHwge1xuICAgICAgICBjbG9uZURhdGE6IHRydWVcbiAgICAgIH07XG4gICAgICBpZiAoIWV2ZW50TmFtZSkgcmV0dXJuO1xuICAgICAgaWYgKGluc3RhbmNlLnNldHRpbmdzLmlzSlF1ZXJ5UGx1Z2luKSB7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT0gJ3JlbW92ZScpIGV2ZW50TmFtZSA9ICdyZW1vdmVUYWcnOyAvLyBpc3N1ZSAjMjIyXG4gICAgICAgIGpRdWVyeShpbnN0YW5jZS5ET00ub3JpZ2luYWxJbnB1dCkudHJpZ2dlckhhbmRsZXIoZXZlbnROYW1lLCBbZGF0YV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgZXZlbnREYXRhID0gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnID8gZGF0YSA6IHtcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhXG4gICAgICAgICAgfTtcbiAgICAgICAgICBldmVudERhdGEgPSBvcHRzLmNsb25lRGF0YSA/IGV4dGVuZCh7fSwgZXZlbnREYXRhKSA6IGV2ZW50RGF0YTtcbiAgICAgICAgICBldmVudERhdGEudGFnaWZ5ID0gdGhpcztcbiAgICAgICAgICBpZiAoZGF0YS5ldmVudCkgZXZlbnREYXRhLmV2ZW50ID0gdGhpcy5jbG9uZUV2ZW50KGRhdGEuZXZlbnQpO1xuXG4gICAgICAgICAgLy8gVE9ETzogbW92ZSB0aGUgYmVsb3cgdG8gdGhlIFwiZXh0ZW5kXCIgZnVuY3Rpb25cbiAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIE9iamVjdCkgZm9yICh2YXIgcHJvcCBpbiBkYXRhKSBpZiAoZGF0YVtwcm9wXSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSBldmVudERhdGFbcHJvcF0gPSBkYXRhW3Byb3BdO1xuICAgICAgICAgIGUgPSBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgICAgICBcImRldGFpbFwiOiBldmVudERhdGFcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgZGVsZXRlQmFja3NwYWNlVGltZW91dDtcbmZ1bmN0aW9uIHRyaWdnZXJDaGFuZ2VFdmVudCgpIHtcbiAgaWYgKHRoaXMuc2V0dGluZ3MubWl4TW9kZS5pbnRlZ3JhdGVkKSByZXR1cm47XG4gIHZhciBpbnB1dEVsbSA9IHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQsXG4gICAgY2hhbmdlZCA9IHRoaXMuc3RhdGUubGFzdE9yaWdpbmFsVmFsdWVSZXBvcnRlZCAhPT0gaW5wdXRFbG0udmFsdWUsXG4gICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJjaGFuZ2VcIiwge1xuICAgICAgYnViYmxlczogdHJ1ZVxuICAgIH0pOyAvLyBtdXN0IHVzZSBcIkN1c3RvbUV2ZW50XCIgYW5kIG5vdCBcIkV2ZW50XCIgdG8gc3VwcG9ydCBJRVxuXG4gIGlmICghY2hhbmdlZCkgcmV0dXJuO1xuXG4gIC8vIG11c3QgYXBwbHkgdGhpcyBCRUZPUkUgdHJpZ2dlcmluZyB0aGUgc2ltdWxhdGVkIGV2ZW50XG4gIHRoaXMuc3RhdGUubGFzdE9yaWdpbmFsVmFsdWVSZXBvcnRlZCA9IGlucHV0RWxtLnZhbHVlO1xuXG4gIC8vIFJlYWN0IGhhY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE0ODhcbiAgZXZlbnQuc2ltdWxhdGVkID0gdHJ1ZTtcbiAgaWYgKGlucHV0RWxtLl92YWx1ZVRyYWNrZXIpIGlucHV0RWxtLl92YWx1ZVRyYWNrZXIuc2V0VmFsdWUoTWF0aC5yYW5kb20oKSk7XG4gIGlucHV0RWxtLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXG4gIC8vIGFsc28gdHJpZ2dlciBhIFRhZ2lmeSBldmVudFxuICB0aGlzLnRyaWdnZXIoXCJjaGFuZ2VcIiwgdGhpcy5zdGF0ZS5sYXN0T3JpZ2luYWxWYWx1ZVJlcG9ydGVkKTtcblxuICAvLyBSZWFjdCwgZm9yIHNvbWUgcmVhc29uLCBjbGVhcnMgdGhlIGlucHV0J3MgdmFsdWUgYWZ0ZXIgXCJkaXNwYXRjaEV2ZW50XCIgaXMgZmlyZWRcbiAgaW5wdXRFbG0udmFsdWUgPSB0aGlzLnN0YXRlLmxhc3RPcmlnaW5hbFZhbHVlUmVwb3J0ZWQ7XG59XG52YXIgZXZlbnRzID0ge1xuICAvLyBiaW5kIGN1c3RvbSBldmVudHMgd2hpY2ggd2VyZSBwYXNzZWQgaW4gdGhlIHNldHRpbmdzXG4gIGN1c3RvbUJpbmRpbmcoKSB7XG4gICAgdGhpcy5jdXN0b21FdmVudHNMaXN0LmZvckVhY2gobmFtZSA9PiB7XG4gICAgICB0aGlzLm9uKG5hbWUsIHRoaXMuc2V0dGluZ3MuY2FsbGJhY2tzW25hbWVdKTtcbiAgICB9KTtcbiAgfSxcbiAgYmluZGluZygpIHtcbiAgICBsZXQgYmluZFVuYmluZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgICB2YXIgX0NCID0gdGhpcy5ldmVudHMuY2FsbGJhY2tzLFxuICAgICAgX0NCUixcbiAgICAgIGFjdGlvbiA9IGJpbmRVbmJpbmQgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG5cbiAgICAvLyBkbyBub3QgYWxsb3cgdGhlIG1haW4gZXZlbnRzIHRvIGJlIGJvdW5kIG1vcmUgdGhhbiBvbmNlXG4gICAgaWYgKHRoaXMuc3RhdGUubWFpbkV2ZW50cyAmJiBiaW5kVW5iaW5kKSByZXR1cm47XG5cbiAgICAvLyBzZXQgdGhlIGJpbmRpbmcgc3RhdGUgb2YgdGhlIG1haW4gZXZlbnRzLCBzbyB0aGV5IHdpbGwgbm90IGJlIGJvdW5kIG1vcmUgdGhhbiBvbmNlXG4gICAgdGhpcy5zdGF0ZS5tYWluRXZlbnRzID0gYmluZFVuYmluZDtcblxuICAgIC8vIGV2ZXJ5dGhpbmcgaW5zaWRlIGdldHMgZXhlY3V0ZWQgb25seSBvbmNlLXBlciBpbnN0YW5jZVxuICAgIGlmIChiaW5kVW5iaW5kICYmICF0aGlzLmxpc3RlbmVycy5tYWluKSB7XG4gICAgICB0aGlzLmV2ZW50cy5iaW5kR2xvYmFsLmNhbGwodGhpcyk7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5pc0pRdWVyeVBsdWdpbikgalF1ZXJ5KHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQpLm9uKCd0YWdpZnkucmVtb3ZlQWxsVGFncycsIHRoaXMucmVtb3ZlQWxsVGFncy5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvLyBzZXR1cCBjYWxsYmFjayByZWZlcmVuY2VzIHNvIGV2ZW50cyBjb3VsZCBiZSByZW1vdmVkIGxhdGVyXG4gICAgX0NCUiA9IHRoaXMubGlzdGVuZXJzLm1haW4gPSB0aGlzLmxpc3RlbmVycy5tYWluIHx8IHtcbiAgICAgIGZvY3VzOiBbJ2lucHV0JywgX0NCLm9uRm9jdXNCbHVyLmJpbmQodGhpcyldLFxuICAgICAga2V5ZG93bjogWydpbnB1dCcsIF9DQi5vbktleWRvd24uYmluZCh0aGlzKV0sXG4gICAgICBjbGljazogWydzY29wZScsIF9DQi5vbkNsaWNrU2NvcGUuYmluZCh0aGlzKV0sXG4gICAgICBkYmxjbGljazogWydzY29wZScsIF9DQi5vbkRvdWJsZUNsaWNrU2NvcGUuYmluZCh0aGlzKV0sXG4gICAgICBwYXN0ZTogWydpbnB1dCcsIF9DQi5vblBhc3RlLmJpbmQodGhpcyldLFxuICAgICAgZHJvcDogWydpbnB1dCcsIF9DQi5vbkRyb3AuYmluZCh0aGlzKV0sXG4gICAgICBjb21wb3NpdGlvbnN0YXJ0OiBbJ2lucHV0JywgX0NCLm9uQ29tcG9zaXRpb25TdGFydC5iaW5kKHRoaXMpXSxcbiAgICAgIGNvbXBvc2l0aW9uZW5kOiBbJ2lucHV0JywgX0NCLm9uQ29tcG9zaXRpb25FbmQuYmluZCh0aGlzKV1cbiAgICB9O1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBfQ0JSKSB7XG4gICAgICB0aGlzLkRPTVtfQ0JSW2V2ZW50TmFtZV1bMF1dW2FjdGlvbl0oZXZlbnROYW1lLCBfQ0JSW2V2ZW50TmFtZV1bMV0pO1xuICAgIH1cblxuICAgIC8vIGxpc3RlbiB0byBvcmlnaW5hbCBpbnB1dCBjaGFuZ2VzICh1bmZvcnR1bmV0bHkgdGhpcyBpcyB0aGUgYmVzdCB3YXkuLi4pXG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE5NDk0MTYvMTA0MzgwXG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmxpc3RlbmVycy5tYWluLm9yaWdpbmFsSW5wdXRWYWx1ZU9ic2VydmVySW50ZXJ2YWwpO1xuICAgIHRoaXMubGlzdGVuZXJzLm1haW4ub3JpZ2luYWxJbnB1dFZhbHVlT2JzZXJ2ZXJJbnRlcnZhbCA9IHNldEludGVydmFsKF9DQi5vYnNlcnZlT3JpZ2luYWxJbnB1dFZhbHVlLmJpbmQodGhpcyksIDUwMCk7XG5cbiAgICAvLyBvYnNlcnZlcnNcbiAgICB2YXIgaW5wdXRNdXRhdGlvbk9ic2VydmVyID0gdGhpcy5saXN0ZW5lcnMubWFpbi5pbnB1dE11dGF0aW9uT2JzZXJ2ZXIgfHwgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoX0NCLm9uSW5wdXRET01DaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAvLyBjbGVhdXAganVzdC1pbi1jYXNlXG4gICAgaW5wdXRNdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcblxuICAgIC8vIG9ic2VydmUgc3R1ZmZcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlID09ICdtaXgnKSBpbnB1dE11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLkRPTS5pbnB1dCwge1xuICAgICAgY2hpbGRMaXN0OiB0cnVlXG4gICAgfSk7XG4gIH0sXG4gIGJpbmRHbG9iYWwodW5iaW5kKSB7XG4gICAgdmFyIF9DQiA9IHRoaXMuZXZlbnRzLmNhbGxiYWNrcyxcbiAgICAgIGFjdGlvbiA9IHVuYmluZCA/ICdyZW1vdmVFdmVudExpc3RlbmVyJyA6ICdhZGRFdmVudExpc3RlbmVyJyxcbiAgICAgIGU7XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycyB8fCAhdW5iaW5kICYmIHRoaXMubGlzdGVuZXJzLmdsb2JhbCkgcmV0dXJuOyAvLyBkbyBub3QgcmUtYmluZFxuXG4gICAgLy8gdGhlc2UgZXZlbnRzIGFyZSBnbG9iYWwgZXZlbnQgc2hvdWxkIG5ldmVyIGJlIHVuYmluZGVkLCB1bmxlc3MgdGhlIGluc3RhbmNlIGlzIGRlc3Ryb3llZDpcbiAgICB0aGlzLmxpc3RlbmVycy5nbG9iYWwgPSB0aGlzLmxpc3RlbmVycy5nbG9iYWwgfHwgW3tcbiAgICAgIHR5cGU6IHRoaXMuaXNJRSA/ICdrZXlkb3duJyA6ICdpbnB1dCcsXG4gICAgICAvLyBJRSBjYW5ub3QgcmVnaXN0ZXIgXCJpbnB1dFwiIGV2ZW50cyBvbiBjb250ZW50ZWRpdGFibGUgZWxlbWVudHMsIHNvIHRoZSBcImtleWRvd25cIiBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLi5cbiAgICAgIHRhcmdldDogdGhpcy5ET00uaW5wdXQsXG4gICAgICBjYjogX0NCW3RoaXMuaXNJRSA/ICdvbklucHV0SUUnIDogJ29uSW5wdXQnXS5iaW5kKHRoaXMpXG4gICAgfSwge1xuICAgICAgdHlwZTogJ2tleWRvd24nLFxuICAgICAgdGFyZ2V0OiB3aW5kb3csXG4gICAgICBjYjogX0NCLm9uV2luZG93S2V5RG93bi5iaW5kKHRoaXMpXG4gICAgfSwge1xuICAgICAgdHlwZTogJ2JsdXInLFxuICAgICAgdGFyZ2V0OiB0aGlzLkRPTS5pbnB1dCxcbiAgICAgIGNiOiBfQ0Iub25Gb2N1c0JsdXIuYmluZCh0aGlzKVxuICAgIH0sIHtcbiAgICAgIHR5cGU6ICdjbGljaycsXG4gICAgICB0YXJnZXQ6IGRvY3VtZW50LFxuICAgICAgY2I6IF9DQi5vbkNsaWNrQW55d2hlcmUuYmluZCh0aGlzKVxuICAgIH1dO1xuICAgIGZvciAoZSBvZiB0aGlzLmxpc3RlbmVycy5nbG9iYWwpIGUudGFyZ2V0W2FjdGlvbl0oZS50eXBlLCBlLmNiKTtcbiAgfSxcbiAgdW5iaW5kR2xvYmFsKCkge1xuICAgIHRoaXMuZXZlbnRzLmJpbmRHbG9iYWwuY2FsbCh0aGlzLCB0cnVlKTtcbiAgfSxcbiAgLyoqXHJcbiAgICogRE9NIGV2ZW50cyBjYWxsYmFja3NcclxuICAgKi9cbiAgY2FsbGJhY2tzOiB7XG4gICAgb25Gb2N1c0JsdXIoZSkge1xuICAgICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgICAgdGV4dCA9IGUudGFyZ2V0ID8gdGhpcy50cmltKGUudGFyZ2V0LnRleHRDb250ZW50KSA6ICcnLFxuICAgICAgICAvLyBhIHN0cmluZ1xuICAgICAgICBjdXJyZW50RGlzcGxheVZhbHVlID0gdGhpcy52YWx1ZT8uWzBdPy5bX3MudGFnVGV4dFByb3BdLFxuICAgICAgICB0eXBlID0gZS50eXBlLFxuICAgICAgICBkZEVuYWJsZWQgPSBfcy5kcm9wZG93bi5lbmFibGVkID49IDAsXG4gICAgICAgIGV2ZW50RGF0YSA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBlLnJlbGF0ZWRUYXJnZXRcbiAgICAgICAgfSxcbiAgICAgICAgaXNUYXJnZXRTZWxlY3RPcHRpb24gPSB0aGlzLnN0YXRlLmFjdGlvbnMuc2VsZWN0T3B0aW9uICYmIChkZEVuYWJsZWQgfHwgIV9zLmRyb3Bkb3duLmNsb3NlT25TZWxlY3QpLFxuICAgICAgICBpc1RhcmdldEFkZE5ld0J0biA9IHRoaXMuc3RhdGUuYWN0aW9ucy5hZGROZXcgJiYgZGRFbmFibGVkLFxuICAgICAgICBpc1JlbGF0ZWRUYXJnZXRYID0gZS5yZWxhdGVkVGFyZ2V0ICYmIGlzTm9kZVRhZy5jYWxsKHRoaXMsIGUucmVsYXRlZFRhcmdldCkgJiYgdGhpcy5ET00uc2NvcGUuY29udGFpbnMoZS5yZWxhdGVkVGFyZ2V0KSxcbiAgICAgICAgc2hvdWxkQWRkVGFncztcbiAgICAgIGlmICh0eXBlID09ICdibHVyJykge1xuICAgICAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ID09PSB0aGlzLkRPTS5zY29wZSkge1xuICAgICAgICAgIHRoaXMuZHJvcGRvd24uaGlkZSgpO1xuICAgICAgICAgIHRoaXMuRE9NLmlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9zdFVwZGF0ZSgpO1xuICAgICAgICBfcy5vbkNoYW5nZUFmdGVyQmx1ciAmJiB0aGlzLnRyaWdnZXJDaGFuZ2VFdmVudCgpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGFyZ2V0U2VsZWN0T3B0aW9uIHx8IGlzVGFyZ2V0QWRkTmV3QnRuKSByZXR1cm47XG4gICAgICB0aGlzLnN0YXRlLmhhc0ZvY3VzID0gdHlwZSA9PSBcImZvY3VzXCIgPyArbmV3IERhdGUoKSA6IGZhbHNlO1xuICAgICAgdGhpcy50b2dnbGVGb2N1c0NsYXNzKHRoaXMuc3RhdGUuaGFzRm9jdXMpO1xuICAgICAgaWYgKF9zLm1vZGUgPT0gJ21peCcpIHtcbiAgICAgICAgaWYgKHR5cGUgPT0gXCJmb2N1c1wiKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKFwiZm9jdXNcIiwgZXZlbnREYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJibHVyXCIpIHtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoXCJibHVyXCIsIGV2ZW50RGF0YSk7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgICAvLyByZXNldCBzdGF0ZSB3aGljaCBuZWVkcyByZXNldGluZ1xuICAgICAgICAgIHRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlU2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT0gXCJmb2N1c1wiKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcImZvY3VzXCIsIGV2ZW50RGF0YSk7XG4gICAgICAgIC8vICBlLnRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdwbGFjZWhvbGRlcicpO1xuICAgICAgICBpZiAoX3MuZHJvcGRvd24uZW5hYmxlZCA9PT0gMCB8fCAhX3MudXNlcklucHV0KSB7XG4gICAgICAgICAgLy8gJiYgX3MubW9kZSAhPSBcInNlbGVjdFwiXG4gICAgICAgICAgdGhpcy5kcm9wZG93bi5zaG93KHRoaXMudmFsdWUubGVuZ3RoID8gJycgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImJsdXJcIikge1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJibHVyXCIsIGV2ZW50RGF0YSk7XG4gICAgICAgIHRoaXMubG9hZGluZyhmYWxzZSk7XG5cbiAgICAgICAgLy8gd2hlbiBjbGlja2luZyB0aGUgWCBidXR0b24gb2YgYSBzZWxlY3RlZCB0YWcsIGl0IGlzIHVud2FudGVkIGZvciBpdCB0byBiZSBhZGRlZCBiYWNrXG4gICAgICAgIC8vIGFnYWluIGluIGEgZmV3IG1vcmUgbGluZXMgb2YgY29kZSAoc2hvdWxkQWRkVGFncyAmJiBhZGRUYWdzKVxuICAgICAgICBpZiAoX3MubW9kZSA9PSAnc2VsZWN0Jykge1xuICAgICAgICAgIGlmIChpc1JlbGF0ZWRUYXJnZXRYKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRhZ3MoKTtcbiAgICAgICAgICAgIHRleHQgPSAnJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiBub3RoaW5nIGhhcyBjaGFuZ2VkIChzYW1lIGRpc3BsYXkgdmFsdWUpLCBkbyBub3QgYWRkIGEgdGFnXG4gICAgICAgICAgaWYgKGN1cnJlbnREaXNwbGF5VmFsdWUgPT09IHRleHQpIHRleHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBzaG91bGRBZGRUYWdzID0gdGV4dCAmJiAhdGhpcy5zdGF0ZS5hY3Rpb25zLnNlbGVjdE9wdGlvbiAmJiBfcy5hZGRUYWdPbkJsdXI7XG5cbiAgICAgICAgLy8gZG8gbm90IGFkZCBhIHRhZyBpZiBcInNlbGVjdE9wdGlvblwiIGFjdGlvbiB3YXMganVzdCBmaXJlZCAodGhpcyBtZWFucyBhIHRhZyB3YXMganVzdCBhZGRlZCBmcm9tIHRoZSBkcm9wZG93bilcbiAgICAgICAgc2hvdWxkQWRkVGFncyAmJiB0aGlzLmFkZFRhZ3ModGV4dCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLkRPTS5pbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICB9LFxuICAgIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXBvc2luZyA9IHRydWU7XG4gICAgfSxcbiAgICBvbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgICAgIHRoaXMuc3RhdGUuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgfSxcbiAgICBvbldpbmRvd0tleURvd24oZSkge1xuICAgICAgdmFyIGZvY3VzZWRFbG0gPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LFxuICAgICAgICBpc1RhZyA9IGlzTm9kZVRhZy5jYWxsKHRoaXMsIGZvY3VzZWRFbG0pLFxuICAgICAgICBpc0JlbG9uZyA9IGlzVGFnICYmIHRoaXMuRE9NLnNjb3BlLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLFxuICAgICAgICBpc1JlYWR5T25seVRhZyA9IGlzQmVsb25nICYmIGZvY3VzZWRFbG0uaGFzQXR0cmlidXRlKCdyZWFkb25seScpLFxuICAgICAgICBuZXh0VGFnO1xuICAgICAgaWYgKCFpc0JlbG9uZyB8fCBpc1JlYWR5T25seVRhZykgcmV0dXJuO1xuICAgICAgbmV4dFRhZyA9IGZvY3VzZWRFbG0ubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgICAvLyByZW1vdmUgdGFnIGlmIGhhcyBmb2N1c1xuICAgICAgICBjYXNlICdCYWNrc3BhY2UnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5yZWFkb25seSkge1xuICAgICAgICAgICAgICB0aGlzLnJlbW92ZVRhZ3MoZm9jdXNlZEVsbSk7XG4gICAgICAgICAgICAgIChuZXh0VGFnID8gbmV4dFRhZyA6IHRoaXMuRE9NLmlucHV0KS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIC8vIGVkaXQgdGFnIGlmIGhhcyBmb2N1c1xuICAgICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLmVkaXRUYWcuYmluZCh0aGlzKSwgMCwgZm9jdXNlZEVsbSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvbktleWRvd24oZSkge1xuICAgICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncztcblxuICAgICAgLy8gaWdub3JlIGtleXMgZHVyaW5nIElNRSBjb21wb3NpdGlvbiBvciB3aGVuIHVzZXIgaW5wdXQgaXMgbm90IGFsbG93ZWRcbiAgICAgIGlmICh0aGlzLnN0YXRlLmNvbXBvc2luZyB8fCAhX3MudXNlcklucHV0KSByZXR1cm47XG4gICAgICBpZiAoX3MubW9kZSA9PSAnc2VsZWN0JyAmJiBfcy5lbmZvcmNlV2hpdGVsaXN0ICYmIHRoaXMudmFsdWUubGVuZ3RoICYmIGUua2V5ICE9ICdUYWInKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHZhciBzID0gdGhpcy50cmltKGUudGFyZ2V0LnRleHRDb250ZW50KTtcbiAgICAgIHRoaXMudHJpZ2dlcihcImtleWRvd25cIiwge1xuICAgICAgICBldmVudDogZVxuICAgICAgfSk7XG5cbiAgICAgIC8qKlxyXG4gICAgICAgKiBPTkxZIEZPUiBNSVgtTU9ERTpcclxuICAgICAgICovXG4gICAgICBpZiAoX3MubW9kZSA9PSAnbWl4Jykge1xuICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgICAgY2FzZSAnTGVmdCc6XG4gICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gd2hlbiBsZWZ0IGFycm93IHdhcyBwcmVzc2VkLCBzZXQgYSBmbGFnIHNvIHdoZW4gdGhlIGRyb3Bkb3duIGlzIHNob3duLCByaWdodC1hcnJvdyB3aWxsIGJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCBzZWVtcyBsaWtlbHkgdGhlIHVzZXIgd2lzaGVzIHRvIHVzZSB0aGUgYXJyb3dzIHRvIG1vdmUgdGhlIGNhcmV0XG4gICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aW9ucy5BcnJvd0xlZnQgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdEZWxldGUnOlxuICAgICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcpIHJldHVybjtcbiAgICAgICAgICAgICAgdmFyIHNlbCA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpLFxuICAgICAgICAgICAgICAgIGRlbGV0ZUtleVRhZ0RldGVjdGVkID0gZS5rZXkgPT0gJ0RlbGV0ZScgJiYgc2VsLmFuY2hvck9mZnNldCA9PSAoc2VsLmFuY2hvck5vZGUubGVuZ3RoIHx8IDApLFxuICAgICAgICAgICAgICAgIHByZXZBbmNob3JTaWJsaW5nID0gc2VsLmFuY2hvck5vZGUucHJldmlvdXNTaWJsaW5nLFxuICAgICAgICAgICAgICAgIGlzQ2FyZXRBZnRlclRhZyA9IHNlbC5hbmNob3JOb2RlLm5vZGVUeXBlID09IDEgfHwgIXNlbC5hbmNob3JPZmZzZXQgJiYgcHJldkFuY2hvclNpYmxpbmcgJiYgcHJldkFuY2hvclNpYmxpbmcubm9kZVR5cGUgPT0gMSAmJiBzZWwuYW5jaG9yTm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgZGVjb2RlKHRoaXMuRE9NLmlucHV0LmlubmVySFRNTCk7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RUYWdFbGVtcyA9IHRoaXMuZ2V0VGFnRWxtcygpLFxuICAgICAgICAgICAgICAgIC8vICBpc0NhcmV0SW5zaWRlVGFnID0gc2VsLmFuY2hvck5vZGUucGFyZW50Tm9kZSgnLicgKyBfcy5jbGFzc05hbWVzLnRhZyksXG4gICAgICAgICAgICAgICAgdGFnQmVmb3JlQ2FyZXQsXG4gICAgICAgICAgICAgICAgdGFnRWxtVG9CZURlbGV0ZWQsXG4gICAgICAgICAgICAgICAgZmlyc3RUZXh0Tm9kZUJlZm9yZVRhZztcbiAgICAgICAgICAgICAgaWYgKF9zLmJhY2tzcGFjZSA9PSAnZWRpdCcgJiYgaXNDYXJldEFmdGVyVGFnKSB7XG4gICAgICAgICAgICAgICAgdGFnQmVmb3JlQ2FyZXQgPSBzZWwuYW5jaG9yTm9kZS5ub2RlVHlwZSA9PSAxID8gbnVsbCA6IHNlbC5hbmNob3JOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLmVkaXRUYWcuYmluZCh0aGlzKSwgMCwgdGFnQmVmb3JlQ2FyZXQpOyAvLyB0aW1lb3V0IGlzIG5lZWRlZCB0byB0aGUgbGFzdCBjYWhhY3J0ZXIgaW4gdGhlIGVkaXRlZCB0YWcgd29uJ3QgZ2V0IGRlbGV0ZWRcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIG5lZWRlZCBzbyB0aGUgdGFnIGVsbSB3b24ndCBnZXQgZGVsZXRlZFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaXNDaHJvbWVBbmRyb2lkQnJvd3NlcigpICYmIGlzQ2FyZXRBZnRlclRhZyBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBmaXJzdFRleHROb2RlQmVmb3JlVGFnID0gZ2V0Zmlyc3RUZXh0Tm9kZShpc0NhcmV0QWZ0ZXJUYWcpO1xuICAgICAgICAgICAgICAgIGlmICghaXNDYXJldEFmdGVyVGFnLmhhc0F0dHJpYnV0ZSgncmVhZG9ubHknKSkgaXNDYXJldEFmdGVyVGFnLnJlbW92ZSgpOyAvLyBzaW5jZSB0aGlzIGlzIENocm9tZSwgY2FuIHNhZmV0bHkgdXNlIHRoaXMgXCJuZXdcIiBET00gQVBJXG5cbiAgICAgICAgICAgICAgICAvLyBBbmRyb2lkLUNocm9tZSB3cm9uZ2x5IGhpZGVzIHRoZSBrZXlib2FyZCwgYW5kIGxvc2VzIGZvY3VzLFxuICAgICAgICAgICAgICAgIC8vIHNvIHRoaXMgaGFjayBiZWxvdyBpcyBuZWVkZWQgdG8gcmVnYWluIGZvY3VzIGF0IHRoZSBjb3JyZWN0IHBsYWNlOlxuICAgICAgICAgICAgICAgIHRoaXMuRE9NLmlucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlQ2FyZXRBZnRlck5vZGUoZmlyc3RUZXh0Tm9kZUJlZm9yZVRhZyk7XG4gICAgICAgICAgICAgICAgICB0aGlzLkRPTS5pbnB1dC5jbGljaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2VsLmFuY2hvck5vZGUubm9kZU5hbWUgPT0gJ0JSJykgcmV0dXJuO1xuICAgICAgICAgICAgICBpZiAoKGRlbGV0ZUtleVRhZ0RldGVjdGVkIHx8IGlzQ2FyZXRBZnRlclRhZykgJiYgc2VsLmFuY2hvck5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWwuYW5jaG9yT2Zmc2V0ID09IDApXG4gICAgICAgICAgICAgICAgICAvLyBjYXJldCBpcyBhdCB0aGUgdmVyeSBiZWdpbmluZywgYmVmb3JlIGEgdGFnXG4gICAgICAgICAgICAgICAgICB0YWdFbG1Ub0JlRGVsZXRlZCA9IGRlbGV0ZUtleVRhZ0RldGVjdGVkIC8vIGRlbGV0ZSBrZXkgcHJlc3NlZFxuICAgICAgICAgICAgICAgICAgPyBsYXN0VGFnRWxlbXNbMF0gOiBudWxsO2Vsc2UgdGFnRWxtVG9CZURlbGV0ZWQgPSBsYXN0VGFnRWxlbXNbTWF0aC5taW4obGFzdFRhZ0VsZW1zLmxlbmd0aCwgc2VsLmFuY2hvck9mZnNldCkgLSAxXTtcblxuICAgICAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIGEgdGFnICptaWdodCogYmUgYSBjYW5kaWRhdGUgZm9yIGRlbGV0aW9uLCBhbmQgaWYgc28sIHdoaWNoXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVsZXRlS2V5VGFnRGV0ZWN0ZWQpIHRhZ0VsbVRvQmVEZWxldGVkID0gc2VsLmFuY2hvck5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO2Vsc2UgaWYgKGlzQ2FyZXRBZnRlclRhZyBpbnN0YW5jZW9mIEVsZW1lbnQpIHRhZ0VsbVRvQmVEZWxldGVkID0gaXNDYXJldEFmdGVyVGFnO1xuXG4gICAgICAgICAgICAgIC8vIHRhZ0VsbS5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JylcbiAgICAgICAgICAgICAgaWYgKHNlbC5hbmNob3JOb2RlLm5vZGVUeXBlID09IDMgJiZcbiAgICAgICAgICAgICAgLy8gbm9kZSBhdCBjYXJldCBsb2NhdGlvbiBpcyBhIFRleHQgbm9kZVxuICAgICAgICAgICAgICAhc2VsLmFuY2hvck5vZGUubm9kZVZhbHVlICYmXG4gICAgICAgICAgICAgIC8vIGhhcyBzb21lIHRleHRcbiAgICAgICAgICAgICAgc2VsLmFuY2hvck5vZGUucHJldmlvdXNFbGVtZW50U2libGluZylcbiAgICAgICAgICAgICAgICAvLyB0ZXh0IG5vZGUgaGFzIGEgVGFnIG5vZGUgYmVmb3JlIGl0XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgIC8vIGlmIGJhY2tzcGFjZSBub3QgYWxsb3dlZCwgZG8gbm90aGluZ1xuICAgICAgICAgICAgICAvLyBUT0RPOiBhIGJldHRlciB3YXkgdG8gZGV0ZWN0IGlmIG5vZGVzIHdlcmUgZGVsZXRlZCBpcyB0byBzaW1wbHkgY2hlY2sgdGhlIFwidGhpcy52YWx1ZVwiIGJlZm9yZSAmIGFmdGVyXG4gICAgICAgICAgICAgIGlmICgoaXNDYXJldEFmdGVyVGFnIHx8IGRlbGV0ZUtleVRhZ0RldGVjdGVkKSAmJiAhX3MuYmFja3NwYWNlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2VsLnR5cGUgIT0gJ1JhbmdlJyAmJiAhc2VsLmFuY2hvck9mZnNldCAmJiBzZWwuYW5jaG9yTm9kZSA9PSB0aGlzLkRPTS5pbnB1dCAmJiBlLmtleSAhPSAnRGVsZXRlJykge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHNlbC50eXBlICE9ICdSYW5nZScgJiYgdGFnRWxtVG9CZURlbGV0ZWQgJiYgdGFnRWxtVG9CZURlbGV0ZWQuaGFzQXR0cmlidXRlKCdyZWFkb25seScpKSB7XG4gICAgICAgICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb250aW51YXRpb24gb2YgZGVsZXRpb24gYnkgcGxhY2luZyB0aGUgY2FyZXQgb24gdGhlIGZpcnN0IHByZXZpb3VzIHRleHROb2RlLlxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGEgZmV3IHJlYWRvbmx5LXRhZ3MgbWlnaHQgYmUgb25lIGFmdGVyIHRoZSBvdGhlciwgaXRlcmF0aW9uIGlzIG5lZWRlZDpcblxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VDYXJldEFmdGVyTm9kZShnZXRmaXJzdFRleHROb2RlKHRhZ0VsbVRvQmVEZWxldGVkKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gdXBkYXRlIHJlZ2FyZGluZyBodHRwczovL2dpdGh1Yi5jb20veWFpckVPL3RhZ2lmeS9pc3N1ZXMvNzYyI2lzc3VlY29tbWVudC03ODY0NjQzMTc6XG4gICAgICAgICAgICAgIC8vIHRoZSBidWcgZGVzY3JpYmVkIGlzIG1vcmUgc2V2ZXJlIHRoYW4gdGhlIGZpeCBiZWxvdywgdGhlcmVmb3JlIEkgZGlzYWJsZSB0aGUgZml4IHVudGlsIGEgc29sdXRpb25cbiAgICAgICAgICAgICAgLy8gaXMgZm91bmQgd2hpY2ggd29yayB3ZWxsIGZvciBib3RoIGNhc2VzLlxuICAgICAgICAgICAgICAvLyAtLS0tLS0tXG4gICAgICAgICAgICAgIC8vIG5vZGVUeXBlIGlzIFwiMVwiIG9ubHkgd2hlbiB0aGUgY2FyZXQgaXMgYXQgdGhlIGVuZCBhZnRlciBsYXN0IHRhZyAobm8gdGV4dCBhZnRlciksIG9yIGJlZm9yZSBmaXJzdCBmaXJzdCAobm8gdGV4dCBiZWZvcmUpXG4gICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgaWYoIHRoaXMuaXNGaXJlZm94ICYmIHNlbC5hbmNob3JOb2RlLm5vZGVUeXBlID09IDEgJiYgc2VsLmFuY2hvck9mZnNldCAhPSAwICl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFncygpIC8vIHJlbW92ZXMgbGFzdCB0YWcgYnkgZGVmYXVsdCBpZiBubyBwYXJhbWV0ZXIgc3VwcGxpZWRcclxuICAgICAgICAgICAgICAgICAgLy8gcGxhY2UgY2FyZXQgaW5zaWRlIGxhc3QgdGV4dE5vZGUsIGlmIGV4aXN0LiBpdCdzIGFuIGFubm95aW5nIGJ1ZyBvbmx5IGluIEZGLFxyXG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGFzdCB0YWcgaXMgcmVtb3ZlZCwgYW5kIHRoZXJlIGlzIGEgdGV4dE5vZGUgYmVmb3JlIGl0LCB0aGUgY2FyZXQgaXMgbm90IHBsYWNlZCBhdCBpdHMgZW5kXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2VDYXJldEFmdGVyTm9kZSggc2V0UmFuZ2VBdFN0YXJ0RW5kKGZhbHNlLCB0aGlzLkRPTS5pbnB1dCkgKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChkZWxldGVCYWNrc3BhY2VUaW1lb3V0KTtcbiAgICAgICAgICAgICAgLy8gYSBtaW5pbXVtIGRlbGF5IGlzIG5lZWRlZCBiZWZvcmUgdGhlIG5vZGUgYWN0dWFsbHkgZ2V0cyBkZXRhY2hlZCBmcm9tIHRoZSBkb2N1bWVudCAoZG9uJ3Qga25vdyB3aHkpLFxuICAgICAgICAgICAgICAvLyB0byBrbm93IGV4YWN0bHkgd2hpY2ggdGFnIHdhcyBkZWxldGVkLiBUaGlzIGlzIHRoZSBlYXNpZXN0IHdheSBvZiBrbm93aW5nIGJlc2lkZXMgdXNpbmcgTXV0YXRpb25PYnNlcnZlclxuICAgICAgICAgICAgICBkZWxldGVCYWNrc3BhY2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgZGVjb2RlKHRoaXMuRE9NLmlucHV0LmlubmVySFRNTCk7XG4gICAgICAgICAgICAgICAgICAhZGVsZXRlS2V5VGFnRGV0ZWN0ZWQgJiYgc2VsLmFuY2hvck5vZGUucHJldmlvdXNTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgLy8gZml4ZXMgIzM4NCwgd2hlcmUgdGhlIGZpcnN0IGFuZCBvbmx5IHRhZyB3aWxsIG5vdCBnZXQgcmVtb3ZlZCB3aXRoIGJhY2tzcGFjZVxuICAgICAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgKiBbVVBEQVRFIERFQyAzLCAyMl0gU0VFTVMgQkVMT0VXIENPREUgSVMgTk9UIE5FRURFRCBBTlkgTU9SRVxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgIGlmKCBjdXJyZW50VmFsdWUubGVuZ3RoID4gbGFzdElucHV0VmFsdWUubGVuZ3RoICYmIHByZXZFbG0gKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiggaXNOb2RlVGFnLmNhbGwodGhpcywgcHJldkVsbSkgJiYgIXByZXZFbG0uaGFzQXR0cmlidXRlKCdyZWFkb25seScpICl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlVGFncyhwcmV2RWxtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpeEZpcmVmb3hMYXN0VGFnTm9DYXJldCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFib3ZlIFwicmVtb3ZlVGFnXCIgbWV0aG9kcyByZW1vdmVzIHRoZSB0YWcgd2l0aCBhIHRyYW5zaXRpb24uIENocm9tZSBhZGRzIGEgPGJyPiBlbGVtZW50IGZvciBzb21lIHJlYXNvbiBhdCB0aGlzIHN0YWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCB0aGlzLkRPTS5pbnB1dC5jaGlsZHJlbi5sZW5ndGggPT0gMiAmJiB0aGlzLkRPTS5pbnB1dC5jaGlsZHJlblsxXS50YWdOYW1lID09IFwiQlJcIiApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ET00uaW5wdXQuaW5uZXJIVE1MID0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZS5sZW5ndGggPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2RWxtLnJlbW92ZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgLy8gZmluZCBvdXQgd2hpY2ggdGFnKHMpIHdlcmUgZGVsZXRlZCBhbmQgdHJpZ2dlciBcInJlbW92ZVwiIGV2ZW50XG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBsaXN0IG9mIHRhZ3Mgc3RpbGwgaW4gdGhlIGRvY3VtZW50IGFuZCB0aGVuIGZpbHRlciBvbmx5IHRob3NlIGZyb20gdGhlIFwidGhpcy52YWx1ZVwiIGNvbGxlY3Rpb25cbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gW10ubWFwLmNhbGwobGFzdFRhZ0VsZW1zLCAobm9kZSwgbm9kZUlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdmFyIHRhZ0RhdGEgPSBnZXRTZXRUYWdEYXRhKG5vZGUpO1xuXG4gICAgICAgICAgICAgICAgICAvLyBzaW5jZSByZWFkb25seSBjYW5ub3QgYmUgcmVtb3ZlZCAoaXQncyB0ZWNobmljYWxseSByZXN1cnJlY3RlZCBpZiByZW1vdmVkIHNvbWVob3cpXG4gICAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlIHx8IHRhZ0RhdGEucmVhZG9ubHkpIHJldHVybiB0YWdEYXRhO2Vsc2UgdGhpcy50cmlnZ2VyKCdyZW1vdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG5vZGVJZHgsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHRhZ0RhdGFcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pLmZpbHRlcihuID0+IG4pOyAvLyByZW1vdmUgZW1wdHkgaXRlbXMgaW4gdGhlIG1hcHBlZCBhcnJheVxuICAgICAgICAgICAgICB9LCAyMCk7IC8vIEZpcmVmb3ggbmVlZHMgdGhpcyBoaWdoZXIgZHVyYXRpb24gZm9yIHNvbWUgcmVhc29uIG9yIHRoaW5ncyBnZXQgYnVnZ3kgd2hlbiBkZWxldGluZyB0ZXh0IGZyb20gdGhlIGVuZFxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjdXJyZW50bHkgY29tbWVudGVkIHRvIGFsbG93IG5ldyBsaW5lcyBpbiBtaXhlZC1tb2RlXG4gICAgICAgICAgLy8gY2FzZSAnRW50ZXInIDpcbiAgICAgICAgICAvLyAgICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBzb2x2ZXMgQ2hyb21lIGJ1ZyAtIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMzk4MTkxLzEwNDM4MFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgJ0JhY2tzcGFjZSc6XG4gICAgICAgICAgaWYgKF9zLm1vZGUgPT0gJ3NlbGVjdCcgJiYgX3MuZW5mb3JjZVdoaXRlbGlzdCAmJiB0aGlzLnZhbHVlLmxlbmd0aCkgdGhpcy5yZW1vdmVUYWdzKCk7ZWxzZSBpZiAoIXRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSB8fCBfcy5kcm9wZG93bi5wb3NpdGlvbiA9PSAnbWFudWFsJykge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnRleHRDb250ZW50ID09IFwiXCIgfHwgcy5jaGFyQ29kZUF0KDApID09IDgyMDMpIHtcbiAgICAgICAgICAgICAgLy8gODIwMzogWkVSTyBXSURUSCBTUEFDRSB1bmljb2RlXG4gICAgICAgICAgICAgIGlmIChfcy5iYWNrc3BhY2UgPT09IHRydWUpIHRoaXMucmVtb3ZlVGFncygpO2Vsc2UgaWYgKF9zLmJhY2tzcGFjZSA9PSAnZWRpdCcpIHNldFRpbWVvdXQodGhpcy5lZGl0VGFnLmJpbmQodGhpcyksIDApOyAvLyB0aW1lb3V0IHJlYXNvbjogd2hlbiBlZGl0ZWQgdGFnIGdldHMgZm9jdXNlZCBhbmQgdGhlIGNhcmV0IGlzIHBsYWNlZCBhdCB0aGUgZW5kLCB0aGUgbGFzdCBjaGFyYWN0ZXIgZ2V0cyBkZWxldGVjIChiZWNhdXNlIG9mIGJhY2tzcGFjZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRXNjJzpcbiAgICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5kcm9wZG93bi52aXNpYmxlKSByZXR1cm47XG4gICAgICAgICAgZS50YXJnZXQuYmx1cigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdEb3duJzpcbiAgICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgICAvLyBpZiggX3MubW9kZSA9PSAnc2VsZWN0JyApIC8vIGlzc3VlICMzMzNcbiAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSkgdGhpcy5kcm9wZG93bi5zaG93KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxldCB0YWdEYXRhID0gdGhpcy5zdGF0ZS5pbnB1dFN1Z2dlc3Rpb24gfHwgdGhpcy5zdGF0ZS5kZEl0ZW1EYXRhO1xuICAgICAgICAgICAgaWYgKHRhZ0RhdGEgJiYgX3MuYXV0b0NvbXBsZXRlLnJpZ2h0S2V5KSB7XG4gICAgICAgICAgICAgIHRoaXMuYWRkVGFncyhbdGFnRGF0YV0sIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgICAge1xuICAgICAgICAgICAgbGV0IHNlbGVjdE1vZGUgPSBfcy5tb2RlID09ICdzZWxlY3QnO1xuICAgICAgICAgICAgaWYgKHMgJiYgIXNlbGVjdE1vZGUpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgIC8vIG1hbnVhbCBzdWdnZXN0aW9uIGJveGVzIGFyZSBhc3N1bWVkIHRvIGFsd2F5cyBiZSB2aXNpYmxlXG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSAmJiBfcy5kcm9wZG93bi5wb3NpdGlvbiAhPSAnbWFudWFsJykgcmV0dXJuO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gc29sdmVzIENocm9tZSBidWcgLSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMDM5ODE5MS8xMDQzODBcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBtYWluIFwia2V5ZG93blwiIGV2ZW50IGlzIGJvdW5kIGJlZm9yZSB0aGUgZHJvcGRvd24gZXZlbnRzLCB0aGlzIHdpbGwgZmlyZSBmaXJzdCBhbmQgd2lsbCBub3QgKnlldCpcbiAgICAgICAgICAvLyBrbm93IGlmIGFuIG9wdGlvbiB3YXMganVzdCBzZWxlY3RlZCBmcm9tIHRoZSBkcm9wZG93biBtZW51LiBJZiBhbiBvcHRpb24gd2FzIHNlbGVjdGVkLFxuICAgICAgICAgIC8vIHRoZSBkcm9wZG93biBldmVudHMgc2hvdWxkIGhhbmRsZSBhZGRpbmcgdGhlIHRhZ1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSB8fCB0aGlzLnN0YXRlLmFjdGlvbnMuc2VsZWN0T3B0aW9uKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmFkZFRhZ3MocywgdHJ1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbklucHV0KGUpIHtcbiAgICAgIHRoaXMucG9zdFVwZGF0ZSgpOyAvLyB0b2dnbGVzIFwidGFnaWZ5LS1lbXB0eVwiIGNsYXNzXG5cbiAgICAgIHZhciBfcyA9IHRoaXMuc2V0dGluZ3M7XG4gICAgICBpZiAoX3MubW9kZSA9PSAnbWl4JykgcmV0dXJuIHRoaXMuZXZlbnRzLmNhbGxiYWNrcy5vbk1peFRhZ3NJbnB1dC5jYWxsKHRoaXMsIGUpO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5pbnB1dC5ub3JtYWxpemUuY2FsbCh0aGlzKSxcbiAgICAgICAgc2hvd1N1Z2dlc3Rpb25zID0gdmFsdWUubGVuZ3RoID49IF9zLmRyb3Bkb3duLmVuYWJsZWQsXG4gICAgICAgIGV2ZW50RGF0YSA9IHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbnB1dEVsbTogdGhpcy5ET00uaW5wdXRcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVUYWcoe1xuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgaWYgKF9zLm1vZGUgPT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdGhpcy50b2dnbGVTY29wZVZhbGlkYXRpb24odmFsaWRhdGlvbik7XG4gICAgICB9XG4gICAgICBldmVudERhdGEuaXNWYWxpZCA9IHZhbGlkYXRpb247XG5cbiAgICAgIC8vIGZvciBJRTsgc2luY2UgSUUgZG9lc24ndCBoYXZlIGFuIFwiaW5wdXRcIiBldmVudCBzbyBcImtleURvd25cIiBpcyB1c2VkIGluc3RlYWQgdG8gdHJpZ2dlciB0aGUgXCJvbklucHV0XCIgY2FsbGJhY2ssXG4gICAgICAvLyBhbmQgc28gbWFueSBrZXlzIGRvIG5vdCBjaGFuZ2UgdGhlIGlucHV0LCBhbmQgZm9yIHRob3NlIGRvIG5vdCBjb250aW51ZS5cbiAgICAgIGlmICh0aGlzLnN0YXRlLmlucHV0VGV4dCA9PSB2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAvLyBzYXZlIHRoZSB2YWx1ZSBvbiB0aGUgaW5wdXQncyBTdGF0ZSBvYmplY3RcbiAgICAgIHRoaXMuaW5wdXQuc2V0LmNhbGwodGhpcywgdmFsdWUsIGZhbHNlKTsgLy8gdXBkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBub3JtYWxpemVkIHZhbHVlIGFuZCBydW4gdmFsaWRhdGlvbnNcbiAgICAgIC8vIHRoaXMuc2V0UmFuZ2VBdFN0YXJ0RW5kKGZhbHNlLCB0aGlzLkRPTS5pbnB1dCk7IC8vIGZpeCBjYXJldCBwb3NpdGlvblxuXG4gICAgICAvLyBpZiBkZWxpbWl0ZXJzIGRldGVjdGVkLCBhZGQgdGFnc1xuICAgICAgaWYgKHZhbHVlLnNlYXJjaChfcy5kZWxpbWl0ZXJzKSAhPSAtMSkge1xuICAgICAgICBpZiAodGhpcy5hZGRUYWdzKHZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuaW5wdXQuc2V0LmNhbGwodGhpcyk7IC8vIGNsZWFyIHRoZSBpbnB1dCBmaWVsZCdzIHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoX3MuZHJvcGRvd24uZW5hYmxlZCA+PSAwKSB7XG4gICAgICAgIHRoaXMuZHJvcGRvd25bc2hvd1N1Z2dlc3Rpb25zID8gXCJzaG93XCIgOiBcImhpZGVcIl0odmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy50cmlnZ2VyKCdpbnB1dCcsIGV2ZW50RGF0YSk7IC8vIFwiaW5wdXRcIiBldmVudCBtdXN0IGJlIHRyaWdnZXJlZCBhdCB0aGlzIHBvaW50LCBiZWZvcmUgdGhlIGRyb3Bkb3duIGlzIHNob3duXG4gICAgfSxcblxuICAgIG9uTWl4VGFnc0lucHV0KGUpIHtcbiAgICAgIHZhciByYW5nZVRleHQsXG4gICAgICAgIG1hdGNoLFxuICAgICAgICBtYXRjaGVkUGF0dGVybkNvdW50LFxuICAgICAgICB0YWcsXG4gICAgICAgIHNob3dTdWdnZXN0aW9ucyxcbiAgICAgICAgc2VsZWN0aW9uLFxuICAgICAgICBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgIGxhc3RUYWdzQ291bnQgPSB0aGlzLnZhbHVlLmxlbmd0aCxcbiAgICAgICAgbWF0Y2hGbGFnZ2VkVGFnLFxuICAgICAgICBtYXRjaERlbGltaXRlcnMsXG4gICAgICAgIHRhZ3NFbGVtcyA9IHRoaXMuZ2V0VGFnRWxtcygpLFxuICAgICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgICAgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxcbiAgICAgICAgcmVtYWluaW5nVGFnc1ZhbHVlcyA9IFtdLm1hcC5jYWxsKHRhZ3NFbGVtcywgbm9kZSA9PiBnZXRTZXRUYWdEYXRhKG5vZGUpLnZhbHVlKTtcblxuICAgICAgLy8gQW5kcm9pZCBDaHJvbWUgXCJrZXlkb3duXCIgZXZlbnQgYXJndW1lbnQgZG9lcyBub3QgcmVwb3J0IHRoZSBjb3JyZWN0IFwia2V5XCIuXG4gICAgICAvLyB0aGlzIHdvcmthcm91bmQgaXMgbmVlZGVkIHRvIG1hbnVhbGx5IGNhbGwgXCJvbktleWRvd25cIiBtZXRob2Qgd2l0aCBhIHN5bnRoZXNpemVkIGV2ZW50IG9iamVjdFxuICAgICAgaWYgKGUuaW5wdXRUeXBlID09IFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCIgJiYgaXNDaHJvbWVBbmRyb2lkQnJvd3NlcigpKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzLmNhbGxiYWNrcy5vbktleWRvd24uY2FsbCh0aGlzLCB7XG4gICAgICAgICAgdGFyZ2V0OiBlLnRhcmdldCxcbiAgICAgICAgICBrZXk6IFwiQmFja3NwYWNlXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlLWFkZCBcInJlYWRvbmx5XCIgdGFncyB3aGljaCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZFxuICAgICAgdGhpcy52YWx1ZS5zbGljZSgpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnJlYWRvbmx5ICYmICFyZW1haW5pbmdUYWdzVmFsdWVzLmluY2x1ZGVzKGl0ZW0udmFsdWUpKSBmcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVRhZ0VsZW0oaXRlbSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgIHRoaXMuc2V0UmFuZ2VBdFN0YXJ0RW5kKGZhbHNlLCBmcmFnbWVudC5sYXN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBpZiB0YWdzIHdlcmUgXCJtYWdpY2FsbHlcIiBhZGRlZC9yZW1vdmVkIChicm93c2VyIHJlZG8vdW5kbyBvciBDVFJMLUEgLT4gZGVsZXRlKVxuICAgICAgaWYgKHRhZ3NFbGVtcy5sZW5ndGggIT0gbGFzdFRhZ3NDb3VudCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gW10ubWFwLmNhbGwodGhpcy5nZXRUYWdFbG1zKCksIG5vZGUgPT4gZ2V0U2V0VGFnRGF0YShub2RlKSk7XG4gICAgICAgIHRoaXMudXBkYXRlKHtcbiAgICAgICAgICB3aXRob3V0Q2hhbmdlRXZlbnQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhhc01heFRhZ3MoKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgICAgICBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgICAgICAgLy8gb25seSBkZXRlY3QgdGFncyBpZiBzZWxlY3Rpb24gaXMgaW5zaWRlIGEgdGV4dE5vZGUgKG5vdCBzb21laG93IG9uIGFscmVhZHktZXhpc3RpbmcgdGFnKVxuICAgICAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwICYmIHNlbGVjdGlvbi5hbmNob3JOb2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApLmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgICByYW5nZS5zZXRTdGFydChzZWxlY3Rpb24uZm9jdXNOb2RlLCAwKTtcbiAgICAgICAgICByYW5nZVRleHQgPSByYW5nZS50b1N0cmluZygpLnNsaWNlKDAsIHJhbmdlLmVuZE9mZnNldCk7IC8vIHNsaWNlIHRoZSByYW5nZSBzbyBldmVyeXRoaW5nIEFGVEVSIHRoZSBjYXJldCB3aWxsIGJlIHRyaW1tZWRcbiAgICAgICAgICAvLyBzcGxpdCA9IHJhbmdlLnRvU3RyaW5nKCkuc3BsaXQoX3MubWl4VGFnc0FsbG93ZWRBZnRlcikgIC8vIFtcImZvb1wiLCBcImJhclwiLCBcIkBiYXpcIl1cbiAgICAgICAgICBtYXRjaGVkUGF0dGVybkNvdW50ID0gcmFuZ2VUZXh0LnNwbGl0KF9zLnBhdHRlcm4pLmxlbmd0aCAtIDE7XG4gICAgICAgICAgbWF0Y2ggPSByYW5nZVRleHQubWF0Y2goX3MucGF0dGVybik7XG4gICAgICAgICAgaWYgKG1hdGNoKVxuICAgICAgICAgICAgLy8gdGFnIHN0cmluZywgZXhhbXBsZTogXCJAYWFhIGNjY1wiXG4gICAgICAgICAgICB0YWcgPSByYW5nZVRleHQuc2xpY2UocmFuZ2VUZXh0Lmxhc3RJbmRleE9mKG1hdGNoW21hdGNoLmxlbmd0aCAtIDFdKSk7XG4gICAgICAgICAgaWYgKHRhZykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3Rpb25zLkFycm93TGVmdCA9IGZhbHNlOyAvLyBzdGFydCBmcmVzaCwgYXNzdW1pbmcgdGhlIHVzZXIgZGlkIG5vdCAoeWV0KSB1c2VkIGFueSBhcnJvdyB0byBtb3ZlIHRoZSBjYXJldFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50YWcgPSB7XG4gICAgICAgICAgICAgIHByZWZpeDogdGFnLm1hdGNoKF9zLnBhdHRlcm4pWzBdLFxuICAgICAgICAgICAgICB2YWx1ZTogdGFnLnJlcGxhY2UoX3MucGF0dGVybiwgJycpIC8vIGdldCByaWQgb2YgdGhlIHByZWZpeFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50YWcuYmFzZU9mZnNldCA9IHNlbGVjdGlvbi5iYXNlT2Zmc2V0IC0gdGhpcy5zdGF0ZS50YWcudmFsdWUubGVuZ3RoO1xuICAgICAgICAgICAgbWF0Y2hEZWxpbWl0ZXJzID0gdGhpcy5zdGF0ZS50YWcudmFsdWUubWF0Y2goX3MuZGVsaW1pdGVycyk7XG4gICAgICAgICAgICAvLyBpZiBhIGRlbGltZXRlciBleGlzdHMsIGFkZCB0aGUgdmFsdWUgYXMgdGFnIChleGx1ZGluZyB0aGUgZGVsaW1pdGVyKVxuICAgICAgICAgICAgaWYgKG1hdGNoRGVsaW1pdGVycykge1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRhZy52YWx1ZSA9IHRoaXMuc3RhdGUudGFnLnZhbHVlLnJlcGxhY2UoX3MuZGVsaW1pdGVycywgJycpO1xuICAgICAgICAgICAgICB0aGlzLnN0YXRlLnRhZy5kZWxpbWl0ZXJzID0gbWF0Y2hEZWxpbWl0ZXJzWzBdO1xuICAgICAgICAgICAgICB0aGlzLmFkZFRhZ3ModGhpcy5zdGF0ZS50YWcudmFsdWUsIF9zLmRyb3Bkb3duLmNsZWFyT25TZWxlY3QpO1xuICAgICAgICAgICAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hvd1N1Z2dlc3Rpb25zID0gdGhpcy5zdGF0ZS50YWcudmFsdWUubGVuZ3RoID49IF9zLmRyb3Bkb3duLmVuYWJsZWQ7XG5cbiAgICAgICAgICAgIC8vIFdoZW4gd3JpdGluZyBzb21ldGhpbmcgdGhhdCBtaWdodCBsb29rIGxpa2UgYSB0YWcgKGFuIGVtYWlsIGFkZHJlc3MpIGJ1dCBpc24ndCBvbmUgLSBpdCBpcyB1bndhbnRlZFxuICAgICAgICAgICAgLy8gdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duIGJlIHNob3duLCBzbyB0aGUgdXNlciBjYW4gY2xvc2UgaXQgKGluIGFueSB3YXkpLCBhbmQgd2hpbGUgY29udGludWUgdHlwaW5nLFxuICAgICAgICAgICAgLy8gZHJvcGRvd24gc2hvdWxkIHN0YXkgY2xvc2VkIHVudGlsIGFub3RoZXIgdGFnIGlzIHR5cGVkLlxuICAgICAgICAgICAgLy8gaWYoIHRoaXMuc3RhdGUudGFnLnZhbHVlLmxlbmd0aCAmJiB0aGlzLnN0YXRlLmRyb3Bkb3duLnZpc2libGUgPT09IGZhbHNlIClcbiAgICAgICAgICAgIC8vICAgICBzaG93U3VnZ2VzdGlvbnMgPSBmYWxzZVxuXG4gICAgICAgICAgICAvLyB0ZXN0IGZvciBzaW1pbGFyIGZsYWdnZWQgdGFncyB0byB0aGUgY3VycmVudCB0YWdcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbWF0Y2hGbGFnZ2VkVGFnID0gdGhpcy5zdGF0ZS5mbGFnZ2VkVGFnc1t0aGlzLnN0YXRlLnRhZy5iYXNlT2Zmc2V0XTtcbiAgICAgICAgICAgICAgbWF0Y2hGbGFnZ2VkVGFnID0gbWF0Y2hGbGFnZ2VkVGFnLnByZWZpeCA9PSB0aGlzLnN0YXRlLnRhZy5wcmVmaXggJiYgbWF0Y2hGbGFnZ2VkVGFnLnZhbHVlWzBdID09IHRoaXMuc3RhdGUudGFnLnZhbHVlWzBdO1xuXG4gICAgICAgICAgICAgIC8vIHJlc2V0XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmZsYWdnZWRUYWdzW3RoaXMuc3RhdGUudGFnLmJhc2VPZmZzZXRdICYmICF0aGlzLnN0YXRlLnRhZy52YWx1ZSkgZGVsZXRlIHRoaXMuc3RhdGUuZmxhZ2dlZFRhZ3NbdGhpcy5zdGF0ZS50YWcuYmFzZU9mZnNldF07XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgICAgICAgICAgIC8vIHNjZW5hcmlvOiAoZG8gbm90IHNob3cgc3VnZ2VzdGlvbnMgb2YgYW5vdGhlciBtYXRjaGVkIHRhZywgaWYgbW9yZSB0aGFuIG9uZSBkZXRlY3RlZClcbiAgICAgICAgICAgIC8vICgyIHRhZ3MgZXhpc3QpICAgICAgICAgICAgICAgICAgICAgICAgICBcIiBhQGEuY29tIGFuZCBAXCJcbiAgICAgICAgICAgIC8vIChzZWNvbmQgdGFnIGlzIHJlbW92ZWQgYnkgYmFja3NwYWNlKSAgICBcIiBhQGEuY29tIGFuZCBcIlxuICAgICAgICAgICAgaWYgKG1hdGNoRmxhZ2dlZFRhZyB8fCBtYXRjaGVkUGF0dGVybkNvdW50IDwgdGhpcy5zdGF0ZS5taXhNb2RlLm1hdGNoZWRQYXR0ZXJuQ291bnQpIHNob3dTdWdnZXN0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBubyAocG90ZW50aWFsKSB0YWcgZm91bmRcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZmxhZ2dlZFRhZ3MgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zdGF0ZS5taXhNb2RlLm1hdGNoZWRQYXR0ZXJuQ291bnQgPSBtYXRjaGVkUGF0dGVybkNvdW50O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHdhaXQgdW50aWwgdGhlIFwidGhpcy52YWx1ZVwiIGhhcyBiZWVuIHVwZGF0ZWQgKHNlZSBcIm9uS2V5ZG93blwiIG1ldGhvZCBmb3IgXCJtaXgtbW9kZVwiKVxuICAgICAgLy8gdGhlIGRyb3Bkb3duIG11c3QgYmUgc2hvd24gb25seSBhZnRlciB0aGlzIGV2ZW50IGhhcyBiZWVuIHRyaWdnZXJlZCwgc28gYW4gaW1wbGVtZW50ZXIgY291bGRcbiAgICAgIC8vIGR5bmFtaWNhbGx5IGNoYW5nZSB0aGUgd2hpdGVsaXN0LlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlKHtcbiAgICAgICAgICB3aXRob3V0Q2hhbmdlRXZlbnQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcImlucHV0XCIsIGV4dGVuZCh7fSwgdGhpcy5zdGF0ZS50YWcsIHtcbiAgICAgICAgICB0ZXh0Q29udGVudDogdGhpcy5ET00uaW5wdXQudGV4dENvbnRlbnRcbiAgICAgICAgfSkpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS50YWcpIHRoaXMuZHJvcGRvd25bc2hvd1N1Z2dlc3Rpb25zID8gXCJzaG93XCIgOiBcImhpZGVcIl0odGhpcy5zdGF0ZS50YWcudmFsdWUpO1xuICAgICAgfSwgMTApO1xuICAgIH0sXG4gICAgb25JbnB1dElFKGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAvLyBmb3IgdGhlIFwiZS50YXJnZXQudGV4dENvbnRlbnRcIiB0byBiZSBjaGFuZ2VkLCB0aGUgYnJvd3NlciByZXF1aXJlcyBhIHNtYWxsIGRlbGF5XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuZXZlbnRzLmNhbGxiYWNrcy5vbklucHV0LmNhbGwoX3RoaXMsIGUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvYnNlcnZlT3JpZ2luYWxJbnB1dFZhbHVlKCkge1xuICAgICAgLy8gaWYsIGZvciBzb21lIHJlYXNvbiwgdGhlIFRhZ2lmaWVkIGVsZW1lbnQgaXMgbm8gbG9uZ2VyIGluIHRoZSBET00sXG4gICAgICAvLyBjYWxsIHRoZSBcImRlc3Ryb3lcIiBtZXRob2QgdG8ga2lsbCBhbGwgcmVmZXJlbmNlcyB0byB0aW1lb3V0cy9pbnRlcnZhbHNcbiAgICAgIGlmICghdGhpcy5ET00ub3JpZ2luYWxJbnB1dC5wYXJlbnROb2RlKSB0aGlzLmRlc3Ryb3koKTtcblxuICAgICAgLy8gaWYgb3JpZ2luYWwgaW5wdXQgdmFsdWUgY2hhbmdlZCBmb3Igc29tZSByZWFzb24gKGZvciBleG1hcGxlIGEgZm9ybSByZXNldClcbiAgICAgIGlmICh0aGlzLkRPTS5vcmlnaW5hbElucHV0LnZhbHVlICE9IHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQudGFnaWZ5VmFsdWUpIHRoaXMubG9hZE9yaWdpbmFsVmFsdWVzKCk7XG4gICAgfSxcbiAgICBvbkNsaWNrQW55d2hlcmUoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ICE9IHRoaXMuRE9NLnNjb3BlICYmICF0aGlzLkRPTS5zY29wZS5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy50b2dnbGVGb2N1c0NsYXNzKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5oYXNGb2N1cyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25DbGlja1Njb3BlKGUpIHtcbiAgICAgIHZhciBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgIHRhZ0VsbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy4nICsgX3MuY2xhc3NOYW1lcy50YWcpLFxuICAgICAgICB0aW1lRGlmZkZvY3VzID0gK25ldyBEYXRlKCkgLSB0aGlzLnN0YXRlLmhhc0ZvY3VzO1xuICAgICAgaWYgKGUudGFyZ2V0ID09IHRoaXMuRE9NLnNjb3BlKSB7XG4gICAgICAgIC8vIGlmKCAhdGhpcy5zdGF0ZS5oYXNGb2N1cyApXG4gICAgICAgIHRoaXMuRE9NLmlucHV0LmZvY3VzKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKF9zLmNsYXNzTmFtZXMudGFnWCkpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVUYWdzKGUudGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKHRhZ0VsbSkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJjbGlja1wiLCB7XG4gICAgICAgICAgdGFnOiB0YWdFbG0sXG4gICAgICAgICAgaW5kZXg6IHRoaXMuZ2V0Tm9kZUluZGV4KHRhZ0VsbSksXG4gICAgICAgICAgZGF0YTogZ2V0U2V0VGFnRGF0YSh0YWdFbG0pLFxuICAgICAgICAgIGV2ZW50OiBlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoX3MuZWRpdFRhZ3MgPT09IDEgfHwgX3MuZWRpdFRhZ3MuY2xpY2tzID09PSAxKSB0aGlzLmV2ZW50cy5jYWxsYmFja3Mub25Eb3VibGVDbGlja1Njb3BlLmNhbGwodGhpcywgZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gd2hlbiBjbGlja2luZyBvbiB0aGUgaW5wdXQgaXRzZWxmXG4gICAgICBlbHNlIGlmIChlLnRhcmdldCA9PSB0aGlzLkRPTS5pbnB1dCkge1xuICAgICAgICBpZiAoX3MubW9kZSA9PSAnbWl4Jykge1xuICAgICAgICAgIC8vIGZpcmVmb3ggd29uJ3Qgc2hvdyBjYXJldCBpZiBsYXN0IGVsZW1lbnQgaXMgYSB0YWcgKGFuZCBub3QgYSB0ZXh0Tm9kZSksXG4gICAgICAgICAgLy8gc28gYW4gZW1wdHkgdGV4dG5vZGUgc2hvdWxkIGJlIGFkZGVkXG4gICAgICAgICAgdGhpcy5maXhGaXJlZm94TGFzdFRhZ05vQ2FyZXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZURpZmZGb2N1cyA+IDUwMCkge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmRyb3Bkb3duLnZpc2libGUpIHRoaXMuZHJvcGRvd24uaGlkZSgpO2Vsc2UgaWYgKF9zLmRyb3Bkb3duLmVuYWJsZWQgPT09IDAgJiYgX3MubW9kZSAhPSAnbWl4JykgdGhpcy5kcm9wZG93bi5zaG93KHRoaXMudmFsdWUubGVuZ3RoID8gJycgOiB1bmRlZmluZWQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKF9zLm1vZGUgPT0gJ3NlbGVjdCcgJiYgX3MuZHJvcGRvd24uZW5hYmxlZCA9PT0gMCAmJiAhdGhpcy5zdGF0ZS5kcm9wZG93bi52aXNpYmxlKSB0aGlzLmRyb3Bkb3duLnNob3coKTtcbiAgICB9LFxuICAgIC8vIHNwZWNpYWwgcHJvY2Nlc3MgaXMgbmVlZGVkIGZvciBwYXN0ZWQgY29udGVudCBpbiBvcmRlciB0byBcImNsZWFuXCIgaXRcbiAgICBvblBhc3RlKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgIHNlbGVjdE1vZGVXaXRob3V0SW5wdXQgPSBfcy5tb2RlID09ICdzZWxlY3QnICYmIF9zLmVuZm9yY2VXaGl0ZWxpc3Q7XG4gICAgICBpZiAoc2VsZWN0TW9kZVdpdGhvdXRJbnB1dCB8fCAhX3MudXNlcklucHV0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjbGlwYm9hcmREYXRhLCBwYXN0ZWRUZXh0O1xuICAgICAgaWYgKF9zLnJlYWRvbmx5KSByZXR1cm47XG5cbiAgICAgIC8vIEdldCBwYXN0ZWQgZGF0YSB2aWEgY2xpcGJvYXJkIEFQSVxuICAgICAgY2xpcGJvYXJkRGF0YSA9IGUuY2xpcGJvYXJkRGF0YSB8fCB3aW5kb3cuY2xpcGJvYXJkRGF0YTtcbiAgICAgIHBhc3RlZFRleHQgPSBjbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgIF9zLmhvb2tzLmJlZm9yZVBhc3RlKGUsIHtcbiAgICAgICAgdGFnaWZ5OiB0aGlzLFxuICAgICAgICBwYXN0ZWRUZXh0LFxuICAgICAgICBjbGlwYm9hcmREYXRhXG4gICAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcGFzdGVkVGV4dDtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHRoaXMuaW5qZWN0QXRDYXJldChyZXN1bHQsIHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5nZXRSYW5nZUF0KDApKTtcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlID09ICdtaXgnKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5jYWxsYmFja3Mub25NaXhUYWdzSW5wdXQuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MucGFzdGVBc1RhZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGFncyh0aGlzLnN0YXRlLmlucHV0VGV4dCArIHJlc3VsdCwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHRoaXMuc3RhdGUuaW5wdXRUZXh0ID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChlcnIgPT4gZXJyKTtcbiAgICB9LFxuICAgIG9uRHJvcChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSxcbiAgICBvbkVkaXRUYWdJbnB1dChlZGl0YWJsZUVsbSwgZSkge1xuICAgICAgdmFyIHRhZ0VsbSA9IGVkaXRhYmxlRWxtLmNsb3Nlc3QoJy4nICsgdGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZyksXG4gICAgICAgIHRhZ0VsbUlkeCA9IHRoaXMuZ2V0Tm9kZUluZGV4KHRhZ0VsbSksXG4gICAgICAgIHRhZ0RhdGEgPSBnZXRTZXRUYWdEYXRhKHRhZ0VsbSksXG4gICAgICAgIHRleHRWYWx1ZSA9IHRoaXMuaW5wdXQubm9ybWFsaXplLmNhbGwodGhpcywgZWRpdGFibGVFbG0pLFxuICAgICAgICBkYXRhRm9yQ2hhbmdlZFByb3AgPSB7XG4gICAgICAgICAgW3RoaXMuc2V0dGluZ3MudGFnVGV4dFByb3BdOiB0ZXh0VmFsdWUsXG4gICAgICAgICAgX190YWdJZDogdGFnRGF0YS5fX3RhZ0lkXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFwiX190YWdJZFwiIGlzIG5lZWRlZCBzbyB2YWxpZGF0aW9uIHdpbGwgc2tpcCBjdXJyZW50IHRhZyB3aGVuIGNoZWNraW5nIGZvciBkdXBzXG4gICAgICAgIGlzVmFsaWQgPSB0aGlzLnZhbGlkYXRlVGFnKGRhdGFGb3JDaGFuZ2VkUHJvcCksXG4gICAgICAgIC8vIHRoZSB2YWx1ZSBjb3VsZCBoYXZlIGJlZW4gaW52YWxpZCBpbiB0aGUgZmlyc3QtcGxhY2Ugc28gbWFrZSBzdXJlIHRvIHJlLXZhbGlkYXRlIGl0ICh2aWEgXCJhZGRFbXB0eVRhZ1wiIG1ldGhvZClcbiAgICAgICAgaGFzQ2hhbmdlZCA9IHRoaXMuZWRpdFRhZ0NoYW5nZURldGVjdGVkKGV4dGVuZCh0YWdEYXRhLCBkYXRhRm9yQ2hhbmdlZFByb3ApKTtcblxuICAgICAgLy8gaWYgdGhlIHZhbHVlIGlzIHNhbWUgYXMgYmVmb3JlLWVkaXRpbmcgYW5kIHRoZSB0YWcgd2FzIHZhbGlkIGJlZm9yZSBhcyB3ZWxsLCBpZ25vcmUgdGhlICBjdXJyZW50IFwiaXNWYWxpZFwiIHJlc3VsdCwgd2hpY2ggaXMgZmFsc2UtcG9zaXRpdmVcbiAgICAgIGlmICghaGFzQ2hhbmdlZCAmJiBlZGl0YWJsZUVsbS5vcmlnaW5hbElzVmFsaWQgPT09IHRydWUpIGlzVmFsaWQgPSB0cnVlO1xuICAgICAgdGFnRWxtLmNsYXNzTGlzdC50b2dnbGUodGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ0ludmFsaWQsIGlzVmFsaWQgIT09IHRydWUpO1xuICAgICAgdGFnRGF0YS5fX2lzVmFsaWQgPSBpc1ZhbGlkO1xuICAgICAgdGFnRWxtLnRpdGxlID0gaXNWYWxpZCA9PT0gdHJ1ZSA/IHRhZ0RhdGEudGl0bGUgfHwgdGFnRGF0YS52YWx1ZSA6IGlzVmFsaWQ7IC8vIGNoYW5nZSB0aGUgdGFnJ3MgdGl0bGUgdG8gaW5kaWNhdGUgd2h5IGlzIHRoZSB0YWcgaW52YWxpZCAoaWYgaXQncyBzbylcblxuICAgICAgLy8gc2hvdyBkcm9wZG93biBpZiB0eXBlZCB0ZXh0IGlzIGVxdWFsIG9yIG1vcmUgdGhhbiB0aGUgXCJlbmFibGVkXCIgZHJvcGRvd24gc2V0dGluZ1xuICAgICAgaWYgKHRleHRWYWx1ZS5sZW5ndGggPj0gdGhpcy5zZXR0aW5ncy5kcm9wZG93bi5lbmFibGVkKSB7XG4gICAgICAgIC8vIHRoaXMgY2hlY2sgaXMgbmVlZGVkIGFwcGFyZW50bHkgYmVjYXVzZSBkb2luZyBicm93c2VyIFwidW5kb1wiIHdpbGwgZmlyZVxuICAgICAgICAvLyAgXCJvbkVkaXRUYWdJbnB1dFwiIGJ1dCBcInRoaXMuc3RhdGUuZWRpdGluZ1wiIHdpbGwgYmUgXCJmYWxzZVwiXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVkaXRpbmcpIHRoaXMuc3RhdGUuZWRpdGluZy52YWx1ZSA9IHRleHRWYWx1ZTtcbiAgICAgICAgdGhpcy5kcm9wZG93bi5zaG93KHRleHRWYWx1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIoXCJlZGl0OmlucHV0XCIsIHtcbiAgICAgICAgdGFnOiB0YWdFbG0sXG4gICAgICAgIGluZGV4OiB0YWdFbG1JZHgsXG4gICAgICAgIGRhdGE6IGV4dGVuZCh7fSwgdGhpcy52YWx1ZVt0YWdFbG1JZHhdLCB7XG4gICAgICAgICAgbmV3VmFsdWU6IHRleHRWYWx1ZVxuICAgICAgICB9KSxcbiAgICAgICAgZXZlbnQ6IGVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25FZGl0VGFnUGFzdGUodGFnRWxtLCBlKSB7XG4gICAgICAvLyBHZXQgcGFzdGVkIGRhdGEgdmlhIGNsaXBib2FyZCBBUElcbiAgICAgIHZhciBjbGlwYm9hcmREYXRhID0gZS5jbGlwYm9hcmREYXRhIHx8IHdpbmRvdy5jbGlwYm9hcmREYXRhLFxuICAgICAgICBwYXN0ZWRUZXh0ID0gY2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0Jyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB2YXIgbmV3Tm9kZSA9IGluamVjdEF0Q2FyZXQocGFzdGVkVGV4dCk7XG4gICAgICB0aGlzLnNldFJhbmdlQXRTdGFydEVuZChmYWxzZSwgbmV3Tm9kZSk7XG4gICAgfSxcbiAgICBvbkVkaXRUYWdGb2N1cyh0YWdFbG0pIHtcbiAgICAgIHRoaXMuc3RhdGUuZWRpdGluZyA9IHtcbiAgICAgICAgc2NvcGU6IHRhZ0VsbSxcbiAgICAgICAgaW5wdXQ6IHRhZ0VsbS5xdWVyeVNlbGVjdG9yKFwiW2NvbnRlbnRlZGl0YWJsZV1cIilcbiAgICAgIH07XG4gICAgfSxcbiAgICBvbkVkaXRUYWdCbHVyKGVkaXRhYmxlRWxtKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuaGFzRm9jdXMpIHRoaXMudG9nZ2xlRm9jdXNDbGFzcygpO1xuXG4gICAgICAvLyBvbmUgc2NlbmFyaW8gaXMgd2hlbiBzZWxlY3RpbmcgYSBzdWdnZXN0aW9uIGZyb20gdGhlIGRyb3Bkb3duLCB3aGVuIGVkaXRpbmcsIGFuZCBieSBzZWxlY3RpbmcgaXRcbiAgICAgIC8vIHRoZSBcIm9uRWRpdFRhZ0RvbmVcIiBpcyBjYWxsZWQgZGlyZWN0bHksIGFscmVhZHkgcmVwbGFjaW5nIHRoZSB0YWcsIHNvIHRoZSBhcmd1bWVudCBcImVkaXRhYmxlRWxtXCJcbiAgICAgIC8vIG5vZGUgaXNuJ3QgaW4gdGhlIERPTSBhbnlubW9yZSBiZWNhdXNlIGl0IGhhcyBiZWVuIHJlcGxhY2VkLlxuICAgICAgaWYgKCF0aGlzLkRPTS5zY29wZS5jb250YWlucyhlZGl0YWJsZUVsbSkpIHJldHVybjtcbiAgICAgIHZhciBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAgIHRhZ0VsbSA9IGVkaXRhYmxlRWxtLmNsb3Nlc3QoJy4nICsgX3MuY2xhc3NOYW1lcy50YWcpLFxuICAgICAgICB0YWdEYXRhID0gZ2V0U2V0VGFnRGF0YSh0YWdFbG0pLFxuICAgICAgICB0ZXh0VmFsdWUgPSB0aGlzLmlucHV0Lm5vcm1hbGl6ZS5jYWxsKHRoaXMsIGVkaXRhYmxlRWxtKSxcbiAgICAgICAgZGF0YUZvckNoYW5nZWRQcm9wID0ge1xuICAgICAgICAgIFtfcy50YWdUZXh0UHJvcF06IHRleHRWYWx1ZSxcbiAgICAgICAgICBfX3RhZ0lkOiB0YWdEYXRhLl9fdGFnSWRcbiAgICAgICAgfSxcbiAgICAgICAgLy8gXCJfX3RhZ0lkXCIgaXMgbmVlZGVkIHNvIHZhbGlkYXRpb24gd2lsbCBza2lwIGN1cnJlbnQgdGFnIHdoZW4gY2hlY2tpbmcgZm9yIGR1cHNcbiAgICAgICAgb3JpZ2luYWxEYXRhID0gdGFnRGF0YS5fX29yaWdpbmFsRGF0YSxcbiAgICAgICAgLy8gcHJlLWVkaXQgZGF0YVxuICAgICAgICBoYXNDaGFuZ2VkID0gdGhpcy5lZGl0VGFnQ2hhbmdlRGV0ZWN0ZWQoZXh0ZW5kKHRhZ0RhdGEsIGRhdGFGb3JDaGFuZ2VkUHJvcCkpLFxuICAgICAgICBpc1ZhbGlkID0gdGhpcy52YWxpZGF0ZVRhZyhkYXRhRm9yQ2hhbmdlZFByb3ApLFxuICAgICAgICAvLyBcIl9fdGFnSWRcIiBpcyBuZWVkZWQgc28gdmFsaWRhdGlvbiB3aWxsIHNraXAgY3VycmVudCB0YWcgd2hlbiBjaGVja2luZyBmb3IgZHVwc1xuICAgICAgICBoYXNNYXhUYWdzLFxuICAgICAgICBuZXdUYWdEYXRhO1xuICAgICAgaWYgKCF0ZXh0VmFsdWUpIHtcbiAgICAgICAgdGhpcy5vbkVkaXRUYWdEb25lKHRhZ0VsbSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgbm90aGluZyBjaGFuZ2VkIHJldmVydCBiYWNrIHRvIGhvdyBpdCB3YXMgYmVmb3JlIGVkaXRpbmdcbiAgICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICB0aGlzLm9uRWRpdFRhZ0RvbmUodGFnRWxtLCBvcmlnaW5hbERhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIG5lZWQgdG8ga25vdyB0aGlzIGJlY2F1c2UgaWYgXCJrZWVwSW52YWxpZFRhZ3NcIiBzZXR0aW5nIGlzIFwidHJ1ZVwiIGFuZCBhbiBpbnZhbGlkIHRhZyBpcyBlZGl0ZWQgYXMgYSB2YWxpZCBvbmUsXG4gICAgICAvLyBidXQgdGhlIG1heGltdW0gbnVtYmVyIG9mIHRhZ3MgaGF2ZSBhbHJlYXkgYmVlbiByZWFjaGVkLCBzbyBpdCBzaG91bGQgbm90IGFsbG93IHNhdmluZyB0aGUgbmV3IHZhbGlkIHZhbHVlLlxuICAgICAgLy8gb25seSBpZiB0aGUgdGFnIHdhcyBhbHJlYWR5IHZhbGlkIGJlZm9yZSBlZGl0aW5nLCBpZ25vcmUgdGhpcyBjaGVjayAoc2VlIGEgZmV3IGxpbmVzIGJlbG93KVxuICAgICAgaGFzTWF4VGFncyA9IHRoaXMuaGFzTWF4VGFncygpO1xuICAgICAgbmV3VGFnRGF0YSA9IGV4dGVuZCh7fSwgb3JpZ2luYWxEYXRhLCB7XG4gICAgICAgIFtfcy50YWdUZXh0UHJvcF06IHRoaXMudHJpbSh0ZXh0VmFsdWUpLFxuICAgICAgICBfX2lzVmFsaWQ6IGlzVmFsaWRcbiAgICAgIH0pO1xuXG4gICAgICAvLyBwYXNzIHRocm91Z2ggb3B0aW9uYWwgdHJhbnNmb3JtZXIgZGVmaW5lZCBpbiBzZXR0aW5nc1xuICAgICAgX3MudHJhbnNmb3JtVGFnLmNhbGwodGhpcywgbmV3VGFnRGF0YSwgb3JpZ2luYWxEYXRhKTtcblxuICAgICAgLy8gTVVTVCByZS12YWxpZGF0ZSBhZnRlciB0YWcgdHJhbnNmb3JtYXRpb25cbiAgICAgIC8vIG9ubHkgdmFsaWRhdGUgdGhlIFwidGFnVGV4dFByb3BcIiBiZWNhdXNlIGlzIHRoZSBvbmx5IHRoaW5nIHRoYXQgbWV0dGVycyBmb3IgdmFsaWRhdGluZyBhbiBlZGl0ZWQgdGFnLlxuICAgICAgLy8gLS0gU2NlbmFyaW9zOiAtLVxuICAgICAgLy8gMS4gbWF4IDMgdGFncyBhbGxvd2QuIHRoZXJlIGFyZSA0IHRhZ3MsIG9uZSBoYXMgaW52YWxpZCBpbnB1dCBhbmQgaXMgZWRpdGVkIHRvIGEgdmFsaWQgb25lLCBhbmQgbm93IHNob3VsZCBiZSBtYXJrZWQgYXMgXCJub3QgYWxsb3dlZFwiIGJlY2F1c2UgbGltaXQgb2YgdGFncyBoYXMgcmVhY2hlZFxuICAgICAgLy8gMi4gbWF4IDMgdGFncyBhbGxvd2VkLiB0aGVyZSBhcmUgMyB0YWdzLCBvbmUgaXMgZWRpdGVkLCBhbmQgc28gbWF4LXRhZ3MgdmFpbGRhdGlvbiBzaG91bGQgYmUgT0tcbiAgICAgIGlzVmFsaWQgPSAoIWhhc01heFRhZ3MgfHwgb3JpZ2luYWxEYXRhLl9faXNWYWxpZCA9PT0gdHJ1ZSkgJiYgdGhpcy52YWxpZGF0ZVRhZyhuZXdUYWdEYXRhKTtcbiAgICAgIGlmIChpc1ZhbGlkICE9PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcImludmFsaWRcIiwge1xuICAgICAgICAgIGRhdGE6IG5ld1RhZ0RhdGEsXG4gICAgICAgICAgdGFnOiB0YWdFbG0sXG4gICAgICAgICAgbWVzc2FnZTogaXNWYWxpZFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBkbyBub3RoaW5nIGlmIGludmFsaWQsIHN0YXkgaW4gZWRpdC1tb2RlIHVudGlsIGNvcnJlY3RlZCBvciByZXZlcnRlZCBieSBwcmVzc3NpbmcgZXNjXG4gICAgICAgIGlmIChfcy5lZGl0VGFncy5rZWVwSW52YWxpZCkgcmV0dXJuO1xuICAgICAgICBpZiAoX3Mua2VlcEludmFsaWRUYWdzKSBuZXdUYWdEYXRhLl9faXNWYWxpZCA9IGlzVmFsaWQ7ZWxzZVxuICAgICAgICAgIC8vIHJldmVydCBiYWNrIGlmIG5vdCBzcGVjaWZpZWQgdG8ga2VlcFxuICAgICAgICAgIG5ld1RhZ0RhdGEgPSBvcmlnaW5hbERhdGE7XG4gICAgICB9IGVsc2UgaWYgKF9zLmtlZXBJbnZhbGlkVGFncykge1xuICAgICAgICAvLyBjbGVhdXAgYW55IHByZXZpb3VzIGxlZnRvdmVycyBpZiB0aGUgdGFnIHdhcyBpbnZhbGlkXG4gICAgICAgIGRlbGV0ZSBuZXdUYWdEYXRhLnRpdGxlO1xuICAgICAgICBkZWxldGUgbmV3VGFnRGF0YVtcImFyaWEtaW52YWxpZFwiXTtcbiAgICAgICAgZGVsZXRlIG5ld1RhZ0RhdGEuY2xhc3M7XG4gICAgICB9XG5cbiAgICAgIC8vIHRhZ0VsbS5jbGFzc0xpc3QudG9nZ2xlKF9zLmNsYXNzTmFtZXMudGFnSW52YWxpZCwgdHJ1ZSlcblxuICAgICAgdGhpcy5vbkVkaXRUYWdEb25lKHRhZ0VsbSwgbmV3VGFnRGF0YSk7XG4gICAgfSxcbiAgICBvbkVkaXRUYWdrZXlkb3duKGUsIHRhZ0VsbSkge1xuICAgICAgLy8gaWdub3JlIGtleXMgZHVyaW5nIElNRSBjb21wb3NpdGlvblxuICAgICAgaWYgKHRoaXMuc3RhdGUuY29tcG9zaW5nKSByZXR1cm47XG4gICAgICB0aGlzLnRyaWdnZXIoXCJlZGl0OmtleWRvd25cIiwge1xuICAgICAgICBldmVudDogZVxuICAgICAgfSk7XG4gICAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICAgIGNhc2UgJ0VzYyc6XG4gICAgICAgIGNhc2UgJ0VzY2FwZSc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gcmV2ZXJ0IHRoZSB0YWcgdG8gaG93IGl0IHdhcyBiZWZvcmUgZWRpdGluZ1xuICAgICAgICAgICAgLy8gcmVwbGFjZSBjdXJyZW50IHRhZyB3aXRoIG9yaWdpbmFsIG9uZSAocHJlLWVkaXRlZCBvbmUpXG4gICAgICAgICAgICB0YWdFbG0ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodGFnRWxtLl9fdGFnaWZ5VGFnRGF0YS5fX29yaWdpbmFsSFRNTCwgdGFnRWxtKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuZWRpdGluZyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBlLnRhcmdldC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkRvdWJsZUNsaWNrU2NvcGUoZSkge1xuICAgICAgdmFyIHRhZ0VsbSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZyksXG4gICAgICAgIHRhZ0RhdGEgPSBnZXRTZXRUYWdEYXRhKHRhZ0VsbSksXG4gICAgICAgIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgICAgaXNFZGl0aW5nVGFnLFxuICAgICAgICBpc1JlYWR5T25seVRhZztcbiAgICAgIGlmICghdGFnRWxtIHx8ICFfcy51c2VySW5wdXQgfHwgdGFnRGF0YS5lZGl0YWJsZSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICAgIGlzRWRpdGluZ1RhZyA9IHRhZ0VsbS5jbGFzc0xpc3QuY29udGFpbnModGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ0VkaXRpbmcpO1xuICAgICAgaXNSZWFkeU9ubHlUYWcgPSB0YWdFbG0uaGFzQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgICAgaWYgKF9zLm1vZGUgIT0gJ3NlbGVjdCcgJiYgIV9zLnJlYWRvbmx5ICYmICFpc0VkaXRpbmdUYWcgJiYgIWlzUmVhZHlPbmx5VGFnICYmIHRoaXMuc2V0dGluZ3MuZWRpdFRhZ3MpIHRoaXMuZWRpdFRhZyh0YWdFbG0pO1xuICAgICAgdGhpcy50b2dnbGVGb2N1c0NsYXNzKHRydWUpO1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYmxjbGljaycsIHtcbiAgICAgICAgdGFnOiB0YWdFbG0sXG4gICAgICAgIGluZGV4OiB0aGlzLmdldE5vZGVJbmRleCh0YWdFbG0pLFxuICAgICAgICBkYXRhOiBnZXRTZXRUYWdEYXRhKHRhZ0VsbSlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG0gYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgb2JzZXJ2ZWQgRE9NIGNoYW5nZXNcclxuICAgICAqL1xuICAgIG9uSW5wdXRET01DaGFuZ2UobSkge1xuICAgICAgLy8gaXRlcmF0ZSBhbGwgRE9tIG11dGF0aW9uXG4gICAgICBtLmZvckVhY2gocmVjb3JkID0+IHtcbiAgICAgICAgLy8gb25seSB0aGUgQURERUQgbm9kZXNcbiAgICAgICAgcmVjb3JkLmFkZGVkTm9kZXMuZm9yRWFjaChhZGRlZE5vZGUgPT4ge1xuICAgICAgICAgIC8vIGZpeCBjaHJvbWUncyBwbGFjaW5nICc8ZGl2Pjxicj48L2Rpdj4nIGV2ZXJ5dGltZSBFTlRFUiBrZXkgaXMgcHJlc3NlZCwgYW5kIHJlcGxhY2Ugd2l0aCBqdXN0IGA8YnInXG4gICAgICAgICAgaWYgKGFkZGVkTm9kZS5vdXRlckhUTUwgPT0gJzxkaXY+PGJyPjwvZGl2PicpIHtcbiAgICAgICAgICAgIGFkZGVkTm9kZS5yZXBsYWNlV2l0aChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBpZiB0aGUgYWRkZWQgZWxlbWVudCBpcyBhIGRpdiBjb250YWluaW5nIGEgdGFnIHdpdGhpbiBpdCAoY2hyb21lIGRvZXMgdGhpcyB3aGVuIHByZXNzaW5nIEVOVEVSIGJlZm9yZSBhIHRhZylcbiAgICAgICAgICBlbHNlIGlmIChhZGRlZE5vZGUubm9kZVR5cGUgPT0gMSAmJiBhZGRlZE5vZGUucXVlcnlTZWxlY3Rvcih0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnU2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBsZXQgbmV3bGluZVRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgICAgICAgICBpZiAoYWRkZWROb2RlLmNoaWxkTm9kZXNbMF0ubm9kZVR5cGUgPT0gMyAmJiBhZGRlZE5vZGUucHJldmlvdXNTaWJsaW5nLm5vZGVOYW1lICE9ICdCUicpIG5ld2xpbmVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1xcbicpO1xuXG4gICAgICAgICAgICAvLyB1bndyYXAgdGhlIHVzZWxlc3MgZGl2XG4gICAgICAgICAgICAvLyBjaHJvbWUgYWRkcyBhIEJSIGF0IHRoZSBlbmQgd2hpY2ggc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgICAgICAgIGFkZGVkTm9kZS5yZXBsYWNlV2l0aCguLi5bbmV3bGluZVRleHQsIC4uLlsuLi5hZGRlZE5vZGUuY2hpbGROb2Rlc10uc2xpY2UoMCwgLTEpXSk7XG4gICAgICAgICAgICB0aGlzLnBsYWNlQ2FyZXRBZnRlck5vZGUobmV3bGluZVRleHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSB0YWdcbiAgICAgICAgICBlbHNlIGlmIChpc05vZGVUYWcuY2FsbCh0aGlzLCBhZGRlZE5vZGUpKSB7XG4gICAgICAgICAgICBpZiAoYWRkZWROb2RlLnByZXZpb3VzU2libGluZz8ubm9kZVR5cGUgPT0gMyAmJiAhYWRkZWROb2RlLnByZXZpb3VzU2libGluZy50ZXh0Q29udGVudCkgYWRkZWROb2RlLnByZXZpb3VzU2libGluZy5yZW1vdmUoKTtcbiAgICAgICAgICAgIC8vIGFuZCBpdCBpcyB0aGUgZmlyc3Qgbm9kZSBpbiBhIG5ldyBsaW5lXG4gICAgICAgICAgICBpZiAoYWRkZWROb2RlLnByZXZpb3VzU2libGluZyAmJiBhZGRlZE5vZGUucHJldmlvdXNTaWJsaW5nLm5vZGVOYW1lID09ICdCUicpIHtcbiAgICAgICAgICAgICAgLy8gYWxsb3dzIHBsYWNpbmcgdGhlIGNhcmV0IGp1c3QgYmVmb3JlIHRoZSB0YWcsIHdoZW4gdGhlIHRhZyBpcyB0aGUgZmlyc3Qgbm9kZSBpbiB0aGF0IGxpbmVcbiAgICAgICAgICAgICAgYWRkZWROb2RlLnByZXZpb3VzU2libGluZy5yZXBsYWNlV2l0aCgnXFxuXFx1MjAwQicpO1xuICAgICAgICAgICAgICBsZXQgbmV4dE5vZGUgPSBhZGRlZE5vZGUubmV4dFNpYmxpbmcsXG4gICAgICAgICAgICAgICAgYW55dGhpbmdBZnRlck5vZGUgPSAnJztcbiAgICAgICAgICAgICAgd2hpbGUgKG5leHROb2RlKSB7XG4gICAgICAgICAgICAgICAgYW55dGhpbmdBZnRlck5vZGUgKz0gbmV4dE5vZGUudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIHdoZW4gaGl0dGluZyBFTlRFUiBmb3IgbmV3IGxpbmUganVzdCBiZWZvcmUgYW4gZXhpc3RpbmcgdGFnLCBidXQgc2tpcCBiZWxvdyBsb2dpYyB3aGVuIGEgdGFnIGhhcyBiZWVuIGFkZGRlZFxuICAgICAgICAgICAgICBhbnl0aGluZ0FmdGVyTm9kZS50cmltKCkgJiYgdGhpcy5wbGFjZUNhcmV0QWZ0ZXJOb2RlKGFkZGVkTm9kZS5wcmV2aW91c1NpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlY29yZC5yZW1vdmVkTm9kZXMuZm9yRWFjaChyZW1vdmVkTm9kZSA9PiB7XG4gICAgICAgICAgLy8gd2hlbiB0cnlpbmcgdG8gZGVsZXRlIGEgdGFnIHdoaWNoIGlzIGluIGEgbmV3IGxpbmUgYW5kIHRoZXJlJ3Mgbm90aGluZyBlbHNlIHRoZXJlIChjYXJldCBpcyBhZnRlciB0aGUgdGFnKVxuICAgICAgICAgIGlmIChyZW1vdmVkTm9kZSAmJiByZW1vdmVkTm9kZS5ub2RlTmFtZSA9PSAnQlInICYmIGlzTm9kZVRhZy5jYWxsKHRoaXMsIGxhc3RJbnB1dENoaWxkKSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUYWdzKGxhc3RJbnB1dENoaWxkKTtcbiAgICAgICAgICAgIHRoaXMuZml4RmlyZWZveExhc3RUYWdOb0NhcmV0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBnZXQgdGhlIGxhc3QgY2hpbGQgb25seSBhZnRlciB0aGUgYWJvdmUgRE9NIG1vZGlmaWNhdGlvbnNcbiAgICAgIC8vIGNoZWNrIHRoZXNlIHNjZW5hcmlvczpcbiAgICAgIC8vIDEuIGFmdGVyIGEgc2luZ2xlIGxpbmUsIHByZXNzIEVOVEVSIG9uY2UgLSBzaG91bGQgYWRkIG9ubHkgMSBCUlxuICAgICAgLy8gMi4gcHJlc3NzIEVOVEVSIHJpZ2h0IGJlZm9yZSBhIHRhZ1xuICAgICAgLy8gMy4gcHJlc3MgZW50ZXIgd2l0aGluIGEgdGV4dCBub2RlIGJlZm9yZSBhIHRhZ1xuICAgICAgdmFyIGxhc3RJbnB1dENoaWxkID0gdGhpcy5ET00uaW5wdXQubGFzdENoaWxkO1xuICAgICAgaWYgKGxhc3RJbnB1dENoaWxkICYmIGxhc3RJbnB1dENoaWxkLm5vZGVWYWx1ZSA9PSAnJykgbGFzdElucHV0Q2hpbGQucmVtb3ZlKCk7XG5cbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgbGFzdCBlbGVtZW50IGlzIGFsd2F5cyBhIEJSXG4gICAgICBpZiAoIWxhc3RJbnB1dENoaWxkIHx8IGxhc3RJbnB1dENoaWxkLm5vZGVOYW1lICE9ICdCUicpIHtcbiAgICAgICAgdGhpcy5ET00uaW5wdXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dCAgICBET00gZWxlbWVudFxyXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0dGluZ3Mgc2V0dGluZ3Mgb2JqZWN0XHJcbiAqL1xuZnVuY3Rpb24gVGFnaWZ5KGlucHV0LCBzZXR0aW5ncykge1xuICBpZiAoIWlucHV0KSB7XG4gICAgY29uc29sZS53YXJuKCdUYWdpZnk6JywgJ2lucHV0IGVsZW1lbnQgbm90IGZvdW5kJywgaW5wdXQpO1xuICAgIC8vIHJldHVybiBhbiBlbXB0eSBtb2NrIG9mIGFsbCBtZXRob2RzLCBzbyB0aGUgY29kZSB1c2luZyB0YWdpZnkgd2lsbCBub3QgYnJlYWtcbiAgICAvLyBiZWNhdXNlIGl0IG1pZ2h0IGJlIGNhbGxpbmcgbWV0aG9kcyBldmVuIHRob3VnaCB0aGUgaW5wdXQgZWxlbWVudCBkb2VzIG5vdCBleGlzdFxuICAgIGNvbnN0IG1vY2tJbnN0YW5jZSA9IG5ldyBQcm94eSh0aGlzLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiBtb2NrSW5zdGFuY2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vY2tJbnN0YW5jZTtcbiAgfVxuICBpZiAoaW5wdXQuX190YWdpZnkpIHtcbiAgICBjb25zb2xlLndhcm4oJ1RhZ2lmeTogJywgJ2lucHV0IGVsZW1lbnQgaXMgYWxyZWFkeSBUYWdpZmllZCAtIFNhbWUgaW5zdGFuY2UgaXMgcmV0dXJuZWQuJywgaW5wdXQpO1xuICAgIHJldHVybiBpbnB1dC5fX3RhZ2lmeTtcbiAgfVxuICBleHRlbmQodGhpcywgRXZlbnREaXNwYXRjaGVyKHRoaXMpKTtcbiAgdGhpcy5pc0ZpcmVmb3ggPSAvZmlyZWZveHxmeGlvcy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIS9zZWFtb25rZXkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB0aGlzLmlzSUUgPSB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRNb2RlOyAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRG9jdW1lbnQvY29tcGF0TW9kZSNCcm93c2VyX2NvbXBhdGliaWxpdHlcblxuICBzZXR0aW5ncyA9IHNldHRpbmdzIHx8IHt9O1xuICB0aGlzLmdldFBlcnNpc3RlZERhdGEgPSBnZXRQZXJzaXN0ZWREYXRhKHNldHRpbmdzLmlkKTtcbiAgdGhpcy5zZXRQZXJzaXN0ZWREYXRhID0gc2V0UGVyc2lzdGVkRGF0YShzZXR0aW5ncy5pZCk7XG4gIHRoaXMuY2xlYXJQZXJzaXN0ZWREYXRhID0gY2xlYXJQZXJzaXN0ZWREYXRhKHNldHRpbmdzLmlkKTtcbiAgdGhpcy5hcHBseVNldHRpbmdzKGlucHV0LCBzZXR0aW5ncyk7XG4gIHRoaXMuc3RhdGUgPSB7XG4gICAgaW5wdXRUZXh0OiAnJyxcbiAgICBlZGl0aW5nOiBmYWxzZSxcbiAgICBjb21wb3Npbmc6IGZhbHNlLFxuICAgIGFjdGlvbnM6IHt9LFxuICAgIC8vIFVJIGFjdGlvbnMgZm9yIHN0YXRlLWxvY2tpbmdcbiAgICBtaXhNb2RlOiB7fSxcbiAgICBkcm9wZG93bjoge30sXG4gICAgZmxhZ2dlZFRhZ3M6IHt9IC8vIGluIG1peC1tb2RlLCB3aGVuIGEgc3RyaW5nIGlzIGRldGV0Y2VkIGFzIHBvdGVudGlhbCB0YWcsIGFuZCB0aGUgdXNlciBoYXMgY2hvY2VuIHRvIGNsb3NlIHRoZSBzdWdnZXN0aW9ucyBkcm9wZG93biwga2VlcCB0aGUgcmVjb3JkIG9mIHRoZSB0YXNnIGhlcmVcbiAgfTtcblxuICB0aGlzLnZhbHVlID0gW107IC8vIHRhZ3MnIGRhdGFcblxuICAvLyBldmVudHMnIGNhbGxiYWNrcyByZWZlcmVuY2VzIHdpbGwgYmUgc3RvcmVzIGhlcmUsIHNvIGV2ZW50cyBjb3VsZCBiZSB1bmJpbmRlZFxuICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICB0aGlzLkRPTSA9IHt9OyAvLyBTdG9yZSBhbGwgcmVsZXZhbnQgRE9NIGVsZW1lbnRzIGluIGFuIE9iamVjdFxuXG4gIHRoaXMuYnVpbGQoaW5wdXQpO1xuICBpbml0RHJvcGRvd24uY2FsbCh0aGlzKTtcbiAgdGhpcy5nZXRDU1NWYXJzKCk7XG4gIHRoaXMubG9hZE9yaWdpbmFsVmFsdWVzKCk7XG4gIHRoaXMuZXZlbnRzLmN1c3RvbUJpbmRpbmcuY2FsbCh0aGlzKTtcbiAgdGhpcy5ldmVudHMuYmluZGluZy5jYWxsKHRoaXMpO1xuICBpbnB1dC5hdXRvZm9jdXMgJiYgdGhpcy5ET00uaW5wdXQuZm9jdXMoKTtcbiAgaW5wdXQuX190YWdpZnkgPSB0aGlzO1xufVxuVGFnaWZ5LnByb3RvdHlwZSA9IHtcbiAgX2Ryb3Bkb3duLFxuICBnZXRTZXRUYWdEYXRhLFxuICBoZWxwZXJzOiB7XG4gICAgc2FtZVN0cixcbiAgICByZW1vdmVDb2xsZWN0aW9uUHJvcCxcbiAgICBvbWl0LFxuICAgIGlzT2JqZWN0LFxuICAgIHBhcnNlSFRNTCxcbiAgICBlc2NhcGVIVE1MLFxuICAgIGV4dGVuZCxcbiAgICBjb25jYXRXaXRob3V0RHVwcyxcbiAgICBnZXRVSUQsXG4gICAgaXNOb2RlVGFnXG4gIH0sXG4gIGN1c3RvbUV2ZW50c0xpc3Q6IFsnY2hhbmdlJywgJ2FkZCcsICdyZW1vdmUnLCAnaW52YWxpZCcsICdpbnB1dCcsICdjbGljaycsICdrZXlkb3duJywgJ2ZvY3VzJywgJ2JsdXInLCAnZWRpdDppbnB1dCcsICdlZGl0OmJlZm9yZVVwZGF0ZScsICdlZGl0OnVwZGF0ZWQnLCAnZWRpdDpzdGFydCcsICdlZGl0OmtleWRvd24nLCAnZHJvcGRvd246c2hvdycsICdkcm9wZG93bjpoaWRlJywgJ2Ryb3Bkb3duOnNlbGVjdCcsICdkcm9wZG93bjp1cGRhdGVkJywgJ2Ryb3Bkb3duOm5vTWF0Y2gnLCAnZHJvcGRvd246c2Nyb2xsJ10sXG4gIGRhdGFQcm9wczogWydfX2lzVmFsaWQnLCAnX19yZW1vdmVkJywgJ19fb3JpZ2luYWxEYXRhJywgJ19fb3JpZ2luYWxIVE1MJywgJ19fdGFnSWQnXSxcbiAgLy8gaW50ZXJuYWwtdWFzZ2UgcHJvcHNcblxuICB0cmltKHRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy50cmltICYmIHRleHQgJiYgdHlwZW9mIHRleHQgPT0gXCJzdHJpbmdcIiA/IHRleHQudHJpbSgpIDogdGV4dDtcbiAgfSxcbiAgLy8gZXhwb3NlIHRoaXMgaGFuZHkgdXRpbGl0eSBmdW5jdGlvblxuICBwYXJzZUhUTUwsXG4gIHRlbXBsYXRlcyxcbiAgcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSkge1xuICAgIHRlbXBsYXRlID0gdGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNbdGVtcGxhdGVdIHx8IHRlbXBsYXRlO1xuICAgIHJldHVybiBwYXJzZUhUTUwodGVtcGxhdGUuYXBwbHkodGhpcywgZGF0YSkpO1xuICB9LFxuICBzZXQgd2hpdGVsaXN0KGFycikge1xuICAgIGNvbnN0IGlzQXJyYXkgPSBhcnIgJiYgQXJyYXkuaXNBcnJheShhcnIpO1xuICAgIHRoaXMuc2V0dGluZ3Mud2hpdGVsaXN0ID0gaXNBcnJheSA/IGFyciA6IFtdO1xuICAgIHRoaXMuc2V0UGVyc2lzdGVkRGF0YShpc0FycmF5ID8gYXJyIDogW10sICd3aGl0ZWxpc3QnKTtcbiAgfSxcbiAgZ2V0IHdoaXRlbGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy53aGl0ZWxpc3Q7XG4gIH0sXG4gIGdlbmVyYXRlQ2xhc3NTZWxlY3RvcnMoY2xhc3NOYW1lcykge1xuICAgIGZvciAobGV0IG5hbWUgaW4gY2xhc3NOYW1lcykge1xuICAgICAgbGV0IGN1cnJlbnROYW1lID0gbmFtZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbGFzc05hbWVzLCBjdXJyZW50TmFtZSArIFwiU2VsZWN0b3JcIiwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFwiLlwiICsgdGhpc1tjdXJyZW50TmFtZV0uc3BsaXQoXCIgXCIpWzBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGFwcGx5U2V0dGluZ3MoaW5wdXQsIHNldHRpbmdzKSB7XG4gICAgREVGQVVMVFMudGVtcGxhdGVzID0gdGhpcy50ZW1wbGF0ZXM7XG4gICAgdmFyIG1peE1vZGVEZWZhdWx0cyA9IHtcbiAgICAgIGRyb3Bkb3duOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInRleHRcIlxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG1lcmdlZERlZmF1bHRzID0gZXh0ZW5kKHt9LCBERUZBVUxUUywgc2V0dGluZ3MubW9kZSA9PSAnbWl4JyA/IG1peE1vZGVEZWZhdWx0cyA6IHt9KTtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzID0gZXh0ZW5kKHt9LCBtZXJnZWREZWZhdWx0cywgc2V0dGluZ3MpO1xuICAgIF9zLmRpc2FibGVkID0gaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIF9zLnJlYWRvbmx5ID0gX3MucmVhZG9ubHkgfHwgaW5wdXQuaGFzQXR0cmlidXRlKCdyZWFkb25seScpO1xuICAgIF9zLnBsYWNlaG9sZGVyID0gZXNjYXBlSFRNTChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykgfHwgX3MucGxhY2Vob2xkZXIgfHwgXCJcIik7XG4gICAgX3MucmVxdWlyZWQgPSBpbnB1dC5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XG4gICAgdGhpcy5nZW5lcmF0ZUNsYXNzU2VsZWN0b3JzKF9zLmNsYXNzTmFtZXMpO1xuICAgIGlmIChfcy5kcm9wZG93bi5pbmNsdWRlU2VsZWN0ZWRUYWdzID09PSB1bmRlZmluZWQpIF9zLmRyb3Bkb3duLmluY2x1ZGVTZWxlY3RlZFRhZ3MgPSBfcy5kdXBsaWNhdGVzO1xuICAgIGlmICh0aGlzLmlzSUUpIF9zLmF1dG9Db21wbGV0ZSA9IGZhbHNlOyAvLyBJRSBnb2VzIGNyYXp5IGlmIHRoaXMgaXNuJ3QgZmFsc2VcblxuICAgIFtcIndoaXRlbGlzdFwiLCBcImJsYWNrbGlzdFwiXS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdmFyIGF0dHJWYWwgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIG5hbWUpO1xuICAgICAgaWYgKGF0dHJWYWwpIHtcbiAgICAgICAgYXR0clZhbCA9IGF0dHJWYWwuc3BsaXQoX3MuZGVsaW1pdGVycyk7XG4gICAgICAgIGlmIChhdHRyVmFsIGluc3RhbmNlb2YgQXJyYXkpIF9zW25hbWVdID0gYXR0clZhbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgZm9yIG9sZCB2ZXJzaW9uIG9mIFwiYXV0b0NvbXBsZXRlXCIgc2V0dGluZzpcbiAgICBpZiAoXCJhdXRvQ29tcGxldGVcIiBpbiBzZXR0aW5ncyAmJiAhaXNPYmplY3Qoc2V0dGluZ3MuYXV0b0NvbXBsZXRlKSkge1xuICAgICAgX3MuYXV0b0NvbXBsZXRlID0gREVGQVVMVFMuYXV0b0NvbXBsZXRlO1xuICAgICAgX3MuYXV0b0NvbXBsZXRlLmVuYWJsZWQgPSBzZXR0aW5ncy5hdXRvQ29tcGxldGU7XG4gICAgfVxuICAgIGlmIChfcy5tb2RlID09ICdtaXgnKSB7XG4gICAgICBfcy5wYXR0ZXJuID0gX3MucGF0dGVybiB8fCAvQC87XG4gICAgICBfcy5hdXRvQ29tcGxldGUucmlnaHRLZXkgPSB0cnVlO1xuICAgICAgX3MuZGVsaW1pdGVycyA9IHNldHRpbmdzLmRlbGltaXRlcnMgfHwgbnVsbDsgLy8gZGVmYXVsdCBkbGltaXRlcnMgaW4gbWl4LW1vZGUgbXVzdCBiZSBOVUxMXG5cbiAgICAgIC8vIG5lZWRlZCBmb3IgXCJmaWx0ZXJMaXN0SXRlbXNcIi4gVGhpcyBhc3N1bWVzIHRoZSB1c2VyIG1pZ2h0IGhhdmUgZm9yZ290dGVuIHRvIG1hbnVhbGx5XG4gICAgICAvLyBkZWZpbmUgdGhlIHNhbWUgdGVybSBpbiBcImRyb3Bkb3duLnNlYXJjaEtleXNcIiBhcyBkZWZpbmVkIGluIFwidGFnVGV4dFByb3BcIiBzZXR0aW5nLCBzb1xuICAgICAgLy8gYnkgYXV0b21hdGljYWxseSBhZGRpbmcgaXQsIHRhZ2lmeSBpcyBcImhlbHBpbmdcIiBvdXQsIGd1ZXNzaW5nIHRoZSBpbnRlc250aW9ucyBvZiB0aGUgZGV2ZWxvcGVyLlxuICAgICAgaWYgKF9zLnRhZ1RleHRQcm9wICYmICFfcy5kcm9wZG93bi5zZWFyY2hLZXlzLmluY2x1ZGVzKF9zLnRhZ1RleHRQcm9wKSkgX3MuZHJvcGRvd24uc2VhcmNoS2V5cy5wdXNoKF9zLnRhZ1RleHRQcm9wKTtcbiAgICB9XG4gICAgaWYgKGlucHV0LnBhdHRlcm4pIHRyeSB7XG4gICAgICBfcy5wYXR0ZXJuID0gbmV3IFJlZ0V4cChpbnB1dC5wYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgLy8gQ29udmVydCB0aGUgXCJkZWxpbWl0ZXJzXCIgc2V0dGluZyBpbnRvIGEgUkVHRVggb2JqZWN0XG4gICAgaWYgKF9zLmRlbGltaXRlcnMpIHtcbiAgICAgIF9zLl9kZWxpbWl0ZXJzID0gX3MuZGVsaW1pdGVycztcbiAgICAgIHRyeSB7XG4gICAgICAgIF9zLmRlbGltaXRlcnMgPSBuZXcgUmVnRXhwKHRoaXMuc2V0dGluZ3MuZGVsaW1pdGVycywgXCJnXCIpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gICAgaWYgKF9zLmRpc2FibGVkKSBfcy51c2VySW5wdXQgPSBmYWxzZTtcbiAgICB0aGlzLlRFWFRTID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIFRFWFRTKSwgX3MudGV4dHMgfHwge30pO1xuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSBkcm9wZG93biB3aWxsIGJlIHNob3duIG9uIFwiZm9jdXNcIiBhbmQgbm90IG9ubHkgYWZ0ZXIgdHlwaW5nIHNvbWV0aGluZyAoaW4gXCJzZWxlY3RcIiBtb2RlKVxuICAgIGlmIChfcy5tb2RlID09ICdzZWxlY3QnICYmICFzZXR0aW5ncy5kcm9wZG93bj8uZW5hYmxlZCB8fCAhX3MudXNlcklucHV0KSB7XG4gICAgICBfcy5kcm9wZG93bi5lbmFibGVkID0gMDtcbiAgICB9XG4gICAgX3MuZHJvcGRvd24uYXBwZW5kVGFyZ2V0ID0gc2V0dGluZ3MuZHJvcGRvd24/LmFwcGVuZFRhcmdldCB8fCBkb2N1bWVudC5ib2R5O1xuXG4gICAgLy8gZ2V0ICYgbWVyZ2UgcGVyc2lzdGVkIGRhdGEgd2l0aCBjdXJyZW50IGRhdGFcbiAgICBsZXQgcGVyc2lzdGVkV2hpdGVsaXN0ID0gdGhpcy5nZXRQZXJzaXN0ZWREYXRhKCd3aGl0ZWxpc3QnKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwZXJzaXN0ZWRXaGl0ZWxpc3QpKSB0aGlzLndoaXRlbGlzdCA9IEFycmF5LmlzQXJyYXkoX3Mud2hpdGVsaXN0KSA/IGNvbmNhdFdpdGhvdXREdXBzKF9zLndoaXRlbGlzdCwgcGVyc2lzdGVkV2hpdGVsaXN0KSA6IHBlcnNpc3RlZFdoaXRlbGlzdDtcbiAgfSxcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIHN0cmluZyBvZiBIVE1MIGVsZW1lbnQgYXR0cmlidXRlc1xyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFtUYWcgZGF0YV1cclxuICAgKi9cbiAgZ2V0QXR0cmlidXRlcyhkYXRhKSB7XG4gICAgdmFyIGF0dHJzID0gdGhpcy5nZXRDdXN0b21BdHRyaWJ1dGVzKGRhdGEpLFxuICAgICAgcyA9ICcnLFxuICAgICAgaztcbiAgICBmb3IgKGsgaW4gYXR0cnMpIHMgKz0gXCIgXCIgKyBrICsgKGRhdGFba10gIT09IHVuZGVmaW5lZCA/IGA9XCIke2F0dHJzW2tdfVwiYCA6IFwiXCIpO1xuICAgIHJldHVybiBzO1xuICB9LFxuICAvKipcclxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBhdHRyaWJ1dGVzIHRvIGJlIHVzZWQgZm9yIHRoZSB0ZW1wbGF0ZXNcclxuICAgKi9cbiAgZ2V0Q3VzdG9tQXR0cmlidXRlcyhkYXRhKSB7XG4gICAgLy8gb25seSBpdGVtcyB3aGljaCBhcmUgb2JqZWN0cyBoYXZlIHByb3BlcnRpZXMgd2hpY2ggY2FuIGJlIHVzZWQgYXMgYXR0cmlidXRlc1xuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiAnJztcbiAgICB2YXIgb3V0cHV0ID0ge30sXG4gICAgICBwcm9wTmFtZTtcbiAgICBmb3IgKHByb3BOYW1lIGluIGRhdGEpIHtcbiAgICAgIGlmIChwcm9wTmFtZS5zbGljZSgwLCAyKSAhPSAnX18nICYmIHByb3BOYW1lICE9ICdjbGFzcycgJiYgZGF0YS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgZGF0YVtwcm9wTmFtZV0gIT09IHVuZGVmaW5lZCkgb3V0cHV0W3Byb3BOYW1lXSA9IGVzY2FwZUhUTUwoZGF0YVtwcm9wTmFtZV0pO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LFxuICBzZXRTdGF0ZVNlbGVjdGlvbigpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gICAgLy8gc2F2ZSBsYXN0IHNlbGVjdGlvbiBwbGFjZSB0byBiZSBhYmxlIHRvIGluamVjdCBhbnl0aGluZyBmcm9tIG91dHNpZGUgdG8gdGhhdCBzcGVjaWZpYyBwbGFjZVxuICAgIHZhciBzZWwgPSB7XG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIHJhbmdlOiBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCAmJiBzZWxlY3Rpb24ucmFuZ2VDb3VudCAmJiBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKVxuICAgIH07XG4gICAgdGhpcy5zdGF0ZS5zZWxlY3Rpb24gPSBzZWw7XG4gICAgcmV0dXJuIHNlbDtcbiAgfSxcbiAgLyoqXHJcbiAgICogR2V0IHNwZWNpZmljIENTUyB2YXJpYWJsZXMgd2hpY2ggYXJlIHJlbGV2YW50IHRvIHRoaXMgc2NyaXB0IGFuZCBwYXJzZSB0aGVtIGFzIG5lZWRlZC5cclxuICAgKiBUaGUgcmVzdWx0IGlzIHNhdmVkIG9uIHRoZSBpbnN0YW5jZSBpbiBcInRoaXMuQ1NTVmFyc1wiXHJcbiAgICovXG4gIGdldENTU1ZhcnMoKSB7XG4gICAgdmFyIGNvbXBTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUodGhpcy5ET00uc2NvcGUsIG51bGwpO1xuICAgIGNvbnN0IGdldFByb3AgPSBuYW1lID0+IGNvbXBTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctLScgKyBuYW1lKTtcbiAgICBmdW5jdGlvbiBzZXByYXRlVW5pdEZyb21WYWx1ZShhKSB7XG4gICAgICBpZiAoIWEpIHJldHVybiB7fTtcbiAgICAgIGEgPSBhLnRyaW0oKS5zcGxpdCgnICcpWzBdO1xuICAgICAgdmFyIHVuaXQgPSBhLnNwbGl0KC9cXGQrL2cpLmZpbHRlcihuID0+IG4pLnBvcCgpLnRyaW0oKSxcbiAgICAgICAgdmFsdWUgPSArYS5zcGxpdCh1bml0KS5maWx0ZXIobiA9PiBuKVswXS50cmltKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdW5pdFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5DU1NWYXJzID0ge1xuICAgICAgdGFnSGlkZVRyYW5zaXRpb246IChfcmVmID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gX3JlZi52YWx1ZSxcbiAgICAgICAgICB1bml0ID0gX3JlZi51bml0O1xuICAgICAgICByZXR1cm4gdW5pdCA9PSAncycgPyB2YWx1ZSAqIDEwMDAgOiB2YWx1ZTtcbiAgICAgIH0pKHNlcHJhdGVVbml0RnJvbVZhbHVlKGdldFByb3AoJ3RhZy1oaWRlLXRyYW5zaXRpb24nKSkpXG4gICAgfTtcbiAgfSxcbiAgLyoqXHJcbiAgICogYnVpbGRzIHRoZSBIVE1MIG9mIHRoaXMgY29tcG9uZW50XHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSBpbnB1dCBbRE9NIGVsZW1lbnQgd2hpY2ggd291bGQgYmUgXCJ0cmFuc2Zvcm1lZFwiIGludG8gXCJUYWdzXCJdXHJcbiAgICovXG4gIGJ1aWxkKGlucHV0KSB7XG4gICAgdmFyIERPTSA9IHRoaXMuRE9NO1xuICAgIGlmICh0aGlzLnNldHRpbmdzLm1peE1vZGUuaW50ZWdyYXRlZCkge1xuICAgICAgRE9NLm9yaWdpbmFsSW5wdXQgPSBudWxsO1xuICAgICAgRE9NLnNjb3BlID0gaW5wdXQ7XG4gICAgICBET00uaW5wdXQgPSBpbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgRE9NLm9yaWdpbmFsSW5wdXQgPSBpbnB1dDtcbiAgICAgIERPTS5vcmlnaW5hbElucHV0X3RhYkluZGV4ID0gaW5wdXQudGFiSW5kZXg7XG4gICAgICBET00uc2NvcGUgPSB0aGlzLnBhcnNlVGVtcGxhdGUoJ3dyYXBwZXInLCBbaW5wdXQsIHRoaXMuc2V0dGluZ3NdKTtcbiAgICAgIERPTS5pbnB1dCA9IERPTS5zY29wZS5xdWVyeVNlbGVjdG9yKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5pbnB1dFNlbGVjdG9yKTtcbiAgICAgIGlucHV0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKERPTS5zY29wZSwgaW5wdXQpO1xuICAgICAgaW5wdXQudGFiSW5kZXggPSAtMTsgLy8gZG8gbm90IGFsbG93IGZvY3VzIG9yIHR5cGluZyBkaXJlY3RseSwgb25jZSB0YWdpZmllZFxuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiByZXZlcnQgYW55IGNoYW5nZXMgbWFkZSBieSB0aGlzIGNvbXBvbmVudFxyXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuZXZlbnRzLnVuYmluZEdsb2JhbC5jYWxsKHRoaXMpO1xuICAgIHRoaXMuRE9NLnNjb3BlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ET00uc2NvcGUpO1xuICAgIHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQudGFiSW5kZXggPSB0aGlzLkRPTS5vcmlnaW5hbElucHV0X3RhYkluZGV4O1xuICAgIGRlbGV0ZSB0aGlzLkRPTS5vcmlnaW5hbElucHV0Ll9fdGFnaWZ5O1xuICAgIHRoaXMuZHJvcGRvd24uaGlkZSh0cnVlKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kcm9wZG93bkhpZGVfX2JpbmRFdmVudHNUaW1lb3V0KTtcbiAgICBjbGVhckludGVydmFsKHRoaXMubGlzdGVuZXJzLm1haW4ub3JpZ2luYWxJbnB1dFZhbHVlT2JzZXJ2ZXJJbnRlcnZhbCk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIGlmIHRoZSBvcmlnaW5hbCBpbnB1dCBoYXMgYW55IHZhbHVlcywgYWRkIHRoZW0gYXMgdGFnc1xyXG4gICAqL1xuICBsb2FkT3JpZ2luYWxWYWx1ZXModmFsdWUpIHtcbiAgICB2YXIgbGFzdENoaWxkLFxuICAgICAgX3MgPSB0aGlzLnNldHRpbmdzO1xuXG4gICAgLy8gdGVtcG9yYXJpbHkgYmxvY2sgZmlyaW5nIHRoZSBcImNoYW5nZVwiIGV2ZW50IG9uIHRoZSBvcmlnaW5hbCBpbnB1dCB1bnRpbFxuICAgIC8vIHRoaXMgbWV0aG9kIGZpbmlzaCByZW1vdmluZyBjdXJyZW50IHZhbHVlIGFuZCBhZGRpbmcgYSBuZXcgb25lXG4gICAgdGhpcy5zdGF0ZS5ibG9ja0NoYW5nZUV2ZW50ID0gdHJ1ZTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcGVyc2lzdGVkT3JpZ2luYWxWYWx1ZSA9IHRoaXMuZ2V0UGVyc2lzdGVkRGF0YSgndmFsdWUnKTtcblxuICAgICAgLy8gaWYgdGhlIGZpZWxkIGFscmVhZHkgaGFzIGEgZmllbGQsIHRydXN0IGl0cyB0aGUgZGVzaXJlZFxuICAgICAgLy8gb25lIHRvIGJlIHJlbmRlcmVkIGFuZCBkbyBub3QgdXNlIHRoZSBwZXJzaXN0ZWQgb25lXG4gICAgICBpZiAocGVyc2lzdGVkT3JpZ2luYWxWYWx1ZSAmJiAhdGhpcy5ET00ub3JpZ2luYWxJbnB1dC52YWx1ZSkgdmFsdWUgPSBwZXJzaXN0ZWRPcmlnaW5hbFZhbHVlO2Vsc2UgdmFsdWUgPSBfcy5taXhNb2RlLmludGVncmF0ZWQgPyB0aGlzLkRPTS5pbnB1dC50ZXh0Q29udGVudCA6IHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQudmFsdWU7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsVGFncygpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKF9zLm1vZGUgPT0gJ21peCcpIHtcbiAgICAgICAgdGhpcy5wYXJzZU1peFRhZ3ModmFsdWUpO1xuICAgICAgICBsYXN0Q2hpbGQgPSB0aGlzLkRPTS5pbnB1dC5sYXN0Q2hpbGQ7XG5cbiAgICAgICAgLy8gZml4ZXMgYSBDaHJvbWUgYnVnLCB3aGVuIHRoZSBsYXN0IG5vZGUgaW4gYG1peC1tb2RlYCBpcyBhIHRhZywgdGhlIGNhcmV0IGFwcGVhcnMgYXQgdGhlIGZhci10b3AtdG9wLCBvdXRzaWRlIHRoZSBmaWVsZFxuICAgICAgICBpZiAoIWxhc3RDaGlsZCB8fCBsYXN0Q2hpbGQudGFnTmFtZSAhPSAnQlInKSB0aGlzLkRPTS5pbnB1dC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsICc8YnI+Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChKU09OLnBhcnNlKHZhbHVlKSBpbnN0YW5jZW9mIEFycmF5KSB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIHRoaXMuYWRkVGFncyh2YWx1ZSwgdHJ1ZSkuZm9yRWFjaCh0YWcgPT4gdGFnICYmIHRhZy5jbGFzc0xpc3QuYWRkKF9zLmNsYXNzTmFtZXMudGFnTm9BbmltYXRpb24pKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgdGhpcy5wb3N0VXBkYXRlKCk7XG4gICAgdGhpcy5zdGF0ZS5sYXN0T3JpZ2luYWxWYWx1ZVJlcG9ydGVkID0gX3MubWl4TW9kZS5pbnRlZ3JhdGVkID8gJycgOiB0aGlzLkRPTS5vcmlnaW5hbElucHV0LnZhbHVlO1xuICB9LFxuICBjbG9uZUV2ZW50KGUpIHtcbiAgICB2YXIgY2xvbmVkRXZlbnQgPSB7fTtcbiAgICBmb3IgKHZhciB2IGluIGUpIGlmICh2ICE9ICdwYXRoJykgY2xvbmVkRXZlbnRbdl0gPSBlW3ZdO1xuICAgIHJldHVybiBjbG9uZWRFdmVudDtcbiAgfSxcbiAgLyoqXHJcbiAgICogVG9vZ2xlIGdsb2JhbCBsb2FkaW5nIHN0YXRlIG9uL29mZlxyXG4gICAqIFVzZWZ1bCB3aGVuIGZldGNoaW5nIGFzeW5jIHdoaXRlbGlzdCB3aGlsZSB1c2VyIGlzIHR5cGluZ1xyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMb2FkaW5nXHJcbiAgICovXG4gIGxvYWRpbmcoaXNMb2FkaW5nKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0xvYWRpbmcgPSBpc0xvYWRpbmc7XG4gICAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgdG9nZ2xlIHdpdGggc2Vjb25kIHBhcmFtZXRlclxuICAgIHRoaXMuRE9NLnNjb3BlLmNsYXNzTGlzdFtpc0xvYWRpbmcgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnNjb3BlTG9hZGluZyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFRvb2dsZSBhIHRhZyBsb2FkaW5nIHN0YXRlIG9uL29mZlxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNMb2FkaW5nXHJcbiAgICovXG4gIHRhZ0xvYWRpbmcodGFnRWxtLCBpc0xvYWRpbmcpIHtcbiAgICBpZiAodGFnRWxtKVxuICAgICAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgdG9nZ2xlIHdpdGggc2Vjb25kIHBhcmFtZXRlclxuICAgICAgdGFnRWxtLmNsYXNzTGlzdFtpc0xvYWRpbmcgPyBcImFkZFwiIDogXCJyZW1vdmVcIl0odGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ0xvYWRpbmcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvKipcclxuICAgKiBUb2dnbGVzIGNsYXNzIG9uIHRoZSBtYWluIHRhZ2lmeSBjb250YWluZXIgKFwic2NvcGVcIilcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lXHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBmb3JjZVxyXG4gICAqL1xuICB0b2dnbGVDbGFzcyhjbGFzc05hbWUsIGZvcmNlKSB7XG4gICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT0gJ3N0cmluZycpIHRoaXMuRE9NLnNjb3BlLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lLCBmb3JjZSk7XG4gIH0sXG4gIHRvZ2dsZVNjb3BlVmFsaWRhdGlvbih2YWxpZGF0aW9uKSB7XG4gICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0aW9uID09PSB0cnVlIHx8IHZhbGlkYXRpb24gPT09IHVuZGVmaW5lZDsgLy8gaW5pdGlhbGx5IGl0IGlzIHVuZGVmaW5lZFxuXG4gICAgaWYgKCF0aGlzLnNldHRpbmdzLnJlcXVpcmVkICYmIHZhbGlkYXRpb24gJiYgdmFsaWRhdGlvbiA9PT0gdGhpcy5URVhUUy5lbXB0eSkgaXNWYWxpZCA9IHRydWU7XG4gICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnSW52YWxpZCwgIWlzVmFsaWQpO1xuICAgIHRoaXMuRE9NLnNjb3BlLnRpdGxlID0gaXNWYWxpZCA/ICcnIDogdmFsaWRhdGlvbjtcbiAgfSxcbiAgdG9nZ2xlRm9jdXNDbGFzcyhmb3JjZSkge1xuICAgIHRoaXMudG9nZ2xlQ2xhc3ModGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLmZvY3VzLCAhIWZvcmNlKTtcbiAgfSxcbiAgdHJpZ2dlckNoYW5nZUV2ZW50LFxuICBldmVudHMsXG4gIGZpeEZpcmVmb3hMYXN0VGFnTm9DYXJldCgpIHtcbiAgICByZXR1cm47IC8vIHNlZW1zIHRvIGJlIGZpeGVkIGluIG5ld2VyIHZlcnNpb24gb2YgRkYsIHNvIHJldGlyaW5nIGJlbG93IGNvZGUgKGZvciBub3cpXG4gICAgLy8gdmFyIGlucHV0RWxtID0gdGhpcy5ET00uaW5wdXRcblxuICAgIC8vIGlmKCB0aGlzLmlzRmlyZWZveCAmJiBpbnB1dEVsbS5jaGlsZE5vZGVzLmxlbmd0aCAmJiBpbnB1dEVsbS5sYXN0Q2hpbGQubm9kZVR5cGUgPT0gMSApe1xuICAgIC8vICAgICBpbnB1dEVsbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlxcdTIwMGJcIikpXG4gICAgLy8gICAgIHRoaXMuc2V0UmFuZ2VBdFN0YXJ0RW5kKHRydWUsIGlucHV0RWxtKVxuICAgIC8vICAgICByZXR1cm4gdHJ1ZVxuICAgIC8vIH1cbiAgfSxcblxuICAvKiogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU5MTU2ODcyLzEwNDM4MFxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gc3RhcnQgaW5kaWNhdGluZyB3aGVyZSB0byBwbGFjZSBpdCAoc3RhcnQgb3IgZW5kIG9mIHRoZSBub2RlKVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAgbm9kZSAgRE9NIG5vZGUgdG8gcGxhY2UgdGhlIGNhcmV0IGF0XHJcbiAgICovXG4gIHNldFJhbmdlQXRTdGFydEVuZChzdGFydCwgbm9kZSkge1xuICAgIGlmICghbm9kZSkgcmV0dXJuO1xuICAgIHN0YXJ0ID0gdHlwZW9mIHN0YXJ0ID09ICdudW1iZXInID8gc3RhcnQgOiAhIXN0YXJ0O1xuICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZCB8fCBub2RlO1xuICAgIHZhciBzZWwgPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcblxuICAgIC8vIGRvIG5vdCBmb3JjZSBjYXJldCBwbGFjZW1lbnQgaWYgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIChmb2N1cykgaXMgb24gYW5vdGhlciBlbGVtZW50IChub3QgdGhpcyB0YWdpZnkgaW5zdGFuY2UpXG4gICAgaWYgKHNlbC5mb2N1c05vZGUgaW5zdGFuY2VvZiBFbGVtZW50ICYmICF0aGlzLkRPTS5pbnB1dC5jb250YWlucyhzZWwuZm9jdXNOb2RlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBpZiAoc2VsLnJhbmdlQ291bnQgPj0gMSkge1xuICAgICAgICBbJ1N0YXJ0JywgJ0VuZCddLmZvckVhY2gocG9zID0+IHNlbC5nZXRSYW5nZUF0KDApW1wic2V0XCIgKyBwb3NdKG5vZGUsIHN0YXJ0ID8gc3RhcnQgOiBub2RlLmxlbmd0aCkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gY29uc29sZS53YXJuKFwiVGFnaWZ5OiBcIiwgZXJyKVxuICAgIH1cbiAgfSxcbiAgcGxhY2VDYXJldEFmdGVyTm9kZShub2RlKSB7XG4gICAgaWYgKCFub2RlIHx8ICFub2RlLnBhcmVudE5vZGUpIHJldHVybjtcbiAgICB2YXIgbmV4dFNpYmxpbmcgPSBub2RlLFxuICAgICAgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpLFxuICAgICAgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICBpZiAoc2VsLnJhbmdlQ291bnQpIHtcbiAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIobmV4dFNpYmxpbmcpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAvLyByYW5nZS5zZXRFbmRCZWZvcmUobmV4dFNpYmxpbmcgfHwgbm9kZSk7XG4gICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfSxcbiAgaW5zZXJ0QWZ0ZXJUYWcodGFnRWxtLCBuZXdOb2RlKSB7XG4gICAgbmV3Tm9kZSA9IG5ld05vZGUgfHwgdGhpcy5zZXR0aW5ncy5taXhNb2RlLmluc2VydEFmdGVyVGFnO1xuICAgIGlmICghdGFnRWxtIHx8ICF0YWdFbG0ucGFyZW50Tm9kZSB8fCAhbmV3Tm9kZSkgcmV0dXJuO1xuICAgIG5ld05vZGUgPSB0eXBlb2YgbmV3Tm9kZSA9PSAnc3RyaW5nJyA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5ld05vZGUpIDogbmV3Tm9kZTtcbiAgICB0YWdFbG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgdGFnRWxtLm5leHRTaWJsaW5nKTtcbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfSxcbiAgLy8gY29tcGFyZXMgYWxsIFwiX19vcmlnaW5hbERhdGFcIiBwcm9wZXJ0eSB2YWx1ZXMgd2l0aCB0aGUgY3VycmVudCBcInRhZ0RhdGFcIiBwcm9wZXJ0aWVzXG4gIC8vIGFuZCByZXR1cm5zIFwidHJ1ZVwiIGlmIHNvbWV0aGluZyBjaGFuZ2VkLlxuICBlZGl0VGFnQ2hhbmdlRGV0ZWN0ZWQodGFnRGF0YSkge1xuICAgIHZhciBvcmlnaW5hbERhdGEgPSB0YWdEYXRhLl9fb3JpZ2luYWxEYXRhO1xuICAgIGZvciAodmFyIHByb3AgaW4gb3JpZ2luYWxEYXRhKSBpZiAoIXRoaXMuZGF0YVByb3BzLmluY2x1ZGVzKHByb3ApICYmIHRhZ0RhdGFbcHJvcF0gIT0gb3JpZ2luYWxEYXRhW3Byb3BdKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7IC8vIG5vdCBjaGFuZ2VkXG4gIH0sXG5cbiAgLy8gcmV0dXJucyB0aGUgbm9kZSB3aGljaCBoYXMgdGhlIGFjdHVhbCB0YWcncyBjb250ZW50XG4gIGdldFRhZ1RleHROb2RlKHRhZ0VsbSkge1xuICAgIHJldHVybiB0YWdFbG0ucXVlcnlTZWxlY3Rvcih0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnVGV4dFNlbGVjdG9yKTtcbiAgfSxcbiAgLy8gc2V0cyB0aGUgdGV4dCBvZiBhIHRhZ1xuICBzZXRUYWdUZXh0Tm9kZSh0YWdFbG0sIEhUTUwpIHtcbiAgICB0aGlzLmdldFRhZ1RleHROb2RlKHRhZ0VsbSkuaW5uZXJIVE1MID0gZXNjYXBlSFRNTChIVE1MKTtcbiAgfSxcbiAgLyoqXHJcbiAgICogRW50ZXJzIGEgdGFnIGludG8gXCJlZGl0XCIgbW9kZVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gdGFnRWxtIHRoZSB0YWcgZWxlbWVudCB0byBlZGl0LiBpZiBub3RoaW5nIHNwZWNpZmllZCwgdXNlIGxhc3QgbGFzdFxyXG4gICAqL1xuICBlZGl0VGFnKHRhZ0VsbSwgb3B0cykge1xuICAgIHRhZ0VsbSA9IHRhZ0VsbSB8fCB0aGlzLmdldExhc3RUYWcoKTtcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICB0aGlzLmRyb3Bkb3duLmhpZGUoKTtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgZWRpdGFibGVFbG0gPSB0aGlzLmdldFRhZ1RleHROb2RlKHRhZ0VsbSksXG4gICAgICB0YWdJZHggPSB0aGlzLmdldE5vZGVJbmRleCh0YWdFbG0pLFxuICAgICAgdGFnRGF0YSA9IGdldFNldFRhZ0RhdGEodGFnRWxtKSxcbiAgICAgIF9DQiA9IHRoaXMuZXZlbnRzLmNhbGxiYWNrcyxcbiAgICAgIHRoYXQgPSB0aGlzLFxuICAgICAgaXNWYWxpZCA9IHRydWUsXG4gICAgICBkZWxheWVkX29uRWRpdFRhZ0JsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gX0NCLm9uRWRpdFRhZ0JsdXIuY2FsbCh0aGF0LCB0aGF0LmdldFRhZ1RleHROb2RlKHRhZ0VsbSkpKTtcbiAgICAgIH07XG4gICAgaWYgKCFlZGl0YWJsZUVsbSkge1xuICAgICAgY29uc29sZS53YXJuKCdDYW5ub3QgZmluZCBlbGVtZW50IGluIFRhZyB0ZW1wbGF0ZTogLicsIF9zLmNsYXNzTmFtZXMudGFnVGV4dFNlbGVjdG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRhZ0RhdGEgaW5zdGFuY2VvZiBPYmplY3QgJiYgXCJlZGl0YWJsZVwiIGluIHRhZ0RhdGEgJiYgIXRhZ0RhdGEuZWRpdGFibGUpIHJldHVybjtcblxuICAgIC8vIGNhY2hlIHRoZSBvcmlnaW5hbCBkYXRhLCBvbiB0aGUgRE9NIG5vZGUsIGJlZm9yZSBhbnkgbW9kaWZpY2F0aW9uIG9jdXJzLCBmb3IgcG9zc2libGUgcmV2ZXJ0XG4gICAgdGFnRGF0YSA9IGdldFNldFRhZ0RhdGEodGFnRWxtLCB7XG4gICAgICBfX29yaWdpbmFsRGF0YTogZXh0ZW5kKHt9LCB0YWdEYXRhKSxcbiAgICAgIF9fb3JpZ2luYWxIVE1MOiB0YWdFbG0uY2xvbmVOb2RlKHRydWUpXG4gICAgfSk7XG4gICAgLy8gcmUtc2V0IHRoZSB0YWdpZnkgY3VzdG9tLXByb3Agb24gdGhlIGNsb25lcyBlbGVtZW50IChiZWNhdXNlIGNsb25pbmcgcmVtb3ZlZCBpdClcbiAgICBnZXRTZXRUYWdEYXRhKHRhZ0RhdGEuX19vcmlnaW5hbEhUTUwsIHRhZ0RhdGEuX19vcmlnaW5hbERhdGEpO1xuICAgIGVkaXRhYmxlRWxtLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgdHJ1ZSk7XG4gICAgdGFnRWxtLmNsYXNzTGlzdC5hZGQoX3MuY2xhc3NOYW1lcy50YWdFZGl0aW5nKTtcbiAgICBlZGl0YWJsZUVsbS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIF9DQi5vbkVkaXRUYWdGb2N1cy5iaW5kKHRoaXMsIHRhZ0VsbSkpO1xuICAgIGVkaXRhYmxlRWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBkZWxheWVkX29uRWRpdFRhZ0JsdXIpO1xuICAgIGVkaXRhYmxlRWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgX0NCLm9uRWRpdFRhZ0lucHV0LmJpbmQodGhpcywgZWRpdGFibGVFbG0pKTtcbiAgICBlZGl0YWJsZUVsbS5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIF9DQi5vbkVkaXRUYWdQYXN0ZS5iaW5kKHRoaXMsIGVkaXRhYmxlRWxtKSk7XG4gICAgZWRpdGFibGVFbG0uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4gX0NCLm9uRWRpdFRhZ2tleWRvd24uY2FsbCh0aGlzLCBlLCB0YWdFbG0pKTtcbiAgICBlZGl0YWJsZUVsbS5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0JywgX0NCLm9uQ29tcG9zaXRpb25TdGFydC5iaW5kKHRoaXMpKTtcbiAgICBlZGl0YWJsZUVsbS5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbmVuZCcsIF9DQi5vbkNvbXBvc2l0aW9uRW5kLmJpbmQodGhpcykpO1xuICAgIGlmICghb3B0cy5za2lwVmFsaWRhdGlvbikgaXNWYWxpZCA9IHRoaXMuZWRpdFRhZ1RvZ2dsZVZhbGlkaXR5KHRhZ0VsbSk7XG4gICAgZWRpdGFibGVFbG0ub3JpZ2luYWxJc1ZhbGlkID0gaXNWYWxpZDtcbiAgICB0aGlzLnRyaWdnZXIoXCJlZGl0OnN0YXJ0XCIsIHtcbiAgICAgIHRhZzogdGFnRWxtLFxuICAgICAgaW5kZXg6IHRhZ0lkeCxcbiAgICAgIGRhdGE6IHRhZ0RhdGEsXG4gICAgICBpc1ZhbGlkXG4gICAgfSk7XG4gICAgZWRpdGFibGVFbG0uZm9jdXMoKTtcbiAgICB0aGlzLnNldFJhbmdlQXRTdGFydEVuZChmYWxzZSwgZWRpdGFibGVFbG0pOyAvLyBwbGFjZSB0aGUgY2FyZXQgYXQgdGhlIEVORCBvZiB0aGUgZWRpdGFibGUgdGFnIHRleHRcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvKipcclxuICAgKiBJZiBhIHRhZyBpcyBpbnZhbGlkLCBmb3IgYW55IHJlYXNvbiwgc2V0IGl0cyBjbGFzcyB0byBcIm5vdCBhbGxvd2VkXCIgKHNlZSBkZWZhdWx0cyBmaWxlKVxyXG4gICAqIEBwYXJhbSB7Tm9kZX0gdGFnRWxtIHJlcXVpcmVkXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0RhdGEgb3B0aW9uYWxcclxuICAgKiBAcmV0dXJucyB0cnVlIGlmIHZhbGlkLCBhIHN0cmluZyAocmVhc29uKSBpZiBub3RcclxuICAgKi9cbiAgZWRpdFRhZ1RvZ2dsZVZhbGlkaXR5KHRhZ0VsbSwgdGFnRGF0YSkge1xuICAgIHZhciB0YWdEYXRhID0gdGFnRGF0YSB8fCBnZXRTZXRUYWdEYXRhKHRhZ0VsbSksXG4gICAgICBpc1ZhbGlkO1xuICAgIGlmICghdGFnRGF0YSkge1xuICAgICAgY29uc29sZS53YXJuKFwidGFnIGhhcyBubyBkYXRhOiBcIiwgdGFnRWxtLCB0YWdEYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaXNWYWxpZCA9ICEoXCJfX2lzVmFsaWRcIiBpbiB0YWdEYXRhKSB8fCB0YWdEYXRhLl9faXNWYWxpZCA9PT0gdHJ1ZTtcbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlVGFnc0Zyb21WYWx1ZSh0YWdFbG0pO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgLy90aGlzLnZhbGlkYXRlVGFnKHRhZ0RhdGEpO1xuXG4gICAgdGFnRWxtLmNsYXNzTGlzdC50b2dnbGUodGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ05vdEFsbG93ZWQsICFpc1ZhbGlkKTtcbiAgICByZXR1cm4gdGFnRGF0YS5fX2lzVmFsaWQ7XG4gIH0sXG4gIG9uRWRpdFRhZ0RvbmUodGFnRWxtLCB0YWdEYXRhKSB7XG4gICAgdGFnRWxtID0gdGFnRWxtIHx8IHRoaXMuc3RhdGUuZWRpdGluZy5zY29wZTtcbiAgICB0YWdEYXRhID0gdGFnRGF0YSB8fCB7fTtcbiAgICB2YXIgZXZlbnREYXRhID0ge1xuICAgICAgdGFnOiB0YWdFbG0sXG4gICAgICBpbmRleDogdGhpcy5nZXROb2RlSW5kZXgodGFnRWxtKSxcbiAgICAgIHByZXZpb3VzRGF0YTogZ2V0U2V0VGFnRGF0YSh0YWdFbG0pLFxuICAgICAgZGF0YTogdGFnRGF0YVxuICAgIH07XG4gICAgdGhpcy50cmlnZ2VyKFwiZWRpdDpiZWZvcmVVcGRhdGVcIiwgZXZlbnREYXRhLCB7XG4gICAgICBjbG9uZURhdGE6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy5zdGF0ZS5lZGl0aW5nID0gZmFsc2U7XG4gICAgZGVsZXRlIHRhZ0RhdGEuX19vcmlnaW5hbERhdGE7XG4gICAgZGVsZXRlIHRhZ0RhdGEuX19vcmlnaW5hbEhUTUw7XG4gICAgaWYgKHRhZ0VsbSAmJiB0YWdEYXRhW3RoaXMuc2V0dGluZ3MudGFnVGV4dFByb3BdKSB7XG4gICAgICB0YWdFbG0gPSB0aGlzLnJlcGxhY2VUYWcodGFnRWxtLCB0YWdEYXRhKTtcbiAgICAgIHRoaXMuZWRpdFRhZ1RvZ2dsZVZhbGlkaXR5KHRhZ0VsbSwgdGFnRGF0YSk7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hMTF5LmZvY3VzYWJsZVRhZ3MpIHRhZ0VsbS5mb2N1cygpO2Vsc2VcbiAgICAgICAgLy8gcGxhY2UgY2FyZXQgYWZ0ZXIgZWRpdGVkIHRhZ1xuICAgICAgICB0aGlzLnBsYWNlQ2FyZXRBZnRlck5vZGUodGFnRWxtKTtcbiAgICB9IGVsc2UgaWYgKHRhZ0VsbSkgdGhpcy5yZW1vdmVUYWdzKHRhZ0VsbSk7XG4gICAgdGhpcy50cmlnZ2VyKFwiZWRpdDp1cGRhdGVkXCIsIGV2ZW50RGF0YSk7XG4gICAgdGhpcy5kcm9wZG93bi5oaWRlKCk7XG5cbiAgICAvLyBjaGVjayBpZiBhbnkgb2YgdGhlIGN1cnJlbnQgdGFncyB3aGljaCBtaWdodCBoYXZlIGJlZW4gbWFya2VkIGFzIFwiZHVwbGljYXRlXCIgc2hvdWxkIGJlIG5vdyB1bi1tYXJrZWRcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5rZWVwSW52YWxpZFRhZ3MpIHRoaXMucmVDaGVja0ludmFsaWRUYWdzKCk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFJlcGxhY2VzIGFuIGV4aXNpdG5nIHRhZyB3aXRoIGEgbmV3IG9uZS4gVXNlZCBmb3IgdXBkYXRpbmcgYSB0YWcncyBkYXRhXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0VsbSAgW0RPTSBub2RlIHRvIHJlcGxhY2VdXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0RhdGEgW2RhdGEgdG8gY3JlYXRlIG5ldyB0YWcgZnJvbV1cclxuICAgKi9cbiAgcmVwbGFjZVRhZyh0YWdFbG0sIHRhZ0RhdGEpIHtcbiAgICBpZiAoIXRhZ0RhdGEgfHwgIXRhZ0RhdGEudmFsdWUpIHRhZ0RhdGEgPSB0YWdFbG0uX190YWdpZnlUYWdEYXRhO1xuXG4gICAgLy8gaWYgdGFnIGlzIGludmFsaWQsIG1ha2UgdGhlIGFjY29yZGluZyBjaGFuZ2VzIGluIHRoZSBuZXdseSBjcmVhdGVkIGVsZW1lbnRcbiAgICBpZiAodGFnRGF0YS5fX2lzVmFsaWQgJiYgdGFnRGF0YS5fX2lzVmFsaWQgIT0gdHJ1ZSkgZXh0ZW5kKHRhZ0RhdGEsIHRoaXMuZ2V0SW52YWxpZFRhZ0F0dHJzKHRhZ0RhdGEsIHRhZ0RhdGEuX19pc1ZhbGlkKSk7XG4gICAgdmFyIG5ld1RhZ0VsbSA9IHRoaXMuY3JlYXRlVGFnRWxlbSh0YWdEYXRhKTtcblxuICAgIC8vIHVwZGF0ZSBET01cbiAgICB0YWdFbG0ucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VGFnRWxtLCB0YWdFbG0pO1xuICAgIHRoaXMudXBkYXRlVmFsdWVCeURPTVRhZ3MoKTtcbiAgICByZXR1cm4gbmV3VGFnRWxtO1xuICB9LFxuICAvKipcclxuICAgKiB1cGRhdGUgXCJ2YWx1ZVwiIChBcnJheSBvZiBPYmplY3RzKSBieSB0cmF2ZXJzaW5nIGFsbCB2YWxpZCB0YWdzXHJcbiAgICovXG4gIHVwZGF0ZVZhbHVlQnlET01UYWdzKCkge1xuICAgIHRoaXMudmFsdWUubGVuZ3RoID0gMDtcbiAgICBbXS5mb3JFYWNoLmNhbGwodGhpcy5nZXRUYWdFbG1zKCksIG5vZGUgPT4ge1xuICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy50YWdOb3RBbGxvd2VkLnNwbGl0KCcgJylbMF0pKSByZXR1cm47XG4gICAgICB0aGlzLnZhbHVlLnB1c2goZ2V0U2V0VGFnRGF0YShub2RlKSk7XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfSxcbiAgLyoqXHJcbiAgICogaW5qZWN0cyBub2Rlcy90ZXh0IGF0IGNhcmV0IHBvc2l0aW9uLCB3aGljaCBpcyBzYXZlZCBvbiB0aGUgXCJzdGF0ZVwiIHdoZW4gXCJibHVyXCIgZXZlbnQgZ2V0cyB0cmlnZ2VyZWRcclxuICAgKiBAcGFyYW0ge05vZGV9IGluamVjdGVkTm9kZSBbdGhlIG5vZGUgdG8gaW5qZWN0IGF0IHRoZSBjYXJldCBwb3NpdGlvbl1cclxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VsZWN0aW9uIFtvcHRpb25hbCByYW5nZSBPYmplY3QuIG11c3QgaGF2ZSBcImFuY2hvck5vZGVcIiAmIFwiYW5jaG9yT2Zmc2V0XCJdXHJcbiAgICovXG4gIGluamVjdEF0Q2FyZXQoaW5qZWN0ZWROb2RlLCByYW5nZSkge1xuICAgIHJhbmdlID0gcmFuZ2UgfHwgdGhpcy5zdGF0ZS5zZWxlY3Rpb24/LnJhbmdlO1xuICAgIGlmICghcmFuZ2UgJiYgaW5qZWN0ZWROb2RlKSB7XG4gICAgICB0aGlzLmFwcGVuZE1peFRhZ3MoaW5qZWN0ZWROb2RlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpbmplY3RBdENhcmV0KGluamVjdGVkTm9kZSwgcmFuZ2UpO1xuICAgIHRoaXMuc2V0UmFuZ2VBdFN0YXJ0RW5kKGZhbHNlLCBpbmplY3RlZE5vZGUpO1xuICAgIHRoaXMudXBkYXRlVmFsdWVCeURPTVRhZ3MoKTsgLy8gdXBkYXRlcyBpbnRlcm5hbCBcInRoaXMudmFsdWVcIlxuICAgIHRoaXMudXBkYXRlKCk7IC8vIHVwZGF0ZXMgb3JpZ2luYWwgaW5wdXQvdGV4dGFyZWFcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvKipcclxuICAgKiBpbnB1dCBicmlkZ2UgZm9yIGFjY2Vzc2luZyAmIHNldHRpbmdcclxuICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAqL1xuICBpbnB1dDoge1xuICAgIHNldCgpIHtcbiAgICAgIGxldCBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgICAgIGxldCB1cGRhdGVET00gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICB2YXIgaGlkZURyb3Bkb3duID0gdGhpcy5zZXR0aW5ncy5kcm9wZG93bi5jbG9zZU9uU2VsZWN0O1xuICAgICAgdGhpcy5zdGF0ZS5pbnB1dFRleHQgPSBzO1xuICAgICAgaWYgKHVwZGF0ZURPTSkgdGhpcy5ET00uaW5wdXQuaW5uZXJIVE1MID0gZXNjYXBlSFRNTChcIlwiICsgcyk7XG4gICAgICBpZiAoIXMgJiYgaGlkZURyb3Bkb3duKSB0aGlzLmRyb3Bkb3duLmhpZGUuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuaW5wdXQuYXV0b2NvbXBsZXRlLnN1Z2dlc3QuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMuaW5wdXQudmFsaWRhdGUuY2FsbCh0aGlzKTtcbiAgICB9LFxuICAgIHJhdygpIHtcbiAgICAgIHJldHVybiB0aGlzLkRPTS5pbnB1dC50ZXh0Q29udGVudDtcbiAgICB9LFxuICAgIC8qKlxyXG4gICAgICogTWFya3MgdGhlIHRhZ2lmeSdzIGlucHV0IGFzIFwiaW52YWxpZFwiIGlmIHRoZSB2YWx1ZSBkaWQgbm90IHBhc3MgXCJ2YWxpZGF0ZVRhZygpXCJcclxuICAgICAqL1xuICAgIHZhbGlkYXRlKCkge1xuICAgICAgdmFyIGlzVmFsaWQgPSAhdGhpcy5zdGF0ZS5pbnB1dFRleHQgfHwgdGhpcy52YWxpZGF0ZVRhZyh7XG4gICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLmlucHV0VGV4dFxuICAgICAgfSkgPT09IHRydWU7XG4gICAgICB0aGlzLkRPTS5pbnB1dC5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy5pbnB1dEludmFsaWQsICFpc1ZhbGlkKTtcbiAgICAgIHJldHVybiBpc1ZhbGlkO1xuICAgIH0sXG4gICAgLy8gcmVtb3ZlIGFueSBjaGlsZCBET00gZWxlbWVudHMgdGhhdCBhcmVuJ3Qgb2YgdHlwZSBURVhUIChsaWtlIDxicj4pXG4gICAgbm9ybWFsaXplKG5vZGUpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5vZGUgfHwgdGhpcy5ET00uaW5wdXQsXG4gICAgICAgIC8vLmNsb25lTm9kZSh0cnVlKSxcbiAgICAgICAgdiA9IFtdO1xuXG4gICAgICAvLyB3aGVuIGEgdGV4dCB3YXMgcGFzdGVkIGluIEZGLCB0aGUgXCJ0aGlzLkRPTS5pbnB1dFwiIGVsZW1lbnQgd2lsbCBoYXZlIDxicj4gYnV0IG5vIG5ld2xpbmUgc3ltYm9scyAoXFxuKSwgYW5kIHRoaXMgd2lsbFxuICAgICAgLy8gcmVzdWx0IGluIHRhZ3Mgbm90IGJlaW5nIHByb3Blcmx5IGNyZWF0ZWQgaWYgb25lIHdpc2hlcyB0byBjcmVhdGUgYSBzZXBhcmF0ZSB0YWcgcGVyIG5ld2xpbmUuXG4gICAgICBjbG9uZS5jaGlsZE5vZGVzLmZvckVhY2gobiA9PiBuLm5vZGVUeXBlID09IDMgJiYgdi5wdXNoKG4ubm9kZVZhbHVlKSk7XG4gICAgICB2ID0gdi5qb2luKFwiXFxuXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gXCJkZWxpbWl0ZXJzXCIgbWlnaHQgYmUgb2YgYSBub24tcmVnZXggdmFsdWUsIHdoZXJlIHRoaXMgd2lsbCBmYWlsIChcIlRhZ3MgV2l0aCBQcm9wZXJ0aWVzXCIgZXhhbXBsZSBpbiBkZW1vIHBhZ2UpOlxuICAgICAgICB2ID0gdi5yZXBsYWNlKC8oPzpcXHJcXG58XFxyfFxcbikvZywgdGhpcy5zZXR0aW5ncy5kZWxpbWl0ZXJzLnNvdXJjZS5jaGFyQXQoMCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgdiA9IHYucmVwbGFjZSgvXFxzL2csICcgJyk7IC8vIHJlcGxhY2UgTkJTUHMgd2l0aCBzcGFjZXMgY2hhcmFjdGVyc1xuXG4gICAgICByZXR1cm4gdGhpcy50cmltKHYpO1xuICAgIH0sXG4gICAgLyoqXHJcbiAgICAgKiBzdWdnZXN0IHRoZSByZXN0IG9mIHRoZSBpbnB1dCdzIHZhbHVlICh2aWEgQ1NTIFwiOjphZnRlclwiIHVzaW5nIFwiY29udGVudDphdHRyKC4uLilcIilcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gcyBbZGVzY3JpcHRpb25dXHJcbiAgICAgKi9cbiAgICBhdXRvY29tcGxldGU6IHtcbiAgICAgIHN1Z2dlc3QoZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuYXV0b0NvbXBsZXRlLmVuYWJsZWQpIHJldHVybjtcbiAgICAgICAgZGF0YSA9IGRhdGEgfHwge1xuICAgICAgICAgIHZhbHVlOiAnJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT0gJ3N0cmluZycpIGRhdGEgPSB7XG4gICAgICAgICAgdmFsdWU6IGRhdGFcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN1Z2dlc3RlZFRleHQgPSB0aGlzLmRyb3Bkb3duLmdldE1hcHBlZFZhbHVlKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHN1Z2dlc3RlZFRleHQgPT09ICdudW1iZXInKSByZXR1cm47XG4gICAgICAgIHZhciBzdWdnZXN0aW9uU3RhcnQgPSBzdWdnZXN0ZWRUZXh0LnN1YnN0cigwLCB0aGlzLnN0YXRlLmlucHV0VGV4dC5sZW5ndGgpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgc3VnZ2VzdGlvblRyaW1tZWQgPSBzdWdnZXN0ZWRUZXh0LnN1YnN0cmluZyh0aGlzLnN0YXRlLmlucHV0VGV4dC5sZW5ndGgpO1xuICAgICAgICBpZiAoIXN1Z2dlc3RlZFRleHQgfHwgIXRoaXMuc3RhdGUuaW5wdXRUZXh0IHx8IHN1Z2dlc3Rpb25TdGFydCAhPSB0aGlzLnN0YXRlLmlucHV0VGV4dC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgdGhpcy5ET00uaW5wdXQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zdWdnZXN0XCIpO1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0YXRlLmlucHV0U3VnZ2VzdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLkRPTS5pbnB1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN1Z2dlc3RcIiwgc3VnZ2VzdGlvblRyaW1tZWQpO1xuICAgICAgICAgIHRoaXMuc3RhdGUuaW5wdXRTdWdnZXN0aW9uID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8qKlxyXG4gICAgICAgKiBzZXRzIHRoZSBzdWdnZXN0ZWQgdGV4dCBhcyB0aGUgaW5wdXQncyB2YWx1ZSAmIGNsZWFudXAgdGhlIHN1Z2dlc3Rpb24gYXV0b2NvbXBsZXRlLlxyXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gcyBbdGV4dF1cclxuICAgICAgICovXG4gICAgICBzZXQocykge1xuICAgICAgICB2YXIgZGF0YVN1Z2dlc3QgPSB0aGlzLkRPTS5pbnB1dC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3VnZ2VzdCcpLFxuICAgICAgICAgIHN1Z2dlc3Rpb24gPSBzIHx8IChkYXRhU3VnZ2VzdCA/IHRoaXMuc3RhdGUuaW5wdXRUZXh0ICsgZGF0YVN1Z2dlc3QgOiBudWxsKTtcbiAgICAgICAgaWYgKHN1Z2dlc3Rpb24pIHtcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlID09ICdtaXgnKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VUZXh0V2l0aE5vZGUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5zdGF0ZS50YWcucHJlZml4ICsgc3VnZ2VzdGlvbikpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0LnNldC5jYWxsKHRoaXMsIHN1Z2dlc3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5zZXRSYW5nZUF0U3RhcnRFbmQoZmFsc2UsIHRoaXMuRE9NLmlucHV0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbnB1dC5hdXRvY29tcGxldGUuc3VnZ2VzdC5jYWxsKHRoaXMpO1xuICAgICAgICAgIHRoaXMuZHJvcGRvd24uaGlkZSgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxyXG4gICAqIHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSB0aGUgdGFnRGF0YSB3aXRoaW4gdGhlIFwidGhpcy52YWx1ZVwiIGFycmF5IGNvbGxlY3Rpb24uXHJcbiAgICogc2luY2UgdmFsdWVzIHNob3VsZCBiZSB1bmlxdWUsIGl0IGlzIHN1ZmZpY2UgdG8gb25seSBzZWFyY2ggYnkgXCJ2YWx1ZVwiIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0RhdGFcclxuICAgKi9cbiAgZ2V0VGFnSWR4KHRhZ0RhdGEpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLl9fdGFnSWQgPT0gKHRhZ0RhdGEgfHwge30pLl9fdGFnSWQpO1xuICB9LFxuICBnZXROb2RlSW5kZXgobm9kZSkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKG5vZGUpIHdoaWxlIChub2RlID0gbm9kZS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSBpbmRleCsrO1xuICAgIHJldHVybiBpbmRleDtcbiAgfSxcbiAgZ2V0VGFnRWxtcygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3Nlc3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBjbGFzc2Vzc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgdmFyIGNsYXNzbmFtZSA9ICcuJyArIFsuLi50aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnLnNwbGl0KCcgJyksIC4uLmNsYXNzZXNzXS5qb2luKCcuJyk7XG4gICAgcmV0dXJuIFtdLnNsaWNlLmNhbGwodGhpcy5ET00uc2NvcGUucXVlcnlTZWxlY3RvckFsbChjbGFzc25hbWUpKTsgLy8gY29udmVydCBub2RlTGlzdCB0byBBcnJheSAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMTk5NjI3LzEwNDM4MFxuICB9LFxuXG4gIC8qKlxyXG4gICAqIGdldHMgdGhlIGxhc3Qgbm9uLXJlYWRvbmx5LCBub3QtaW4tdGhlLXByb2NjZXNzLW9mLXJlbW92YWwgdGFnXHJcbiAgICovXG4gIGdldExhc3RUYWcoKSB7XG4gICAgdmFyIGxhc3RUYWcgPSB0aGlzLkRPTS5zY29wZS5xdWVyeVNlbGVjdG9yQWxsKGAke3RoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy50YWdTZWxlY3Rvcn06bm90KC4ke3RoaXMuc2V0dGluZ3MuY2xhc3NOYW1lcy50YWdIaWRlfSk6bm90KFtyZWFkb25seV0pYCk7XG4gICAgcmV0dXJuIGxhc3RUYWdbbGFzdFRhZy5sZW5ndGggLSAxXTtcbiAgfSxcbiAgLyoqXHJcbiAgICogU2VhcmNoZXMgaWYgYW55IHRhZyB3aXRoIGEgY2VydGFpbiB2YWx1ZSBhbHJlYWR5IGV4aXNcclxuICAgKiBAcGFyYW0gIHtTdHJpbmcvT2JqZWN0fSB2YWx1ZSBbdGV4dCB2YWx1ZSAvIHRhZyBkYXRhIG9iamVjdF1cclxuICAgKiBAcGFyYW0gIHtCb29sZWFufSBjYXNlU2Vuc2l0aXZlXHJcbiAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAqL1xuICBpc1RhZ0R1cGxpY2F0ZSh2YWx1ZSwgY2FzZVNlbnNpdGl2ZSwgdGFnSWQpIHtcbiAgICB2YXIgZHVwc0NvdW50ID0gMCxcbiAgICAgIF9zID0gdGhpcy5zZXR0aW5ncztcblxuICAgIC8vIGR1cGxpY2F0aW9ucyBhcmUgaXJyZWxldmFudCBmb3IgdGhpcyBzY2VuYXJpb1xuICAgIGlmIChfcy5tb2RlID09ICdzZWxlY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLnZhbHVlKSB7XG4gICAgICBsZXQgaXNTYW1lU3RyID0gc2FtZVN0cih0aGlzLnRyaW0oXCJcIiArIHZhbHVlKSwgaXRlbS52YWx1ZSwgY2FzZVNlbnNpdGl2ZSk7XG4gICAgICBpZiAoaXNTYW1lU3RyICYmIHRhZ0lkICE9IGl0ZW0uX190YWdJZCkgZHVwc0NvdW50Kys7XG4gICAgfVxuICAgIHJldHVybiBkdXBzQ291bnQ7XG4gIH0sXG4gIGdldFRhZ0luZGV4QnlWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBpbmRpY2VzID0gW107XG4gICAgdGhpcy5nZXRUYWdFbG1zKCkuZm9yRWFjaCgodGFnRWxtLCBpKSA9PiB7XG4gICAgICBpZiAoc2FtZVN0cih0aGlzLnRyaW0odGFnRWxtLnRleHRDb250ZW50KSwgdmFsdWUsIHRoaXMuc2V0dGluZ3MuZHJvcGRvd24uY2FzZVNlbnNpdGl2ZSkpIGluZGljZXMucHVzaChpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaW5kaWNlcztcbiAgfSxcbiAgZ2V0VGFnRWxtQnlWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciB0YWdJZHggPSB0aGlzLmdldFRhZ0luZGV4QnlWYWx1ZSh2YWx1ZSlbMF07XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGFnRWxtcygpW3RhZ0lkeF07XG4gIH0sXG4gIC8qKlxyXG4gICAqIFRlbXBvcmFyaWx5IG1hcmtzIGEgdGFnIGVsZW1lbnQgKGJ5IHZhbHVlIG9yIE5vZGUgYXJndW1lbnQpXHJcbiAgICogQHBhcmFtICB7T2JqZWN0fSB0YWdFbG0gW2Egc3BlY2lmaWMgXCJ0YWdcIiBlbGVtZW50IHRvIGNvbXBhcmUgdG8gdGhlIG90aGVyIHRhZyBlbGVtZW50cyBzaWJsaW5nc11cclxuICAgKi9cbiAgZmxhc2hUYWcodGFnRWxtKSB7XG4gICAgaWYgKHRhZ0VsbSkge1xuICAgICAgdGFnRWxtLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ0ZsYXNoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0YWdFbG0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLnNldHRpbmdzLmNsYXNzTmFtZXMudGFnRmxhc2gpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9XG4gIH0sXG4gIC8qKlxyXG4gICAqIGNoZWNrcyBpZiB0ZXh0IGlzIGluIHRoZSBibGFja2xpc3RcclxuICAgKi9cbiAgaXNUYWdCbGFja2xpc3RlZCh2KSB7XG4gICAgdiA9IHRoaXMudHJpbSh2LnRvTG93ZXJDYXNlKCkpO1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmJsYWNrbGlzdC5maWx0ZXIoeCA9PiAoXCJcIiArIHgpLnRvTG93ZXJDYXNlKCkgPT0gdikubGVuZ3RoO1xuICB9LFxuICAvKipcclxuICAgKiBjaGVja3MgaWYgdGV4dCBpcyBpbiB0aGUgd2hpdGVsaXN0XHJcbiAgICovXG4gIGlzVGFnV2hpdGVsaXN0ZWQodikge1xuICAgIHJldHVybiAhIXRoaXMuZ2V0V2hpdGVsaXN0SXRlbSh2KTtcbiAgICAvKlxyXG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Mud2hpdGVsaXN0LnNvbWUoaXRlbSA9PlxyXG4gICAgICAgIHR5cGVvZiB2ID09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgID8gc2FtZVN0cih0aGlzLnRyaW0odiksIChpdGVtLnZhbHVlIHx8IGl0ZW0pKVxyXG4gICAgICAgICAgICA6IHNhbWVTdHIoSlNPTi5zdHJpbmdpZnkoaXRlbSksIEpTT04uc3RyaW5naWZ5KHYpKVxyXG4gICAgKVxyXG4gICAgKi9cbiAgfSxcblxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBmaXJzdCB3aGl0ZWxpc3QgaXRlbSBtYXRjaGVkLCBieSB2YWx1ZSAoaWYgbWF0Y2ggZm91bmQpXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIFt0ZXh0IHRvIG1hdGNoIGJ5XVxyXG4gICAqL1xuICBnZXRXaGl0ZWxpc3RJdGVtKHZhbHVlLCBwcm9wLCB3aGl0ZWxpc3QpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgcHJvcCA9IHByb3AgfHwgJ3ZhbHVlJyxcbiAgICAgIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgIHdoaXRlbGlzdCA9IHdoaXRlbGlzdCB8fCBfcy53aGl0ZWxpc3Q7XG4gICAgd2hpdGVsaXN0LnNvbWUoX3dpID0+IHtcbiAgICAgIHZhciBfd2l2ID0gdHlwZW9mIF93aSA9PSAnc3RyaW5nJyA/IF93aSA6IF93aVtwcm9wXSB8fCBfd2kudmFsdWUsXG4gICAgICAgIGlzU2FtZVN0ciA9IHNhbWVTdHIoX3dpdiwgdmFsdWUsIF9zLmRyb3Bkb3duLmNhc2VTZW5zaXRpdmUsIF9zLnRyaW0pO1xuICAgICAgaWYgKGlzU2FtZVN0cikge1xuICAgICAgICByZXN1bHQgPSB0eXBlb2YgX3dpID09ICdzdHJpbmcnID8ge1xuICAgICAgICAgIHZhbHVlOiBfd2lcbiAgICAgICAgfSA6IF93aTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJzdCBpdGVyYXRlIHRoZSB3aGl0ZWxpc3QsIHRyeSBmaW5kIG1hdGNoZXMgYnkgXCJ2YWx1ZVwiIGFuZCBpZiB0aGF0IGZhaWxzXG4gICAgLy8gYW5kIGEgXCJ0YWdUZXh0UHJvcFwiIGlzIHNldCB0byBiZSBvdGhlciB0aGFuIFwidmFsdWVcIiwgdHJ5IHRoYXQgYWxzb1xuICAgIGlmICghcmVzdWx0ICYmIHByb3AgPT0gJ3ZhbHVlJyAmJiBfcy50YWdUZXh0UHJvcCAhPSAndmFsdWUnKSB7XG4gICAgICAvLyBpZiBmb3VuZCwgYWRkcyB0aGUgZmlyc3Qgd2hpY2ggbWF0Y2hlc1xuICAgICAgcmVzdWx0ID0gdGhpcy5nZXRXaGl0ZWxpc3RJdGVtKHZhbHVlLCBfcy50YWdUZXh0UHJvcCwgd2hpdGVsaXN0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLyoqXHJcbiAgICogdmFsaWRhdGUgYSB0YWcgb2JqZWN0IEJFRk9SRSB0aGUgYWN0dWFsIHRhZyB3aWxsIGJlIGNyZWF0ZWQgJiBhcHBlbmVkZWRcclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHNcclxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHVpZCAgICAgIFt1bmlxdWUgSUQsIHRvIG5vdCBpbmNsdWUgb3duIHRhZyB3aGVuIGNoZWtpbmcgZm9yIGR1cGxpY2F0ZXNdXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbi9TdHJpbmd9ICBbXCJ0cnVlXCIgaWYgdmFsaWRhdGlvbiBoYXMgcGFzc2VkLCBTdHJpbmcgZm9yIGEgZmFpbF1cclxuICAgKi9cbiAgdmFsaWRhdGVUYWcodGFnRGF0YSkge1xuICAgIHZhciBfcyA9IHRoaXMuc2V0dGluZ3MsXG4gICAgICAvLyB3aGVuIHZhbGlkYXRpbmcgYSB0YWcgaW4gZWRpdC1tb2RlLCBuZWVkIHRvIHRha2UgXCJ0YWdUZXh0UHJvcFwiIGludG8gY29uc2lkZXJhdGlvblxuICAgICAgcHJvcCA9IFwidmFsdWVcIiBpbiB0YWdEYXRhID8gXCJ2YWx1ZVwiIDogX3MudGFnVGV4dFByb3AsXG4gICAgICB2ID0gdGhpcy50cmltKHRhZ0RhdGFbcHJvcF0gKyBcIlwiKTtcblxuICAgIC8vIGNoZWNrIGZvciBkZWZpbml0aXZlIGVtcHR5IHZhbHVlXG4gICAgaWYgKCEodGFnRGF0YVtwcm9wXSArIFwiXCIpLnRyaW0oKSkgcmV0dXJuIHRoaXMuVEVYVFMuZW1wdHk7XG5cbiAgICAvLyBjaGVjayBpZiBwYXR0ZXJuIHNob3VsZCBiZSB1c2VkIGFuZCBpZiBzbywgdXNlIGl0IHRvIHRlc3QgdGhlIHZhbHVlXG4gICAgaWYgKF9zLnBhdHRlcm4gJiYgX3MucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiAhX3MucGF0dGVybi50ZXN0KHYpKSByZXR1cm4gdGhpcy5URVhUUy5wYXR0ZXJuO1xuXG4gICAgLy8gY2hlY2sgZm9yIGR1cGxpY2F0ZXNcbiAgICBpZiAoIV9zLmR1cGxpY2F0ZXMgJiYgdGhpcy5pc1RhZ0R1cGxpY2F0ZSh2LCBfcy5kcm9wZG93bi5jYXNlU2Vuc2l0aXZlLCB0YWdEYXRhLl9fdGFnSWQpKSByZXR1cm4gdGhpcy5URVhUUy5kdXBsaWNhdGU7XG4gICAgaWYgKHRoaXMuaXNUYWdCbGFja2xpc3RlZCh2KSB8fCBfcy5lbmZvcmNlV2hpdGVsaXN0ICYmICF0aGlzLmlzVGFnV2hpdGVsaXN0ZWQodikpIHJldHVybiB0aGlzLlRFWFRTLm5vdEFsbG93ZWQ7XG4gICAgaWYgKF9zLnZhbGlkYXRlKSByZXR1cm4gX3MudmFsaWRhdGUodGFnRGF0YSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGdldEludmFsaWRUYWdBdHRycyh0YWdEYXRhLCB2YWxpZGF0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IHRydWUsXG4gICAgICBcImNsYXNzXCI6IGAke3RhZ0RhdGEuY2xhc3MgfHwgJyd9ICR7dGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ05vdEFsbG93ZWR9YC50cmltKCksXG4gICAgICBcInRpdGxlXCI6IHZhbGlkYXRpb25cbiAgICB9O1xuICB9LFxuICBoYXNNYXhUYWdzKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlLmxlbmd0aCA+PSB0aGlzLnNldHRpbmdzLm1heFRhZ3MgPyB0aGlzLlRFWFRTLmV4Y2VlZCA6IGZhbHNlO1xuICB9LFxuICBzZXRSZWFkb25seSh0b2dnbGUsIGF0dHJyaWJ1dGUpIHtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzO1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpOyAvLyBleGl0IHBvc3NpYmxlIGVkaXQtbW9kZVxuICAgIF9zW2F0dHJyaWJ1dGUgfHwgJ3JlYWRvbmx5J10gPSB0b2dnbGU7XG4gICAgdGhpcy5ET00uc2NvcGVbKHRvZ2dsZSA/ICdzZXQnIDogJ3JlbW92ZScpICsgJ0F0dHJpYnV0ZSddKGF0dHJyaWJ1dGUgfHwgJ3JlYWRvbmx5JywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRDb250ZW50RWRpdGFibGUoIXRvZ2dsZSk7XG4gIH0sXG4gIHNldENvbnRlbnRFZGl0YWJsZShzdGF0ZSkge1xuICAgIGlmICghdGhpcy5zZXR0aW5ncy51c2VySW5wdXQpIHJldHVybjtcbiAgICB0aGlzLkRPTS5pbnB1dC5jb250ZW50RWRpdGFibGUgPSBzdGF0ZTtcbiAgICB0aGlzLkRPTS5pbnB1dC50YWJJbmRleCA9ICEhc3RhdGUgPyAwIDogLTE7XG4gIH0sXG4gIHNldERpc2FibGVkKGlzRGlzYWJsZWQpIHtcbiAgICB0aGlzLnNldFJlYWRvbmx5KGlzRGlzYWJsZWQsICdkaXNhYmxlZCcpO1xuICB9LFxuICAvKipcclxuICAgKiBwcmUtcHJvY2Nlc3MgdGhlIHRhZ3NJdGVtcywgd2hpY2ggY2FuIGJlIGEgY29tcGxleCB0YWdzSXRlbXMgbGlrZSBhbiBBcnJheSBvZiBPYmplY3RzIG9yIGEgc3RyaW5nIGNvbXByaXNlZCBvZiBtdWx0aXBsZSB3b3Jkc1xyXG4gICAqIHNvIGVhY2ggaXRlbSBzaG91bGQgYmUgaXRlcmF0ZWQgb24gYW5kIGEgdGFnIGNyZWF0ZWQgZm9yLlxyXG4gICAqIEByZXR1cm4ge0FycmF5fSBbQXJyYXkgb2YgT2JqZWN0c11cclxuICAgKi9cbiAgbm9ybWFsaXplVGFncyh0YWdzSXRlbXMpIHtcbiAgICB2YXIgX3RoaXMkc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgd2hpdGVsaXN0ID0gX3RoaXMkc2V0dGluZ3Mud2hpdGVsaXN0LFxuICAgICAgZGVsaW1pdGVycyA9IF90aGlzJHNldHRpbmdzLmRlbGltaXRlcnMsXG4gICAgICBtb2RlID0gX3RoaXMkc2V0dGluZ3MubW9kZSxcbiAgICAgIHRhZ1RleHRQcm9wID0gX3RoaXMkc2V0dGluZ3MudGFnVGV4dFByb3AsXG4gICAgICB3aGl0ZWxpc3RNYXRjaGVzID0gW10sXG4gICAgICB3aGl0ZWxpc3RXaXRoUHJvcHMgPSB3aGl0ZWxpc3QgPyB3aGl0ZWxpc3RbMF0gaW5zdGFuY2VvZiBPYmplY3QgOiBmYWxzZSxcbiAgICAgIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhZ3NJdGVtcyksXG4gICAgICBpc0NvbGxlY3Rpb24gPSBpc0FycmF5ICYmIHRhZ3NJdGVtc1swXS52YWx1ZSxcbiAgICAgIG1hcFN0cmluZ1RvQ29sbGVjdGlvbiA9IHMgPT4gKHMgKyBcIlwiKS5zcGxpdChkZWxpbWl0ZXJzKS5maWx0ZXIobiA9PiBuKS5tYXAodiA9PiAoe1xuICAgICAgICBbdGFnVGV4dFByb3BdOiB0aGlzLnRyaW0odiksXG4gICAgICAgIHZhbHVlOiB0aGlzLnRyaW0odilcbiAgICAgIH0pKTtcbiAgICBpZiAodHlwZW9mIHRhZ3NJdGVtcyA9PSAnbnVtYmVyJykgdGFnc0l0ZW1zID0gdGFnc0l0ZW1zLnRvU3RyaW5nKCk7XG5cbiAgICAvLyBpZiB0aGUgYXJndW1lbnQgaXMgYSBcInNpbXBsZVwiIFN0cmluZywgZXg6IFwiYWFhLCBiYmIsIGNjY1wiXG4gICAgaWYgKHR5cGVvZiB0YWdzSXRlbXMgPT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICghdGFnc0l0ZW1zLnRyaW0oKSkgcmV0dXJuIFtdO1xuXG4gICAgICAvLyBnbyBvdmVyIGVhY2ggdGFnIGFuZCBhZGQgaXQgKGlmIHRoZXJlIHdlcmUgbXVsdGlwbGUgb25lcylcbiAgICAgIHRhZ3NJdGVtcyA9IG1hcFN0cmluZ1RvQ29sbGVjdGlvbih0YWdzSXRlbXMpO1xuICAgIH1cblxuICAgIC8vIGlmIGlzIGFuIEFycmF5IG9mIFN0cmluZ3MsIGNvbnZlcnQgdG8gYW4gQXJyYXkgb2YgT2JqZWN0c1xuICAgIGVsc2UgaWYgKGlzQXJyYXkpIHtcbiAgICAgIC8vIGZsYXR0ZW4gdGhlIDJEIGFycmF5XG4gICAgICB0YWdzSXRlbXMgPSBbXS5jb25jYXQoLi4udGFnc0l0ZW1zLm1hcChpdGVtID0+IGl0ZW0udmFsdWUgIT0gdW5kZWZpbmVkID8gaXRlbSAvLyBtYXBTdHJpbmdUb0NvbGxlY3Rpb24oaXRlbS52YWx1ZSkubWFwKG5ld0l0ZW0gPT4gKHsuLi5pdGVtLC4uLm5ld0l0ZW19KSlcbiAgICAgIDogbWFwU3RyaW5nVG9Db2xsZWN0aW9uKGl0ZW0pKSk7XG4gICAgfVxuXG4gICAgLy8gc2VhcmNoIGlmIHRoZSB0YWcgZXhpc3RzIGluIHRoZSB3aGl0ZWxpc3QgYXMgYW4gT2JqZWN0IChoYXMgcHJvcHMpLFxuICAgIC8vIHRvIGJlIGFibGUgdG8gdXNlIGl0cyBwcm9wZXJ0aWVzLlxuICAgIC8vIHNraXAgbWF0Y2hpbmcgY29sbGVjdGlvbnMgd2l0aCB3aGl0ZWxpc3QgaXRlbXMgYXMgdGhleSBhcmUgY29uc2lkZXJlZCBcIndob2xlXCJcbiAgICBpZiAod2hpdGVsaXN0V2l0aFByb3BzICYmICFpc0NvbGxlY3Rpb24pIHtcbiAgICAgIHRhZ3NJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICB2YXIgd2hpdGVsaXN0TWF0Y2hlc1ZhbHVlcyA9IHdoaXRlbGlzdE1hdGNoZXMubWFwKGEgPT4gYS52YWx1ZSk7XG5cbiAgICAgICAgLy8gaWYgc3VnZ2VzdGlvbnMgYXJlIHNob3duLCB0aGV5IGFyZSBhbHJlYWR5IGZpbHRlcmVkLCBzbyBpdCdzIGVhc2llciB0byB1c2UgdGhlbSxcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgd2hpdGVsaXN0IG1pZ2h0IGFsc28gaW5jbHVkZSBpdGVtcyB3aGljaCBoYXZlIGFscmVhZHkgYmVlbiBhZGRlZFxuICAgICAgICB2YXIgZmlsdGVyZWRMaXN0ID0gdGhpcy5kcm9wZG93bi5maWx0ZXJMaXN0SXRlbXMuY2FsbCh0aGlzLCBpdGVtW3RhZ1RleHRQcm9wXSwge1xuICAgICAgICAgIGV4YWN0OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZHVwbGljYXRlcylcbiAgICAgICAgICAvLyBhbHNvIGZpbHRlciBvdXQgaXRlbXMgd2hpY2ggaGF2ZSBhbHJlYWR5IGJlZW4gbWF0Y2hlZCBpbiBwcmV2aW91cyBpdGVyYXRpb25zXG4gICAgICAgICAgZmlsdGVyZWRMaXN0ID0gZmlsdGVyZWRMaXN0LmZpbHRlcihmaWx0ZXJlZEl0ZW0gPT4gIXdoaXRlbGlzdE1hdGNoZXNWYWx1ZXMuaW5jbHVkZXMoZmlsdGVyZWRJdGVtLnZhbHVlKSk7XG5cbiAgICAgICAgLy8gZ2V0IHRoZSBiZXN0IG1hdGNoIG91dCBvZiBsaXN0IG9mIHBvc3NpYmxlIG1hdGNoZXMuXG4gICAgICAgIC8vIGlmIHRoZXJlIHdhcyBhIHNpbmdsZSBpdGVtIGluIHRoZSBmaWx0ZXJlZCBsaXN0LCB1c2UgdGhhdCBvbmVcbiAgICAgICAgdmFyIG1hdGNoT2JqID0gZmlsdGVyZWRMaXN0Lmxlbmd0aCA+IDEgPyB0aGlzLmdldFdoaXRlbGlzdEl0ZW0oaXRlbVt0YWdUZXh0UHJvcF0sIHRhZ1RleHRQcm9wLCBmaWx0ZXJlZExpc3QpIDogZmlsdGVyZWRMaXN0WzBdO1xuICAgICAgICBpZiAobWF0Y2hPYmogJiYgbWF0Y2hPYmogaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICB3aGl0ZWxpc3RNYXRjaGVzLnB1c2gobWF0Y2hPYmopOyAvLyBzZXQgdGhlIEFycmF5ICh3aXRoIHRoZSBmb3VuZCBPYmplY3QpIGFzIHRoZSBuZXcgdmFsdWVcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlICE9ICdtaXgnKSB7XG4gICAgICAgICAgaWYgKGl0ZW0udmFsdWUgPT0gdW5kZWZpbmVkKSBpdGVtLnZhbHVlID0gaXRlbVt0YWdUZXh0UHJvcF07XG4gICAgICAgICAgd2hpdGVsaXN0TWF0Y2hlcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICh3aGl0ZWxpc3RNYXRjaGVzLmxlbmd0aCkgdGFnc0l0ZW1zID0gd2hpdGVsaXN0TWF0Y2hlcztcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3NJdGVtcztcbiAgfSxcbiAgLyoqXHJcbiAgICogUGFyc2UgdGhlIGluaXRpYWwgdmFsdWUgb2YgYSB0ZXh0YXJlYSAob3IgaW5wdXQpIGVsZW1lbnQgYW5kIGdlbmVyYXRlIG1peGVkIHRleHQgdy8gdGFnc1xyXG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81NzU5ODg5Mi8xMDQzODBcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gc1xyXG4gICAqL1xuICBwYXJzZU1peFRhZ3Mocykge1xuICAgIHZhciBfdGhpcyRzZXR0aW5nczIgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgbWl4VGFnc0ludGVycG9sYXRvciA9IF90aGlzJHNldHRpbmdzMi5taXhUYWdzSW50ZXJwb2xhdG9yLFxuICAgICAgZHVwbGljYXRlcyA9IF90aGlzJHNldHRpbmdzMi5kdXBsaWNhdGVzLFxuICAgICAgdHJhbnNmb3JtVGFnID0gX3RoaXMkc2V0dGluZ3MyLnRyYW5zZm9ybVRhZyxcbiAgICAgIGVuZm9yY2VXaGl0ZWxpc3QgPSBfdGhpcyRzZXR0aW5nczIuZW5mb3JjZVdoaXRlbGlzdCxcbiAgICAgIG1heFRhZ3MgPSBfdGhpcyRzZXR0aW5nczIubWF4VGFncyxcbiAgICAgIHRhZ1RleHRQcm9wID0gX3RoaXMkc2V0dGluZ3MyLnRhZ1RleHRQcm9wLFxuICAgICAgdGFnc0RhdGFTZXQgPSBbXTtcbiAgICBzID0gcy5zcGxpdChtaXhUYWdzSW50ZXJwb2xhdG9yWzBdKS5tYXAoKHMxLCBpKSA9PiB7XG4gICAgICB2YXIgczIgPSBzMS5zcGxpdChtaXhUYWdzSW50ZXJwb2xhdG9yWzFdKSxcbiAgICAgICAgcHJlSW50ZXJwb2xhdGVkID0gczJbMF0sXG4gICAgICAgIG1heFRhZ3NSZWFjaGVkID0gdGFnc0RhdGFTZXQubGVuZ3RoID09IG1heFRhZ3MsXG4gICAgICAgIHRleHRQcm9wLFxuICAgICAgICB0YWdEYXRhLFxuICAgICAgICB0YWdFbG07XG4gICAgICB0cnkge1xuICAgICAgICAvLyBza2lwIG51bWJlcnMgYW5kIGdvIHN0cmFpZ2h0IHRvIHRoZSBcImNhdGNoXCIgc3RhdGVtZW50XG4gICAgICAgIGlmIChwcmVJbnRlcnBvbGF0ZWQgPT0gK3ByZUludGVycG9sYXRlZCkgdGhyb3cgRXJyb3I7XG4gICAgICAgIHRhZ0RhdGEgPSBKU09OLnBhcnNlKHByZUludGVycG9sYXRlZCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGFnRGF0YSA9IHRoaXMubm9ybWFsaXplVGFncyhwcmVJbnRlcnBvbGF0ZWQpWzBdIHx8IHtcbiAgICAgICAgICB2YWx1ZTogcHJlSW50ZXJwb2xhdGVkXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB0cmFuc2Zvcm1UYWcuY2FsbCh0aGlzLCB0YWdEYXRhKTtcbiAgICAgIGlmICghbWF4VGFnc1JlYWNoZWQgJiYgczIubGVuZ3RoID4gMSAmJiAoIWVuZm9yY2VXaGl0ZWxpc3QgfHwgdGhpcy5pc1RhZ1doaXRlbGlzdGVkKHRhZ0RhdGEudmFsdWUpKSAmJiAhKCFkdXBsaWNhdGVzICYmIHRoaXMuaXNUYWdEdXBsaWNhdGUodGFnRGF0YS52YWx1ZSkpKSB7XG4gICAgICAgIC8vIGluIGNhc2UgXCJ0YWdUZXh0UHJvcFwiIHNldHRpbmcgaXMgc2V0IHRvIG90aGVyIHRoYW4gXCJ2YWx1ZVwiIGFuZCB0aGlzIHRhZyBkb2VzIG5vdCBoYXZlIHRoaXMgcHJvcFxuICAgICAgICB0ZXh0UHJvcCA9IHRhZ0RhdGFbdGFnVGV4dFByb3BdID8gdGFnVGV4dFByb3AgOiAndmFsdWUnO1xuICAgICAgICB0YWdEYXRhW3RleHRQcm9wXSA9IHRoaXMudHJpbSh0YWdEYXRhW3RleHRQcm9wXSk7XG4gICAgICAgIHRhZ0VsbSA9IHRoaXMuY3JlYXRlVGFnRWxlbSh0YWdEYXRhKTtcbiAgICAgICAgdGFnc0RhdGFTZXQucHVzaCh0YWdEYXRhKTtcbiAgICAgICAgdGFnRWxtLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ05vQW5pbWF0aW9uKTtcbiAgICAgICAgczJbMF0gPSB0YWdFbG0ub3V0ZXJIVE1MOyAvLysgXCImIzgyODg7XCIgIC8vIHB1dCBhIHplcm8tc3BhY2UgYXQgdGhlIGVuZCBzbyB0aGUgY2FyZXQgd29uJ3QganVtcCBiYWNrIHRvIHRoZSBzdGFydCAod2hlbiB0aGUgbGFzdCBpbnB1dCdzIGNoaWxkIGVsZW1lbnQgaXMgYSB0YWcpXG4gICAgICAgIHRoaXMudmFsdWUucHVzaCh0YWdEYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAoczEpIHJldHVybiBpID8gbWl4VGFnc0ludGVycG9sYXRvclswXSArIHMxIDogczE7XG4gICAgICByZXR1cm4gczIuam9pbignJyk7XG4gICAgfSkuam9pbignJyk7XG4gICAgdGhpcy5ET00uaW5wdXQuaW5uZXJIVE1MID0gcztcbiAgICB0aGlzLkRPTS5pbnB1dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICAgIHRoaXMuRE9NLmlucHV0Lm5vcm1hbGl6ZSgpO1xuICAgIHRoaXMuZ2V0VGFnRWxtcygpLmZvckVhY2goKGVsbSwgaWR4KSA9PiBnZXRTZXRUYWdEYXRhKGVsbSwgdGFnc0RhdGFTZXRbaWR4XSkpO1xuICAgIHRoaXMudXBkYXRlKHtcbiAgICAgIHdpdGhvdXRDaGFuZ2VFdmVudDogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBzO1xuICB9LFxuICAvKipcclxuICAgKiBGb3IgbWl4ZWQtbW9kZTogcmVwbGFjZXMgYSB0ZXh0IHN0YXJ0aW5nIHdpdGggYSBwcmVmaXggd2l0aCBhIHdyYXBwZXIgZWxlbWVudCAodGFnIG9yIHNvbWV0aGluZylcclxuICAgKiBGaXJzdCB0aGVyZSAqaGFzKiB0byBiZSBhIFwidGhpcy5zdGF0ZS50YWdcIiB3aGljaCBpcyBhIHN0cmluZyB0aGF0IHdhcyBqdXN0IHR5cGVkIGFuZCBpcyBzdGFyaW5nIHdpdGggYSBwcmVmaXhcclxuICAgKi9cbiAgcmVwbGFjZVRleHRXaXRoTm9kZShuZXdXcmFwcGVyTm9kZSwgc3RyVG9SZXBsYWNlKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnRhZyAmJiAhc3RyVG9SZXBsYWNlKSByZXR1cm47XG4gICAgc3RyVG9SZXBsYWNlID0gc3RyVG9SZXBsYWNlIHx8IHRoaXMuc3RhdGUudGFnLnByZWZpeCArIHRoaXMuc3RhdGUudGFnLnZhbHVlO1xuICAgIHZhciBpZHgsXG4gICAgICBub2RlVG9SZXBsYWNlLFxuICAgICAgc2VsZWN0aW9uID0gdGhpcy5zdGF0ZS5zZWxlY3Rpb24gfHwgd2luZG93LmdldFNlbGVjdGlvbigpLFxuICAgICAgbm9kZUF0Q2FyZXQgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGZpcnN0U3BsaXRPZmZzZXQgPSB0aGlzLnN0YXRlLnRhZy5kZWxpbWl0ZXJzID8gdGhpcy5zdGF0ZS50YWcuZGVsaW1pdGVycy5sZW5ndGggOiAwO1xuXG4gICAgLy8gU1RFUCAxOiBleC4gcmVwbGFjZSAjYmEgd2l0aCB0aGUgdGFnIFwiYmFydFwiIHdoZXJlIFwifFwiIGlzIHdoZXJlIHRoZSBjYXJldCBpczpcbiAgICAvLyBDVVJSRU5UIFNUQVRFOiBcImZvbyAjYmEgI2JhfCAjYmFcIlxuXG4gICAgLy8gc3BsaXQgdGhlIHRleHQgbm9kZSBhdCB0aGUgaW5kZXggb2YgdGhlIGNhcmV0XG4gICAgbm9kZUF0Q2FyZXQuc3BsaXRUZXh0KHNlbGVjdGlvbi5hbmNob3JPZmZzZXQgLSBmaXJzdFNwbGl0T2Zmc2V0KTtcblxuICAgIC8vIG5vZGUgMDogXCJmb28gI2JhICNiYXxcIlxuICAgIC8vIG5vZGUgMTogXCIgI2JhXCJcblxuICAgIC8vIGdldCBpbmRleCBvZiBMQVNUIG9jY3VyZW5jZSBvZiBcIiNiYVwiXG4gICAgaWR4ID0gbm9kZUF0Q2FyZXQubm9kZVZhbHVlLmxhc3RJbmRleE9mKHN0clRvUmVwbGFjZSk7XG4gICAgaWYgKGlkeCA9PSAtMSkgcmV0dXJuIHRydWU7XG4gICAgbm9kZVRvUmVwbGFjZSA9IG5vZGVBdENhcmV0LnNwbGl0VGV4dChpZHgpO1xuXG4gICAgLy8gbm9kZSAwOiBcImZvbyAjYmEgXCJcbiAgICAvLyBub2RlIDE6IFwiI2JhXCIgICAgPC0gbm9kZVRvUmVwbGFjZVxuXG4gICAgbmV3V3JhcHBlck5vZGUgJiYgbm9kZUF0Q2FyZXQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3V3JhcHBlck5vZGUsIG5vZGVUb1JlcGxhY2UpO1xuXG4gICAgLy8gbXVzdCBOT1Qgbm9ybWFsaXplIGNvbnRlbnRlZGl0YWJsZSBvciBpdCB3aWxsIGNhdXNlIHVud2FudGVkIGlzc3VlczpcbiAgICAvLyBodHRwczovL21vbm9zbmFwLmNvbS9maWxlL1pEVm1SdnE1dXBZa2lkaUZlZHZyd3pTc3dlZ1drN1xuICAgIC8vIG5vZGVBdENhcmV0LnBhcmVudE5vZGUubm9ybWFsaXplKClcblxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICAvKipcclxuICAgKiBGb3Igc2VsZWN0aW5nIGEgc2luZ2xlIG9wdGlvbiAobm90IHVzZWQgZm9yIG11bHRpcGxlIHRhZ3MsIGJ1dCBmb3IgXCJtb2RlOnNlbGVjdFwiIG9ubHkpXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhZ0VsbSAgIFRhZyBET00gbm9kZVxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YWdEYXRhICBUYWcgZGF0YVxyXG4gICAqL1xuICBzZWxlY3RUYWcodGFnRWxtLCB0YWdEYXRhKSB7XG4gICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncztcbiAgICBpZiAoX3MuZW5mb3JjZVdoaXRlbGlzdCAmJiAhdGhpcy5pc1RhZ1doaXRlbGlzdGVkKHRhZ0RhdGEudmFsdWUpKSByZXR1cm47XG4gICAgdGhpcy5pbnB1dC5zZXQuY2FsbCh0aGlzLCB0YWdEYXRhW19zLnRhZ1RleHRQcm9wXSB8fCB0YWdEYXRhLnZhbHVlLCB0cnVlKTtcblxuICAgIC8vIHBsYWNlIHRoZSBjYXJldCBhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCwgb25seSBpZiBhIGRyb3Bkb3duIG9wdGlvbiB3YXMgc2VsZWN0ZWQgKGFuZCBub3QgYnkgbWFudWFsbHkgdHlwaW5nIGFub3RoZXIgdmFsdWUgYW5kIGNsaWNraW5nIFwiVEFCXCIpXG4gICAgaWYgKHRoaXMuc3RhdGUuYWN0aW9ucy5zZWxlY3RPcHRpb24pIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZXRSYW5nZUF0U3RhcnRFbmQoZmFsc2UsIHRoaXMuRE9NLmlucHV0KSk7XG4gICAgdmFyIGxhc3RUYWdFbG0gPSB0aGlzLmdldExhc3RUYWcoKTtcbiAgICBpZiAobGFzdFRhZ0VsbSkgdGhpcy5yZXBsYWNlVGFnKGxhc3RUYWdFbG0sIHRhZ0RhdGEpO2Vsc2UgdGhpcy5hcHBlbmRUYWcodGFnRWxtKTtcblxuICAgIC8vIGlmKCBfcy5lbmZvcmNlV2hpdGVsaXN0IClcbiAgICAvLyAgICAgdGhpcy5zZXRDb250ZW50RWRpdGFibGUoZmFsc2UpO1xuXG4gICAgdGhpcy52YWx1ZVswXSA9IHRhZ0RhdGE7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2FkZCcsIHtcbiAgICAgIHRhZzogdGFnRWxtLFxuICAgICAgZGF0YTogdGFnRGF0YVxuICAgIH0pO1xuICAgIHJldHVybiBbdGFnRWxtXTtcbiAgfSxcbiAgLyoqXHJcbiAgICogYWRkIGFuIGVtcHR5IFwidGFnXCIgZWxlbWVudCBpbiBhbiBlZGl0YWJsZSBzdGF0ZVxyXG4gICAqL1xuICBhZGRFbXB0eVRhZyhpbml0aWFsRGF0YSkge1xuICAgIHZhciB0YWdEYXRhID0gZXh0ZW5kKHtcbiAgICAgICAgdmFsdWU6IFwiXCJcbiAgICAgIH0sIGluaXRpYWxEYXRhIHx8IHt9KSxcbiAgICAgIHRhZ0VsbSA9IHRoaXMuY3JlYXRlVGFnRWxlbSh0YWdEYXRhKTtcbiAgICBnZXRTZXRUYWdEYXRhKHRhZ0VsbSwgdGFnRGF0YSk7XG5cbiAgICAvLyBhZGQgdGhlIHRhZyB0byB0aGUgY29tcG9uZW50J3MgRE9NXG4gICAgdGhpcy5hcHBlbmRUYWcodGFnRWxtKTtcbiAgICB0aGlzLmVkaXRUYWcodGFnRWxtLCB7XG4gICAgICBza2lwVmFsaWRhdGlvbjogdHJ1ZVxuICAgIH0pO1xuICB9LFxuICAvKipcclxuICAgKiBhZGQgYSBcInRhZ1wiIGVsZW1lbnQgdG8gdGhlIFwidGFnc1wiIGNvbXBvbmVudFxyXG4gICAqIEBwYXJhbSB7U3RyaW5nL0FycmF5fSB0YWdzSXRlbXMgICBbQSBzdHJpbmcgKHNpbmdsZSBvciBtdWx0aXBsZSB2YWx1ZXMgd2l0aCBhIGRlbGltaXRlciksIG9yIGFuIEFycmF5IG9mIE9iamVjdHMgb3IganVzdCBBcnJheSBvZiBTdHJpbmdzXVxyXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgICBjbGVhcklucHV0ICBbZmxhZyBpZiB0aGUgaW5wdXQncyB2YWx1ZSBzaG91bGQgYmUgY2xlYXJlZCBhZnRlciBhZGRpbmcgdGFnc11cclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgc2tpcEludmFsaWQgW2RvIG5vdCBhZGQsIG1hcmsgJiByZW1vdmUgaW52YWxpZCB0YWdzXVxyXG4gICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBET00gZWxlbWVudHMgKHRhZ3MpXHJcbiAgICovXG4gIGFkZFRhZ3ModGFnc0l0ZW1zLCBjbGVhcklucHV0LCBza2lwSW52YWxpZCkge1xuICAgIHZhciB0YWdFbGVtcyA9IFtdLFxuICAgICAgX3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgYWdncmVnYXRlZGludmFsaWRJbnB1dCA9IFtdLFxuICAgICAgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICBza2lwSW52YWxpZCA9IHNraXBJbnZhbGlkIHx8IF9zLnNraXBJbnZhbGlkO1xuICAgIGlmICghdGFnc0l0ZW1zIHx8IHRhZ3NJdGVtcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuIHRhZ0VsZW1zO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnRzIEFycmF5L1N0cmluZy9PYmplY3QgdG8gYW4gQXJyYXkgb2YgT2JqZWN0c1xuICAgIHRhZ3NJdGVtcyA9IHRoaXMubm9ybWFsaXplVGFncyh0YWdzSXRlbXMpO1xuICAgIHN3aXRjaCAoX3MubW9kZSkge1xuICAgICAgY2FzZSAnbWl4JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkTWl4VGFncyh0YWdzSXRlbXMpO1xuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGNsZWFySW5wdXQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbFRhZ3MoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLkRPTS5pbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgdGFnc0l0ZW1zLmZvckVhY2godGFnRGF0YSA9PiB7XG4gICAgICB2YXIgdGFnRWxtLFxuICAgICAgICB0YWdFbG1QYXJhbXMgPSB7fSxcbiAgICAgICAgb3JpZ2luYWxEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgdGFnRGF0YSwge1xuICAgICAgICAgIHZhbHVlOiB0YWdEYXRhLnZhbHVlICsgXCJcIlxuICAgICAgICB9KTtcblxuICAgICAgLy8gc2hhbGxvdy1jbG9uZSB0YWdEYXRhIHNvIGxhdGVyIG1vZGlmaWNhdGlvbnMgd2lsbCBub3QgYXBwbHkgdG8gdGhlIHNvdXJjZVxuICAgICAgdGFnRGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsRGF0YSk7XG4gICAgICBfcy50cmFuc2Zvcm1UYWcuY2FsbCh0aGlzLCB0YWdEYXRhKTtcbiAgICAgIHRhZ0RhdGEuX19pc1ZhbGlkID0gdGhpcy5oYXNNYXhUYWdzKCkgfHwgdGhpcy52YWxpZGF0ZVRhZyh0YWdEYXRhKTtcbiAgICAgIGlmICh0YWdEYXRhLl9faXNWYWxpZCAhPT0gdHJ1ZSkge1xuICAgICAgICBpZiAoc2tpcEludmFsaWQpIHJldHVybjtcblxuICAgICAgICAvLyBvcmlnaW5hbERhdGEgaXMga2VwdCBiZWNhdXNlIGl0IG1pZ2h0IGJlIHRoYXQgdGhpcyB0YWcgaXMgaW52YWxpZCBiZWNhdXNlIGl0IGlzIGEgZHVwbGljYXRlIG9mIGFub3RoZXIsXG4gICAgICAgIC8vIGFuZCBpZiB0aGF0IG90aGVyIHRhZ3MgaXMgZWRpdGVkL2RlbGV0ZWQsIHRoaXMgb25lIHNob3VsZCBiZSByZS12YWxpZGF0ZWQgYW5kIGlmIGlzIG5vIG1vcmUgYSBkdXBsaWNhdGUgLSByZXN0b3JlZFxuICAgICAgICBleHRlbmQodGFnRWxtUGFyYW1zLCB0aGlzLmdldEludmFsaWRUYWdBdHRycyh0YWdEYXRhLCB0YWdEYXRhLl9faXNWYWxpZCksIHtcbiAgICAgICAgICBfX3ByZUludmFsaWREYXRhOiBvcmlnaW5hbERhdGFcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0YWdEYXRhLl9faXNWYWxpZCA9PSB0aGlzLlRFWFRTLmR1cGxpY2F0ZSlcbiAgICAgICAgICAvLyBtYXJrLCBmb3IgYSBicmllZiBtb21lbnQsIHRoZSB0YWcgKHRoaXMgdGhpcyBvbmUpIHdoaWNoIFRISVMgQ1VSUkVOVCB0YWcgaXMgYSBkdXBsY2F0ZSBvZlxuICAgICAgICAgIHRoaXMuZmxhc2hUYWcodGhpcy5nZXRUYWdFbG1CeVZhbHVlKHRhZ0RhdGEudmFsdWUpKTtcbiAgICAgICAgaWYgKCFfcy5jcmVhdGVJbnZhbGlkVGFncykge1xuICAgICAgICAgIGFnZ3JlZ2F0ZWRpbnZhbGlkSW5wdXQucHVzaCh0YWdEYXRhLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgncmVhZG9ubHknIGluIHRhZ0RhdGEpIHtcbiAgICAgICAgaWYgKHRhZ0RhdGEucmVhZG9ubHkpIHRhZ0VsbVBhcmFtc1tcImFyaWEtcmVhZG9ubHlcIl0gPSB0cnVlO1xuICAgICAgICAvLyBpZiBcInJlYWRvbmx5XCIgaXMgXCJmYWxzZVwiLCByZW1vdmUgaXQgZnJvbSB0aGUgdGFnRGF0YSBzbyBpdCB3b24ndCBiZSBhZGRlZCBhcyBhbiBhdHRyaWJ1dGUgaW4gdGhlIHRlbXBsYXRlXG4gICAgICAgIGVsc2UgZGVsZXRlIHRhZ0RhdGEucmVhZG9ubHk7XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSB0YWcgSFRNTCBlbGVtZW50XG4gICAgICB0YWdFbG0gPSB0aGlzLmNyZWF0ZVRhZ0VsZW0odGFnRGF0YSwgdGFnRWxtUGFyYW1zKTtcbiAgICAgIHRhZ0VsZW1zLnB1c2godGFnRWxtKTtcblxuICAgICAgLy8gbW9kZS1zZWxlY3Qgb3ZlcnJpZGVzXG4gICAgICBpZiAoX3MubW9kZSA9PSAnc2VsZWN0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RUYWcodGFnRWxtLCB0YWdEYXRhKTtcbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHRoZSB0YWcgdG8gdGhlIGNvbXBvbmVudCdzIERPTVxuICAgICAgLy8gdGhpcy5hcHBlbmRUYWcodGFnRWxtKVxuICAgICAgZnJhZy5hcHBlbmRDaGlsZCh0YWdFbG0pO1xuICAgICAgaWYgKHRhZ0RhdGEuX19pc1ZhbGlkICYmIHRhZ0RhdGEuX19pc1ZhbGlkID09PSB0cnVlKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBzdGF0ZVxuICAgICAgICB0aGlzLnZhbHVlLnB1c2godGFnRGF0YSk7XG4gICAgICAgIHRoaXMudHJpZ2dlcignYWRkJywge1xuICAgICAgICAgIHRhZzogdGFnRWxtLFxuICAgICAgICAgIGluZGV4OiB0aGlzLnZhbHVlLmxlbmd0aCAtIDEsXG4gICAgICAgICAgZGF0YTogdGFnRGF0YVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcImludmFsaWRcIiwge1xuICAgICAgICAgIGRhdGE6IHRhZ0RhdGEsXG4gICAgICAgICAgaW5kZXg6IHRoaXMudmFsdWUubGVuZ3RoLFxuICAgICAgICAgIHRhZzogdGFnRWxtLFxuICAgICAgICAgIG1lc3NhZ2U6IHRhZ0RhdGEuX19pc1ZhbGlkXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIV9zLmtlZXBJbnZhbGlkVGFncylcbiAgICAgICAgICAvLyByZW1vdmUgaW52YWxpZCB0YWdzIChpZiBcImtlZXBJbnZhbGlkVGFnc1wiIGlzIHNldCB0byBcImZhbHNlXCIpXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnJlbW92ZVRhZ3ModGFnRWxtLCB0cnVlKSwgMTAwMCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKCk7IC8vIHJlcG9zaXRpb24gdGhlIGRyb3Bkb3duIGJlY2F1c2UgdGhlIGp1c3QtYWRkZWQgdGFnIG1pZ2h0IGNhdXNlIGEgbmV3LWxpbmVcbiAgICB9KTtcblxuICAgIHRoaXMuYXBwZW5kVGFnKGZyYWcpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgaWYgKHRhZ3NJdGVtcy5sZW5ndGggJiYgY2xlYXJJbnB1dCkge1xuICAgICAgdGhpcy5pbnB1dC5zZXQuY2FsbCh0aGlzLCBfcy5jcmVhdGVJbnZhbGlkVGFncyA/ICcnIDogYWdncmVnYXRlZGludmFsaWRJbnB1dC5qb2luKF9zLl9kZWxpbWl0ZXJzKSk7XG4gICAgICB0aGlzLnNldFJhbmdlQXRTdGFydEVuZChmYWxzZSwgdGhpcy5ET00uaW5wdXQpO1xuICAgIH1cbiAgICBfcy5kcm9wZG93bi5lbmFibGVkICYmIHRoaXMuZHJvcGRvd24ucmVmaWx0ZXIoKTtcbiAgICByZXR1cm4gdGFnRWxlbXM7XG4gIH0sXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBtaXgtY29udGVudCB0YWdcclxuICAgKiBAcGFyYW0ge1N0cmluZy9BcnJheX0gdGFnRGF0YSAgICBBIHN0cmluZyAoc2luZ2xlIG9yIG11bHRpcGxlIHZhbHVlcyB3aXRoIGEgZGVsaW1pdGVyKSwgb3IgYW4gQXJyYXkgb2YgT2JqZWN0cyBvciBqdXN0IEFycmF5IG9mIFN0cmluZ3NcclxuICAgKi9cbiAgYWRkTWl4VGFncyh0YWdzRGF0YSkge1xuICAgIHRhZ3NEYXRhID0gdGhpcy5ub3JtYWxpemVUYWdzKHRhZ3NEYXRhKTtcbiAgICBpZiAodGFnc0RhdGFbMF0ucHJlZml4IHx8IHRoaXMuc3RhdGUudGFnKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmVmaXhlZFRleHRUb1RhZyh0YWdzRGF0YVswXSk7XG4gICAgfVxuICAgIHZhciBmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIHRhZ3NEYXRhLmZvckVhY2godGFnRGF0YSA9PiB7XG4gICAgICB2YXIgdGFnRWxtID0gdGhpcy5jcmVhdGVUYWdFbGVtKHRhZ0RhdGEpO1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZCh0YWdFbG0pO1xuICAgIH0pO1xuICAgIHRoaXMuYXBwZW5kTWl4VGFncyhmcmFnKTtcbiAgICByZXR1cm4gZnJhZztcbiAgfSxcbiAgYXBwZW5kTWl4VGFncyhub2RlKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9ICEhdGhpcy5zdGF0ZS5zZWxlY3Rpb247XG5cbiAgICAvLyBpZiBcInNlbGVjdGlvblwiIGV4aXN0cywgYXNzdW1lcyBpbnRlbnRpb24gb2YgaW5lY3RpbmcgdGhlIG5ldyB0YWcgYXQgdGhlIGxhc3RcbiAgICAvLyBzYXZlZCBsb2NhdGlvbiBvZiB0aGUgY2FyZXQgaW5zaWRlIFwidGhpcy5ET00uaW5wdXRcIlxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMuaW5qZWN0QXRDYXJldChub2RlKTtcbiAgICB9XG4gICAgLy8gZWxzZSwgY3JlYXRlIGEgcmFuZ2UgYW5kIGluamVjdCB0aGUgbmV3IHRhZyBhcyB0aGUgbGFzdCBjaGlsZCBvZiBcInRoaXMuRE9NLmlucHV0XCJcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuRE9NLmlucHV0LmZvY3VzKCk7XG4gICAgICBzZWxlY3Rpb24gPSB0aGlzLnNldFN0YXRlU2VsZWN0aW9uKCk7XG4gICAgICBzZWxlY3Rpb24ucmFuZ2Uuc2V0U3RhcnQodGhpcy5ET00uaW5wdXQsIHNlbGVjdGlvbi5yYW5nZS5lbmRPZmZzZXQpO1xuICAgICAgc2VsZWN0aW9uLnJhbmdlLnNldEVuZCh0aGlzLkRPTS5pbnB1dCwgc2VsZWN0aW9uLnJhbmdlLmVuZE9mZnNldCk7XG4gICAgICB0aGlzLkRPTS5pbnB1dC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWVCeURPTVRhZ3MoKTsgLy8gdXBkYXRlcyBpbnRlcm5hbCBcInRoaXMudmFsdWVcIlxuICAgICAgdGhpcy51cGRhdGUoKTsgLy8gdXBkYXRlcyBvcmlnaW5hbCBpbnB1dC90ZXh0YXJlYVxuICAgIH1cbiAgfSxcblxuICAvKipcclxuICAgKiBBZGRzIGEgdGFnIHdoaWNoIHdhcyBhY3Rpdmx5IHR5cGVkIGJ5IHRoZSB1c2VyXHJcbiAgICogQHBhcmFtIHtTdHJpbmcvQXJyYXl9IHRhZ0l0ZW0gICBbQSBzdHJpbmcgKHNpbmdsZSBvciBtdWx0aXBsZSB2YWx1ZXMgd2l0aCBhIGRlbGltaXRlciksIG9yIGFuIEFycmF5IG9mIE9iamVjdHMgb3IganVzdCBBcnJheSBvZiBTdHJpbmdzXVxyXG4gICAqL1xuICBwcmVmaXhlZFRleHRUb1RhZyh0YWdJdGVtKSB7XG4gICAgdmFyIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgIHRhZ0VsbSxcbiAgICAgIGNyZWF0ZWRGcm9tRGVsaW1pdGVycyA9IHRoaXMuc3RhdGUudGFnLmRlbGltaXRlcnM7XG4gICAgX3MudHJhbnNmb3JtVGFnLmNhbGwodGhpcywgdGFnSXRlbSk7XG4gICAgdGFnSXRlbS5wcmVmaXggPSB0YWdJdGVtLnByZWZpeCB8fCB0aGlzLnN0YXRlLnRhZyA/IHRoaXMuc3RhdGUudGFnLnByZWZpeCA6IChfcy5wYXR0ZXJuLnNvdXJjZSB8fCBfcy5wYXR0ZXJuKVswXTtcblxuICAgIC8vIFRPRE86IHNob3VsZCBjaGVjayBpZiB0aGUgdGFnIGlzIHZhbGlkXG4gICAgdGFnRWxtID0gdGhpcy5jcmVhdGVUYWdFbGVtKHRhZ0l0ZW0pO1xuXG4gICAgLy8gdHJpZXMgdG8gcmVwbGFjZSBhIHRhZ2VkIHRleHROb2RlIHdpdGggYSB0YWdFbG0sIGFuZCBpZiBub3QgYWJsZSxcbiAgICAvLyBpbnNlcnQgdGhlIG5ldyB0YWcgdG8gdGhlIEVORCBpZiBcImFkZFRhZ3NcIiB3YXMgY2FsbGVkIGZyb20gb3V0c2lkZVxuICAgIGlmICghdGhpcy5yZXBsYWNlVGV4dFdpdGhOb2RlKHRhZ0VsbSkpIHtcbiAgICAgIHRoaXMuRE9NLmlucHV0LmFwcGVuZENoaWxkKHRhZ0VsbSk7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4gdGFnRWxtLmNsYXNzTGlzdC5hZGQodGhpcy5zZXR0aW5ncy5jbGFzc05hbWVzLnRhZ05vQW5pbWF0aW9uKSwgMzAwKTtcbiAgICB0aGlzLnZhbHVlLnB1c2godGFnSXRlbSk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICBpZiAoIWNyZWF0ZWRGcm9tRGVsaW1pdGVycykge1xuICAgICAgdmFyIGVsbSA9IHRoaXMuaW5zZXJ0QWZ0ZXJUYWcodGFnRWxtKSB8fCB0YWdFbG07XG4gICAgICAvLyBhIHRpbWVvdXQgaXMgbmVlZGVkIHdoZW4gc2VsZWN0aW5nIGEgdGFnIGZyb20gdGhlIHN1Z2dlc3Rpb25zIHZpYSBtb3VzZS5cbiAgICAgIC8vIFdpdGhvdXQgaXQsIGl0IHNlZW1zIHRoZSBjYXJldCBpcyBwbGFjZWQgcmlnaHQgYWZ0ZXIgdGhlIHRhZyBhbmQgbm90IGFmdGVyIHRoZVxuICAgICAgLy8gbm9kZSB3aGljaCB3YXMgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIHRhZyAod2hpdGVzcGFjZSBieSBkZWZhdWx0KVxuICAgICAgc2V0VGltZW91dCh0aGlzLnBsYWNlQ2FyZXRBZnRlck5vZGUsIDAsIGVsbSk7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUudGFnID0gbnVsbDtcbiAgICB0aGlzLnRyaWdnZXIoJ2FkZCcsIGV4dGVuZCh7fSwge1xuICAgICAgdGFnOiB0YWdFbG1cbiAgICB9LCB7XG4gICAgICBkYXRhOiB0YWdJdGVtXG4gICAgfSkpO1xuICAgIHJldHVybiB0YWdFbG07XG4gIH0sXG4gIC8qKlxyXG4gICAqIGFwcGVuZWQgKHZhbGlkYXRlZCkgdGFnIHRvIHRoZSBjb21wb25lbnQncyBET00gc2NvcGVcclxuICAgKi9cbiAgYXBwZW5kVGFnKHRhZ0VsbSkge1xuICAgIHZhciBET00gPSB0aGlzLkRPTSxcbiAgICAgIGluc2VydEJlZm9yZU5vZGUgPSBET00uaW5wdXQ7XG5cbiAgICAvL2lmKCBpbnNlcnRCZWZvcmVOb2RlID09PSBET00uaW5wdXQgKVxuICAgIERPTS5zY29wZS5pbnNlcnRCZWZvcmUodGFnRWxtLCBpbnNlcnRCZWZvcmVOb2RlKTtcbiAgICAvL2Vsc2VcbiAgICAvLyAgICBET00uc2NvcGUuYXBwZW5kQ2hpbGQodGFnRWxtKVxuICB9LFxuXG4gIC8qKlxyXG4gICAqIGNyZWF0ZXMgYSBET00gdGFnIGVsZW1lbnQgYW5kIGluamVjdHMgaXQgaW50byB0aGUgY29tcG9uZW50ICh0aGlzLkRPTS5zY29wZSlcclxuICAgKiBAcGFyYW0gIHtPYmplY3R9ICB0YWdEYXRhIFt0ZXh0IHZhbHVlICYgcHJvcGVydGllcyBmb3IgdGhlIGNyZWF0ZWQgdGFnXVxyXG4gICAqIEBwYXJhbSAge09iamVjdH0gIGV4dHJhRGF0YSBbcHJvcGVydGllcyB3aGljaCBhcmUgZm9yIHRoZSBIVE1MIHRlbXBsYXRlIG9ubHldXHJcbiAgICogQHJldHVybiB7T2JqZWN0fSBbRE9NIGVsZW1lbnRdXHJcbiAgICovXG4gIGNyZWF0ZVRhZ0VsZW0odGFnRGF0YSwgZXh0cmFEYXRhKSB7XG4gICAgdGFnRGF0YS5fX3RhZ0lkID0gZ2V0VUlEKCk7XG4gICAgdmFyIHRhZ0VsbSxcbiAgICAgIHRlbXBsYXRlRGF0YSA9IGV4dGVuZCh7fSwgdGFnRGF0YSwgX29iamVjdFNwcmVhZDIoe1xuICAgICAgICB2YWx1ZTogZXNjYXBlSFRNTCh0YWdEYXRhLnZhbHVlICsgXCJcIilcbiAgICAgIH0sIGV4dHJhRGF0YSkpO1xuXG4gICAgLy8gaWYoIHRoaXMuc2V0dGluZ3MucmVhZG9ubHkgKVxuICAgIC8vICAgICB0YWdEYXRhLnJlYWRvbmx5ID0gdHJ1ZVxuXG4gICAgdGFnRWxtID0gdGhpcy5wYXJzZVRlbXBsYXRlKCd0YWcnLCBbdGVtcGxhdGVEYXRhLCB0aGlzXSk7XG5cbiAgICAvLyBjcnVjaWFsIGZvciBwcm9wZXIgY2FyZXQgcGxhY2VtZW50IHdoZW4gZGVsZXRpbmcgY29udGVudC4gaWYgdGV4dE5vZGVzIGFyZSBhbGxvd2VkIGFzIGNoaWxkcmVuIG9mIGEgdGFnIGVsZW1lbnQsXG4gICAgLy8gYSBicm93c2VyIGJ1ZyBjYXN1ZXMgdGhlIGNhcmV0IHRvIGJlIG1pc3BsYWNlZCBpbnNpZGUgdGhlIHRhZyBlbGVtZW50IChlc3BlY2lhbGx5IGFmZmVjdHMgXCJyZWFkb25seVwiIHRhZ3MpXG4gICAgcmVtb3ZlVGV4dENoaWxkTm9kZXModGFnRWxtKTtcbiAgICAvLyB3aGlsZSggdGFnRWxtLmxhc3RDaGlsZC5ub2RlVHlwZSA9PSAzIClcbiAgICAvLyAgICAgdGFnRWxtLmxhc3RDaGlsZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhZ0VsbS5sYXN0Q2hpbGQpXG5cbiAgICBnZXRTZXRUYWdEYXRhKHRhZ0VsbSwgdGFnRGF0YSk7XG4gICAgcmV0dXJuIHRhZ0VsbTtcbiAgfSxcbiAgLyoqXHJcbiAgICogcmUtY2hlY2sgYWxsIGludmFsaWQgdGFncy5cclxuICAgKiBjYWxsZWQgYWZ0ZXIgYSB0YWcgd2FzIGVkaXRlZCBvciByZW1vdmVkXHJcbiAgICovXG4gIHJlQ2hlY2tJbnZhbGlkVGFncygpIHtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzO1xuICAgIHRoaXMuZ2V0VGFnRWxtcyhfcy5jbGFzc05hbWVzLnRhZ05vdEFsbG93ZWQpLmZvckVhY2goKHRhZ0VsbSwgaSkgPT4ge1xuICAgICAgdmFyIHRhZ0RhdGEgPSBnZXRTZXRUYWdEYXRhKHRhZ0VsbSksXG4gICAgICAgIGhhc01heFRhZ3MgPSB0aGlzLmhhc01heFRhZ3MoKSxcbiAgICAgICAgdGFnVmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVUYWcodGFnRGF0YSksXG4gICAgICAgIGlzVmFsaWQgPSB0YWdWYWxpZGF0aW9uID09PSB0cnVlICYmICFoYXNNYXhUYWdzO1xuICAgICAgaWYgKF9zLm1vZGUgPT0gJ3NlbGVjdCcpIHRoaXMudG9nZ2xlU2NvcGVWYWxpZGF0aW9uKHRhZ1ZhbGlkYXRpb24pO1xuXG4gICAgICAvLyBpZiB0aGUgdGFnIGhhcyBiZWNvbWUgdmFsaWRcbiAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgIHRhZ0RhdGEgPSB0YWdEYXRhLl9fcHJlSW52YWxpZERhdGEgPyB0YWdEYXRhLl9fcHJlSW52YWxpZERhdGEgOiB7XG4gICAgICAgICAgdmFsdWU6IHRhZ0RhdGEudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZVRhZyh0YWdFbG0sIHRhZ0RhdGEpO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgdGFnIGlzIHN0aWxsIGludmFpbGQsIHNldCBpdHMgdGl0bGUgYXMgc3VjaCAocmVzb24gb2YgaW52YWxpZCBtaWdodCBoYXZlIGNoYW5nZWQpXG4gICAgICB0YWdFbG0udGl0bGUgPSBoYXNNYXhUYWdzIHx8IHRhZ1ZhbGlkYXRpb247XG4gICAgfSk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIFJlbW92ZXMgYSB0YWdcclxuICAgKiBAcGFyYW0gIHtBcnJheXxOb2RlfFN0cmluZ30gIHRhZ0VsbXMgICAgICAgICBbRE9NIGVsZW1lbnQocykgb3IgYSBTdHJpbmcgdmFsdWUuIGlmIHVuZGVmaW5lZCBvciBudWxsLCByZW1vdmUgbGFzdCBhZGRlZCB0YWddXHJcbiAgICogQHBhcmFtICB7Qm9vbGVhbn0gICAgICAgICAgICBzaWxlbnQgICAgICAgICAgW0EgZmxhZywgd2hpY2ggd2hlbiB0dXJuZWQgb24sIGRvZXMgbm90IHJlbW92ZSBhbnkgdmFsdWUgYW5kIGRvZXMgbm90IHVwZGF0ZSB0aGUgb3JpZ2luYWwgaW5wdXQgdmFsdWUgYnV0IHNpbXBseSByZW1vdmVzIHRoZSB0YWcgZnJvbSB0YWdpZnldXHJcbiAgICogQHBhcmFtICB7TnVtYmVyfSAgICAgICAgICAgICB0cmFuRHVyYXRpb24gICAgW1RyYW5zaXRpb24gZHVyYXRpb24gaW4gTVNdXHJcbiAgICogVE9ETzogQWxsb3cgbXVsdGlwbGUgdGFncyB0byBiZSByZW1vdmVkIGF0LW9uY2VcclxuICAgKi9cbiAgcmVtb3ZlVGFncyh0YWdFbG1zLCBzaWxlbnQsIHRyYW5EdXJhdGlvbikge1xuICAgIHZhciB0YWdzVG9SZW1vdmUsXG4gICAgICBfcyA9IHRoaXMuc2V0dGluZ3M7XG4gICAgdGFnRWxtcyA9IHRhZ0VsbXMgJiYgdGFnRWxtcyBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gW3RhZ0VsbXNdIDogdGFnRWxtcyBpbnN0YW5jZW9mIEFycmF5ID8gdGFnRWxtcyA6IHRhZ0VsbXMgPyBbdGFnRWxtc10gOiBbdGhpcy5nZXRMYXN0VGFnKCldO1xuXG4gICAgLy8gbm9ybWFsaXplIHRhZ0VsbXMgYXJyYXkgdmFsdWVzOlxuICAgIC8vIDEuIHJlbW92aW5nIGludmFsaWQgaXRlbXNcbiAgICAvLyAyLCBpZiBhbiBpdGVtIGlzIFN0cmluZyB0cnkgdG8gZ2V0IHRoZSBtYXRjaGluZyBUYWcgSFRNTCBub2RlXG4gICAgLy8gMy4gZ2V0IHRoZSB0YWcgZGF0YVxuICAgIC8vIDQuIHJldHVybiBhIGNvbGxlY3Rpb24gb2YgT2JqZWN0c1xuICAgIHRhZ3NUb1JlbW92ZSA9IHRhZ0VsbXMucmVkdWNlKChlbG1zLCB0YWdFbG0pID0+IHtcbiAgICAgIGlmICh0YWdFbG0gJiYgdHlwZW9mIHRhZ0VsbSA9PSAnc3RyaW5nJykgdGFnRWxtID0gdGhpcy5nZXRUYWdFbG1CeVZhbHVlKHRhZ0VsbSk7XG4gICAgICB2YXIgdGFnRGF0YSA9IGdldFNldFRhZ0RhdGEodGFnRWxtKTtcbiAgICAgIGlmICh0YWdFbG0gJiYgdGFnRGF0YSAmJiAhdGFnRGF0YS5yZWFkb25seSlcbiAgICAgICAgLy8gbWFrZSBzdXJlIGl0J3MgYSB0YWcgYW5kIG5vdCBzb21lIG90aGVyIG5vZGVcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgRE9NIG5vZGUgbWlnaHQgYmUgcmVtb3ZlZCBieSBhc3luYyBhbmltYXRpb24sIHRoZSBzdGF0ZSB3aWxsIGJlIHVwZGF0ZWQgd2hpbGVcbiAgICAgICAgLy8gdGhlIG5vZGUgbWlnaHQgc3RpbGwgYmUgaW4gdGhlIERPTSwgc28gdGhlIFwidXBkYXRlXCIgbWV0aG9kIHNob3VsZCBrbm93IHdoaWNoIG5vZGVzIHRvIGlnbm9yZVxuICAgICAgICBlbG1zLnB1c2goe1xuICAgICAgICAgIG5vZGU6IHRhZ0VsbSxcbiAgICAgICAgICBpZHg6IHRoaXMuZ2V0VGFnSWR4KHRhZ0RhdGEpLFxuICAgICAgICAgIC8vIHRoaXMuZ2V0Tm9kZUluZGV4KHRhZ0VsbSk7IC8vIHRoaXMuZ2V0VGFnSW5kZXhCeVZhbHVlKHRhZ0VsbS50ZXh0Q29udGVudClcbiAgICAgICAgICBkYXRhOiBnZXRTZXRUYWdEYXRhKHRhZ0VsbSwge1xuICAgICAgICAgICAgJ19fcmVtb3ZlZCc6IHRydWVcbiAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgIHJldHVybiBlbG1zO1xuICAgIH0sIFtdKTtcbiAgICB0cmFuRHVyYXRpb24gPSB0eXBlb2YgdHJhbkR1cmF0aW9uID09IFwibnVtYmVyXCIgPyB0cmFuRHVyYXRpb24gOiB0aGlzLkNTU1ZhcnMudGFnSGlkZVRyYW5zaXRpb247XG4gICAgaWYgKF9zLm1vZGUgPT0gJ3NlbGVjdCcpIHtcbiAgICAgIHRyYW5EdXJhdGlvbiA9IDA7XG4gICAgICB0aGlzLmlucHV0LnNldC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIGlmIG9ubHkgYSBzaW5nbGUgdGFnIGlzIHRvIGJlIHJlbW92ZWQuXG4gICAgLy8gc2tpcCBcInNlbGVjdFwiIG1vZGUgYmVjYXVzZSBpbnZhbGlkIHRhZ3MgYXJlIGFjdHVhbGx5IHNldCB0byBgdGhpcy52YWx1ZWBcbiAgICBpZiAodGFnc1RvUmVtb3ZlLmxlbmd0aCA9PSAxICYmIF9zLm1vZGUgIT0gJ3NlbGVjdCcpIHtcbiAgICAgIGlmICh0YWdzVG9SZW1vdmVbMF0ubm9kZS5jbGFzc0xpc3QuY29udGFpbnMoX3MuY2xhc3NOYW1lcy50YWdOb3RBbGxvd2VkKSkgc2lsZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF0YWdzVG9SZW1vdmUubGVuZ3RoKSByZXR1cm47XG4gICAgcmV0dXJuIF9zLmhvb2tzLmJlZm9yZVJlbW92ZVRhZyh0YWdzVG9SZW1vdmUsIHtcbiAgICAgIHRhZ2lmeTogdGhpc1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgZnVuY3Rpb24gcmVtb3ZlTm9kZSh0YWcpIHtcbiAgICAgICAgaWYgKCF0YWcubm9kZS5wYXJlbnROb2RlKSByZXR1cm47XG4gICAgICAgIHRhZy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnLm5vZGUpO1xuICAgICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICAgIC8vIHRoaXMucmVtb3ZlVmFsdWVCeUlkKHRhZ0RhdGEuX191aWQpXG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdyZW1vdmUnLCB7XG4gICAgICAgICAgICB0YWc6IHRhZy5ub2RlLFxuICAgICAgICAgICAgaW5kZXg6IHRhZy5pZHgsXG4gICAgICAgICAgICBkYXRhOiB0YWcuZGF0YVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuZHJvcGRvd24ucmVmaWx0ZXIoKTtcbiAgICAgICAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKCk7XG4gICAgICAgICAgdGhpcy5ET00uaW5wdXQubm9ybWFsaXplKCk7IC8vIGJlc3QtcHJhY3RpY2Ugd2hlbiBpbiBtaXgtbW9kZSAoc2FmZSB0byBkbyBhbHdheXMgYW55d2F5cylcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIGFueSBvZiB0aGUgY3VycmVudCB0YWdzIHdoaWNoIG1pZ2h0IGhhdmUgYmVlbiBtYXJrZWQgYXMgXCJkdXBsaWNhdGVcIiBzaG91bGQgYmUgdW4tbWFya2VkXG4gICAgICAgICAgaWYgKF9zLmtlZXBJbnZhbGlkVGFncykgdGhpcy5yZUNoZWNrSW52YWxpZFRhZ3MoKTtcblxuICAgICAgICAgIC8vIGJlbG93IGNvZGUgaXMgdW5maW5pc2hlZC4gaXQgc2hvdWxkIGl0ZXJhdGUgYWxsIGN1cnJlbnRseSBpbnZhbGlkIGVkaXRlZCB0YWdzLCB3aGljaCB0aGVpciBlZGl0cyBoYXZlIG5vdFxuICAgICAgICAgIC8vIGNoYW5nZWQgdGhlIHZhbHVlIHlldCwgYW5kIHNob3VsZCByZS10cmlnZ2VyIHRoZSBjaGVjaywgYnV0IHNpbmNlIG5vdGhpbmcgaGFzIGNoYW5nZWQsIGl0IGRvZXMgbm90IHdvcmsuLi5cbiAgICAgICAgICAvLyB0aGlzLmdldFRhZ0VsbXMoX3MuY2xhc3NOYW1lcy50YWdFZGl0aW5nKS5mb3JFYWNoKCB0aGlzLmV2ZW50cy5jYWxsYmFja3Mub25FZGl0VGFnQmx1ci5iaW5kIClcbiAgICAgICAgfSBlbHNlIGlmIChfcy5rZWVwSW52YWxpZFRhZ3MpIHRoaXMudHJpZ2dlcigncmVtb3ZlJywge1xuICAgICAgICAgIHRhZzogdGFnLm5vZGUsXG4gICAgICAgICAgaW5kZXg6IHRhZy5pZHhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBhbmltYXRpb24odGFnKSB7XG4gICAgICAgIHRhZy5ub2RlLnN0eWxlLndpZHRoID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0YWcubm9kZSkud2lkdGgpICsgJ3B4JztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGllbnRUb3A7IC8vIGZvcmNlIHJlcGFpbnQgZm9yIHRoZSB3aWR0aCB0byB0YWtlIGFmZmVjdCBiZWZvcmUgdGhlIFwiaGlkZVwiIGNsYXNzIGJlbG93XG4gICAgICAgIHRhZy5ub2RlLmNsYXNzTGlzdC5hZGQoX3MuY2xhc3NOYW1lcy50YWdIaWRlKTtcblxuICAgICAgICAvLyBtYW51YWwgdGltZW91dCAoaGFjaywgc2luY2UgdHJhbnNpdGlvbmVuZCBjYW5ub3QgYmUgdXNlZCBiZWNhdXNlIG9mIGhvdmVyKVxuICAgICAgICBzZXRUaW1lb3V0KHJlbW92ZU5vZGUuYmluZCh0aGlzKSwgdHJhbkR1cmF0aW9uLCB0YWcpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5EdXJhdGlvbiAmJiB0cmFuRHVyYXRpb24gPiAxMCAmJiB0YWdzVG9SZW1vdmUubGVuZ3RoID09IDEpIGFuaW1hdGlvbi5jYWxsKHRoaXMsIHRhZ3NUb1JlbW92ZVswXSk7ZWxzZSB0YWdzVG9SZW1vdmUuZm9yRWFjaChyZW1vdmVOb2RlLmJpbmQodGhpcykpO1xuXG4gICAgICAvLyB1cGRhdGUgc3RhdGUgcmVnYXJkbGVzcyBvZiBhbmltYXRpb25cbiAgICAgIGlmICghc2lsZW50KSB7XG4gICAgICAgIHRoaXMucmVtb3ZlVGFnc0Zyb21WYWx1ZSh0YWdzVG9SZW1vdmUubWFwKHRhZyA9PiB0YWcubm9kZSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZSgpOyAvLyB1cGRhdGUgdGhlIG9yaWdpbmFsIGlucHV0IHdpdGggdGhlIGN1cnJlbnQgdmFsdWVcblxuICAgICAgICBpZiAoX3MubW9kZSA9PSAnc2VsZWN0JykgdGhpcy5zZXRDb250ZW50RWRpdGFibGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2gocmVhc29uID0+IHt9KTtcbiAgfSxcbiAgcmVtb3ZlVGFnc0Zyb21ET00oKSB7XG4gICAgW10uc2xpY2UuY2FsbCh0aGlzLmdldFRhZ0VsbXMoKSkuZm9yRWFjaChlbG0gPT4gZWxtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxtKSk7XG4gIH0sXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7QXJyYXkvTm9kZX0gdGFncyB0byBiZSByZW1vdmVkIGZyb20gdGhlIHRoaXMudmFsdWUgYXJyYXlcclxuICAgKi9cbiAgcmVtb3ZlVGFnc0Zyb21WYWx1ZSh0YWdzKSB7XG4gICAgdGFncyA9IEFycmF5LmlzQXJyYXkodGFncykgPyB0YWdzIDogW3RhZ3NdO1xuICAgIHRhZ3MuZm9yRWFjaCh0YWcgPT4ge1xuICAgICAgdmFyIHRhZ0RhdGEgPSBnZXRTZXRUYWdEYXRhKHRhZyksXG4gICAgICAgIHRhZ0lkeCA9IHRoaXMuZ2V0VGFnSWR4KHRhZ0RhdGEpO1xuXG4gICAgICAvLyAgZGVsZXRlIHRhZ0RhdGEuX19yZW1vdmVkXG5cbiAgICAgIGlmICh0YWdJZHggPiAtMSkgdGhpcy52YWx1ZS5zcGxpY2UodGFnSWR4LCAxKTtcbiAgICB9KTtcbiAgfSxcbiAgcmVtb3ZlQWxsVGFncyhvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgPT0gJ21peCcpIHRoaXMuRE9NLmlucHV0LmlubmVySFRNTCA9ICcnO2Vsc2UgdGhpcy5yZW1vdmVUYWdzRnJvbURPTSgpO1xuICAgIHRoaXMuZHJvcGRvd24ucmVmaWx0ZXIoKTtcbiAgICB0aGlzLmRyb3Bkb3duLnBvc2l0aW9uKCk7XG4gICAgaWYgKHRoaXMuc3RhdGUuZHJvcGRvd24udmlzaWJsZSkgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLkRPTS5pbnB1dC5mb2N1cygpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnNldHRpbmdzLm1vZGUgPT0gJ3NlbGVjdCcpIHtcbiAgICAgIHRoaXMuaW5wdXQuc2V0LmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnNldENvbnRlbnRFZGl0YWJsZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvLyB0ZWNobmljYWxseSBmb3Igbm93IG9ubHkgXCJ3aXRob3V0Q2hhbmdlRXZlbnRcIiBleGlzdHMgaW4gdGhlIG9wdHMuXG4gICAgLy8gaWYgbW9yZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgbGF0ZXIsIG9ubHkgcGFzcyB3aGF0J3MgbmVlZGVkIHRvIFwidXBkYXRlXCJcbiAgICB0aGlzLnVwZGF0ZShvcHRzKTtcbiAgfSxcbiAgcG9zdFVwZGF0ZSgpIHtcbiAgICB0aGlzLnN0YXRlLmJsb2NrQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICB2YXIgX3MgPSB0aGlzLnNldHRpbmdzLFxuICAgICAgY2xhc3NOYW1lcyA9IF9zLmNsYXNzTmFtZXMsXG4gICAgICBoYXNWYWx1ZSA9IF9zLm1vZGUgPT0gJ21peCcgPyBfcy5taXhNb2RlLmludGVncmF0ZWQgPyB0aGlzLkRPTS5pbnB1dC50ZXh0Q29udGVudCA6IHRoaXMuRE9NLm9yaWdpbmFsSW5wdXQudmFsdWUudHJpbSgpIDogdGhpcy52YWx1ZS5sZW5ndGggKyB0aGlzLmlucHV0LnJhdy5jYWxsKHRoaXMpLmxlbmd0aDtcbiAgICB0aGlzLnRvZ2dsZUNsYXNzKGNsYXNzTmFtZXMuaGFzTWF4VGFncywgdGhpcy52YWx1ZS5sZW5ndGggPj0gX3MubWF4VGFncyk7XG4gICAgdGhpcy50b2dnbGVDbGFzcyhjbGFzc05hbWVzLmhhc05vVGFncywgIXRoaXMudmFsdWUubGVuZ3RoKTtcbiAgICB0aGlzLnRvZ2dsZUNsYXNzKGNsYXNzTmFtZXMuZW1wdHksICFoYXNWYWx1ZSk7XG5cbiAgICAvLyBzcGVjaWZpY2FsbHkgdGhlIFwic2VsZWN0IG1vZGVcIiBtaWdodCBoYXZlIHRoZSBcImludmFsaWRcIiBjbGFzc25hbWUgc2V0IHdoZW4gdGhlIGZpZWxkIGlzIGNoYW5nZWQsIHNvIGl0IG11c3QgYmUgdG9nZ2xlZCBvbiBhZGQvcmVtb3ZlL2VkaXRcbiAgICBpZiAoX3MubW9kZSA9PSAnc2VsZWN0Jykge1xuICAgICAgdGhpcy50b2dnbGVTY29wZVZhbGlkYXRpb24odGhpcy52YWx1ZT8uWzBdPy5fX2lzVmFsaWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0T3JpZ2luYWxJbnB1dFZhbHVlKHYpIHtcbiAgICB2YXIgaW5wdXRFbG0gPSB0aGlzLkRPTS5vcmlnaW5hbElucHV0O1xuICAgIGlmICghdGhpcy5zZXR0aW5ncy5taXhNb2RlLmludGVncmF0ZWQpIHtcbiAgICAgIGlucHV0RWxtLnZhbHVlID0gdjtcbiAgICAgIGlucHV0RWxtLnRhZ2lmeVZhbHVlID0gaW5wdXRFbG0udmFsdWU7IC8vIG11c3Qgc2V0IHRvIFwiaW5wdXRFbG0udmFsdWVcIiBhbmQgbm90IGFnYWluIHRvIFwiaW5wdXRWYWx1ZVwiIGJlY2F1c2UgZm9yIHNvbWUgcmVhc29uIHRoZSBicm93c2VyIGNoYW5nZXMgdGhlIHN0cmluZyBhZnRlcndhcmRzIGEgYml0LlxuICAgICAgdGhpcy5zZXRQZXJzaXN0ZWREYXRhKHYsICd2YWx1ZScpO1xuICAgIH1cbiAgfSxcbiAgLyoqXHJcbiAgICogdXBkYXRlIHRoZSBvcmlnaWFubCAoaGlkZGVuKSBpbnB1dCBmaWVsZCdzIHZhbHVlXHJcbiAgICogc2VlIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzUwOTU3ODQxLzEwNDM4MFxyXG4gICAqL1xuICB1cGRhdGUoYXJncykge1xuICAgIGNvbnN0IFVQREFURV9ERUxBWSA9IDEwMDtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5kZWJvdW5jZWRVcGRhdGVUaW1lb3V0KTtcbiAgICB0aGlzLmRlYm91bmNlZFVwZGF0ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHJlYWxseVVwZGF0ZS5iaW5kKHRoaXMpLCBVUERBVEVfREVMQVkpO1xuICAgIGZ1bmN0aW9uIHJlYWxseVVwZGF0ZSgpIHtcbiAgICAgIHZhciBpbnB1dFZhbHVlID0gdGhpcy5nZXRJbnB1dFZhbHVlKCk7XG4gICAgICB0aGlzLnNldE9yaWdpbmFsSW5wdXRWYWx1ZShpbnB1dFZhbHVlKTtcbiAgICAgIGlmICgoIXRoaXMuc2V0dGluZ3Mub25DaGFuZ2VBZnRlckJsdXIgfHwgIShhcmdzIHx8IHt9KS53aXRob3V0Q2hhbmdlRXZlbnQpICYmICF0aGlzLnN0YXRlLmJsb2NrQ2hhbmdlRXZlbnQpIHRoaXMudHJpZ2dlckNoYW5nZUV2ZW50KCk7XG4gICAgICB0aGlzLnBvc3RVcGRhdGUoKTtcbiAgICB9XG4gIH0sXG4gIGdldElucHV0VmFsdWUoKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXRDbGVhblZhbHVlKCk7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MubW9kZSA9PSAnbWl4JyA/IHRoaXMuZ2V0TWl4ZWRUYWdzQXNTdHJpbmcodmFsdWUpIDogdmFsdWUubGVuZ3RoID8gdGhpcy5zZXR0aW5ncy5vcmlnaW5hbElucHV0VmFsdWVGb3JtYXQgPyB0aGlzLnNldHRpbmdzLm9yaWdpbmFsSW5wdXRWYWx1ZUZvcm1hdCh2YWx1ZSkgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBcIlwiO1xuICB9LFxuICAvKipcclxuICAgKiByZW1vdmVzIHByb3BlcnRpZXMgZnJvbSBgdGhpcy52YWx1ZWAgd2hpY2ggYXJlIG9ubHkgdXNlZCBpbnRlcm5hbGx5XHJcbiAgICovXG4gIGdldENsZWFuVmFsdWUodikge1xuICAgIHJldHVybiByZW1vdmVDb2xsZWN0aW9uUHJvcCh2IHx8IHRoaXMudmFsdWUsIHRoaXMuZGF0YVByb3BzKTtcbiAgfSxcbiAgZ2V0TWl4ZWRUYWdzQXNTdHJpbmcoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFwiXCIsXG4gICAgICB0aGF0ID0gdGhpcyxcbiAgICAgIF9zID0gdGhpcy5zZXR0aW5ncyxcbiAgICAgIG9yaWdpbmFsSW5wdXRWYWx1ZUZvcm1hdCA9IF9zLm9yaWdpbmFsSW5wdXRWYWx1ZUZvcm1hdCB8fCBKU09OLnN0cmluZ2lmeSxcbiAgICAgIF9pbnRlcnBvbGF0b3IgPSBfcy5taXhUYWdzSW50ZXJwb2xhdG9yO1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVDaGlsZHJlbihyb290Tm9kZSkge1xuICAgICAgcm9vdE5vZGUuY2hpbGROb2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgY29uc3QgdGFnRGF0YSA9IGdldFNldFRhZ0RhdGEobm9kZSk7XG4gICAgICAgICAgaWYgKG5vZGUudGFnTmFtZSA9PSAnQlInKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJcXHJcXG5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRhZ0RhdGEgJiYgaXNOb2RlVGFnLmNhbGwodGhhdCwgbm9kZSkpIHtcbiAgICAgICAgICAgIGlmICh0YWdEYXRhLl9fcmVtb3ZlZCkgcmV0dXJuO2Vsc2UgcmVzdWx0ICs9IF9pbnRlcnBvbGF0b3JbMF0gKyBvcmlnaW5hbElucHV0VmFsdWVGb3JtYXQob21pdCh0YWdEYXRhLCB0aGF0LmRhdGFQcm9wcykpICsgX2ludGVycG9sYXRvclsxXTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpIHx8IFsnQicsICdJJywgJ1UnXS5pbmNsdWRlcyhub2RlLnRhZ05hbWUpKSByZXN1bHQgKz0gbm9kZS50ZXh0Q29udGVudDtlbHNlIGlmIChub2RlLnRhZ05hbWUgPT0gJ0RJVicgfHwgbm9kZS50YWdOYW1lID09ICdQJykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiXFxyXFxuXCI7XG4gICAgICAgICAgICAvLyAgaWYoICFub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiBub2RlLnRleHRDb250ZW50IClcbiAgICAgICAgICAgIC8vICByZXN1bHQgKz0gbm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIGl0ZXJhdGVDaGlsZHJlbihub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSByZXN1bHQgKz0gbm9kZS50ZXh0Q29udGVudDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpdGVyYXRlQ2hpbGRyZW4odGhpcy5ET00uaW5wdXQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbi8vIGxlZ2FjeSBzdXBwb3J0IGZvciBjaGFuZ2VkIG1ldGhvZHMgbmFtZXNcblRhZ2lmeS5wcm90b3R5cGUucmVtb3ZlVGFnID0gVGFnaWZ5LnByb3RvdHlwZS5yZW1vdmVUYWdzO1xuXG5leHBvcnQgeyBUYWdpZnkgYXMgZGVmYXVsdCB9O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQyIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5Iiwib2JqIiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3RvUHJpbWl0aXZlIiwiaW5wdXQiLCJoaW50IiwiX3R5cGVvZiIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJOdW1iZXIiLCJhcmciLCJzYW1lU3RyIiwiczEiLCJzMiIsImNhc2VTZW5zaXRpdmUiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJyZW1vdmVDb2xsZWN0aW9uUHJvcCIsImNvbGxlY3Rpb24iLCJ1bndhbnRlZFByb3BzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwidiIsIm9taXQiLCJwcm9wcyIsIm5ld09iaiIsInAiLCJpbmRleE9mIiwiZGVjb2RlIiwicyIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicmVwbGFjZSIsImVuYyIsImlubmVySFRNTCIsImlubmVyVGV4dCIsInBhcnNlSFRNTCIsInBhcnNlciIsIkRPTVBhcnNlciIsIm5vZGUiLCJwYXJzZUZyb21TdHJpbmciLCJib2R5IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJtaW5pZnkiLCJtIiwiJDEiLCJyZW1vdmVUZXh0Q2hpbGROb2RlcyIsImVsbSIsIml0ZXIiLCJjcmVhdGVOb2RlSXRlcmF0b3IiLCJOb2RlRmlsdGVyIiwiU0hPV19URVhUIiwidGV4dG5vZGUiLCJuZXh0Tm9kZSIsInRleHRDb250ZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZ2V0Zmlyc3RUZXh0Tm9kZSIsImFjdGlvbiIsIm5vZGVUeXBlIiwiZXNjYXBlSFRNTCIsImlzT2JqZWN0IiwidHlwZSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic3BsaXQiLCJzbGljZSIsImV4dGVuZCIsIm8iLCJvMSIsIm8yIiwiY29weSIsImEiLCJiIiwiaGFzT3duUHJvcGVydHkiLCJhc3NpZ24iLCJjb25jYXRXaXRob3V0RHVwcyIsIm5ld0FyciIsImV4aXN0aW5nT2JqIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJfc3RlcCIsIm4iLCJkb25lIiwiYXJyIiwiX2l0ZXJhdG9yMiIsIl9zdGVwMiIsIml0ZW0iLCJpbmNsdWRlcyIsImVyciIsImUiLCJmIiwidW5hY2NlbnQiLCJub3JtYWxpemUiLCJnZXROb2RlSGVpZ2h0IiwiaGVpZ2h0IiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJzdHlsZSIsImNzc1RleHQiLCJhcHBlbmRDaGlsZCIsImNsaWVudEhlaWdodCIsImlzQ2hyb21lQW5kcm9pZEJyb3dzZXIiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZ2V0VUlEIiwiYyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJpc05vZGVUYWciLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInNldHRpbmdzIiwiY2xhc3NOYW1lcyIsInRhZyIsImdldENhcmV0R2xvYmFsUG9zaXRpb24iLCJzZWwiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiciIsImdldFJhbmdlQXQiLCJzdGFydENvbnRhaW5lciIsIm9mZnNldCIsInN0YXJ0T2Zmc2V0IiwicmVjdCIsInIyIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImluamVjdEF0Q2FyZXQiLCJjb250ZW50IiwicmFuZ2UiLCJzZWxlY3Rpb24iLCJ3aW5kb3ciLCJjcmVhdGVUZXh0Tm9kZSIsImRlbGV0ZUNvbnRlbnRzIiwiaW5zZXJ0Tm9kZSIsImdldFNldFRhZ0RhdGEiLCJ0YWdFbG0iLCJkYXRhIiwib3ZlcnJpZGUiLCJjb25zb2xlIiwid2FybiIsIl9fdGFnaWZ5VGFnRGF0YSIsIkRFRkFVTFRTIiwiZGVsaW1pdGVycyIsInBhdHRlcm4iLCJ0YWdUZXh0UHJvcCIsIm1heFRhZ3MiLCJJbmZpbml0eSIsImNhbGxiYWNrcyIsImFkZFRhZ09uQmx1ciIsIm9uQ2hhbmdlQWZ0ZXJCbHVyIiwiZHVwbGljYXRlcyIsIndoaXRlbGlzdCIsImJsYWNrbGlzdCIsImVuZm9yY2VXaGl0ZWxpc3QiLCJ1c2VySW5wdXQiLCJrZWVwSW52YWxpZFRhZ3MiLCJjcmVhdGVJbnZhbGlkVGFncyIsIm1peFRhZ3NBbGxvd2VkQWZ0ZXIiLCJtaXhUYWdzSW50ZXJwb2xhdG9yIiwiYmFja3NwYWNlIiwic2tpcEludmFsaWQiLCJwYXN0ZUFzVGFncyIsImVkaXRUYWdzIiwiY2xpY2tzIiwia2VlcEludmFsaWQiLCJ0cmFuc2Zvcm1UYWciLCJhMTF5IiwiZm9jdXNhYmxlVGFncyIsIm1peE1vZGUiLCJpbnNlcnRBZnRlclRhZyIsImF1dG9Db21wbGV0ZSIsImVuYWJsZWQiLCJyaWdodEtleSIsIm5hbWVzcGFjZSIsInNlbGVjdE1vZGUiLCJmb2N1cyIsInRhZ05vQW5pbWF0aW9uIiwidGFnSW52YWxpZCIsInRhZ05vdEFsbG93ZWQiLCJzY29wZUxvYWRpbmciLCJoYXNNYXhUYWdzIiwiaGFzTm9UYWdzIiwiZW1wdHkiLCJpbnB1dEludmFsaWQiLCJkcm9wZG93biIsImRyb3Bkb3duV3JhcHBlciIsImRyb3Bkb3duSGVhZGVyIiwiZHJvcGRvd25Gb290ZXIiLCJkcm9wZG93bkl0ZW0iLCJkcm9wZG93bkl0ZW1BY3RpdmUiLCJkcm9wZG93bkl0ZW1IaWRkZW4iLCJkcm9wZG93bkluaXRhbCIsInRhZ1RleHQiLCJ0YWdYIiwidGFnTG9hZGluZyIsInRhZ0VkaXRpbmciLCJ0YWdGbGFzaCIsInRhZ0hpZGUiLCJjbGFzc25hbWUiLCJtYXhJdGVtcyIsInNlYXJjaEtleXMiLCJmdXp6eVNlYXJjaCIsImFjY2VudGVkU2VhcmNoIiwiaW5jbHVkZVNlbGVjdGVkVGFncyIsImhpZ2hsaWdodEZpcnN0IiwiY2xvc2VPblNlbGVjdCIsImNsZWFyT25TZWxlY3QiLCJwb3NpdGlvbiIsImFwcGVuZFRhcmdldCIsImhvb2tzIiwiYmVmb3JlUmVtb3ZlVGFnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJiZWZvcmVQYXN0ZSIsInN1Z2dlc3Rpb25DbGljayIsImluaXREcm9wZG93biIsIl9kcm9wZG93biIsImJpbmQiLCJyZWZzIiwiRE9NIiwicGFyc2VUZW1wbGF0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRIZWFkZXJSZWYiLCJnZXRGb290ZXJSZWYiLCJnZXRBbGxTdWdnZXN0aW9uc1JlZnMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZHJvcGRvd25JdGVtU2VsZWN0b3IiLCJzaG93IiwiX3RoaXMyIiwiX3MiLCJmaXJzdExpc3RJdGVtIiwiZmlyc3RMaXN0SXRlbVZhbHVlIiwiYWxsb3dOZXdUYWdzIiwibW9kZSIsIm5vV2hpdGVsaXN0Iiwibm9NYXRjaExpc3RJdGVtIiwiaXNNYW51YWwiLCJzdGF0ZSIsImlucHV0VGV4dCIsInRlbXBsYXRlcyIsImRyb3Bkb3duSXRlbU5vTWF0Y2giLCJlbmFibGUiLCJpc0xvYWRpbmciLCJyZWFkb25seSIsImNsZWFyVGltZW91dCIsImRyb3Bkb3duSGlkZV9fYmluZEV2ZW50c1RpbWVvdXQiLCJzdWdnZXN0ZWRMaXN0SXRlbXMiLCJmaWx0ZXJMaXN0SXRlbXMiLCJ0cmlnZ2VyIiwiZWRpdGluZyIsInNjb3BlIiwidW5zaGlmdCIsImF1dG9jb21wbGV0ZSIsInN1Z2dlc3QiLCJoaWRlIiwiZmlsbCIsImhpZ2hsaWdodE9wdGlvbiIsInZpc2libGUiLCJzZXRUaW1lb3V0IiwiZXZlbnRzIiwiYmluZGluZyIsInF1ZXJ5Iiwic2V0U3RhdGVTZWxlY3Rpb24iLCJyZW5kZXIiLCJvdmVycmlkZU1hbnVhbCIsIl90aGlzMyIsIl90aGlzJERPTSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRBdHRyaWJ1dGUiLCJkZEl0ZW1EYXRhIiwiZGRJdGVtRWxtIiwiZmxhZ2dlZFRhZ3MiLCJiYXNlT2Zmc2V0IiwidG9nZ2xlIiwiX3RoaXM0IiwiZGRIZWlnaHQiLCJhZGQiLCJyZW1vdmUiLCJIVE1MQ29udGVudCIsImNyZWF0ZUxpc3RIVE1MIiwiZHJvcGRvd25Db250ZW50IiwiZmlsbEhlYWRlckZvb3RlciIsInN1Z2dlc3Rpb25zIiwibmV3SGVhZGVyRWxlbSIsIm5ld0Zvb3RlckVsZW0iLCJoZWFkZXJSZWYiLCJmb290ZXJSZWYiLCJyZXBsYWNlQ2hpbGQiLCJyZWZpbHRlciIsIl9zZCIsIndpZHRoIiwicGFyZW50c1Bvc2l0aW9ucyIsImRkRWxtIiwicGxhY2VBYm92ZSIsImlzRGVmYXVsdEFwcGVuZFRhcmdldCIsImFwcGVuZFRhcmdldFNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicm9vdCIsImZ1bGxzY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJ2aWV3cG9ydEhlaWdodCIsInZpZXdwb3J0V2lkdGgiLCJNYXRoIiwibWF4IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwicG9zaXRpb25UbyIsImRkVGFyZ2V0IiwiZ2V0UGFyZW50c1Bvc2l0aW9ucyIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJnZXRBY2N1bXVsYXRlZEFuY2VzdG9yc1Njcm9sbFRvcCIsImFjY3VtdWxhdGVkQW5jZXN0b3JzU2Nyb2xsVG9wIiwiZmxvb3IiLCJjZWlsIiwicGFnZVhPZmZzZXQiLCJiaW5kVW5iaW5kIiwiX0NCIiwiX0NCUiIsImxpc3RlbmVycyIsIm9uS2V5RG93biIsIm9uTW91c2VPdmVyIiwib25Nb3VzZUxlYXZlIiwib25DbGljayIsIm9uU2Nyb2xsIiwiX3RoaXM1IiwiaGFzRm9jdXMiLCJjb21wb3NpbmciLCJzZWxlY3RlZEVsbSIsImRyb3Bkb3duSXRlbUFjdGl2ZVNlbGVjdG9yIiwic2VsZWN0ZWRFbG1EYXRhIiwiZ2V0U3VnZ2VzdGlvbkRhdGFCeU5vZGUiLCJwcmV2ZW50RGVmYXVsdCIsImRyb3Bkb3duSXRlbXMiLCJhY3Rpb25VcCIsImdldE5leHRPclByZXZPcHRpb24iLCJtYXRjaGVzIiwiYWN0aW9ucyIsIkFycm93TGVmdCIsImdldE1hcHBlZFZhbHVlIiwic2V0IiwidGFnaWZ5IiwidGFnRGF0YSIsInN1Z2dlc3Rpb25FbG0iLCJ0aGVuIiwic2VsZWN0T3B0aW9uIiwiYWRkVGFncyIsImNhdGNoIiwicmF3IiwiY2hhckNvZGVBdCIsInJlbW92ZVRhZ3MiLCJlZGl0VGFnIiwiZGRJdGVtIiwiY2xvc2VzdCIsIl90aGlzNiIsImJ1dHRvbiIsInBvcyIsInNjcm9sbEhlaWdodCIsInBlcmNlbnRhZ2UiLCJyb3VuZCIsImdldEF0dHJpYnV0ZSIsImZpbmQiLCJzZWxlY3RlZCIsIm5leHQiLCJzZWxlY3RlZElkeCIsImZpbmRJbmRleCIsImFkanVzdFNjcm9sbCIsImNsYXNzTmFtZSIsIml0ZW1EYXRhIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJfdGhpczciLCJfdGhpcyRzZXR0aW5ncyRkcm9wZG8iLCJpc05vTWF0Y2giLCJfaXRlbSR2YWx1ZSIsIm9uRWRpdFRhZ0RvbmUiLCJfX2lzVmFsaWQiLCJub3JtYWxpemVUYWdzIiwidG9nZ2xlRm9jdXNDbGFzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwic2VsZWN0QWxsIiwib25seVJlbmRlcmVkIiwidGFnc1RvQWRkIiwib3B0aW9ucyIsIl90aGlzOCIsImxpc3QiLCJleGFjdE1hdGNoZXNMaXN0Iiwic3VnZ2VzdGlvbnNDb3VudCIsIndoaXRlbGlzdEl0ZW0iLCJ2YWx1ZUlzSW5XaGl0ZWxpc3QiLCJzZWFyY2hCeSIsImlzRHVwbGljYXRlIiwibmlkZGxlIiwiaXNUYWdEdXBsaWNhdGUiLCJzdHJpbmdIYXNBbGwiLCJldmVyeSIsInEiLCJfbG9vcCIsInN0YXJ0c1dpdGhNYXRjaCIsImV4YWN0TWF0Y2giLCJpdGVtV2l0aG91dFNlYXJjaEtleXMiLCJzb21lIiwiayIsIl9zZWFyY2hLZXlzIiwiZXhhY3QiLCJyZWR1Y2UiLCJ2YWx1ZXMiLCJzb3J0YnkiLCJjb25jYXQiLCJtYXBWYWx1ZVRvIiwic3VnZWdzdGlvbnNMaXN0IiwiX3RoaXM5Iiwic3VnZ2VzdGlvbiIsImlkeCIsIm1hcHBlZFZhbHVlIiwiam9pbiIsIlZFUlNJT04iLCJTVE9SRV9LRVkiLCJnZXRQZXJzaXN0ZWREYXRhIiwiaWQiLCJjdXN0b21LZXkiLCJwZXJzaXN0ZWREYXRhIiwidmVyc2lvbk1hdGNoIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsInNldFBlcnNpc3RlZERhdGEiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwiY2xlYXJQZXJzaXN0ZWREYXRhIiwiYmFzZSIsInJlbW92ZUl0ZW0iLCJURVhUUyIsImV4Y2VlZCIsImR1cGxpY2F0ZSIsIm5vdEFsbG93ZWQiLCJ3cmFwcGVyIiwiZGlzYWJsZWQiLCJyZXF1aXJlZCIsInBsYWNlaG9sZGVyIiwiX3JlZiIsInRpdGxlIiwiY2xhc3MiLCJnZXRBdHRyaWJ1dGVzIiwiaGFzTW9yZSIsIkV2ZW50RGlzcGF0Y2hlciIsImluc3RhbmNlIiwiYWRkUmVtb3ZlIiwib3AiLCJjYiIsIm5hbWUiLCJvZmYiLCJvbiIsImV2ZW50TmFtZSIsIm9wdHMiLCJjbG9uZURhdGEiLCJpc0pRdWVyeVBsdWdpbiIsImpRdWVyeSIsIm9yaWdpbmFsSW5wdXQiLCJ0cmlnZ2VySGFuZGxlciIsImV2ZW50RGF0YSIsImNsb25lRXZlbnQiLCJwcm9wIiwiSFRNTEVsZW1lbnQiLCJDdXN0b21FdmVudCIsImRlbGV0ZUJhY2tzcGFjZVRpbWVvdXQiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJpbnRlZ3JhdGVkIiwiaW5wdXRFbG0iLCJjaGFuZ2VkIiwibGFzdE9yaWdpbmFsVmFsdWVSZXBvcnRlZCIsImJ1YmJsZXMiLCJzaW11bGF0ZWQiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJyYW5kb20iLCJjdXN0b21CaW5kaW5nIiwiX3RoaXMxMCIsImN1c3RvbUV2ZW50c0xpc3QiLCJtYWluRXZlbnRzIiwibWFpbiIsImJpbmRHbG9iYWwiLCJyZW1vdmVBbGxUYWdzIiwib25Gb2N1c0JsdXIiLCJrZXlkb3duIiwib25LZXlkb3duIiwiY2xpY2siLCJvbkNsaWNrU2NvcGUiLCJkYmxjbGljayIsIm9uRG91YmxlQ2xpY2tTY29wZSIsInBhc3RlIiwib25QYXN0ZSIsImRyb3AiLCJvbkRyb3AiLCJjb21wb3NpdGlvbnN0YXJ0Iiwib25Db21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25lbmQiLCJvbkNvbXBvc2l0aW9uRW5kIiwiY2xlYXJJbnRlcnZhbCIsIm9yaWdpbmFsSW5wdXRWYWx1ZU9ic2VydmVySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsIm9ic2VydmVPcmlnaW5hbElucHV0VmFsdWUiLCJpbnB1dE11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwib25JbnB1dERPTUNoYW5nZSIsImRpc2Nvbm5lY3QiLCJvYnNlcnZlIiwiY2hpbGRMaXN0IiwidW5iaW5kIiwiZ2xvYmFsIiwiaXNJRSIsIm9uV2luZG93S2V5RG93biIsIm9uQ2xpY2tBbnl3aGVyZSIsIl9pdGVyYXRvcjMiLCJfc3RlcDMiLCJ1bmJpbmRHbG9iYWwiLCJfdGhpcyR2YWx1ZSIsInRleHQiLCJjdXJyZW50RGlzcGxheVZhbHVlIiwiZGRFbmFibGVkIiwicmVsYXRlZFRhcmdldCIsImlzVGFyZ2V0U2VsZWN0T3B0aW9uIiwiaXNUYXJnZXRBZGROZXdCdG4iLCJhZGROZXciLCJpc1JlbGF0ZWRUYXJnZXRYIiwic2hvdWxkQWRkVGFncyIsInBvc3RVcGRhdGUiLCJEYXRlIiwibG9hZGluZyIsImZvY3VzZWRFbG0iLCJhY3RpdmVFbGVtZW50IiwiaXNUYWciLCJpc0JlbG9uZyIsImlzUmVhZHlPbmx5VGFnIiwiaGFzQXR0cmlidXRlIiwibmV4dFRhZyIsIm5leHRFbGVtZW50U2libGluZyIsIl90aGlzMTEiLCJkZWxldGVLZXlUYWdEZXRlY3RlZCIsImFuY2hvck9mZnNldCIsImFuY2hvck5vZGUiLCJwcmV2QW5jaG9yU2libGluZyIsInByZXZpb3VzU2libGluZyIsImlzQ2FyZXRBZnRlclRhZyIsImxhc3RUYWdFbGVtcyIsImdldFRhZ0VsbXMiLCJ0YWdCZWZvcmVDYXJldCIsInRhZ0VsbVRvQmVEZWxldGVkIiwiZmlyc3RUZXh0Tm9kZUJlZm9yZVRhZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJFbGVtZW50IiwicGxhY2VDYXJldEFmdGVyTm9kZSIsIm5vZGVOYW1lIiwibWluIiwibm9kZVZhbHVlIiwibm9kZUlkeCIsImluZGV4IiwiYmx1ciIsImlucHV0U3VnZ2VzdGlvbiIsIm9uSW5wdXQiLCJvbk1peFRhZ3NJbnB1dCIsInNob3dTdWdnZXN0aW9ucyIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZVRhZyIsInRvZ2dsZVNjb3BlVmFsaWRhdGlvbiIsImlzVmFsaWQiLCJzZWFyY2giLCJfdGhpczEyIiwicmFuZ2VUZXh0IiwibWF0Y2giLCJtYXRjaGVkUGF0dGVybkNvdW50IiwibGFzdFRhZ3NDb3VudCIsIm1hdGNoRmxhZ2dlZFRhZyIsIm1hdGNoRGVsaW1pdGVycyIsInRhZ3NFbGVtcyIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInJlbWFpbmluZ1RhZ3NWYWx1ZXMiLCJpbnB1dFR5cGUiLCJjcmVhdGVUYWdFbGVtIiwiY2hpbGROb2RlcyIsInNldFJhbmdlQXRTdGFydEVuZCIsImxhc3RDaGlsZCIsInVwZGF0ZSIsIndpdGhvdXRDaGFuZ2VFdmVudCIsImNsb25lUmFuZ2UiLCJjb2xsYXBzZSIsImZvY3VzTm9kZSIsImVuZE9mZnNldCIsImxhc3RJbmRleE9mIiwicHJlZml4Iiwib25JbnB1dElFIiwiX3RoaXMiLCJkZXN0cm95IiwidGFnaWZ5VmFsdWUiLCJsb2FkT3JpZ2luYWxWYWx1ZXMiLCJ0aW1lRGlmZkZvY3VzIiwiZ2V0Tm9kZUluZGV4IiwiZml4RmlyZWZveExhc3RUYWdOb0NhcmV0IiwiX3RoaXMxMyIsInNlbGVjdE1vZGVXaXRob3V0SW5wdXQiLCJjbGlwYm9hcmREYXRhIiwicGFzdGVkVGV4dCIsImdldERhdGEiLCJyZXN1bHQiLCJvbkVkaXRUYWdJbnB1dCIsImVkaXRhYmxlRWxtIiwidGFnRWxtSWR4IiwidGV4dFZhbHVlIiwiZGF0YUZvckNoYW5nZWRQcm9wIiwiX2RlZmluZVByb3BlcnR5MiIsIl9fdGFnSWQiLCJoYXNDaGFuZ2VkIiwiZWRpdFRhZ0NoYW5nZURldGVjdGVkIiwib3JpZ2luYWxJc1ZhbGlkIiwibmV3VmFsdWUiLCJvbkVkaXRUYWdQYXN0ZSIsIm5ld05vZGUiLCJvbkVkaXRUYWdGb2N1cyIsIm9uRWRpdFRhZ0JsdXIiLCJvcmlnaW5hbERhdGEiLCJfX29yaWdpbmFsRGF0YSIsIm5ld1RhZ0RhdGEiLCJtZXNzYWdlIiwib25FZGl0VGFna2V5ZG93biIsIl9fb3JpZ2luYWxIVE1MIiwiaXNFZGl0aW5nVGFnIiwiZWRpdGFibGUiLCJfdGhpczE0IiwicmVjb3JkIiwiYWRkZWROb2RlcyIsImFkZGVkTm9kZSIsIm91dGVySFRNTCIsInJlcGxhY2VXaXRoIiwidGFnU2VsZWN0b3IiLCJuZXdsaW5lVGV4dCIsIl9hZGRlZE5vZGUkcHJldmlvdXNTaSIsIm5leHRTaWJsaW5nIiwiYW55dGhpbmdBZnRlck5vZGUiLCJyZW1vdmVkTm9kZXMiLCJyZW1vdmVkTm9kZSIsImxhc3RJbnB1dENoaWxkIiwiVGFnaWZ5IiwibW9ja0luc3RhbmNlIiwiUHJveHkiLCJnZXQiLCJfX3RhZ2lmeSIsImlzRmlyZWZveCIsImRvY3VtZW50TW9kZSIsImFwcGx5U2V0dGluZ3MiLCJidWlsZCIsImdldENTU1ZhcnMiLCJhdXRvZm9jdXMiLCJoZWxwZXJzIiwiZGF0YVByb3BzIiwidGVtcGxhdGUiLCJnZW5lcmF0ZUNsYXNzU2VsZWN0b3JzIiwiX2xvb3AyIiwiY3VycmVudE5hbWUiLCJfc2V0dGluZ3MkZHJvcGRvd24iLCJfc2V0dGluZ3MkZHJvcGRvd24yIiwibWl4TW9kZURlZmF1bHRzIiwibWVyZ2VkRGVmYXVsdHMiLCJhdHRyVmFsIiwiUmVnRXhwIiwiX2RlbGltaXRlcnMiLCJ0ZXh0cyIsInBlcnNpc3RlZFdoaXRlbGlzdCIsImF0dHJzIiwiZ2V0Q3VzdG9tQXR0cmlidXRlcyIsIm91dHB1dCIsInByb3BOYW1lIiwiY29tcFN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2VwcmF0ZVVuaXRGcm9tVmFsdWUiLCJ1bml0IiwicG9wIiwiQ1NTVmFycyIsInRhZ0hpZGVUcmFuc2l0aW9uIiwib3JpZ2luYWxJbnB1dF90YWJJbmRleCIsInRhYkluZGV4IiwiaW5wdXRTZWxlY3RvciIsImluc2VydEJlZm9yZSIsImJsb2NrQ2hhbmdlRXZlbnQiLCJwZXJzaXN0ZWRPcmlnaW5hbFZhbHVlIiwicGFyc2VNaXhUYWdzIiwidGFnTmFtZSIsImluc2VydEFkamFjZW50SFRNTCIsImNsb25lZEV2ZW50IiwidG9nZ2xlQ2xhc3MiLCJmb3JjZSIsInN0YXJ0Iiwic2V0U3RhcnRBZnRlciIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiZ2V0VGFnVGV4dE5vZGUiLCJ0YWdUZXh0U2VsZWN0b3IiLCJzZXRUYWdUZXh0Tm9kZSIsIkhUTUwiLCJfdGhpczE1IiwiZ2V0TGFzdFRhZyIsInRhZ0lkeCIsInRoYXQiLCJkZWxheWVkX29uRWRpdFRhZ0JsdXIiLCJza2lwVmFsaWRhdGlvbiIsImVkaXRUYWdUb2dnbGVWYWxpZGl0eSIsInJlbW92ZVRhZ3NGcm9tVmFsdWUiLCJwcmV2aW91c0RhdGEiLCJyZXBsYWNlVGFnIiwicmVDaGVja0ludmFsaWRUYWdzIiwiZ2V0SW52YWxpZFRhZ0F0dHJzIiwibmV3VGFnRWxtIiwidXBkYXRlVmFsdWVCeURPTVRhZ3MiLCJfdGhpczE2IiwiaW5qZWN0ZWROb2RlIiwiX3RoaXMkc3RhdGUkc2VsZWN0aW9uIiwiYXBwZW5kTWl4VGFncyIsInVwZGF0ZURPTSIsImhpZGVEcm9wZG93biIsInZhbGlkYXRlIiwiY2hhckF0Iiwic3VnZ2VzdGVkVGV4dCIsInN1Z2dlc3Rpb25TdGFydCIsInN1YnN0ciIsInN1Z2dlc3Rpb25UcmltbWVkIiwic3Vic3RyaW5nIiwiZGF0YVN1Z2dlc3QiLCJyZXBsYWNlVGV4dFdpdGhOb2RlIiwiZ2V0VGFnSWR4IiwiX2xlbiIsImNsYXNzZXNzIiwiX2tleSIsImxhc3RUYWciLCJ0YWdJZCIsImR1cHNDb3VudCIsIl9pdGVyYXRvcjQiLCJfc3RlcDQiLCJpc1NhbWVTdHIiLCJnZXRUYWdJbmRleEJ5VmFsdWUiLCJfdGhpczE3IiwiaW5kaWNlcyIsImdldFRhZ0VsbUJ5VmFsdWUiLCJmbGFzaFRhZyIsIl90aGlzMTgiLCJpc1RhZ0JsYWNrbGlzdGVkIiwieCIsImlzVGFnV2hpdGVsaXN0ZWQiLCJnZXRXaGl0ZWxpc3RJdGVtIiwiX3dpIiwiX3dpdiIsInNldFJlYWRvbmx5IiwiYXR0cnJpYnV0ZSIsInNldENvbnRlbnRFZGl0YWJsZSIsImNvbnRlbnRFZGl0YWJsZSIsInNldERpc2FibGVkIiwiaXNEaXNhYmxlZCIsInRhZ3NJdGVtcyIsIl90aGlzMTkiLCJfdGhpcyRzZXR0aW5ncyIsIndoaXRlbGlzdE1hdGNoZXMiLCJ3aGl0ZWxpc3RXaXRoUHJvcHMiLCJpc0NvbGxlY3Rpb24iLCJtYXBTdHJpbmdUb0NvbGxlY3Rpb24iLCJfcmVmMyIsIndoaXRlbGlzdE1hdGNoZXNWYWx1ZXMiLCJmaWx0ZXJlZExpc3QiLCJmaWx0ZXJlZEl0ZW0iLCJtYXRjaE9iaiIsIl90aGlzMjAiLCJfdGhpcyRzZXR0aW5nczIiLCJ0YWdzRGF0YVNldCIsInByZUludGVycG9sYXRlZCIsIm1heFRhZ3NSZWFjaGVkIiwidGV4dFByb3AiLCJFcnJvciIsIm5ld1dyYXBwZXJOb2RlIiwic3RyVG9SZXBsYWNlIiwibm9kZVRvUmVwbGFjZSIsIm5vZGVBdENhcmV0IiwiZmlyc3RTcGxpdE9mZnNldCIsInNwbGl0VGV4dCIsInNlbGVjdFRhZyIsIl90aGlzMjEiLCJsYXN0VGFnRWxtIiwiYXBwZW5kVGFnIiwiYWRkRW1wdHlUYWciLCJpbml0aWFsRGF0YSIsImNsZWFySW5wdXQiLCJfdGhpczIyIiwidGFnRWxlbXMiLCJhZ2dyZWdhdGVkaW52YWxpZElucHV0IiwiZnJhZyIsImFkZE1peFRhZ3MiLCJ0YWdFbG1QYXJhbXMiLCJfX3ByZUludmFsaWREYXRhIiwidGFnc0RhdGEiLCJfdGhpczIzIiwicHJlZml4ZWRUZXh0VG9UYWciLCJ0YWdJdGVtIiwiX3RoaXMyNCIsImNyZWF0ZWRGcm9tRGVsaW1pdGVycyIsImluc2VydEJlZm9yZU5vZGUiLCJleHRyYURhdGEiLCJ0ZW1wbGF0ZURhdGEiLCJfdGhpczI1IiwidGFnVmFsaWRhdGlvbiIsInRhZ0VsbXMiLCJzaWxlbnQiLCJ0cmFuRHVyYXRpb24iLCJfdGhpczI2IiwidGFnc1RvUmVtb3ZlIiwiZWxtcyIsInJlbW92ZU5vZGUiLCJhbmltYXRpb24iLCJwYXJzZUZsb2F0IiwiY2xpZW50VG9wIiwicmVhc29uIiwicmVtb3ZlVGFnc0Zyb21ET00iLCJ0YWdzIiwiX3RoaXMyNyIsInNwbGljZSIsIl90aGlzMjgiLCJoYXNWYWx1ZSIsIl90aGlzJHZhbHVlMiIsInNldE9yaWdpbmFsSW5wdXRWYWx1ZSIsImFyZ3MiLCJVUERBVEVfREVMQVkiLCJkZWJvdW5jZWRVcGRhdGVUaW1lb3V0IiwicmVhbGx5VXBkYXRlIiwiaW5wdXRWYWx1ZSIsImdldElucHV0VmFsdWUiLCJnZXRDbGVhblZhbHVlIiwiZ2V0TWl4ZWRUYWdzQXNTdHJpbmciLCJvcmlnaW5hbElucHV0VmFsdWVGb3JtYXQiLCJfaW50ZXJwb2xhdG9yIiwiaXRlcmF0ZUNoaWxkcmVuIiwicm9vdE5vZGUiLCJfX3JlbW92ZWQiLCJyZW1vdmVUYWciLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./lib/tagify/tagify.esm.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./ts/blades.ts");
/******/ 	
/******/ })()
;