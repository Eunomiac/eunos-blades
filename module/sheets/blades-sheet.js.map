{"version":3,"sources":["sheets/blades-sheet.js"],"names":[],"mappingsfile":"blades-sheet.js","sourcesContent":["// IMPORTS\r\n\nimport U from \"../core/utilities.js\";\nimport G from \"../core/gsap.js\";\nimport { Tag, District, Playbook, Vice, BladesActorType } from \"../core/constants.js\";\nimport Tagify from \"../../lib/tagify/tagify.esm.js\";\nimport BladesSelectorDialog from \"../blades-dialog.js\";\nimport BladesActiveEffect from \"../blades-active-effect.js\";\r\n\nclass BladesSheet extends ActorSheet {\n    \n    getData() {\n        \n        const context = super.getData();\n        \n        const sheetData = {\n            editable: this.options.editable,\n            isGM: game.user.isGM,\n            actor: this.actor,\n            system: this.actor.system,\n            activeEffects: Array.from(this.actor.effects),\n            hasFullVision: game.user.isGM || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER),\n            hasLimitedVision: game.user.isGM || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.LIMITED),\n            hasControl: game.user.isGM || this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OWNER),\n            playbookData: {\n                tooltip: (new Handlebars.SafeString([\n                    \"<ul>\",\n                    ...this.actor.playbook?.system.experience_clues?.map((line) => `<li>${line}</li>`) ?? [],\n                    \"</ul>\"\n                ].join(\"\"))).toString(),\n                dotline: {\n                    data: this.actor.system.experience?.playbook,\n                    target: \"system.experience.playbook.value\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|frame\",\n                    svgEmpty: \"full|half|frame\"\n                }\n            },\n            coinsData: {\n                dotline: {\n                    data: this.actor.system.coins,\n                    target: \"system.coins.value\",\n                    iconEmpty: \"coin-full.svg\",\n                    iconFull: \"coin-full.svg\"\n                }\n            }\n        };\n        \n        return {\n            ...context,\n            ...sheetData\n        };\n        \n    }\n    \n    // LISTENERS & EVENT HANDLERS\n    \n    activateListeners(html) {\n        super.activateListeners(html);\n        \r\n        if (game.user.isGM) {\n            html.attr(\"style\", \"--secret-text-display: initial\");\n        }\n        else {\n            html.find('.editor:not(.tinymce) [data-is-secret=\"true\"]').remove();\n        }\n        \n        // Tooltips\n        html.find(\".tooltip\").siblings(\".comp-body\")\n            .each(function (i, elem) {\n            $(elem).data(\"hoverTimeline\", G.effects.hoverTooltip(elem));\n        })\n            .on({\n            mouseenter: function () {\n                $(this).parent().css(\"z-index\", 1);\n                $(this).data(\"hoverTimeline\").play();\n            },\n            mouseleave: function () {\n                $(this).data(\"hoverTimeline\").reverse().then(() => {\n                    $(this).parent().removeAttr(\"style\");\n                });\n            }\n        });\n        \r\n        if (!this.options.editable) {\n            return;\n        }\n        \r\n        html.find(\".dotline\").each((_, elem) => {\n            if ($(elem).hasClass(\"locked\")) {\n                return;\n            }\n            \n            let targetDoc = this.actor;\n            let targetField = $(elem).data(\"target\");\n            \n            const comp$ = $(elem).closest(\"comp\");\n            \n            if (targetField.startsWith(\"item\")) {\n                targetField = targetField.replace(/^item\\./, \"\");\n                const itemId = $(elem).closest(\"[data-comp-id]\").data(\"compId\");\n                if (!itemId) {\n                    return;\n                }\n                const item = this.actor.items.get(itemId);\n                if (!item) {\n                    return;\n                }\n                targetDoc = item;\n            }\n            \n            const curValue = U.pInt($(elem).data(\"value\"));\n            $(elem)\n                .find(\".dot\")\n                .each((j, dot) => {\n                $(dot).on(\"click\", (event) => {\n                    event.preventDefault();\n                    const thisValue = U.pInt($(dot).data(\"value\"));\n                    if (thisValue !== curValue) {\n                        if (comp$.hasClass(\"comp-coins\")\n                            || comp$.hasClass(\"comp-stash\")) {\n                            G.effects\n                                .fillCoins($(dot).prevAll(\".dot\"))\n                                .then(() => targetDoc.update({ [targetField]: thisValue }));\n                        }\n                        else {\n                            targetDoc.update({ [targetField]: thisValue });\n                        }\n                    }\n                });\n                $(dot).on(\"contextmenu\", (event) => {\n                    event.preventDefault();\n                    const thisValue = U.pInt($(dot).data(\"value\")) - 1;\n                    if (thisValue !== curValue) {\n                        targetDoc.update({ [targetField]: thisValue });\n                    }\n                });\n            });\n        });\n        \r\n        html\n            .find(\".clock-container\")\n            .on(\"click\", this._onClockLeftClick.bind(this));\n        html\n            .find(\".clock-container\")\n            .on(\"contextmenu\", this._onClockRightClick.bind(this));\n        \r\n        html\n            .find(\"[data-comp-id]\")\n            .find(\".comp-title\")\n            .on(\"click\", this._onItemOpenClick.bind(this));\n        html\n            .find(\".comp-control.comp-add\")\n            .on(\"click\", this._onItemAddClick.bind(this));\n        html\n            .find(\".comp-control.comp-delete\")\n            .on(\"click\", this._onItemRemoveClick.bind(this));\n        html\n            .find(\".comp-control.comp-delete-full\")\n            .on(\"click\", this._onItemFullRemoveClick.bind(this));\n        html\n            .find(\".comp-control.comp-toggle\")\n            .on(\"click\", this._onItemToggleClick.bind(this));\n        \r\n        html\n            .find(\"[data-roll-attribute]\")\n            .on(\"click\", this._onRollAttributeDieClick.bind(this));\n        \r\n        html\n            .find(\".effect-control\")\n            .on(\"click\", this._onActiveEffectControlClick.bind(this));\n        \r\n        const tagElem = html.find(\".tag-entry\")[0];\n        \n        if (tagElem) {\n            const tagify = new Tagify(tagElem, {\r\n\n                enforceWhitelist: false,\n                editTags: true,\n                whitelist: [\n                    ...Object.values(Tag.System).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"System Tags\"\n                    })),\n                    ...Object.values(Tag.Item).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Item Tags\"\n                    })),\n                    ...Object.values(Tag.PC).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Actor Tags\"\n                    })),\n                    ...Object.values(Tag.NPC).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Actor Tags\"\n                    })),\n                    ...Object.values(District).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Districts\"\n                    })),\n                    ...Object.values(Vice).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Vices\"\n                    })),\n                    ...Object.values(Playbook).map((tag) => ({\n                        \"value\": (new Handlebars.SafeString(tag)).toString(),\n                        \"data-group\": \"Playbooks\"\n                    }))\n                ],\n                dropdown: {\n                    enabled: 0,\n                    maxItems: 10000,\n                    placeAbove: false,\n                    appendTarget: html[0]\n                }\n            });\n            \n            tagify.dropdown.createListHTML = (optionsArr) => {\n                const map = {};\n                \n                return structuredClone(optionsArr)\n                    .map((suggestion, idx) => {\n                    \n                    const value = tagify.dropdown.getMappedValue.call(tagify, suggestion);\n                    let tagHTMLString = \"\";\n                    \n                    if (!map[suggestion[\"data-group\"]]) {\n                        map[suggestion[\"data-group\"]] = true;\n                        \n                        if (Object.keys(map).length) {\n                            tagHTMLString += \"</div>\";\n                        }\n                        \n                        tagHTMLString += `\r\n\t\t\t\t\t\t\t\t<div class=\"tagify__dropdown__itemsGroup\">\r\n\t\t\t\t\t\t\t\t<h3>${suggestion[\"data-group\"]}</h3>\r\n\t\t\t\t\t\t\t`;\n                    }\n                    \n                    suggestion.value\n                        = value && typeof value === \"string\" ? U.escapeHTML(value) : value;\n                    \n                    tagHTMLString += tagify.settings.templates.dropdownItem.apply(tagify, [suggestion, idx]);\n                    \n                    return tagHTMLString;\n                })\n                    .join(\"\");\n            };\n            \r\n            tagify.addTags(this.actor.tags.map((tag) => {\n                if (Object.values(Tag.System).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"System Tags\" };\n                }\n                if (Object.values(Tag.Item).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Item Tags\" };\n                }\n                if (Object.values(Tag.PC).includes(tag) || Object.values(Tag.NPC).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Actor Tags\" };\n                }\n                if (Object.values(District).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Districts\" };\n                }\n                if (Object.values(Playbook).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Playbooks\" };\n                }\n                if (Object.values(Vice).includes(tag)) {\n                    return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Vices\" };\n                }\n                return { \"value\": (new Handlebars.SafeString(tag)).toString(), \"data-group\": \"Other\" };\n            }), false, false);\n            \n            tagElem.addEventListener(\"change\", this._onTagifyChange.bind(this));\n        }\n        \r\n        if (this.options.submitOnChange) {\n            html.on(\"change\", \"textarea\", this._onChangeInput.bind(this));\n        }\n    }\n    \n    async _onSubmit(event, params = {}) {\n        if (!game.user.isGM && !this.actor.testUserPermission(game.user, CONST.DOCUMENT_PERMISSION_LEVELS.OWNER)) {\n            eLog.checkLog(\"actorSheetTrigger\", \"User does not have permission to edit this actor\", { user: game.user, actor: this.actor });\n            return {};\n        }\n        eLog.checkLog(\"actorSheetTrigger\", \"Submitting Form Data\", { parentActor: this.actor.parentActor, systemTags: this.actor.system.tags, sourceTags: this.actor._source.system.tags, params });\n        return super._onSubmit(event, params);\n    }\n    \n    async close(options) {\n        if (this.actor.type === BladesActorType.pc) {\n            return super.close(options).then(() => this.actor.clearSubActors());\n        }\n        else if (this.actor.type === BladesActorType.npc && this.actor.parentActor) {\n            return super.close(options).then(() => this.actor.clearParentActor(false));\n        }\n        return super.close(options);\n    }\n    \n    // Clock Handlers\n    async _onClockLeftClick(event) {\n        event.preventDefault();\n        const clock$ = $(event.currentTarget).find(\".clock[data-target]\");\n        if (!clock$[0]) {\n            return;\n        }\n        const target = clock$.data(\"target\");\n        const curValue = U.pInt(clock$.data(\"value\"));\n        const maxValue = U.pInt(clock$.data(\"size\"));\n        \n        G.effects.pulseClockWedges(clock$.find(\"wedges\")).then(() => this.actor.update({\n            [target]: G.utils.wrap(0, maxValue + 1, curValue + 1)\n        }));\n    }\n    \n    async _onClockRightClick(event) {\n        event.preventDefault();\n        const clock$ = $(event.currentTarget).find(\".clock[data-target]\");\n        if (!clock$[0]) {\n            return;\n        }\n        const target = clock$.data(\"target\");\n        const curValue = U.pInt(clock$.data(\"value\"));\n        \n        G.effects.reversePulseClockWedges(clock$.find(\"wedges\")).then(() => this.actor.update({\n            [target]: Math.max(0, curValue - 1)\n        }));\n    }\r\n    \n    async _onTagifyChange(event) {\n        const tagString = event.target.value;\n        if (tagString) {\n            const tags = JSON.parse(tagString).map(({ value }) => value);\n            this.actor.update({ \"system.tags\": tags });\n        }\n        else {\n            this.actor.update({ \"system.tags\": [] });\n        }\n    }\n    \n    // Component Handlers\n    _getCompData(event) {\n        const elem$ = $(event.currentTarget).closest(\".comp\");\n        const compData = {\n            elem$,\n            docID: elem$.data(\"compId\"),\n            docCat: elem$.data(\"compCat\"),\n            docType: elem$.data(\"compType\"),\n            docTags: (elem$.data(\"compTags\") ?? \"\").split(/\\s+/g)\n        };\n        \n        if (compData.docID && compData.docType) {\n            compData.doc = {\n                Actor: this.actor.getSubActor(compData.docID),\n                Item: this.actor.getSubItem(compData.docID)\n            }[compData.docType];\n        }\n        if (compData.docCat && compData.docType) {\n            compData.dialogDocs = {\n                Actor: this.actor.getDialogActors(compData.docCat),\n                Item: this.actor.getDialogItems(compData.docCat)\n            }[compData.docType];\n        }\n        \n        eLog.checkLog2(\"dialog\", \"Component Data\", { ...compData });\n        \n        return compData;\n    }\n    async _onItemOpenClick(event) {\n        event.preventDefault();\n        const { doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        doc.sheet?.render(true);\n    }\n    \n    async _onItemAddClick(event) {\n        event.preventDefault();\n        const { docCat, docType, dialogDocs, docTags } = this._getCompData(event);\n        eLog.checkLog(\"_onItemAddClick\", { docCat, dialogDocs });\n        if (!dialogDocs || !docCat || !docType) {\n            return;\n        }\n        await BladesSelectorDialog.Display(this.actor, U.tCase(`Add ${docCat.replace(/_/g, \" \")}`), docType, dialogDocs, docTags);\n    }\n    \n    async _onItemRemoveClick(event) {\n        event.preventDefault();\n        const { elem$, doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        G.effects.blurRemove(elem$).then(() => doc.addTag(Tag.System.Archived));\n    }\n    \n    async _onItemFullRemoveClick(event) {\n        event.preventDefault();\n        const { elem$, doc } = this._getCompData(event);\n        if (!doc) {\n            return;\n        }\n        G.effects.blurRemove(elem$).then(() => doc.delete());\n    }\n    \n    async _onItemToggleClick(event) {\n        event.preventDefault();\n        const target = $(event.currentTarget).data(\"target\");\n        this.actor.update({\n            [target]: !getProperty(this.actor, target)\n        });\n    }\r\n    \n    // Roll Handlers\n    async _onRollAttributeDieClick(event) {\n        const attribute_name = $(event.currentTarget).data(\"rollAttribute\");\n        this.actor.rollAttributePopup(attribute_name);\n    }\r\n    \n    // Active Effect Handlers\n    async _onActiveEffectControlClick(event) {\n        BladesActiveEffect.onManageActiveEffect(event, this.actor);\n    }\n}\r\n\nexport default BladesSheet;"]}