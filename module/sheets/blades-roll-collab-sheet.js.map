{"version":3,"sources":["sheets/blades-roll-collab-sheet.js"],"names":[],"mappingsfile":"blades-roll-collab-sheet.js","sourcesContent":["import U from \"../core/utilities.js\";\nimport C, { BladesActorType, RollType, RollModStatus, RollModCategory, Action, Attribute, Position, Effect, Factor, Harm } from \"../core/constants.js\";\nimport BladesActor from \"../blades-actor.js\";\nimport BladesItem from \"../blades-item.js\";\nimport { ApplyTooltipListeners } from \"../core/gsap.js\";\r\n\nfunction isAction(trait) {\n    return Boolean(trait && typeof trait === \"string\" && trait in Action);\n}\nfunction isAttribute(trait) {\n    return Boolean(trait && typeof trait === \"string\" && trait in Attribute);\n}\nfunction isTier(trait) { return U.lCase(trait) === \"tier\"; }\nfunction isNumber(trait) { return U.isInt(trait); }\r\n\nclass BladesRollCollabSheet extends DocumentSheet {\n    \n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"roll-collab\"],\n            template: `systems/eunos-blades/templates/roll-collab${game.user.isGM ? \"-gm\" : \"\"}.hbs`,\n            submitOnChange: true,\n            width: 500\r\n        });\n    }\n    \n    static Initialize() {\n        return loadTemplates([\n            \"systems/eunos-blades/templates/roll-collab-gm.hbs\",\n            \"systems/eunos-blades/templates/roll-collab.hbs\"\n        ]);\n    }\n    \n    static InitSockets() {\n        socketlib.system.register(\"renderRollCollab\", BladesRollCollabSheet.RenderRollCollab);\n        socketlib.system.register(\"closeRollCollab\", BladesRollCollabSheet.CloseRollCollab);\n    }\n    \n    static Current = {};\n    \n    static get DefaultFlagData() {\n        return {\n            rollID: randomID(),\n            rollType: RollType.Action,\n            rollSourceType: \"Actor\",\n            rollSourceID: \"\",\n            rollTrait: Factor.tier,\n            rollMods: {\n                [RollModCategory.roll]: {\n                    positive: {\n                        Push: {\n                            status: RollModStatus.ToggledOff,\n                            value: 1,\n                            tooltip: \"<p>Take <strong class='shadowed red-bright'>2 Stress</strong> to add <strong class='shadowed'>1 die</strong> to your pool. <em>(You cannot also accept a <strong class='shadowed'>Devil's Bargain</strong> to increase your dice pool: It's one or the other.)</em></p>\"\n                        },\n                        Bargain: {\n                            status: RollModStatus.ForcedOff,\n                            value: 1,\n                            tooltip: \"<p>Accept a <strong class='shadowed red-bright'>Devil's Bargain</strong> from the GM to add <strong class='shadowed'>1 die</strong> to your pool <em>(You cannot also <strong class='shadowed'>Push</strong> to increase your dice pool: It's one or the other. You can, however, <strong class='shadowed'>Push</strong> to increase your <strong class='shadowed'>Effect</strong>.)</em></p>\"\n                        },\n                        Assist: {\n                            status: RollModStatus.Hidden,\n                            value: 1,\n                            sideString: \"\",\n                            tooltip: \"<p>Another character is <strong class='shadowed'>Assisting</strong> your efforts, adding <strong class='shadowed'>1 die</strong> to your pool. <em>(It costs them <span class='shadowed red-bright'>1 Stress</span> to do so.)</em></p>\"\n                        }\n                    },\n                    negative: {}\n                },\n                [RollModCategory.position]: {\n                    positive: {\n                        Setup: {\n                            status: RollModStatus.Hidden,\n                            value: 1,\n                            sideString: undefined,\n                            tooltip: \"<p>Another character has set you up for success, increasing your <strong class='shadowed'>Position</strong> by one level.</p>\"\n                        }\n                    },\n                    negative: {}\n                },\n                [RollModCategory.effect]: {\n                    positive: {\n                        Push: {\n                            status: RollModStatus.ToggledOff,\n                            value: 1,\n                            tooltip: \"<p>Take <strong class='shadowed red-bright'>2 Stress</strong> to increase your <strong class='shadowed'>Effect</strong> by one level. <em>(You can both <strong class='shadowed'>Push for Effect</strong> and <strong class='shadowed'>Push for +1d</strong> if you like, for a total cost of <strong class='shadowed red-bright'>4 Stress</strong>.)</em></p>\"\n                        },\n                        Setup: {\n                            status: RollModStatus.Hidden,\n                            value: 1,\n                            sideString: undefined,\n                            tooltip: \"<p>Another character has set you up for success, increasing your <strong class='shadowed'>Effect</strong> by one level.</p>\"\n                        },\n                        Potency: {\n                            status: RollModStatus.Hidden,\n                            value: 1,\n                            tooltip: \"\"\n                        }\n                    },\n                    negative: {}\n                },\n                [RollModCategory.result]: { positive: {}, negative: {} },\n                [RollModCategory.after]: { positive: {}, negative: {} }\n            },\n            rollPositionInitial: Position.risky,\n            rollEffectInitial: Effect.standard,\n            rollPosEffectTrade: false,\n            rollFactors: {\n                [Factor.tier]: { name: \"Tier\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.quality]: { name: \"Quality\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.force]: { name: \"Force\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.scale]: { name: \"Scale\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.area]: { name: \"Area\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.duration]: { name: \"Duration\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.range]: { name: \"Range\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true },\n                [Factor.magnitude]: { name: \"Magnitude\", value: 0, max: 0, isActive: false, isDominant: false, highFavorsPC: true }\n            },\n            isGMReady: false,\n            GMBoosts: {\n                Dice: 0,\n                [Factor.tier]: 0,\n                [Factor.quality]: 0,\n                [Factor.force]: 0,\n                [Factor.scale]: 0,\n                [Factor.area]: 0,\n                [Factor.duration]: 0,\n                [Factor.range]: 0,\n                [Factor.magnitude]: 0,\n                Result: 0\n            }\n        };\n    }\n    \n    static async RenderRollCollab({ userID, rollID }) {\n        const user = game.users.get(userID);\n        if (!user) {\n            return;\n        }\n        BladesRollCollabSheet.Current[rollID] = new BladesRollCollabSheet(user, rollID);\n        BladesRollCollabSheet.Current[rollID].render(true);\n    }\n    \n    static async CloseRollCollab(rollID) {\n        eLog.checkLog3(\"rollCollab\", \"CloseRollCollab()\", { rollID });\n        await BladesRollCollabSheet.Current[rollID]?.close({ rollID });\n        delete BladesRollCollabSheet.Current[rollID];\n    }\n    \n    static async NewRoll(config) {\r\n        if (game.user.isGM) {\n            eLog.error(\"rollCollab\", \"GM Cannot Use New Roll!\");\n            return;\n        }\n        const user = game.users.get(config.userID ?? game.user._id);\n        if (!(user instanceof User)) {\n            eLog.error(\"rollCollab\", `[NewRoll()] Can't Find User '${config.userID}'`, config);\n            return;\n        }\n        \n        const flagUpdateData = BladesRollCollabSheet.DefaultFlagData;\n        \n        flagUpdateData.rollType = config.rollType;\n        if (!(flagUpdateData.rollType in RollType)) {\n            eLog.error(\"rollCollab\", `[RenderRollCollab()] Invalid rollType: ${flagUpdateData.rollType}`, config);\n            return;\n        }\n        const rollSource = config.rollSource ?? user.character;\n        if (!(rollSource instanceof BladesActor || rollSource instanceof BladesItem)) {\n            eLog.error(\"rollCollab\", \"[RenderRollCollab()] Invalid rollSource\", { rollSource, config });\n            return;\n        }\n        flagUpdateData.rollSourceID = rollSource.id;\n        flagUpdateData.rollSourceType = rollSource instanceof BladesActor ? \"Actor\" : \"Item\";\n        if (U.isInt(config.rollTrait)) {\n            flagUpdateData.rollTrait = config.rollTrait;\n        }\n        else if (!config.rollTrait) {\n            eLog.error(\"rollCollab\", \"[RenderRollCollab()] No RollTrait in Config\", config);\n            return;\n        }\n        else {\n            switch (flagUpdateData.rollType) {\n                case RollType.Action: {\n                    if (!(U.lCase(config.rollTrait) in { ...Action, ...Factor })) {\n                        eLog.error(\"rollCollab\", `[RenderRollCollab()] Bad RollTrait for Action Roll: ${config.rollTrait}`, config);\n                        return;\n                    }\n                    flagUpdateData.rollTrait = U.lCase(config.rollTrait);\n                    break;\n                }\n                case RollType.Downtime: {\n                    if (!(U.lCase(config.rollTrait) in { ...Action, ...Factor })) {\n                        eLog.error(\"rollCollab\", `[RenderRollCollab()] Bad RollTrait for Downtime Roll: ${config.rollTrait}`, config);\n                        return;\n                    }\n                    flagUpdateData.rollTrait = U.lCase(config.rollTrait);\n                    break;\n                }\n                case RollType.Fortune: {\n                    if (!(U.lCase(config.rollTrait) in { ...Action, ...Attribute, ...Factor })) {\n                        eLog.error(\"rollCollab\", `[RenderRollCollab()] Bad RollTrait for Fortune Roll: ${config.rollTrait}`, config);\n                        return;\n                    }\n                    flagUpdateData.rollTrait = U.lCase(config.rollTrait);\n                    break;\n                }\n                case RollType.Resistance: {\n                    if (!(U.lCase(config.rollTrait) in Attribute)) {\n                        eLog.error(\"rollCollab\", `[RenderRollCollab()] Bad RollTrait for Resistance Roll: ${config.rollTrait}`, config);\n                        return;\n                    }\n                    break;\n                }\r\n            }\n            flagUpdateData.rollTrait = U.lCase(config.rollTrait);\n        }\n        \n        // Dummy Data for Testing Purposes\n        flagUpdateData.rollMods = {\n            [RollModCategory.roll]: {\n                positive: {\n                    \"Push\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        tooltip: \"<p>Take <strong class='shadowed red-bright'>2 Stress</strong> to add <strong class='shadowed'>1 die</strong> to your pool.</p><p><em>(You cannot also accept a <strong class='shadowed'>Devil's Bargain</strong> to increase your dice pool: It's one or the other.)</em></p>\"\n                    },\n                    \"Bargain\": {\n                        status: RollModStatus.Hidden,\n                        value: 1,\n                        tooltip: \"<p>Accept a <strong class='shadowed red-bright'>Devil's Bargain</strong> from the GM to add <strong class='shadowed'>1 die</strong> to your pool.</p><p><em>(You cannot also <strong class='shadowed'>Push</strong> to increase your dice pool: It's one or the other. You can, however, <strong class='shadowed'>Push</strong> to increase your <strong class='shadowed'>Effect</strong>.)</em></p>\"\n                    },\n                    \"Assist\": {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        sideString: \"Ollie\",\n                        tooltip: \"<p><strong class='shadowed gold-bright'>Ollie</strong> is <strong class='shadowed'>Assisting</strong> your efforts, adding <strong class='shadowed'>1 die</strong> to your pool. <em>(It costs them <strong class='shadowed red-bright'>1 Stress</strong> to do so.)</em></p>\"\n                    },\n                    \"Mastermind\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    },\n                    \"Trust In Me\": {\n                        status: RollModStatus.ToggledOn,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    },\n                    \"Forged in the Fire\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    },\n                    \"A Little Something on the Side\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    },\n                    \"Ghost Hunter (Arrow-Swift)\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    }\n                },\n                negative: {\n                    [Harm.Impaired]: {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        tooltip: `<p><strong class='shadowed uppercase red-bright'>${Harm.Impaired}:</strong> Your injuries reduce your <strong class='shadowed'>dice pool</strong> by one.</p>`\n                    }\n                }\n            },\n            [RollModCategory.position]: {\n                positive: {\n                    Setup: {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        sideString: \"Jax\",\n                        tooltip: \"<p><strong class='shadowed gold-bright'>Jax</strong> has set you up for success with a preceding action, increasing your <strong class='shadowed'>Position</strong> by one level.</p>\"\n                    }\n                },\n                negative: {}\n            },\n            [RollModCategory.effect]: {\n                positive: {\n                    \"Push\": {\n                        status: RollModStatus.ToggledOn,\n                        value: 1,\n                        tooltip: \"<p>Take <strong class='shadowed red-bright'>2 Stress</strong> to increase your <strong class='shadowed'>Effect</strong> by one level.</p><p><em>(You can both <strong class='shadowed'>Push for Effect</strong> and <strong class='shadowed'>Push for +1d</strong>, for a total cost of <strong class='shadowed red-bright'>4 Stress</strong>.)</em></p>\"\n                    },\n                    \"Setup\": {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        sideString: \"High-Flyer\",\n                        tooltip: \"<p><strong class='shadowed gold-bright'>High-Flyer</strong> has set you up for success with a preceding action, increasing your <strong class='shadowed'>Effect</strong> by one level.</p>\"\n                    },\n                    \"Potency\": {\n                        status: RollModStatus.Hidden,\n                        value: 1,\n                        tooltip: \"<p>Circumstances in your favor make this action especially <strong class='shadowed'>Potent</strong>, increasing your <strong class='shadowed'>Effect</strong> by one level.</p>\"\n                    },\n                    \"Cloak & Dagger\": {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    }\n                },\n                negative: {\n                    [Harm.Impaired]: {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        tooltip: `<p><strong class='shadowed uppercase red-bright'>${Harm.Impaired}:</strong> Your injuries reduce your <strong class='shadowed'>Effect</strong> by one level.</p>`\n                    },\n                    Opposition: {\n                        status: RollModStatus.ForcedOn,\n                        value: 1,\n                        tooltip: \"<p>The following <strong class='shadowed'>Factors</strong> combine to reduce your <strong class='shadowed'>Effect</strong> by one level:</p><ul><li>Inferior Quality</li><li>Detrimental Scale</li></ul>\"\n                    }\n                }\n            },\n            [RollModCategory.result]: {\n                positive: {\n                    Mastermind: {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    }\n                }, negative: {}\n            },\n            [RollModCategory.after]: {\n                positive: {\n                    Mesmerism: {\n                        status: RollModStatus.ToggledOff,\n                        value: 1,\n                        isAbility: true,\n                        tooltip: \"<p>You may expend your <strong>special armor</strong> to protect a teammate, or to <strong>push yourself</strong> when you <strong>gather information</strong> or work on a <strong>long-term project</strong>.</p>\"\n                    }\n                },\n                negative: {}\n            }\n        };\r\n        \n        await user.setFlag(C.SYSTEM_ID, \"rollCollab\", flagUpdateData);\n        BladesRollCollabSheet.RenderRollCollab({ userID: user._id, rollID: flagUpdateData.rollID });\n        socketlib.system.executeForAllGMs(\"renderRollCollab\", { userID: user._id, rollID: flagUpdateData.rollID });\n    }\n    \n    rollID;\n    constructor(user, rollID) {\n        super(user);\n        this.rollID = rollID;\n    }\n    \n    get rData() {\n        if (!this.document.getFlag(C.SYSTEM_ID, \"rollCollab\")) {\n            eLog.error(\"rollCollab\", \"[get flags()] No RollCollab Flags Found on User\", { user: this.document, flags: this.document.flags });\n            return null;\n        }\n        return this.document.flags[\"eunos-blades\"].rollCollab;\n    }\n    get rollSource() {\n        if (!this.rData) {\n            return undefined;\n        }\n        return this.rData.rollSourceType === \"Actor\"\n            ? game.actors.get(this.rData.rollSourceID)\n            : game.items.get(this.rData.rollSourceID);\n    }\n    \n    getData() {\n        \n        const context = super.getData();\n        \n        const { rData } = this;\n        if (!rData) {\n            return context;\n        }\n        \n        const sheetData = {\n            cssClass: \"roll-collab\",\n            editable: this.options.editable,\n            isGM: game.eunoblades.Tracker.system.is_spoofing_player ? false : game.user.isGM,\n            ...rData\n        };\n        \n        if (!this.rollSource) {\n            eLog.error(\"rollCollab\", `[getData()] No '${rData.rollSourceType}' Found with ID '${rData.rollSourceID}'`, { user: this.document, rData: rData });\n            return null;\n        }\n        \n        sheetData.system = this.rollSource.system;\n        sheetData.rollSource = this.rollSource;\n        \n        if (BladesActor.IsType(this.rollSource, BladesActorType.pc) && isAction(rData.rollTrait)) {\n            const { rollSource } = this;\n            sheetData.rollTraitData = {\n                name: rData.rollTrait,\n                value: rollSource.actions[rData.rollTrait],\n                max: rollSource.actions[rData.rollTrait]\n            };\n            sheetData.rollTraitOptions = Object.values(Action)\n                .map((action) => ({\n                name: U.uCase(action),\n                value: action\n            }));\n        }\n        else if (BladesActor.IsType(this.rollSource, BladesActorType.pc) && isAttribute(rData.rollTrait)) {\n            const { rollSource } = this;\n            sheetData.rollTraitData = {\n                name: rData.rollTrait,\n                value: rollSource.attributes[rData.rollTrait],\n                max: rollSource.attributes[rData.rollTrait]\n            };\n            sheetData.rollTraitOptions = Object.values(Attribute)\n                .map((attribute) => ({\n                name: U.uCase(attribute),\n                value: attribute\n            }));\n        }\n        else if (rData.rollTrait === \"tier\") {\n            const { rollSource } = this;\n            sheetData.rollTraitData = {\n                name: \"Tier\",\n                value: rollSource.getTierTotal(),\n                max: rollSource.getTierTotal()\n            };\n            sheetData.rollTraitOptions = false;\n        }\n        else if (U.isInt(rData.rollTrait)) {\n            sheetData.rollTraitData = {\n                name: `+${rData.rollTrait}`,\n                value: rData.rollTrait,\n                max: rData.rollTrait\n            };\n            sheetData.rollTraitOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n                .map((num) => ({\n                name: `+${num}`,\n                value: num\n            }));\n        }\n        \n        // DUMMY DATA FOR DEV PURPOSES\r\n        sheetData.rollFactorData = [\n            { name: Factor.quality, value: U.romanizeNum(2), cssClasses: \"factor-gold factor-main\" },\n            { name: Factor.scale, value: `${2}`, cssClasses: \"factor-gold\" }\n        ];\n        \n        sheetData.rollOpposition = undefined;\n        \n        sheetData.stressData = { cost: 4, tooltip: \"<ul><li><strong class='shadowed'>2</strong> Stress from Pushing for +1d</li><li><strong class='shadowed'>2</strong> Stress from Pushing for Effect</li></ul>\" };\r\n        \n        const getModsDelta = (cat) => {\n            const activePosMods = Object.values(sheetData.rollMods?.[cat]?.positive ?? {})\n                .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status));\n            const posModVals = activePosMods.map((mod) => mod.value);\n            const posModSum = U.sum(posModVals);\n            const activeNegMods = Object.values(sheetData.rollMods?.[cat]?.negative ?? {})\n                .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status));\n            const negModVals = activeNegMods.map((mod) => mod.value);\n            const negModSum = U.sum(negModVals);\n            eLog.checkLog3(\"rollMods\", `getModsDelta(${cat}`, { activePosMods, posModVals, posModSum, activeNegMods, negModVals, negModSum, returnVal: U.sum(Object.values(sheetData.rollMods?.[cat]?.positive ?? {})\n                    .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status))\n                    .map((mod) => mod.value))\n                    - U.sum(Object.values(sheetData.rollMods?.[cat]?.negative ?? {})\n                        .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status))\n                        .map((mod) => mod.value)) });\n            \n            return U.sum(Object.values(sheetData.rollMods?.[cat]?.positive ?? {})\n                .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status))\n                .map((mod) => mod.value))\n                - U.sum(Object.values(sheetData.rollMods?.[cat]?.negative ?? {})\n                    .filter((mod) => [RollModStatus.ToggledOn, RollModStatus.ForcedOn].includes(mod.status))\n                    .map((mod) => mod.value));\n        };\n        \r\n        sheetData.diceTotal = Math.max(0, (sheetData.rollTraitData?.value ?? 0)\n            + getModsDelta(RollModCategory.roll)\n            + (rData.GMBoosts.Dice ?? 0));\n        \r\n        let finalPosIndex = Object.values(Position).indexOf(sheetData.rollPositionInitial ?? Position.risky)\n            + getModsDelta(RollModCategory.position);\n        let finalEffectIndex = Object.values(Effect).indexOf(sheetData.rollEffectInitial ?? Effect.standard)\n            + getModsDelta(RollModCategory.effect);\n        \n        const isPosEffectTradeValid = rData.rollPosEffectTrade === \"position\"\n            ? (finalPosIndex < 2 && finalEffectIndex > 0)\n            : (rData.rollPosEffectTrade === \"effect\"\n                ? (finalPosIndex > 0 && finalEffectIndex < 4)\n                : true);\n        \n        if (isPosEffectTradeValid) {\n            if (rData.rollPosEffectTrade === \"position\") {\n                finalPosIndex++;\n                finalEffectIndex--;\n            }\n            if (rData.rollPosEffectTrade === \"effect\") {\n                finalPosIndex--;\n                finalEffectIndex++;\n            }\n        }\n        \n        sheetData.rollPositionFinal = Object.values(Position)[U.clampNum(finalPosIndex, [0, 2])];\n        sheetData.rollEffectFinal = Object.values(Effect)[U.clampNum(finalEffectIndex, [0, 4])];\n        \r\n        sheetData.isAffectingResult = getModsDelta(RollModCategory.result) !== 0\n            || (rData.GMBoosts.Result ?? 0) !== 0;\n        \n        if (sheetData.isAffectingResult) {\n            sheetData.rollResultFinal = getModsDelta(RollModCategory.result)\n                + (rData.GMBoosts.Result ?? 0);\n        }\n        \r\n        sheetData.hasInactiveAbilities = {\n            [RollModCategory.roll]: Object.values(rData.rollMods.roll?.positive ?? {})\n                .filter((mod) => mod.isAbility && mod.status === RollModStatus.ToggledOff)\n                .length > 0,\n            [RollModCategory.position]: Object.values(rData.rollMods.position?.positive ?? {})\n                .filter((mod) => mod.isAbility && mod.status === RollModStatus.ToggledOff)\n                .length > 0,\n            [RollModCategory.effect]: Object.values(rData.rollMods.effect?.positive ?? {})\n                .filter((mod) => mod.isAbility && mod.status === RollModStatus.ToggledOff)\n                .length > 0,\n            [RollModCategory.result]: Object.values(rData.rollMods.result?.positive ?? {})\n                .filter((mod) => mod.isAbility && mod.status === RollModStatus.ToggledOff)\n                .length > 0,\n            [RollModCategory.after]: Object.values(rData.rollMods.after?.positive ?? {})\n                .filter((mod) => mod.isAbility && mod.status === RollModStatus.ToggledOff)\n                .length > 0\n        };\n        \r\n        const { success, partial, fail } = C.DiceOdds[sheetData.diceTotal ?? 0];\n        sheetData.oddsGradient = [\n            \"linear-gradient(to right\",\n            `var(--blades-black-dark) ${fail}%`,\n            `var(--blades-grey) ${fail + partial}%`,\n            `var(--blades-white-bright) ${fail + partial + success}%`,\n            \"var(--blades-gold-bright))\"\n        ].join(\", \");\n        \r\n        \n        eLog.checkLog3(\"getData\", \"RollCollab.getData()\", { ...context, ...sheetData });\n        \n        return {\n            ...context,\n            ...sheetData\n        };\n    }\n    \n    activateListeners(html) {\n        super.activateListeners(html);\n        ApplyTooltipListeners(html);\n        \n        const trade$ = html.find(\"[data-action='trade']\");\n        eLog.checkLog3(\"rollCollab\", \"Trade$\", { trade: trade$ });\n        html.find(\"[data-action='trade']\").on({\n            click: (event) => {\n                const curVal = `${$(event.currentTarget).data(\"value\")}`;\n                eLog.checkLog3(\"rollCollab\", \"Click Event\", { event, curVal });\n                if (curVal === \"false\") {\n                    this.document.setFlag(C.SYSTEM_ID, \"rollCollab.rollPosEffectTrade\", \"position\");\n                }\n                else {\n                    this.document.setFlag(C.SYSTEM_ID, \"rollCollab.rollPosEffectTrade\", false);\n                }\n            },\n            contextmenu: (event) => {\n                const curVal = `${$(event.currentTarget).data(\"value\")}`;\n                eLog.checkLog3(\"rollCollab\", \"Context Event\", { event, curVal });\n                if (curVal === \"false\") {\n                    this.document.setFlag(C.SYSTEM_ID, \"rollCollab.rollPosEffectTrade\", \"effect\");\n                }\n                else {\n                    this.document.setFlag(C.SYSTEM_ID, \"rollCollab.rollPosEffectTrade\", false);\n                }\n            }\n        });\n    }\n    \n    async _onSubmit(event, { updateData } = {}) {\n        return super._onSubmit(event, { updateData, preventClose: true })\n            .then((returnVal) => { this.render(); return returnVal; });\n    }\n    \n    async close(options = {}) {\n        eLog.checkLog3(\"rollCollab\", \"RollCollab.close()\", { options });\n        if (options.rollID) {\n            return super.close({});\n        }\n        this.document.setFlag(C.SYSTEM_ID, \"rollCollab\", null);\n        socketlib.system.executeForEveryone(\"closeRollCollab\", this.rollID);\n        \n        return undefined;\n    }\n    \n    render(force, options) {\n        if (!this.document.getFlag(C.SYSTEM_ID, \"rollCollab\")) {\n            return this;\n        }\n        return super.render(force, options);\n    }\n}\r\n\nexport default BladesRollCollabSheet;"]}