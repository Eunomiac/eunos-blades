{"version":3,"sources":["sheets/blades-item-sheet.js"],"names":[],"mappingsfile":"blades-item-sheet.js","sourcesContent":["import C, { Tag, District, Playbook, Vice } from \"../core/constants.js\";\nimport U from \"../core/utilities.js\";\nimport BladesActiveEffect from \"../blades-active-effect.js\";\r\n\nimport Tagify from \"../../lib/tagify/tagify.esm.js\";\r\n\nclass BladesItemSheet extends ItemSheet {\n    \n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\"],\n            width: 560,\n            height: 500,\n            tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"description\" }]\n        });\n    }\n    \n        \n    constructor(item, options = {}) {\n        options.classes = [...options.classes ?? [], \"eunos-blades\", \"sheet\", \"item\", item.type];\n        super(item, options);\n    }\n    \n    get template() {\n        const pathComps = [\n            \"systems/eunos-blades/templates/items\"\n        ];\n        if (C.SimpleItemTypes.includes(this.item.type)) {\n            pathComps.push(\"simple-sheet.hbs\");\n        }\n        else {\n            pathComps.push(`${this.item.type}-sheet.hbs`);\n        }\n        return pathComps.join(\"/\");\n    }\n    \n        \n    activateListeners(html) {\n        super.activateListeners(html);\n        const self = this;\n        \r\n        if (!this.options.editable) {\n            return;\n        }\n        \r\n        const tagElem = html.find(\".tag-entry\")[0];\n        \n        if (tagElem) {\n            const tagify = new Tagify(tagElem, {\n                enforceWhitelist: true,\n                editTags: false,\n                whitelist: [\n                    ...Object.values(Tag.System).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"System Tags\"\n                    })),\n                    ...Object.values(Tag.Item).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Item Tags\"\n                    })),\n                    ...Object.values(Tag.PC).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Actor Tags\"\n                    })),\n                    ...Object.values(Tag.NPC).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Actor Tags\"\n                    })),\n                    ...Object.values(District).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Districts\"\n                    })),\n                    ...Object.values(Vice).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Vices\"\n                    })),\n                    ...Object.values(Playbook).map((tag) => ({\n                        \"value\": tag,\n                        \"data-group\": \"Playbooks\"\n                    }))\n                ],\n                dropdown: {\n                    enabled: 0,\n                    maxItems: 10000,\n                    placeAbove: false,\n                    appendTarget: html[0]\n                }\n            });\n            \n            tagify.dropdown.createListHTML = (optionsArr) => {\n                const map = {};\n                \n                return structuredClone(optionsArr)\n                    .map((suggestion, idx) => {\n                    \n                    const value = tagify.dropdown.getMappedValue.call(tagify, suggestion);\n                    let tagHTMLString = \"\";\n                    \n                    if (!map[suggestion[\"data-group\"]]) {\n                        map[suggestion[\"data-group\"]] = true;\n                        \n                        if (Object.keys(map).length) {\n                            tagHTMLString += \"</div>\";\n                        }\n                        \n                        tagHTMLString += `\r\n\t\t\t\t\t\t\t\t<div class=\"tagify__dropdown__itemsGroup\">\r\n\t\t\t\t\t\t\t\t<h3>${suggestion[\"data-group\"]}</h3>\r\n\t\t\t\t\t\t\t`;\n                    }\n                    \n                    suggestion.value\n                        = value && typeof value === \"string\" ? U.escapeHTML(value.replace(/_/g, \" \")) : value;\n                    \n                    tagHTMLString += tagify.settings.templates.dropdownItem.apply(tagify, [suggestion, idx]);\n                    \n                    return tagHTMLString;\n                })\n                    .join(\"\");\n            };\n            \r\n            tagify.addTags(this.item.tags.map((tag) => {\n                if (Object.values(Tag.System).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"System Tags\" };\n                }\n                if (Object.values(Tag.Item).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"Item Tags\" };\n                }\n                if (Object.values(Tag.PC).includes(tag) || Object.values(Tag.NPC).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"Actor Tags\" };\n                }\n                if (Object.values(District).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"Districts\" };\n                }\n                if (Object.values(Playbook).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"Playbooks\" };\n                }\n                if (Object.values(Vice).includes(tag)) {\n                    return { \"value\": tag, \"data-group\": \"Vices\" };\n                }\n                return { \"value\": tag, \"data-group\": \"Other\" };\n            }), false, false);\n            \n            tagElem.addEventListener(\"change\", this._onTagifyChange.bind(this));\n        }\n        \r\n        if (this.options.submitOnChange) {\n            html.on(\"change\", \"textarea\", this._onChangeInput.bind(this));\n        }\n        \n        html.find(\".effect-control\").on(\"click\", (ev) => {\n            if (self.item.isOwned) {\n                ui.notifications.warn(game.i18n.localize(\"BITD.EffectWarning\"));\n                return;\n            }\n            BladesActiveEffect.onManageActiveEffect(ev, self.item);\n        });\n        \n        html.find(\"[data-action=\\\"toggle-turf-connection\\\"\").on(\"click\", this.toggleTurfConnection.bind(this));\n    }\n    \n    async _onTagifyChange(event) {\n        const tagString = event.target.value;\n        if (tagString) {\n            const tags = JSON.parse(tagString)\n                .map(({ value }) => value);\n            this.item.update({ \"system.tags\": tags });\n        }\n        else {\n            this.item.update({ \"system.tags\": [] });\n        }\n    }\n    \n    toggleTurfConnection(event) {\n        const button$ = $(event.currentTarget);\n        const connector$ = button$.parent();\n        const turfNum = parseInt(connector$.data(\"index\") ?? 0);\n        const turfDir = connector$.data(\"dir\");\n        if (!turfNum || !turfDir) {\n            return;\n        }\n        const toggleState = connector$.hasClass(\"no-connect\");\n        const updateData = {\n            [`system.turfs.${turfNum}.connects.${turfDir}`]: toggleState\n        };\n        const partner = connector$.data(\"partner\");\n        if (typeof partner === \"string\" && /-/.test(partner)) {\n            const [partnerNum, partnerDir] = partner.split(\"-\");\n            updateData[`system.turfs.${partnerNum}.connects.${partnerDir}`] = toggleState;\n        }\n        this.item.update(updateData);\n    }\n    \n    async getData() {\n        const context = (await super.getData());\n        \n        context.editable = this.options.editable;\n        context.isGM = game.user.isGM;\n        context.isEmbeddedItem = this.item.parent !== null;\n        context.item = this.item;\n        context.system = this.item.system;\n        context.effects = this.item.effects;\n        \n        return context;\n    }\n}\r\n\nexport default BladesItemSheet;"]}