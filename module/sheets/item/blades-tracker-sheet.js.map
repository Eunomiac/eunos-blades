{"version":3,"sources":["../../ts/sheets/item/blades-tracker-sheet.ts"],"names":[],"mappings":"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","file":"blades-tracker-sheet.js","sourcesContent":["\r\nimport {BladesActorType, BladesItemType, BladesPhase} from \"../../core/constants.js\";\r\nimport BladesItemSheet from \"./blades-item-sheet.js\";\r\nimport BladesItem from \"../../blades-item.js\";\r\nimport BladesGMTracker from \"../../documents/items/blades-gm-tracker.js\";\r\nimport BladesActor from \"../../blades-actor.js\";\r\nimport BladesPC from \"../../documents/actors/blades-pc.js\";\r\nimport BladesNPC from \"../../documents/actors/blades-npc.js\";\r\nimport BladesFaction from \"../../documents/actors/blades-faction.js\";\r\nimport BladesCrew from \"../../documents/actors/blades-crew.js\";\r\n\r\n\r\nexport enum BladesTipContext {\r\n  DiceRoll = \"DiceRoll\",\r\n  Combat = \"Combat\",\r\n  General = \"General\"\r\n}\r\n\r\ntype OnSubmitEvent = Event & {\r\n  result: Promise<Record<string,string|number|boolean>>\r\n}\r\n\r\nclass BladesTipGenerator {\r\n\r\n  static Test(pcActor: unknown): BladesPC|undefined {\r\n    if (BladesActor.IsType(pcActor, BladesActorType.pc)) {\r\n      return pcActor;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  testActor: BladesActorOfType<BladesActorType.pc> = new BladesPC({name: \"blah\", type: \"pc\"});\r\n\r\n  static get Tips() {\r\n    return {\r\n      [BladesTipContext.DiceRoll]: [],\r\n      [BladesTipContext.Combat]: [\r\n        \"Every combat encounter should advance the main plot, or else it's filler.\",\r\n        \"Inject dialogue into combat encounters, especially from important adversaries.\",\r\n        \"Combat encounters should be a challenge, but not a slog. Don't be afraid to end them early.\",\r\n        \"Infiltrate/Rescue/Destroy: Use these as additional/secondary goals in combat encounters.\",\r\n        \"Tell the next player in the initiative order that they're on deck.\",\r\n        \"Don't trigger combats automatically: Use alternate objectives to incite the players to fight, giving them agency.\",\r\n        \"Add another layer by drawing focus to collateral effects of the combat: a fire, a hostage, a collapsing building, innocents in danger\"\r\n      ],\r\n      [BladesTipContext.General]: [\r\n        \"Rolling the dice always means SOMETHING happens.\",\r\n        \"Jump straight to the action; don't waste time on establishing scenes or filler.\",\r\n        \"Invoke elements of characters' backstories or beliefs to make any scene more personal.\"\r\n\r\n      ]\r\n    };\r\n  }\r\n\r\n  private tipContext: BladesTipContext;\r\n  constructor(tipContext: BladesTipContext) {\r\n    this.tipContext = tipContext;\r\n  }\r\n\r\n\r\n}\r\n// declare interface BladesTrackerSheet {\r\n//   get type(): BladesItemType.gm_tracker,\r\n//   parent: null,\r\n//   system: BladesItem[\"system\"] & {\r\n//     game_phase: BladesPhase;\r\n//   }\r\n// }\r\nclass BladesTrackerSheet extends BladesItemSheet {\r\n\r\n  static Get() { return game.eunoblades.Tracker as BladesGMTracker }\r\n\r\n  static override get defaultOptions() {\r\n    return foundry.utils.mergeObject(super.defaultOptions, {\r\n      classes: [\"eunos-blades\", \"sheet\", \"item\", \"gm-tracker\"],\r\n      template: \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\",\r\n      width: 700,\r\n      height: 970\r\n    });\r\n  }\r\n\r\n  static async Initialize() {\r\n    game.eunoblades ??= {};\r\n    Items.registerSheet(\"blades\", BladesTrackerSheet, {types: [\"gm_tracker\"], makeDefault: true});\r\n    Hooks.once(\"ready\", async () => {\r\n      let tracker: BladesGMTracker|undefined = game.items.find((item): item is BladesGMTracker => BladesItem.IsType(item, BladesItemType.gm_tracker));\r\n      if (!tracker) {\r\n        tracker = (await BladesGMTracker.create({\r\n          name: \"GM Tracker\",\r\n          type: \"gm_tracker\",\r\n          img: \"systems/eunos-blades/assets/icons/misc-icons/gm-tracker.svg\"\r\n        })) as BladesGMTracker;\r\n      }\r\n      game.eunoblades.Tracker = tracker;\r\n    });\r\n    return loadTemplates([\r\n      \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\"\r\n    ]);\r\n  }\r\n\r\n  // override getData() {\r\n  //   const context: any = super.getData() as ReturnType<BladesItemSheet[\"getData\"]> & {system: any}\r\n\r\n  //   context.system.phases = Object.values(BladesPhase);\r\n\r\n  //   return context;\r\n  // }\r\n\r\n\r\n  override async activateListeners(html: JQuery<HTMLElement>) {\r\n    super.activateListeners(html);\r\n\r\n  }\r\n\r\n  override async _onSubmit(event: OnSubmitEvent, params: List<any> = {}) {\r\n    const prevPhase = this.item.system.phase;\r\n    const submitData = await super._onSubmit(event, params);\r\n    const newPhase = this.item.system.phase;\r\n    let isForcingRender = true;\r\n    if (prevPhase !== newPhase) {\r\n      switch (prevPhase) {\r\n        case BladesPhase.CharGen: {\r\n\r\n          break;\r\n        }\r\n        case BladesPhase.Freeplay: {\r\n\r\n          break;\r\n        }\r\n        case BladesPhase.Score: {\r\n          isForcingRender = false;\r\n          game.actors.filter((actor): actor is BladesPC => BladesActor.IsType(actor, BladesActorType.pc))\r\n            .forEach((actor) => actor.clearLoadout());\r\n          break;\r\n        }\r\n        case BladesPhase.Downtime: {\r\n\r\n          break;\r\n        }\r\n        // no default\r\n      }\r\n      switch (newPhase) {\r\n        case BladesPhase.CharGen: {\r\n\r\n          break;\r\n        }\r\n        case BladesPhase.Freeplay: {\r\n\r\n          break;\r\n        }\r\n        case BladesPhase.Score: {\r\n\r\n          break;\r\n        }\r\n        case BladesPhase.Downtime: {\r\n\r\n          break;\r\n        }\r\n        // no default\r\n      }\r\n    }\r\n    if (isForcingRender) {\r\n      game.actors.filter((actor) => actor.type === BladesActorType.pc)\r\n        .forEach((actor) => actor.sheet?.render());\r\n    }\r\n    return submitData;\r\n  }\r\n\r\n}\r\n\r\nexport default BladesTrackerSheet;"]}