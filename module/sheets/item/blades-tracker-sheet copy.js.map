{"version":3,"sources":["sheets/item/blades-tracker-sheet copy.js"],"names":[],"mappingsfile":"blades-tracker-sheet copy.js","sourcesContent":["import { BladesActorType, BladesItemType, BladesPhase } from \"../../core/constants.js\";\nimport BladesItemSheet from \"./blades-item-sheet.js\";\nimport BladesItem from \"../../blades-item.js\";\nimport BladesGMTracker from \"../../documents/items/blades-gm-tracker.js\";\nimport BladesActor from \"../../blades-actor.js\";\nimport BladesPC from \"../../documents/actors/blades-pc.js\";\r\n\nexport var BladesTipContext;\n(function (BladesTipContext) {\n    BladesTipContext[\"DiceRoll\"] = \"DiceRoll\";\n    BladesTipContext[\"Combat\"] = \"Combat\";\n    BladesTipContext[\"General\"] = \"General\";\n})(BladesTipContext || (BladesTipContext = {}));\r\n\nclass BladesTipGenerator {\n    \n    static Test(pcActor) {\n        if (BladesActor.IsType(pcActor, BladesActorType.pc)) {\n            return pcActor;\n        }\n        return undefined;\n    }\n    \n    testActor = new BladesPC({ name: \"blah\", type: \"pc\" });\n    \n    static get Tips() {\n        return {\n            [BladesTipContext.DiceRoll]: [],\n            [BladesTipContext.Combat]: [\n                \"Every combat encounter should advance the main plot, or else it's filler.\",\n                \"Inject dialogue into combat encounters, especially from important adversaries.\",\n                \"Combat encounters should be a challenge, but not a slog. Don't be afraid to end them early.\",\n                \"Infiltrate/Rescue/Destroy: Use these as additional/secondary goals in combat encounters.\",\n                \"Tell the next player in the initiative order that they're on deck.\",\n                \"Don't trigger combats automatically: Use alternate objectives to incite the players to fight, giving them agency.\",\n                \"Add another layer by drawing focus to collateral effects of the combat: a fire, a hostage, a collapsing building, innocents in danger\"\n            ],\n            [BladesTipContext.General]: [\n                \"Rolling the dice always means SOMETHING happens.\",\n                \"Jump straight to the action; don't waste time on establishing scenes or filler.\",\n                \"Invoke elements of characters' backstories or beliefs to make any scene more personal.\"\n                \n            ]\n        };\n    }\n    \n    tipContext;\n    constructor(tipContext) {\n        this.tipContext = tipContext;\n    }\n}\r\nclass BladesTrackerSheet extends BladesItemSheet {\n    \n    static Get() { return game.eunoblades.Tracker; }\n    \n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"item\", \"gm-tracker\"],\n            template: \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\",\n            width: 700,\n            height: 970\n        });\n    }\n    \n    static async Initialize() {\n        game.eunoblades ??= {};\n        Items.registerSheet(\"blades\", BladesTrackerSheet, { types: [\"gm_tracker\"], makeDefault: true });\n        Hooks.once(\"ready\", async () => {\n            let tracker = game.items.find((item) => BladesItem.IsType(item, BladesItemType.gm_tracker));\n            if (!tracker) {\n                tracker = (await BladesGMTracker.create({\n                    name: \"GM Tracker\",\n                    type: \"gm_tracker\",\n                    img: \"systems/eunos-blades/assets/icons/misc-icons/gm-tracker.svg\"\n                }));\n            }\n            game.eunoblades.Tracker = tracker;\n        });\n        return loadTemplates([\n            \"systems/eunos-blades/templates/items/gm_tracker-sheet.hbs\"\n        ]);\n    }\n    \r\n\n    \r\n    \r\n\n    \n    async activateListeners(html) {\n        super.activateListeners(html);\n        \n    }\n    \n    async _onSubmit(event, params = {}) {\n        const prevPhase = this.item.system.phase;\n        const submitData = await super._onSubmit(event, params);\n        const newPhase = this.item.system.phase;\n        let isForcingRender = true;\n        if (prevPhase !== newPhase) {\n            switch (prevPhase) {\n                case BladesPhase.CharGen: {\n                    \n                    break;\n                }\n                case BladesPhase.Freeplay: {\n                    \n                    break;\n                }\n                case BladesPhase.Score: {\n                    isForcingRender = false;\n                    game.actors.filter((actor) => BladesActor.IsType(actor, BladesActorType.pc))\n                        .forEach((actor) => actor.clearLoadout());\n                    break;\n                }\n                case BladesPhase.Downtime: {\n                    \n                    break;\n                }\r\n            }\n            switch (newPhase) {\n                case BladesPhase.CharGen: {\n                    \n                    break;\n                }\n                case BladesPhase.Freeplay: {\n                    \n                    break;\n                }\n                case BladesPhase.Score: {\n                    \n                    break;\n                }\n                case BladesPhase.Downtime: {\n                    \n                    break;\n                }\r\n            }\n        }\n        if (isForcingRender) {\n            game.actors.filter((actor) => actor.type === BladesActorType.pc)\n                .forEach((actor) => actor.sheet?.render());\n        }\n        return submitData;\n    }\n}\r\n\nexport default BladesTrackerSheet;"]}