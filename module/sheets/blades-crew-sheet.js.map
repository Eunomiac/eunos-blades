{"version":3,"sources":["sheets/blades-crew-sheet.js"],"names":[],"mappingsfile":"blades-crew-sheet.js","sourcesContent":["import BladesSheet from \"./blades-sheet.js\";\nimport { BladesItemType } from \"../core/constants.js\";\r\n\nclass BladesCrewSheet extends BladesSheet {\n    \n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"eunos-blades\", \"sheet\", \"actor\", \"crew\"],\n            template: \"systems/eunos-blades/templates/crew-sheet.hbs\",\n            width: 940,\n            height: 820,\n            tabs: [{ navSelector: \".nav-tabs\", contentSelector: \".tab-content\", initial: \"claims\" }]\n        });\n    }\n    \n    getData() {\n        const context = super.getData();\n        \n        eLog.checkLog(\"actor\", \"[BladesCrewSheet] super.getData()\", { ...context });\n        \n        context.actor = this.actor;\n        context.system = this.actor.system;\n        \n        const { activeSubItems } = this.actor;\n        \n        // Assemble embedded actors and items\n        context.items = {\n            abilities: activeSubItems.filter((item) => item.type === BladesItemType.crew_ability),\n            playbook: this.actor.playbook,\n            reputation: activeSubItems.find((item) => item.type === BladesItemType.crew_reputation),\n            upgrades: activeSubItems.filter((item) => item.type === BladesItemType.crew_upgrade),\n            cohorts: activeSubItems.filter((item) => item.type === BladesItemType.cohort),\n            preferredOp: activeSubItems.find((item) => item.type === BladesItemType.preferred_op)\n        };\n        context.actors = {\n            members: this.actor.members,\n            contacts: this.actor.contacts\n        };\n        \n        context.tierData = {\n            label: \"Tier\",\n            dotline: {\n                data: this.actor.system.tier,\n                target: \"system.tier.value\",\n                iconEmpty: \"dot-empty.svg\",\n                iconEmptyHover: \"dot-empty-hover.svg\",\n                iconFull: \"dot-full.svg\",\n                iconFullHover: \"dot-full-hover.svg\"\n            }\n        };\n        \n        context.upgradeData = {\n            dotline: {\n                \"class\": \"dotline-right\",\n                \"data\": {\n                    value: this.actor.availableUpgradePoints,\n                    max: this.actor.availableUpgradePoints\n                },\n                \"dotlineLabel\": \"Available Upgrade Points\",\n                \"isLocked\": true,\n                \"iconFull\": \"dot-full.svg\"\n            }\n        };\n        \n        context.abilityData = {\n            dotline: {\n                \"class\": \"dotline-right\",\n                \"data\": {\n                    value: this.actor.availableAbilityPoints,\n                    max: this.actor.availableAbilityPoints\n                },\n                \"dotlineLabel\": \"Available Ability Points\",\n                \"isLocked\": true,\n                \"iconFull\": \"dot-full.svg\"\n            }\n        };\n        \n        context.cohortData = {\n            dotline: {\n                \"class\": \"dotline-right\",\n                \"data\": {\n                    value: this.actor.availableCohortPoints,\n                    max: this.actor.availableCohortPoints\n                },\n                \"dotlineLabel\": \"Available Cohort Points\",\n                \"isLocked\": true,\n                \"iconFull\": \"dot-full.svg\"\n            }\n        };\n        \n        context.repData = {\n            name: \"Rep\",\n            dotlines: [\n                {\n                    data: {\n                        value: Math.min(this.actor.system.rep.value, this.actor.system.rep.max - this.actor.turfCount),\n                        max: this.actor.system.rep.max - this.actor.turfCount\n                    },\n                    target: \"system.rep.value\",\n                    svgKey: \"teeth.tall\",\n                    svgFull: \"full|half|frame\",\n                    svgEmpty: \"full|half|frame\"\n                },\n                {\n                    \"data\": {\n                        value: this.actor.turfCount,\n                        max: this.actor.turfCount\n                    },\n                    \"target\": \"none\",\n                    \"svgKey\": \"teeth.tall\",\n                    \"svgFull\": \"full|half|frame\",\n                    \"svgEmpty\": \"full|half|frame\",\n                    \"class\": \"flex-row-reverse\",\n                    \"isLocked\": true\n                }\n            ]\n        };\n        \n        context.heatData = {\n            name: \"Heat\",\n            dotline: {\n                data: this.actor.system.heat,\n                target: \"system.heat.value\",\n                svgKey: \"teeth.tall\",\n                svgFull: \"full|half|frame\",\n                svgEmpty: \"full|half|frame\"\n            }\n        };\n        \n        context.wantedData = {\n            name: \"Wanted\",\n            dotline: {\n                data: this.actor.system.wanted,\n                target: \"system.wanted.value\",\n                svgKey: \"teeth.short\",\n                svgFull: \"full|frame\",\n                svgEmpty: \"frame\"\n            }\n        };\n        \n        eLog.checkLog(\"actor\", \"[BladesCrewSheet] return getData()\", { ...context });\n        return context;\n    }\n    \n    activateListeners(html) {\n        super.activateListeners(html);\n        \r\n        if (!this.options.editable) {\n            return;\n        }\n        \r\n        html.find(\".item-sheet-open\").on(\"click\", (event) => {\n            const element = $(event.currentTarget).parents(\".item\");\n            const item = this.actor.items.get(element.data(\"itemId\"));\n            item?.sheet?.render(true);\n        });\n        \r\n        html.find(\".add-item\").on(\"click\", (event) => {\n            event.preventDefault();\n            const a = event.currentTarget;\n            const item_type = a.dataset.itemType;\n            \n            const data = {\n                name: randomID(),\n                type: item_type\n            };\n            return this.actor.createEmbeddedDocuments(\"Item\", [data]);\n        });\n        \r\n        html.find(\".hold-toggle\").on(\"click\", () => {\n            this.actor.update({ \"system.hold\": this.actor.system.hold === \"weak\" ? \"strong\" : \"weak\" });\n        });\n        \r\n        html.find(\".turf-select\").on(\"click\", async (event) => {\n            \n            const turf_id = $(event.currentTarget).data(\"turfId\");\n            const turf_current_status = $(event.currentTarget).data(\"turfStatus\");\n            this.actor.playbook?.update({ [\"system.turfs.\" + turf_id + \".value\"]: !turf_current_status })\n                .then(() => this.render(false));\n        });\n        \r\n        html.find('.cohort-block-harm input[type=\"radio\"]').change(async (ev) => {\n            const element = $(ev.currentTarget).parents(\".item\");\n            \n            const item_id = element.data(\"itemId\");\n            const harm_id = $(ev.currentTarget).val();\n            \n            await this.actor.updateEmbeddedDocuments(\"Item\", [{\n                    \"_id\": item_id,\n                    \"system.harm\": [harm_id]\n                }]);\n            this.render(false);\n        });\n    }\n}\r\n\nexport default BladesCrewSheet;"]}