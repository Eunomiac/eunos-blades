{"version":3,"sources":["../../ts/blades-actor.ts"],"names":[],"mappings":"AAAA,oBAAoB;AACpB,OAAO,CAAC,MAAM,qBAAqB,CAAC;AAEpC,OAAO,CAAC,EAAE,EAAC,eAAe,EAAe,GAAG,EAAY,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,MAAM,EAAkD,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,EAAE,WAAW,EAAE,eAAe,EAAE,aAAa,EAAY,MAAM,EAAO,MAAM,qBAAqB,CAAC;AASrS,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAC5C,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAC,iBAAiB,EAAC,MAAM,oBAAoB,CAAC;AAKrD,aAAa;AACb,wBAAwB;AACxB,0EAA0E;AAC1E,gKAAgK;AAChK,8FAA8F;AAC9F,wBAAwB;AACxB,4BAA4B;AAC5B,gEAAgE;AAChE,IAAI;AACJ,wBAAwB;AACxB,MAAM,WAAY,SAAQ,KAAK;IAG/B,wBAAwB;IACtB,2EAA2E;IAC3E,mFAAmF;IACnF,kCAAkC;IAClC,kGAAkG;IACpG,wBAAwB;IACtB,4CAA4C;IAC5C,oEAAoE;IACtE,wBAAwB;IACtB,sCAAsC;IACtC,oDAAoD;IACpD,8DAA8D;IAC9D,MAAM;IACR,wBAAwB;IACtB,wBAAwB;IACxB,yGAAyG;IAC3G,wBAAwB;IACtB,6BAA6B;IAC7B,2BAA2B;IAC3B,IAAI;IACN,wBAAwB;IACtB,qCAAqC;IACrC,MAAM,CAAU,KAAK,CAAC,MAAM,CAAC,IAAwE,EAAE,OAAO,GAAG,EAAE;QACjH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QACpC,wBAAwB;QACpB,qBAAqB;QACrB,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC1H,wBAAwB;QACpB,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IACD,aAAa;IACf,wBAAwB;IACtB,0CAA0C;IAC1C,MAAM,KAAK,GAAG,KAAK,OAAO,IAAI,CAAC,MAAM,CAAA,CAAC,CAAC;IACvC,MAAM,CAAC,GAAG,CAAC,QAAkB;QAC3B,IAAI,QAAQ,YAAY,WAAW,EAAE;YAAE,OAAO,QAAQ,CAAA;SAAE;QACxD,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YAAE,OAAO,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;SAAE;QACjE,OAAO,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,QAAQ,CAAC;eAC/D,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IACxD,CAAC;IACD,MAAM,CAAC,eAAe,CAA4B,OAAU,EAAE,GAAG,IAAiB;QAChF,OAAO,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC;aAC7D,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAgC,CAAC;IAC7E,CAAC;IACH,wBAAwB;IACtB,MAAM,CAAC,MAAM,CAA4B,GAAY,EAAE,GAAG,KAAU;QAClE,MAAM,OAAO,GAAG,IAAI,GAAG,CAAkB,KAAK,CAAC,CAAC;QAChD,OAAO,GAAG,YAAY,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IACH,wBAAwB;IACtB,IAAI,IAAI,KAAkB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAA,CAAC,CAAC;IAC3D,wBAAwB;IACtB,MAAM,CAAC,GAAG,IAAiB;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,MAAM,CAAC,GAAG,IAAiB;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACnB,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAAE,OAAM;aAAE;YACrC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,6BAA6B,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,OAAO,EAAC,CAAC,CAAC;IACxC,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,MAAM,CAAC,GAAG,IAAiB;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,6BAA6B,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,EAAC,aAAa,EAAE,OAAO,EAAC,CAAC,CAAC;IACxC,CAAC;IACH,wBAAwB;IACtB,IAAI,OAAO;QACT,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;aAC5D,MAAM,CAAC,OAAO,CAAC;aACf,IAAI,CAAC,UAAU,CAAC,CAAC;QACpB,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IACvF,CAAC;IACH,wBAAwB;IACtB,IAAI,gBAAgB,KAAa,OAAO,EAAE,CAAA,CAAC,CAAC;IAC9C,wBAAwB;IACtB,cAAc,CAAC,MAAc;QAC3B,QAAQ,MAAM,EAAE;YACd,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;oBAChD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC/E;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;aAC/B;YACD,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7D,KAAK,MAAM,CAAC,KAAK,CAAC,CAAC;gBACjB,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;oBACjD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;iBAC1B;gBACD,OAAO,CAAC,CAAC;aACV;YACD,KAAK,MAAM,CAAC,SAAS,CAAC,CAAC;gBACrB,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;oBACjD,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;iBAC9B;gBACD,OAAO,CAAC,CAAC;aACV;YACD,aAAa;SACd;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACD,aAAa;IACf,wBAAwB;IACtB,2CAA2C;IAC7C,wBAAwB;IACtB,IAAI,SAAS;QACX,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;aACtC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;aACjC,MAAM,CAAC,CAAC,QAAQ,EAA2B,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtE,CAAC;IACD,IAAI,eAAe,KAAoB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAC;IAC1H,IAAI,iBAAiB,KAAoB,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAC;IAC7H,wBAAwB;IACtB,iBAAiB,CAAC,KAAkB;QACtC,wBAAwB;QACpB,4DAA4D;QAChE,wBAAwB;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACO,2BAA2B,CAAC,YAA2B;QACjE,wBAAwB;QACpB,OAAO,YAAY;YACnB,gDAAgD;aAC7C,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;YACjC,8DAA8D;aAC3D,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;YACtF,0DAA0D;aACvD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC;YACtD,uBAAuB;aACpB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACnC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACjC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAClC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACjC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAClC,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IACH,wBAAwB;IACtB,eAAe,CAAC,QAA2B;QAC7C,wBAAwB;QACpB,+EAA+E;QACnF,wBAAwB;QACpB,MAAM,UAAU,GAAkC,EAAE,CAAC;QACzD,wBAAwB;QACpB,QAAQ,QAAQ,EAAE;YAChB,KAAK,iBAAiB,CAAC,OAAO,CAAC;YAC/B,KAAK,iBAAiB,CAAC,KAAK,CAAC;YAC7B,KAAK,iBAAiB,CAAC,MAAM,CAAC;YAC9B,KAAK,iBAAiB,CAAC,YAAY,CAAC,CAAC;gBACnC,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACrJ,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxH,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,YAAY,CAAC,CAAC;gBACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACvF,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,IAAY,CAAC,CAAC,CAAC;gBAC7H,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC3B,UAAU,CAAC,IAAI,GAAG,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACpE,OAAO,UAAU,CAAC;aACnB;YACD,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;SACvB;IACH,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,WAAW,CAAC,QAAkB,EAAE,IAAkB;QAC1D,wBAAwB;QACpB,IAAK,qBAGJ;QAHD,WAAK,qBAAqB;YACxB,wDAAsC,CAAA;YACtC,sDAAqC,CAAA;QACvC,CAAC,EAHI,qBAAqB,KAArB,qBAAqB,QAGzB;QACD,IAAI,aAAsC,CAAC;QAC/C,wBAAwB;QACpB,0EAA0E;QAC1E,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC5C,IAAI,CAAC,QAAQ,EAAE;gBAAE,OAAM;aAAE;YACzB,0BAA0B;YAC1B,IAAI,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBACxC,eAAe;gBACf,MAAM,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC5C;YACD,0BAA0B;YAC1B,aAAa,GAAG,QAAQ,CAAC;SAC1B;aAAM;YACL,oFAAoF;YACpF,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACxC,IAAI,CAAC,KAAK,EAAE;gBAAE,OAAM;aAAE;YACtB,MAAM,YAAY,GAAiB,EAAE,CAAC;YACtC,IAAI,IAAI,EAAE;gBACR,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC;oBAC3B,GAAG,KAAK,CAAC,IAAI;oBACb,GAAG,IAAI;iBACR,CAAC,CAAC;aACJ;YACD,+DAA+D;YAC/D,MAAM,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,oBAAoB,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,YAAY,EAAC,CAAC,CAAC;YACpE,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAG,CAAC,CAAC;SAC7C;QACL,wBAAwB;QACpB,IAAI,CAAC,aAAa,EAAE;YAAE,OAAM;SAAE;QAClC,wBAAwB;QACpB,iEAAiE;QACjE,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,qBAAqB,CAAC,CAAC;QACpF,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,uCAAuC;YACvC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe;iBAC9C,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAS,CAAC,EAAE,KAAK,aAAc,CAAC,EAAE,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACjF,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAG,CAAC,CAAC,CAAC,CAAC;SACvD;IACH,CAAC;IACH,wBAAwB;IACtB,WAAW,CAAC,QAAkB;QAC5B,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QACpC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,eAAe,CAAC,GAAG,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;YAAE,OAAO,KAAK,CAAA;SAAE;QAC9F,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC;QAC3D,MAAM,CAAC,MAAM,CACX,KAAK,CAAC,MAAM,EACZ,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CACxC,CAAC;QACF,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;IACH,wBAAwB;IACtB,aAAa,CAAC,QAAkB;QAC9B,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,EAAE;YAAE,OAAO,KAAK,CAAA;SAAE;QAC5B,OAAO,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;IACH,wBAAwB;IACtB,qDAAqD;IACrD,6CAA6C;IAC7C,iCAAiC;IACjC,gIAAgI;IAChI,IAAI;IACN,wBAAwB;IACtB,KAAK,CAAC,cAAc,CAAC,QAAkB,EAAE,UAA2D;QAClG,UAAU,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QAC5C,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,KAAK,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QACpC,wBAAwB;QACpB,iDAAiD;QACjD,MAAM,gBAAgB,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QACxE,wBAAwB;QACpB,oDAAoD;QACpD,MAAM,oBAAoB,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAG,CAAC,IAAI,EAAE,EAAE,gBAAgB,EAAE,EAAC,iBAAiB,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAC,CAAC,CAAC;QAC/J,wBAAwB;QACpB,oCAAoC;QACpC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAG,CAAC,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QACnH,uCAAuC;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,oBAAoB,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAC,EAAE,SAAS,EAAE,IAAI,CAAC;aAC1E,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,oBAAoB,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,oBAAoB,EAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;aAClG,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,CAAqC,CAAC;IAC3E,CAAC;IACH,wBAAwB;IACtB,yDAAyD;IAC3D,wBAAwB;IACtB,gCAAgC;IAChC,UAAU;IACV,2CAA2C;IAC3C,yBAAyB;IACzB,mDAAmD;IACnD,6CAA6C;IAC7C,oEAAoE;IACpE,kEAAkE;IAClE,IAAI;IACN,wBAAwB;IACtB,KAAK,CAAC,WAAW,CAAC,QAAkB;QAClC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAM;SAAE;QACzB,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,kBAAkB,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAC,CAAC,KAAK,QAAQ,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,EAAC,CAAC,EAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACzH,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,cAAc,CAAC,aAAa,GAAG,IAAI;QACvC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE,KAAK,IAAI,CAAC,EAAE,EAAE;gBAAE,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAA;aAAE;QACxF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;IACvB,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,gBAAgB,CAAC,aAAa,GAAG,IAAI;QACzC,MAAM,EAAC,WAAW,EAAC,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE;YAAE,OAAM;SAAE;QAC5B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QACxC,uEAAuE;QACvE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;SACtB;IACH,CAAC;IACH,wBAAwB;IACtB,sCAAsC;IACxC,wBAAwB;IACtB,aAAa;IACb,0CAA0C;IAC5C,wBAAwB;IACtB,IAAI,QAAQ,KAAK,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;IAChD,IAAI,cAAc,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAC;IAC9F,IAAI,gBAAgB,KAAK,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA,CAAC,CAAC;IACjG,wBAAwB;IACd,iBAAiB,CAAC,IAAgB;QACxC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAAE,OAAO,IAAI,CAAA;SAAE;QACzC,KAAK,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,OAAmE,CAAC,EAAE;YAC1H,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1D,MAAM,SAAS,GAA0C,EAAE,CAAC;YAC5D,OAAO,KAAK,CAAC,MAAM,EAAE;gBACnB,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,EAAG,CAAC;gBAC7B,SAAS,CAAa,KAAK,CAAC,KAAK,EAAE,CAAC;gBACpC,QAAQ,KAAK,EAAE;oBACb,KAAK,UAAU,CAAC,aAAa,CAAC,CAAC;wBAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc;6BACjC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,SAAS,CAAa,KAAK,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAG,CAAC,CAAC;6BACnE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,OAAO,CAAC,CAAC;wBACtD,IAAI,QAAQ,EAAE;4BACZ,SAAS,CAAa,KAAK,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAC,CAAC;yBAClD;6BAAM;4BACL,OAAO,KAAK,CAAC;yBACd;wBACD,MAAM;qBACP;oBACD,KAAK,UAAU,CAAC,mBAAmB,CAAC,CAAC;wBACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc;6BACjC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,SAAS,CAAa,KAAK,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAG,CAAC,CAAC;6BACnE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,OAAoB,CAAC,CAAC,CAAC;wBACrD,IAAI,QAAQ,EAAE;4BACZ,SAAS,CAAa,KAAK,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAG,CAAC,CAAC;yBAClD;6BAAM;4BACL,OAAO,KAAK,CAAC;yBACd;wBACD,MAAM;qBACP;oBACD,KAAK,UAAU,CAAC,gBAAgB,CAAC,CAAC;wBAChC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;4BAAE,OAAO,KAAK,CAAA;yBAAE;wBACnE,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;4BACxG,OAAO,KAAK,CAAC;yBACd;qBACF;oBACD,aAAa;iBACd;aACF;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACO,2BAA2B,CAA2B,WAAuC;QACvG,wBAAwB;QACpB,OAAO,WAAW;YACtB,wBAAwB;YACpB,gDAAgD;aAC7C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACrD,wBAAwB;YACpB,sFAAsF;aACnF,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YAChB,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,KAAK,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;QACvL,CAAC,CAAC;YACR,wBAAwB;YACpB,4DAA4D;aACzD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAgC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,KAAK,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACpJ,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/B,OAAO,gBAAgB,CAAC;aACzB;iBAAM;gBACL,OAAO,KAAK,CAAC;aACd;QACH,CAAC,CAAC;aACD,IAAI,EAAE;YACb,wBAAwB;YACpB,4BAA4B;aACzB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAC5B,MAAM,UAAU,GAAa,EAAE,CAAC;YAChC,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC7B;YACD,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC/B,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACjC;YACD,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBACrC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAClC;YACD,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBAC9E,IAAI,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;oBAClD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC3B;qBAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,EAAE;oBAC/E,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;iBAC3C;qBAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;oBACxC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC9B;aACF;YACD,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;gBACtD,IAAI,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;oBAClD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC3B;qBAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,EAAE;oBAC/E,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;iBAC3C;qBAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;oBACxC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC9B;aACF;YACT,wBAAwB;YAChB,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,KAAK,CAAC,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC/C;YACT,wBAAwB;YAChB,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;YACR,wBAAwB;YACpB,iGAAiG;aAC9F,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACb,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAClF,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACjF,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YACtE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACrE,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YAC3D,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAC5D,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC,UAAU,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAChD,IAAI,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,UAAU,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YAC/C,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACnC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACjC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAClC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAA;aAAE;YACjC,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;gBAAE,OAAO,CAAC,CAAC,CAAA;aAAE;YAClC,OAAO,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC;IACH,wBAAwB;IACtB,cAAc,CAAC,QAA2B;QAC5C,wBAAwB;QACpB,MAAM,UAAU,GAAiC,EAAE,CAAC;QACxD,wBAAwB;QACpB,QAAQ,QAAQ,EAAE;YAChB,KAAK,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC/B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACnE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACxG,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBACjC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACnE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1G,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC3B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACjG,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBACvH,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC/B,QAAQ,IAAI,CAAC,IAAI,EAAE;oBACjB,KAAK,eAAe,CAAC,EAAE,CAAC,CAAC;wBACvB,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;wBAC3J,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC/H,OAAO,UAAU,CAAC;qBACnB;oBACD,KAAK,eAAe,CAAC,IAAI,CAAC,CAAC;wBACzB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC,CAAC;wBAC7G,OAAO,UAAU,CAAC;qBACnB;oBACD,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;iBACvB;aACF;YACD,KAAK,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBACjC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACrE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;gBAC/G,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,YAAY,CAAC,CAAC;gBACnC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACnG,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,YAAyB,CAAC,CAAC,CAAC;gBAC5I,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC3B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACnE,MAAM,IAAI,GAAa,IAAgB,CAAC;gBACxC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBAChD,MAAM,SAAS,GAAG,IAAI,CAAC,2BAA2B,CAAC;oBACjD,GAAG,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC;oBACrE,GAAG,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;iBACrE,CAAC;qBACC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpE,wBAAwB;gBAChB,6DAA6D;gBAC7D,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC3F,UAAU,CAAC,OAAO,GAAG,SAAS;qBAC3B,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAClD,2CAA2C;qBACxC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;oBACZ,IAAI,IAAI,CAAC,gBAAgB,EAAE;wBACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;qBAChF;oBACD,OAAO,IAAI,CAAC;gBACd,CAAC,CAAC;oBACJ,wBAAwB;qBACrB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBACb,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;wBAAE,OAAO,CAAC,CAAA;qBAAE;oBAC3D,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;wBAAE,OAAO,CAAC,CAAC,CAAA;qBAAE;oBAC5D,OAAO,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;gBACb,wBAAwB;gBAChB,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,OAAO,CAAC,CAAC;gBAC9B,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;oBAChD,MAAM,IAAI,GAAa,IAAgB,CAAC;oBACxC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;wBAAE,OAAO,KAAK,CAAA;qBAAE;oBAChD,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;oBACxI,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;yBACtG,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;wBACpD,2CAA2C;yBACxC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;wBACZ,IAAI,IAAI,CAAC,gBAAgB,EAAE;4BACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;yBAChF;wBACD,OAAO,IAAI,CAAC;oBACd,CAAC,CAAC;wBACJ,wBAAwB;yBACrB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;wBACb,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;4BAAE,OAAO,CAAC,CAAA;yBAAE;wBAC3D,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE;4BAAE,OAAO,CAAC,CAAC,CAAA;yBAAE;wBAC5D,OAAO,CAAC,CAAC;oBACX,CAAC,CAAC,CAAC;iBACN;qBAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;oBACzD,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBAChI;gBACD,OAAO,UAAU,CAAC;aACnB;YACD,KAAK,iBAAiB,CAAC,OAAO,CAAC,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,EAAE;oBAAE,OAAO,KAAK,CAAA;iBAAE;gBACnG,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC7I,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,CAAC,cAAc,CAAC,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACjI,OAAO,UAAU,CAAC;aACnB;YACD,aAAa;SACd;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IACH,wBAAwB;IACtB,UAAU,CAAC,OAAgB,EAAE,UAAU,GAAG,KAAK;QAC7C,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC1D,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SAChC;QACD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACxJ,CAAC;IACH,wBAAwB;IACtB,YAAY,CAAC,OAAgB;QAC3B,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,KAAK,CAAA;SAAE;QAC3B,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IACzF,CAAC;IACH,wBAAwB;IACtB,kBAAkB,CAAC,OAAgB;QACjC,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,IAAI,EAAE;YAAE,OAAO,KAAK,CAAA;SAAE;QAC3B,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3H,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,UAAU,CAAC,OAAgB;QAC/B,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;QAChE,wBAAwB;QACpB,IAAK,qBAQJ;QARD,WAAK,qBAAqB;YACxB,kDAAsC,CAAA;YACtC,sCAA0B,CAAA;YAC1B,wDAA4C,CAAA;YAC5C,4DAAgD,CAAA;YAChD,8CAAkC,CAAA;YAClC,8CAAkC,CAAA;YAClC,sDAA0C,CAAA;QAC5C,CAAC,EARI,qBAAqB,KAArB,qBAAqB,QAQzB;QACD,IAAI,SAAiC,CAAC;QAC1C,wBAAwB;QACpB,qEAAqE;QACrE,MAAM,YAAY,GAA2B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACtE,yEAAyE;QAC7E,wBAAwB;QACpB,IAAI,YAAY,EAAE;YACtB,wBAAwB;YAClB,0BAA0B;YAC1B,IAAI,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAC5C,yCAAyC;gBACzC,MAAM,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC/C,SAAS,GAAG,YAAY,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,iEAAiE,SAAS,CAAC,EAAG,IAAI,EAAE,SAAS,CAAC,CAAC;aAC3H;iBAAM,EAAE,eAAe;gBACtB,iEAAiE;gBACjE,SAAS,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC,YAAY,CAAuC,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAe,CAAC;gBACxH,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,6DAA6D,SAAS,CAAC,EAAG,IAAI,EAAE,SAAS,CAAC,CAAC;aACvH;SACF;aAAM;YACL,yDAAyD;YACzD,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACjD,wBAAwB;YAClB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,+DAA+D,UAAU,EAAE,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;YAChI,wBAAwB;YAClB,IAAI,CAAC,UAAU,EAAE;gBAAE,OAAM;aAAE;YAC3B,SAAS,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC,UAAU,CAAuC,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAe,CAAC;YACtH,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAK,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,+CAA+C,SAAU,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;SACxG;QACL,wBAAwB;QACpB,IAAI,CAAC,SAAS,EAAE;YAAE,OAAM;SAAE;QAC1B,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,wCAAwC,SAAS,CAAC,EAAE,GAAG,EAAE;YAClF,qBAAqB,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC;YAC3D,aAAa,EAAE,SAAS,CAAC,IAAI;YAC7B,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAW,CAAC;SAChF,CAAC,CAAC;QACP,wBAAwB;QACpB,8CAA8C;QAC9C,IAAI,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAW,CAAC,EAAE;YACxE,uCAAuC;YACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc;iBAClC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,SAAU,CAAC,IAAI,IAAI,OAAQ,CAAC,MAAM,CAAC,UAAU,KAAK,SAAU,CAAC,MAAM,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBAC5J,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACrC;IACH,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,UAAU,CAAC,OAAgB;QAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,EAAE;YAAE,OAAM;SAAE;QACxB,IAAI,OAAO,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAAE;YACxC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO;SACR;QACD,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,mBAAmB,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC3E,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,OAAM;SAAE;QACnD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,YAAY,CAAC,OAAgB;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACzC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;YAAE,OAAM;SAAE;QAC/D,OAAO,CAAC,MAAM,EAAE,CAAC;IACnB,CAAC;IACH,wBAAwB;IACtB,aAAa;IACb,uCAAuC;IACvC,qCAAqC;IACrC,0FAA0F;IAC1F,qCAAqC;IACrC,yBAAyB;IACzB,4EAA4E;IAC5E,2IAA2I;IAC3I,yBAAyB;IACzB,MAAM;IACN,IAAI;IACJ,qCAAqC;IACrC,0FAA0F;IAC1F,qCAAqC;IACrC,8FAA8F;IAC9F,IAAI;IACJ,sDAAsD;IACtD,0FAA0F;IAC1F,qCAAqC;IACrC,8DAA8D;IAC9D,IAAI;IACN,wBAAwB;IACtB;wCACoC;IACtC,wBAAwB;IACtB,KAAK,CAAC,sBAAsB,CAAC,YAAiD,EAAE,MAAM,GAAG,CAAC;QACxF,MAAM,MAAM,GAAW,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YAChD,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,CAAC,CAAC,YAAY,CAAC;QACjB,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,6BAA6B,MAAM,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,EAAC,CAAC,CAAC;IACnH,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,uBAAuB,CAAC,YAAiD,EAAE,MAAM,GAAG,CAAC;QACzF,MAAM,MAAM,GAAW,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC;YAChD,CAAC,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;YAC/B,CAAC,CAAC,YAAY,CAAC;QACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;QACxE,IAAI,QAAQ,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,IAAI,EAAE,CAAC,EAAE;YACrE,OAAO,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,+BAA+B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAC,CAAC,CAAC;SACvE;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,6BAA6B,MAAM,EAAE,CAAC,EAAE,QAAQ,EAAC,CAAC,CAAC;IAC1E,CAAC;IACH,wBAAwB;IACtB,wBAAwB,CAAC,KAAuD;QAC9E,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAAE,OAAO,CAAC,CAAA;SAAE;QACrF,IAAI,KAAK,IAAI,MAAM,EAAE;YACnB,OAAO,CAAC,CAAC;SACV;QACD,IAAI,KAAK,KAAK,QAAQ,EAAE;YACtB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACpF,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YACxC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,WAAW,CAAC,CAAC;SAChD;QACL,wBAAwB;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtF,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC5F,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtF,MAAM,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5G,wBAAwB;QACpB,MAAM,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK;aAClC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;aAC9F,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrI,MAAM,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK;aAClC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;aACtE,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;QACpD,wBAAwB;QACpB,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,aAAa,CAAC,CAAC;QAChE,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,GAAG,gBAAgB,CAAC,CAAC;QACzE,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,aAAa,CAAC,CAAC;QACpE,wBAAwB;QACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,GAAG,YAAY,CAAC,CAAC;QACnE,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,gBAAgB,GAAG,eAAe,CAAC,CAAC;QAC5E,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,GAAG,YAAY,CAAC,CAAC;QACnE,MAAM,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,GAAG,aAAa,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;QACzI,wBAAwB;QACpB,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,yBAAyB,CAAC,CAAC;SACvE;QACD,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO,gBAAgB,GAAG,yBAAyB,CAAC;SACrD;QACD,IAAI,KAAK,KAAK,YAAY,EAAE;YAC1B,OAAO,mBAAmB,GAAG,yBAAyB,CAAC;SACxD;QACL,wBAAwB;QACpB,OAAO,CAAU,CAAC;IACpB,CAAC;IACH,wBAAwB;IACtB,IAAI,sBAAsB,KAAK,OAAO,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAA,CAAC,CAAC;IAChF,IAAI,sBAAsB,KAAK,OAAO,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAA,CAAC,CAAC;IAChF,IAAI,qBAAqB,KAAK,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAA,CAAC,CAAC;IAC9E,IAAI,yBAAyB,KAAK,OAAO,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAA,CAAC,CAAC;IACxF,wBAAwB;IACtB,IAAI,kBAAkB,KAAK,OAAO,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAA,CAAC,CAAC;IACnE,IAAI,kBAAkB,KAAK,OAAO,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAA,CAAC,CAAC;IACnE,IAAI,iBAAiB,KAAK,OAAO,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAA,CAAC,CAAC;IACjE,IAAI,qBAAqB,KAAK,OAAO,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAA,CAAC,CAAC;IAC3E,wBAAwB;IACtB,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,SAAS,CAAA;SAAE;QAC7I,MAAM,IAAI,CAAC,MAAM,CAAC,EAAC,kCAAkC,EAAE,CAAC,EAAC,CAAC,CAAC;QAC3D,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;YAChD,IAAI,CAAC,UAAU,CAAC,cAAe,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,2BAA2B,EAAE,GAAG,IAAI,CAAC,IAAI,iDAAiD,CAAC,CAAC;YACxJ,OAAO,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;SAC9D;QACD,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAClD,IAAI,CAAC,UAAU,CAAC,cAAe,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,2BAA2B,EAAE,0DAA0D,CAAC,CAAC;YACrJ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBAC9C,IAAI,CAAC,UAAU,CAAC,cAAe,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,UAAU,UAAU,2BAA2B,EAAE,SAAS,CAAC,CAAC;gBAC1H,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;SAC1E;QACD,OAAO,SAAkB,CAAC;IAC5B,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,gBAAgB,CAAC,SAAoB;QACzC,MAAM,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,qBAAqB,SAAS,QAAQ,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;QACjE,MAAM,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3F,IAAI,CAAC,UAAU,CAAC,cAAe,CAAC,SAAS,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,mBAAmB,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,IAAI,yBAAyB,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAClL,CAAC;IACH,wBAAwB;IACtB,mGAAmG;IACnG,kEAAkE;IAClE,4GAA4G;IAC5G,IAAI;IACJ,sGAAsG;IACtG,kEAAkE;IAClE,yHAAyH;IACzH,IAAI;IACJ,+DAA+D;IAC/D,8EAA8E;IAC9E,+CAA+C;IAC/C,aAAa;IACb,8CAA8C;IAC9C,gDAAgD;IAChD,gDAAgD;IAChD,+CAA+C;IAC/C,OAAO;IACP,IAAI;IACN,wBAAwB;IACtB,+DAA+D;IAC/D,8EAA8E;IAC9E,+CAA+C;IACjD,wBAAwB;IACtB,mDAAmD;IACnD,0BAA0B;IAC1B,iBAAiB;IACjB,kBAAkB;IAClB,kBAAkB;IAClB,iBAAiB;IACjB,OAAO;IACT,wBAAwB;IACtB,oIAAoI;IACpI,kGAAkG;IAClG,oDAAoD;IACpD,uDAAuD;IACvD,6EAA6E;IAC7E,QAAQ;IACR,MAAM;IACR,wBAAwB;IACtB,wBAAwB;IACxB,IAAI;IACJ,mEAAmE;IACnE,8EAA8E;IAC9E,+CAA+C;IAC/C,yDAAyD;IACzD,aAAa;IACb,mEAAmE;IACnE,sEAAsE;IACtE,sEAAsE;IACtE,sEAAsE;IACtE,OAAO;IACP,IAAI;IACJ,aAAa;IACb,2CAA2C;IAC3C,qCAAqC;IACrC,sEAAsE;IACtE,qCAAqC;IACrC,4FAA4F;IAC5F,IAAI;IACJ,qCAAqC;IACrC,sEAAsE;IACtE,qCAAqC;IACrC,6FAA6F;IAC7F,IAAI;IACJ,yCAAyC;IACzC,sEAAsE;IACtE,qCAAqC;IACrC,8DAA8D;IAC9D,IAAI;IACN,wBAAwB;IACtB,yCAAyC;IACzC,sEAAsE;IACtE,qCAAqC;IACrC,iDAAiD;IACjD,IAAI;IACJ,yCAAyC;IACzC,sEAAsE;IACtE,qCAAqC;IACrC,oEAAoE;IACpE,IAAI;IACJ,gHAAgH;IAClH,wBAAwB;IACtB,oCAAoC;IACpC,qCAAqC;IACrC,kEAAkE;IAClE,uFAAuF;IACvF,IAAI;IACJ,oCAAoC;IACpC,qCAAqC;IACrC,kEAAkE;IAClE,2GAA2G;IAC3G,IAAI;IACJ,wCAAwC;IACxC,qCAAqC;IACrC,kEAAkE;IAClE,4DAA4D;IAC5D,IAAI;IACN,wBAAwB;IACtB,aAAa;IACb,0CAA0C;IAC5C,wBAAwB;IACtB,WAAW,CAAe;IAC1B,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,WAAW,KAAK,SAAS,CAAA,CAAC,CAAC;IAC5D,wBAAwB;IACtB,aAAa;IACf,wBAAwB;IACtB,sCAAsC;IACxC,wBAAwB;IACtB,IAAI,OAAO;QACT,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QAClE,MAAM,IAAI,GAAG,IAAkB,CAAC;QAChC,OAAO,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAqB,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACpH,CAAC;IACD,IAAI,QAAQ;QACV,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QACpF,MAAM,IAAI,GAAe,IAAkB,CAAC;QAC5C,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,KAAK,EAAoC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IACnH,CAAC;IACD,IAAI,MAAM;QACR,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QACpF,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAM,CAAC;IACrC,CAAC;IACD,IAAI,SAAS;QACX,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,CAAC,CAAA;SAAE;QACnF,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAM,CAAC;aAC9C,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;IAC3D,CAAC;IACH,wBAAwB;IACtB,IAAI,QAAQ;QACV,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QACpF,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAyD,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,CAAC,CAAC;IAChJ,CAAC;IACD,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAqF,EAAE,CAAC,CAAC,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACjN,CAAC;IACH,wBAAwB;IACtB,oBAAoB,CAAC,IAAiB;QACpC,2EAA2E;QAC3E,OAAO,CAAC,CAAC;IACX,CAAC;IACD,aAAa;IACf,wBAAwB;IACtB,0CAA0C;IAC5C,wBAAwB;IACtB,IAAI,YAAY,KAAK,OAAO,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC;IACrC,IAAI,aAAa,KAAK,OAAO,IAAI,CAAA,CAAC,CAAC;IACnC,IAAI,aAAa,KAAK,OAAO,IAAI,CAAC,GAAG,IAAI,EAAE,CAAA,CAAC,CAAC;IAC7C,IAAI,cAAc,KAAK,OAAO,IAAI,CAAC,IAAI,IAAI,EAAE,CAAA,CAAC,CAAC;IAC/C,IAAI,cAAc,KAAK,OAAO,IAAI,CAAC,IAAI,CAAA,CAAC,CAAC;IAC3C,wBAAwB;IACtB,IAAI,SAAS,KAAK,OAAO,IAAI,CAAC,EAAE,CAAA,CAAC,CAAC;IAClC,IAAI,UAAU,KAAK,OAAO,IAAI,CAAA,CAAC,CAAC;IAChC,IAAI,UAAU,KAAK,OAAO,IAAI,CAAC,GAAG,IAAI,EAAE,CAAA,CAAC,CAAC;IAC1C,IAAI,WAAW,KAAK,OAAO,IAAI,CAAC,IAAI,IAAI,EAAE,CAAA,CAAC,CAAC;IAC5C,IAAI,cAAc,KAAK,OAAO,EAAE,CAAA,CAAC,CAAC;IAClC,IAAI,WAAW,KAAK,OAAO,IAAI,CAAC,IAAI,CAAA,CAAC,CAAC;IACxC,wBAAwB;IACtB,IAAI,YAAY;QACd,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QACpH,MAAM,EAAC,SAAS,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAChC,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QAC7C,wBAAwB;QACpB,MAAM,YAAY,GAAG,SAAS;aAC3B,MAAM,CAAC,CAAC,IAAI,EAAkB,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC;aACpD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE;YACjB,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,UAAU,GAAG,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3F,MAAM,OAAO,GAAG,CAAC,OAAO,UAAU,KAAK,QAAQ,IAAI,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAiB,CAAC;YACnG,IAAI,CAAC,OAAO,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,SAAS,GAAG,CAAC,CAAA;aAAE;YACzE,MAAM,SAAS,GAAG,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3F,MAAM,MAAM,GAAG,CAAC,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAA0B,CAAC;YACzG,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,IAAI,eAAe,CAAC,EAAE;gBAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,SAAS,GAAG,CAAC,CAAA;aAAE;YAC5G,MAAM,YAAY,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iBAAiB,CAAC,CAAC;YACnH,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAA0B,CAAC;YACpF,wBAAwB;YAChB,MAAM,WAAW,GAAiC;gBAChD,EAAE,EAAE,GAAG,OAAO,IAAI,SAAS,IAAI,MAAM,EAAE;gBACvC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,MAAM;gBAChB,WAAW,EAAE,aAAa,CAAC,UAAU;gBACrC,OAAO,EAAE,SAAS;gBAClB,KAAK,EAAE,CAAC;gBACR,MAAM,EAAE,SAAS;gBACjB,OAAO,EAAE,EAAE;aACZ,CAAC;YACV,wBAAwB;YAChB,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC3B,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAqB,CAAC;gBACtE,IAAI,GAAG,GAAoB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACpF,IAAI,GAAwC,CAAC;gBAC7C,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,aAAa,CAAA;iBAAE;qBACrD,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,OAAO,CAAA;iBAAE;qBAC9C,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,YAAY,CAAA;iBAAE;qBACzD,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,YAAY,CAAA;iBAAE;qBACxD,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,aAAa,CAAA;iBAAE;qBACvD,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,SAAS,CAAA;iBAAE;qBACtD,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,SAAS,CAAA;iBAAE;qBAC/C,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,sBAAsB,CAAA;iBAAE;qBACnE,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,eAAe,CAAA;iBAAE;qBAC3D,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,uBAAuB,CAAA;iBAAE;qBACpE,IAAI,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;oBAAE,GAAG,GAAG,gBAAgB,CAAA;iBAAE;qBAAM;oBACjE,MAAM,IAAI,KAAK,CAAC,qBAAqB,SAAS,EAAE,CAAC,CAAC;iBACnD;gBACX,wBAAwB;gBACd,IAAI,GAAG,KAAK,aAAa,IAAI,GAAG,KAAK,aAAa,EAAE;oBAClD,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;iBAC5B;gBACX,wBAAwB;gBACd,MAAM,CAAC,MAAM,CACX,WAAW,EACX,EAAC,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC;wBAC7B,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;wBACb,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,gBAAgB,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC;4BAChH,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE;4BACd,CAAC,CAAE,GAAc,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,EAAC,CACnD,CAAC;YACJ,CAAC,CAAC,CAAC;YACX,wBAAwB;YAChB,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC,CAAC;QACT,wBAAwB;QACpB,OAAO,YAAY,CAAC;IACtB,CAAC;IACH,wBAAwB;IACtB,IAAI,WAAW;QACb,MAAM,UAAU,GAAwD;YACtE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACb,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;gBACvC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;gBACrC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC;gBACzC,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,IAAI;gBACf,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACnB;YACD,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAChB,IAAI,EAAE,MAAM,CAAC,OAAO;gBACpB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC1C,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;gBACxC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC;gBAC5C,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACnB;SACF,CAAC;QACN,wBAAwB;QACpB,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;YACjD,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG;gBACzB,IAAI,EAAE,MAAM,CAAC,KAAK;gBAClB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC;gBACxC,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC;gBACtC,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC1C,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACnB,CAAC;YACF,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG;gBAC7B,IAAI,EAAE,MAAM,CAAC,SAAS;gBACtB,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC5C,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC1C,OAAO,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC;gBAC9C,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,KAAK;gBAChB,UAAU,EAAE,KAAK;gBACjB,YAAY,EAAE,IAAI;aACnB,CAAC;SACH;QACL,wBAAwB;QACpB,OAAO,UAAU,CAAC;IACpB,CAAC;IACH,wBAAwB;IACtB,aAAa;IACb,wDAAwD;IAC1D,wBAAwB;IACtB,aAAa;IACf,wBAAwB;IACtB,iCAAiC;IACxB,kBAAkB;QACzB,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;YAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAAE;QACtF,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAAE;QAC1F,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;YAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAAE;QACxF,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;YAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAAE;IAClG,CAAC;IACH,wBAAwB;IACtB,cAAc,CAAC,MAAoD;QACjE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;YAAE,OAAM;SAAE;QACjE,wBAAwB;QACpB,sDAAsD;QACtD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SACxJ;QACD,kEAAkE;QAClE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,MAAM,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;SAC3J;IACH,CAAC;IACH,wBAAwB;IACtB,gBAAgB,CAAC,MAAsD;QACrE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAAE,OAAM;SAAE;QACnE,wBAAwB;QACpB,gEAAgE;QAChE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACvJ,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC;SAC3C;IACH,CAAC;IACH,wBAAwB;IACtB,eAAe,CAAC,MAAqD;QACnE,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;YAAE,OAAM;SAAE;IAChE,CAAC;IACH,wBAAwB;IACtB,mBAAmB,CAAC,MAAyD;QAC3E,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;YAAE,OAAM;SAAE;IACpE,CAAC;IACH,wBAAwB;IACtB,aAAa;IACf,wBAAwB;IACtB,4DAA4D;IAC5D,gEAAgE;IACvD,KAAK,CAAC,4BAA4B,CAAC,MAAmB,EAAE,UAA6B,EAAE,IAAuC,EAAE,IAAuC,EAAE,OAA+B,EAAE,MAAc;QAC/N,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzB,IAAI,GAAG,YAAY,UAAU,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC3G,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc;qBAClC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,KAAK,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;qBAC/F,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;QACP,wBAAwB;QACpB,gEAAgE;QAChE,MAAM,KAAK,CAAC,4BAA4B,CAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC9F,wBAAwB;QACpB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,8BAA8B,EAAE,EAAC,MAAM,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAC,CAAC,CAAC;QACrH,wBAAwB;QACpB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YACzB,IAAI,GAAG,YAAY,UAAU,EAAE;gBAC7B,QAAQ,GAAG,CAAC,IAAI,EAAE;oBAChB,KAAK,cAAc,CAAC,IAAI,CAAC,CAAC;wBACxB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;4BAAE,OAAM;yBAAE;wBAC7D,IAAI,CAAC,eAAe;6BACjB,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,IAAY,CAAC,CAAC;6BACjG,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACrD,MAAM;qBACP;oBACD,kCAAkC;oBAClC,kEAAkE;oBAClE,wBAAwB;oBACxB,6CAA6C;oBAC7C,2GAA2G;oBAC3G,uGAAuG;oBACvG,SAAS;oBACT,8CAA8C;oBAC9C,4GAA4G;oBAC5G,wGAAwG;oBACxG,QAAQ;oBACR,QAAQ;oBACR,WAAW;oBACX,IAAI;oBACJ,aAAa;iBACd;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,wBAAwB;IACb,KAAK,CAAC,MAAM,CAAC,UAAoJ,EAAE,OAAwE,EAAE,uBAAuB,GAAG,KAAK;QACnR,IAAI,CAAC,UAAU,EAAE;YAAE,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;SAAE;QACpD,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,EAAE;YAClD,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAAE,OAAO,SAAS,CAAA;aAAE;YAC9C,wBAAwB;YAClB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,EAAE,EAAC,UAAU,EAAC,CAAC,CAAC;YAC7D,MAAM,kBAAkB,GAAqC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBACtH,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAoB,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7E,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;iBACtE,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAoB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC9E,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,eAAe,EAAE,EAAC,cAAc,EAAE,UAAU,EAAE,kBAAkB,EAAC,CAAC,CAAC;YACvG,wBAAwB;YAClB,MAAM,gBAAgB,GAAG,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,kBAAkB,CAAwC,CAAC;YAC7H,OAAO,gBAAgB,CAAC,GAAG,CAAC;YAClC,wBAAwB;YAClB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;gBAChC,MAAM,IAAI,CAAC,QAAS,CAAC,MAAM,CAAC,kBAAkB,EAAE,OAAO,CAAC;qBACrD,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;aAC1C;SACF;aAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE;YAC7G,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,uBAAuB,EAAE;gBAChD,qEAAqE;gBACrE,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,EAAG,EAAE,UAAU,CAAC,CAAC;aAC9D;SACF;QACL,wBAAwB;QACpB,OAAO,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IACH,wBAAwB;IACtB,aAAa;IACf,wBAAwB;IACtB,yBAAyB;IACzB,kBAAkB,CAAC,cAAkC;QACnD,MAAM,IAAI,GAAG,MAAM,CAAC;QACpB,2EAA2E;QAC3E,MAAM,eAAe,GAAmC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACpF,wBAAwB;QACpB,IAAI,OAAO,GAAG;cACJ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,eAAe;;;qBAG3C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;;gBAExC,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;;iBAEnC,CAAC;QACd,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;YAChF,OAAO,IAAI;;uBAEM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;;6CAEb,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,yBAAyB,CAAC;iDACzC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;4CAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,wBAAwB,CAAC;;;;uBAIjE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;;0CAEd,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;oDAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC;wCACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC;;mBAE3D,CAAC;SACf;aAAM;YACL,OAAO,IAAI;;6DAE4C,CAAC;SACzD;QACD,OAAO,IAAI;;mBAEI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;;;;OAI5C,CAAC;QACR,wBAAwB;QACpB,IAAI,MAAM,CAAC;YACT,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,eAAe,EAAE;YAChE,SAAS,EAAE,OAAO;YAClB,SAAS,EAAE;gBACT,GAAG,EAAE;oBACH,IAAI,EAAE,8BAA8B;oBACpC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;oBACtC,QAAQ,EAAE,KAAK,EAAE,IAAuC,EAAE,EAAE;wBAC1D,IAAI,IAAI,YAAY,WAAW,EAAE;4BAC/B,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;yBAChB;wBACD,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBAC7E,MAAM,QAAQ,GAAa,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAc,CAAC;wBACtG,MAAM,MAAM,GAAW,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,EAAY,CAAC;wBAChG,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChE,MAAM,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;oBAC7E,CAAC;iBACF;gBACD,EAAE,EAAE;oBACF,IAAI,EAAE,8BAA8B;oBACpC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;iBACnC;aACF;YACD,SAAS,EAAE,KAAK;SACjB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpB,wBAAwB;IACtB,CAAC;IACH,wBAAwB;IACtB,KAAK,CAAC,aAAa,CACjB,cAAkC,EAClC,sBAAsB,GAAG,CAAC,EAC1B,WAAqB,QAAQ,CAAC,KAAK,EACnC,SAAiB,MAAM,CAAC,QAAQ,EAChC,IAAa;QAEb,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,CAAC,EAAE;YAAE,OAAM;SAAE;QAC7D,UAAU,CACR,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,sBAAsB,EACtD,cAAc,EACd,QAAQ,EACR,MAAM,EACN,IAAI,CACL,CAAC;IACJ,CAAC;IACH,wBAAwB;IACtB;;;;;;;;;OASG;IACH,oBAAoB,CAAC,EAAU,EAAE,EAAU,EAAE,CAAkB;QACjE,wBAAwB;QACpB,IAAI,IAAI,GAAG,EAAE,CAAC;QAClB,wBAAwB;QACpB,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,CAAC,GAAG,CAAC,CAAC;SACP;QACL,wBAAwB;QACpB,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,EAAE;gBAAE,IAAI,GAAG,GAAG,CAAA;aAAE;YAC1B,IAAI,IAAI,kBAAkB,CAAC,GAAG,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,IAAI,IAAI,WAAW,CAAC;aACrB;YACP,wBAAwB;YAClB,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC,YAAY,CAAC;SAClC;QACL,wBAAwB;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACH,wBAAwB;IACtB,0BAA0B;IAC5B,wBAAwB;IACtB,4BAA4B;IAC5B,iBAAiB;QACf,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,GAAG,CAAC,EAAE;YAAE,OAAM;SAAE;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC;QACzB,MAAM,YAAY,GAAG,IAAI,CAAC;QAC9B,wBAAwB;QACpB,MAAM,EAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAClD,wBAAwB;QACpB,SAAS,WAAW,CAAC,GAAa,EAAE,GAAG,OAAiB;YACtD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACpD,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE;gBAAE,OAAO,EAAE,CAAA;aAAE;YAC9B,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,SAAS,GAAgD;YAC7D,IAAI,EAAE,CAAC,MAAe,EAAE,EAAE;gBACxB,OAAO;oBACL,IAAI,CAAC,MAAM,EAAE,IAAI,WAAW;wBAC1B,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC;wBACzC,CAAC,CAAC,EAAE;oBACN,WAAW,CAAC;wBACV,GAAG,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC5F,GAAG,CAAC,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;qBAC3F,CAAC;oBACF,IAAI,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG;oBAC9C,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC;oBACzC,IAAI,CAAC,MAAM,EAAE,IAAI,YAAY;wBAC3B,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC;wBAC1C,CAAC,CAAC,EAAE;iBACP,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5C,CAAC;YACD,UAAU,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YAClF,QAAQ,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC5E,UAAU,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;YAClF,MAAM,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAoB;YAC1F,UAAU,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC;YACnF,IAAI,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACpF,MAAM,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC;YAC5F,KAAK,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YACrI,SAAS,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC;YACxG,KAAK,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;YACpE,KAAK,EAAE,CAAC,MAAM,GAAG,EAAE,EAAE,EAAE,CAAC,WAAW,CAAC;gBAClC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC/E,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;aAC9E,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;SACxB,CAAC;QACN,wBAAwB;QACpB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;QACnF,MAAM,UAAU,GAAG;YACjB,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAA4B,CAAC,EAAE,QAAQ,CAAC;YACzF,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,GAA2B,CAAC,EAAE,QAAQ,CAAC;YACtF,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,GAA2B,CAAC,EAAE,QAAQ,CAAC;iBACnF,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,UAAU,SAAS,EAAE,CAAC;SAC7C,CAAC;QACN,wBAAwB;QACpB,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAC,UAAU,EAAC,CAAC,CAAC;QAC3C,MAAM,UAAU,GAAqC,EAAE,CAAC;QAC5D,wBAAwB;QACpB,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACzB,QAAQ,GAAG,EAAE;gBACX,KAAK,MAAM,CAAC;gBACZ,KAAK,UAAU,CAAC;gBAChB,KAAK,YAAY,CAAC;gBAClB,KAAK,YAAY,CAAC,CAAC;oBACjB,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;oBACnC,UAAU,CAAC,iBAAiB,GAAG,EAAE,CAAC,GAAG;wBACnC,QAAQ,EAAE,KAAK;wBACf,KAAK,EAAE,SAAS,IAAI,MAAM,CAAC,GAA2B,CAAC,CAAC,KAAK;qBAC9D,CAAC;oBACF,MAAM;iBACP;gBACD,KAAK,aAAa,CAAC;gBACnB,KAAK,kBAAkB,CAAC;gBACxB,KAAK,eAAe,CAAC,CAAC;oBACpB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;oBAClC,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;oBACnC,UAAU,CAAC,iBAAiB,GAAG,EAAE,CAAC,GAAG;wBACnC,QAAQ,EAAE,KAAK;wBACf,KAAK,EAAE,SAAS,IAAI,MAAM,CAAC,GAA2B,CAAC,CAAC,KAAK;qBAC9D,CAAC;oBACF,MAAM;iBACP;gBACD,KAAK,QAAQ,CAAC,CAAC;oBACb,UAAU,CAAC,kBAAkB,GAAG,EAAE,CAAC,GAAG;wBACpC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,QAAQ;wBACjC,KAAK,EAAE,MAAM;qBACd,CAAC;oBACF,MAAM;iBACP;gBACD,KAAK,QAAQ,CAAC;gBACd,KAAK,QAAQ,CAAC;gBACd,KAAK,QAAQ,CAAC;gBACd,KAAK,cAAc,CAAC,CAAC;oBACnB,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ;wBACpC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK;wBACtB,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC7H,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ;wBACpC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK;wBACtB,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrI,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ;wBACpC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK;wBACtB,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC7I,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ;wBACvC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK;wBACpB,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBACrJ,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE;wBAC5B,UAAU,CAAC,uBAAuB,CAAC,GAAG;4BACpC,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,MAAM;yBACd,CAAC;qBACH;oBACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE;wBAC5B,UAAU,CAAC,uBAAuB,CAAC,GAAG;4BACpC,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,MAAM;yBACd,CAAC;qBACH;oBACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE;wBAC5B,UAAU,CAAC,uBAAuB,CAAC,GAAG;4BACpC,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,MAAM;yBACd,CAAC;qBACH;oBACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE;wBAC1B,UAAU,CAAC,qBAAqB,CAAC,GAAG;4BAClC,QAAQ,EAAE,KAAK;4BACf,KAAK,EAAE,WAAW;yBACnB,CAAC;qBACH;oBACD,MAAM;iBACP;gBACD,OAAO,CAAC,CAAC;oBACP,MAAM,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;oBACnC,UAAU,CAAC,kBAAkB,GAAG,EAAE,CAAC,GAAG;wBACpC,QAAQ,EAAE,KAAK;wBACf,KAAK,EAAE,SAAS,IAAI,OAAO,CAAC,GAA4B,CAAC,CAAC,KAAK;qBAChE,CAAC;oBACF,MAAM;iBACP;aACF;QACH,CAAC,CAAC,CAAC;QACP,wBAAwB;QACpB,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;CAGF;AAYD,wBAAwB;AACxB,eAAe,WAAW,CAAC","file":"blades-actor.js","sourcesContent":["// #region Imports ~\r\nimport U from \"./core/utilities.js\";\r\nimport type {Vice} from \"./core/constants.js\";\r\nimport C, {BladesActorType, BladesPhase, Tag, District, Playbook, BladesItemType, Attribute, Action, InsightActions, ProwessActions, ResolveActions, PrereqType, Position, Effect, AdvancementPoint, Randomizers, RollModCategory, RollModStatus, RollType, Factor, Harm} from \"./core/constants.js\";\r\n\r\nimport BladesPC from \"./documents/actors/blades-pc.js\";\r\nimport BladesCrew from \"./documents/actors/blades-crew.js\";\r\nimport BladesNPC from \"./documents/actors/blades-npc.js\";\r\nimport BladesFaction from \"./documents/actors/blades-faction.js\";\r\n\r\nimport type {ActorData, ActorDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/actorData.js\";\r\nimport type {ItemDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/itemData.js\";\r\nimport {bladesRoll} from \"./blades-roll.js\";\r\nimport BladesItem from \"./blades-item.js\";\r\nimport {SelectionCategory} from \"./blades-dialog.js\";\r\nimport type BladesActiveEffect from \"./blades-active-effect\";\r\nimport type EmbeddedCollection from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/embedded-collection.mjs.js\";\r\nimport type {MergeObjectOptions} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/utils/helpers.mjs.js\";\r\nimport BladesRollCollab from \"./blades-roll-collab.js\";\r\n// #endregion\r\n\r\n\r\n// https://foundryvtt.wiki/en/development/guides/polymorphism-actors-items\r\n// Blades Theme Song: \"Bangkok\" from The Gray Man soundtrack: https://www.youtube.com/watch?v=cjjImvMqYlo&list=OLAK5uy_k9cZDd1Fbpd25jfDtte5A6HyauD2-cwgk&index=2\r\n// Add \"coin\" item to general items --> equals 1 Coin worth of value, carried, and has Load 1.\r\n\r\n// declare interface Actor {\r\n//   _onCreateDescendantDocuments(...args: any[]): Promise<void>\r\n// }\r\n\r\nclass BladesActor extends Actor implements BladesDocument<Actor>,\r\n                                           BladesRollCollab.SourceDocData,\r\n                                           BladesRollCollab.OppositionDocData {\r\n\r\n  // static async CleanData(actor?: BladesActor<unknown>): Promise<unknown> {\r\n  //   if (!actor) { return Promise.all(BladesActor.All.map(BladesActor.CleanData)) }\r\n  //   // Only for factions and npcs\r\n  //   if (BladesActor.IsType(actor, BladesActorType.pc, BladesActorType.crew)) { return undefined }\r\n\r\n  //   // Get flattened schema from game.model\r\n  //   const flatSchema = flattenObject(game.model.Actor[actor.type]);\r\n\r\n  //   // Map actor data onto new schema\r\n  //   for (const dotKey of Object.keys(flatSchema)) {\r\n  //     flatSchema[dotKey] = getProperty(actor.system, dotKey);\r\n  //   }\r\n\r\n  //   // Create new actor\r\n  //   await BladesActor.create({name: actor.name!, img: actor.img, type: actor.type, system: flatSchema});\r\n\r\n  //   // Delete original actor\r\n  //   return actor.delete();\r\n  // }\r\n\r\n  // #region Static Overrides: Create ~\r\n  static override async create(data: ActorDataConstructorData & { system?: Partial<BladesActorSystem> }, options = {}) {\r\n    data.token = data.token || {};\r\n    data.system = data.system ?? {};\r\n\r\n    //~ Create world_name\r\n    data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\r\n\r\n    return super.create(data, options);\r\n  }\r\n  // #endregion\r\n\r\n  // #region BladesDocument Implementation ~\r\n  static get All() { return game.actors }\r\n  static Get(actorRef: ActorRef): BladesActor | undefined {\r\n    if (actorRef instanceof BladesActor) { return actorRef }\r\n    if (U.isDocID(actorRef)) { return BladesActor.All.get(actorRef) }\r\n    return BladesActor.All.find((a) => a.system.world_name === actorRef)\r\n      || BladesActor.All.find((a) => a.name === actorRef);\r\n  }\r\n  static GetTypeWithTags<T extends BladesActorType>(docType: T, ...tags: BladesTag[]): Array<BladesActorOfType<T>> {\r\n    return BladesActor.All.filter((actor) => actor.type === docType)\r\n      .filter((actor) => actor.hasTag(...tags)) as Array<BladesActorOfType<T>>;\r\n  }\r\n\r\n  static IsType<T extends BladesActorType>(doc: unknown, ...types: T[]): doc is BladesActor & BladesActorOfType<T> {\r\n    const typeSet = new Set<BladesActorType>(types);\r\n    return doc instanceof BladesActor && typeSet.has(doc.type);\r\n  }\r\n\r\n  get tags(): BladesTag[] { return this.system.tags ?? [] }\r\n\r\n  hasTag(...tags: BladesTag[]): boolean {\r\n    return tags.every((tag) => this.tags.includes(tag));\r\n  }\r\n\r\n  async addTag(...tags: BladesTag[]) {\r\n    const curTags = this.tags;\r\n    tags.forEach((tag) => {\r\n      if (curTags.includes(tag)) { return }\r\n      curTags.push(tag);\r\n    });\r\n    eLog.checkLog2(\"actor\", \"BladesActor.addTag(...tags)\", {tags, curTags});\r\n    this.update({\"system.tags\": curTags});\r\n  }\r\n\r\n  async remTag(...tags: BladesTag[]) {\r\n    const curTags = this.tags.filter((tag) => !tags.includes(tag));\r\n    eLog.checkLog2(\"actor\", \"BladesActor.remTag(...tags)\", {tags, curTags});\r\n    this.update({\"system.tags\": curTags});\r\n  }\r\n\r\n  get tooltip(): string | undefined {\r\n    const tooltipText = [this.system.concept, this.system.subtitle]\r\n      .filter(Boolean)\r\n      .join(\"<br><br>\");\r\n    return tooltipText ? (new Handlebars.SafeString(tooltipText)).toString() : undefined;\r\n  }\r\n\r\n  get dialogCSSClasses(): string { return \"\" }\r\n\r\n  getFactorTotal(factor: Factor): number {\r\n    switch (factor) {\r\n      case Factor.tier: {\r\n        if (BladesActor.IsType(this, BladesActorType.pc)) {\r\n          return this.system.tier.value + (this.crew?.getFactorTotal(Factor.tier) ?? 0);\r\n        }\r\n        return this.system.tier.value;\r\n      }\r\n      case Factor.quality: return this.getFactorTotal(Factor.tier);\r\n      case Factor.scale: {\r\n        if (BladesActor.IsType(this, BladesActorType.npc)) {\r\n          return this.system.scale;\r\n        }\r\n        return 0;\r\n      }\r\n      case Factor.magnitude: {\r\n        if (BladesActor.IsType(this, BladesActorType.npc)) {\r\n          return this.system.magnitude;\r\n        }\r\n        return 0;\r\n      }\r\n      // no default\r\n    }\r\n    return 0;\r\n  }\r\n  // #endregion\r\n\r\n  // #region SubActorControl Implementation ~\r\n\r\n  get subActors(): BladesActor[] {\r\n    return Object.keys(this.system.subactors)\r\n      .map((id) => this.getSubActor(id))\r\n      .filter((subActor): subActor is BladesActor => Boolean(subActor));\r\n  }\r\n  get activeSubActors(): BladesActor[] { return this.subActors.filter((subActor) => !subActor.hasTag(Tag.System.Archived)) }\r\n  get archivedSubActors(): BladesActor[] { return this.subActors.filter((subActor) => subActor.hasTag(Tag.System.Archived)) }\r\n\r\n  checkActorPrereqs(actor: BladesActor): boolean {\r\n\r\n    /* Implement any prerequisite checks for embedding actors */\r\n\r\n    return true;\r\n  }\r\n  private processEmbeddedActorMatches(globalActors: BladesActor[]) {\r\n\r\n    return globalActors\r\n    // Step 1: Filter out globals that fail prereqs.\r\n      .filter(this.checkActorPrereqs)\r\n    // Step 2: Filter out actors that are already active subActors\r\n      .filter((gActor) => !this.activeSubActors.some((aActor) => aActor.id === gActor.id))\r\n    // Step 3: Merge subactor data onto matching global actors\r\n      .map((gActor) => this.getSubActor(gActor) || gActor)\r\n    // Step 4: Sort by name\r\n      .sort((a, b) => {\r\n        if (a.name === b.name) { return 0 }\r\n        if (a.name === null) { return 1 }\r\n        if (b.name === null) { return -1 }\r\n        if (a.name > b.name) { return 1 }\r\n        if (a.name < b.name) { return -1 }\r\n        return 0;\r\n      });\r\n  }\r\n\r\n  getDialogActors(category: SelectionCategory): Record<string, BladesActor[]> | false {\r\n\r\n    /* **** NEED TO FILTER OUT ACTORS PLAYER DOESN'T HAVE PERMISSION TO SEE **** */\r\n\r\n    const dialogData: Record<string, BladesActor[]> = {};\r\n\r\n    switch (category) {\r\n      case SelectionCategory.Contact:\r\n      case SelectionCategory.Rival:\r\n      case SelectionCategory.Friend:\r\n      case SelectionCategory.Acquaintance: {\r\n        if (!(BladesActor.IsType(this, BladesActorType.pc) || BladesActor.IsType(this, BladesActorType.crew)) || this.playbookName === null) { return false }\r\n        dialogData.Main = this.processEmbeddedActorMatches(BladesActor.GetTypeWithTags(BladesActorType.npc, this.playbookName));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.VicePurveyor: {\r\n        if (!BladesActor.IsType(this, BladesActorType.pc) || !this.vice?.name) { return false }\r\n        dialogData.Main = this.processEmbeddedActorMatches(BladesActor.GetTypeWithTags(BladesActorType.npc, this.vice.name as Vice));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Crew: {\r\n        dialogData.Main = BladesActor.GetTypeWithTags(BladesActorType.crew);\r\n        return dialogData;\r\n      }\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  async addSubActor(actorRef: ActorRef, tags?: BladesTag[]): Promise<void> {\r\n\r\n    enum BladesActorUniqueTags {\r\n      \"CharacterCrew\" = Tag.PC.CharacterCrew,\r\n      \"VicePurveyor\" = Tag.NPC.VicePurveyor\r\n    }\r\n    let focusSubActor: BladesActor | undefined;\r\n\r\n    // Does an embedded subActor of this Actor already exist on the character?\r\n    if (this.hasSubActorOf(actorRef)) {\r\n      const subActor = this.getSubActor(actorRef);\r\n      if (!subActor) { return }\r\n      // Is it an archived Item?\r\n      if (subActor.hasTag(Tag.System.Archived)) {\r\n        // Unarchive it\r\n        await subActor.remTag(Tag.System.Archived);\r\n      }\r\n      // Make it the focus item.\r\n      focusSubActor = subActor;\r\n    } else {\r\n      // Is it not embedded at all? Create new entry in system.subactors from global actor\r\n      const actor = BladesActor.Get(actorRef);\r\n      if (!actor) { return }\r\n      const subActorData: SubActorData = {};\r\n      if (tags) {\r\n        subActorData.tags = U.unique([\r\n          ...actor.tags,\r\n          ...tags\r\n        ]);\r\n      }\r\n      // Await the update, then make the retrieved subactor the focus\r\n      await this.update({[`system.subactors.${actor.id}`]: subActorData});\r\n      focusSubActor = this.getSubActor(actor.id!);\r\n    }\r\n\r\n    if (!focusSubActor) { return }\r\n\r\n    // Does this Actor contain any tags limiting it to one per actor?\r\n    const uniqueTags = focusSubActor.tags.filter((tag) => tag in BladesActorUniqueTags);\r\n    if (uniqueTags.length > 0) {\r\n      // ... then archive all other versions.\r\n      uniqueTags.forEach((uTag) => this.activeSubActors\r\n        .filter((subActor) => subActor!.id !== focusSubActor!.id && subActor.hasTag(uTag))\r\n        .map((subActor) => this.remSubActor(subActor.id!)));\r\n    }\r\n  }\r\n\r\n  getSubActor(actorRef: ActorRef): BladesActor | undefined {\r\n    const actor = BladesActor.Get(actorRef);\r\n    if (!actor?.id) { return undefined }\r\n    if (!BladesActor.IsType(actor, BladesActorType.npc, BladesActorType.faction)) { return actor }\r\n    const subActorData = this.system.subactors[actor.id] ?? {};\r\n    Object.assign(\r\n      actor.system,\r\n      mergeObject(actor.system, subActorData)\r\n    );\r\n    actor.parentActor = this;\r\n    return actor;\r\n  }\r\n\r\n  hasSubActorOf(actorRef: ActorRef): boolean {\r\n    const actor = BladesActor.Get(actorRef);\r\n    if (!actor) { return false }\r\n    return actor?.id ? actor.id in this.system.subactors : false;\r\n  }\r\n\r\n  // hasActiveSubActorOf(actorRef: ActorRef): boolean {\r\n  //   const actor = BladesActor.Get(actorRef);\r\n  //   if (!actor) { return false }\r\n  //   return actor?.id ? (actor.id in this.system.subactors && !this.getSubActor(actorRef)?.hasTag(Tag.System.Archived)) : false;\r\n  // }\r\n\r\n  async updateSubActor(actorRef: ActorRef, updateData: DeepPartial<SubActorData & Record<string, any>>): Promise<BladesActor | undefined> {\r\n    updateData = U.objExpand(updateData);\r\n    if (!updateData.system) { return undefined }\r\n    const actor = BladesActor.Get(actorRef);\r\n    if (!actor) { return undefined }\r\n\r\n    // diffObject new update data against actor data.\r\n    const diffUpdateSystem = U.objDiff(actor.system, updateData.system);\r\n\r\n    // Merge new update data onto current subactor data.\r\n    const mergedSubActorSystem = U.objMerge(this.system.subactors[actor.id!] ?? {}, diffUpdateSystem, {isReplacingArrays: true, isConcatenatingArrays: false});\r\n\r\n    // Confirm this update changes data:\r\n    if (JSON.stringify(this.system.subactors[actor.id!]) === JSON.stringify(mergedSubActorSystem)) { return undefined }\r\n    // Update actor with new subactor data.\r\n    return this.update({[`system.subactors.${actor.id}`]: null}, undefined, true)\r\n      .then(() => this.update({[`system.subactors.${actor.id}`]: mergedSubActorSystem}, undefined, true))\r\n      .then(() => actor.sheet?.render()) as Promise<BladesActor | undefined>;\r\n  }\r\n\r\n  // async remSubActor(actorRef: ActorRef): Promise<void> {\r\n\r\n  // this.purgeSubActor(actorRef);\r\n  // return;\r\n  // const actor = BladesActor.Get(actorRef);\r\n  // if (!actor) { return }\r\n  // if (!this.hasActiveSubActorOf(actor)) { return }\r\n  // const subActor = this.getSubActor(actor)!;\r\n  // if (!subActor || subActor.hasTag(Tag.System.Archived)) { return }\r\n  // subActor.addTag(Tag.System.Archived).then(() => this.render());\r\n  // }\r\n\r\n  async remSubActor(actorRef: ActorRef): Promise<void> {\r\n    const subActor = this.getSubActor(actorRef);\r\n    if (!subActor) { return }\r\n    this.update({[\"system.subactors\"]: mergeObject(this.system.subactors, {[`-=${subActor.id}`]: null})}, undefined, true);\r\n  }\r\n\r\n  async clearSubActors(isReRendering = true): Promise<void> {\r\n    this.subActors.forEach((subActor) => {\r\n      if (subActor.parentActor?.id === this.id) { subActor.clearParentActor(isReRendering) }\r\n    });\r\n    this.sheet?.render();\r\n  }\r\n\r\n  async clearParentActor(isReRendering = true): Promise<void> {\r\n    const {parentActor} = this;\r\n    if (!parentActor) { return }\r\n    this.parentActor = undefined;\r\n    this.system = this._source.system;\r\n    this.ownership = this._source.ownership;\r\n    // parentActor.update({[`system.subactors.storage.${this.id}`]: null});\r\n    this.prepareData();\r\n    if (isReRendering) {\r\n      this.sheet?.render();\r\n    }\r\n  }\r\n\r\n\r\n  // this.actor.parentActor = undefined;\r\n\r\n  // #endregion\r\n  // #region SubItemControl Implementation ~\r\n\r\n  get subItems() { return Array.from(this.items) }\r\n  get activeSubItems() { return this.items.filter((item) => !item.hasTag(Tag.System.Archived)) }\r\n  get archivedSubItems() { return this.items.filter((item) => item.hasTag(Tag.System.Archived)) }\r\n\r\n  private _checkItemPrereqs(item: BladesItem): boolean {\r\n    if (!item.system.prereqs) { return true }\r\n    for (let [pType, pReqs] of Object.entries(item.system.prereqs as Partial<Record<PrereqType, boolean | string | string[]>>)) {\r\n      pReqs = Array.isArray(pReqs) ? pReqs : [pReqs.toString()];\r\n      const hitRecord: Partial<Record<PrereqType, string[]>> = {};\r\n      while (pReqs.length) {\r\n        const pString = pReqs.pop()!;\r\n        hitRecord[<PrereqType>pType] ??= [];\r\n        switch (pType) {\r\n          case PrereqType.HasActiveItem: {\r\n            const thisItem = this.activeSubItems\r\n              .filter((item) => !hitRecord[<PrereqType>pType]?.includes(item.id!))\r\n              .find((item) => item.system.world_name === pString);\r\n            if (thisItem) {\r\n              hitRecord[<PrereqType>pType]!.push(thisItem.id!);\r\n            } else {\r\n              return false;\r\n            }\r\n            break;\r\n          }\r\n          case PrereqType.HasActiveItemsByTag: {\r\n            const thisItem = this.activeSubItems\r\n              .filter((item) => !hitRecord[<PrereqType>pType]?.includes(item.id!))\r\n              .find((item) => item.hasTag(pString as BladesTag));\r\n            if (thisItem) {\r\n              hitRecord[<PrereqType>pType]!.push(thisItem.id!);\r\n            } else {\r\n              return false;\r\n            }\r\n            break;\r\n          }\r\n          case PrereqType.AdvancedPlaybook: {\r\n            if (!BladesActor.IsType(this, BladesActorType.pc)) { return false }\r\n            if (!this.playbookName || ![Playbook.Ghost, Playbook.Hull, Playbook.Vampire].includes(this.playbookName)) {\r\n              return false;\r\n            }\r\n          }\r\n          // no default\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  private _processEmbeddedItemMatches<T extends BladesItemType>(globalItems: Array<BladesItemOfType<T>>): Array<BladesItemOfType<T>> {\r\n\r\n    return globalItems\r\n\r\n    // Step 1: Filter out globals that fail prereqs.\r\n      .filter((item) => this._checkItemPrereqs(item))\r\n\r\n    // Step 2: Filter out already-active items based on max_per_score (unless MultiplesOk)\r\n      .filter((gItem) => {\r\n        return gItem.hasTag(Tag.System.MultiplesOK) || (gItem.system.max_per_score ?? 1) > this.activeSubItems.filter((sItem) => sItem.system.world_name === gItem.system.world_name).length;\r\n      })\r\n\r\n    // Step 3: Replace with matching Archived, Embedded subItems\r\n      .map((gItem) => {\r\n        const matchingSubItems = this.archivedSubItems.filter((sItem): sItem is BladesItemOfType<T> => sItem.system.world_name === gItem.system.world_name);\r\n        if (matchingSubItems.length > 0) {\r\n          return matchingSubItems;\r\n        } else {\r\n          return gItem;\r\n        }\r\n      })\r\n      .flat()\r\n\r\n    // Step 4: Apply CSS classes\r\n      .map((sItem) => {\r\n        sItem.dialogCSSClasses = \"\";\r\n        const cssClasses: string[] = [];\r\n        if (sItem.isEmbedded) {\r\n          cssClasses.push(\"embedded\");\r\n        }\r\n        if (sItem.hasTag(Tag.Gear.Fine)) {\r\n          cssClasses.push(\"fine-quality\");\r\n        }\r\n        if (sItem.hasTag(Tag.System.Featured)) {\r\n          cssClasses.push(\"featured-item\");\r\n        }\r\n        if ([BladesItemType.ability, BladesItemType.crew_ability].includes(sItem.type)) {\r\n          if (this.getAvailableAdvancements(\"Ability\") === 0) {\r\n            cssClasses.push(\"locked\");\r\n          } else if ((sItem.system.price ?? 1) > this.getAvailableAdvancements(\"Ability\")) {\r\n            cssClasses.push(\"locked\", \"unaffordable\");\r\n          } else if ((sItem.system.price ?? 1) > 1) {\r\n            cssClasses.push(\"expensive\");\r\n          }\r\n        }\r\n        if ([BladesItemType.crew_upgrade].includes(sItem.type)) {\r\n          if (this.getAvailableAdvancements(\"Upgrade\") === 0) {\r\n            cssClasses.push(\"locked\");\r\n          } else if ((sItem.system.price ?? 1) > this.getAvailableAdvancements(\"Upgrade\")) {\r\n            cssClasses.push(\"locked\", \"unaffordable\");\r\n          } else if ((sItem.system.price ?? 1) > 1) {\r\n            cssClasses.push(\"expensive\");\r\n          }\r\n        }\r\n\r\n        if (cssClasses.length > 0) {\r\n          sItem.dialogCSSClasses = cssClasses.join(\" \");\r\n        }\r\n\r\n        return sItem;\r\n      })\r\n\r\n    // Step 5: Sort by featured, then by fine, then by world_name, then embedded first sorted by name\r\n      .sort((a, b) => {\r\n        if (a.hasTag(Tag.System.Featured) && !b.hasTag(Tag.System.Featured)) { return -1 }\r\n        if (!a.hasTag(Tag.System.Featured) && b.hasTag(Tag.System.Featured)) { return 1 }\r\n        if (a.hasTag(Tag.Gear.Fine) && !b.hasTag(Tag.Gear.Fine)) { return -1 }\r\n        if (!a.hasTag(Tag.Gear.Fine) && b.hasTag(Tag.Gear.Fine)) { return 1 }\r\n        if (a.system.world_name > b.system.world_name) { return 1 }\r\n        if (a.system.world_name < b.system.world_name) { return -1 }\r\n        if (a.isEmbedded && !b.isEmbedded) { return -1 }\r\n        if (!a.isEmbedded && b.isEmbedded) { return 1 }\r\n        if (a.name === b.name) { return 0 }\r\n        if (a.name === null) { return 1 }\r\n        if (b.name === null) { return -1 }\r\n        if (a.name > b.name) { return 1 }\r\n        if (a.name < b.name) { return -1 }\r\n        return 0;\r\n      });\r\n  }\r\n\r\n  getDialogItems(category: SelectionCategory): Record<string, BladesItem[]> | false {\r\n\r\n    const dialogData: Record<string, BladesItem[]> = {};\r\n\r\n    switch (category) {\r\n      case SelectionCategory.Heritage: {\r\n        if (!BladesActor.IsType(this, BladesActorType.pc)) { return false }\r\n        dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.heritage));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Background: {\r\n        if (!BladesActor.IsType(this, BladesActorType.pc)) { return false }\r\n        dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.background));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Vice: {\r\n        if (!BladesActor.IsType(this, BladesActorType.pc) || this.playbookName === null) { return false }\r\n        dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.vice, this.playbookName));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Playbook: {\r\n        switch (this.type) {\r\n          case BladesActorType.pc: {\r\n            dialogData.Basic = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.playbook).filter((item) => !item.hasTag(Tag.Gear.Advanced)));\r\n            dialogData.Advanced = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.playbook, Tag.Gear.Advanced));\r\n            return dialogData;\r\n          }\r\n          case BladesActorType.crew: {\r\n            dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.crew_playbook));\r\n            return dialogData;\r\n          }\r\n          default: return false;\r\n        }\r\n      }\r\n      case SelectionCategory.Reputation: {\r\n        if (!BladesActor.IsType(this, BladesActorType.crew)) { return false }\r\n        dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.crew_reputation));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Preferred_Op: {\r\n        if (!BladesActor.IsType(this, BladesActorType.crew) || this.playbookName === null) { return false }\r\n        dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.preferred_op, this.playbookName as BladesTag));\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Gear: {\r\n        if (!BladesActor.IsType(this, BladesActorType.pc)) { return false }\r\n        const self: BladesPC = this as BladesPC;\r\n        if (this.playbookName === null) { return false }\r\n        const gearItems = this._processEmbeddedItemMatches([\r\n          ...BladesItem.GetTypeWithTags(BladesItemType.gear, this.playbookName),\r\n          ...BladesItem.GetTypeWithTags(BladesItemType.gear, Tag.Gear.General)\r\n        ])\r\n          .filter((item) => self.remainingLoad >= item.system.load);\r\n\r\n        // Two tabs, one for playbook and the other for general items\r\n        dialogData[self.playbookName] = gearItems.filter((item) => item.hasTag(self.playbookName));\r\n        dialogData.General = gearItems\r\n          .filter((item) => item.hasTag(Tag.Gear.General))\r\n        // Remove featured class from General items\r\n          .map((item) => {\r\n            if (item.dialogCSSClasses) {\r\n              item.dialogCSSClasses = item.dialogCSSClasses.replace(/featured-item\\s?/g, \"\");\r\n            }\r\n            return item;\r\n          })\r\n        // Re-sort by world_name\r\n          .sort((a, b) => {\r\n            if (a.system.world_name > b.system.world_name) { return 1 }\r\n            if (a.system.world_name < b.system.world_name) { return -1 }\r\n            return 0;\r\n          });\r\n\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Ability: {\r\n        if (BladesActor.IsType(this, BladesActorType.pc)) {\r\n          const self: BladesPC = this as BladesPC;\r\n          if (self.playbookName === null) { return false }\r\n          dialogData[self.playbookName] = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.ability, self.playbookName));\r\n          dialogData.Veteran = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.ability))\r\n            .filter((item) => !item.hasTag(self.playbookName))\r\n          // Remove featured class from Veteran items\r\n            .map((item) => {\r\n              if (item.dialogCSSClasses) {\r\n                item.dialogCSSClasses = item.dialogCSSClasses.replace(/featured-item\\s?/g, \"\");\r\n              }\r\n              return item;\r\n            })\r\n          // Re-sort by world_name\r\n            .sort((a, b) => {\r\n              if (a.system.world_name > b.system.world_name) { return 1 }\r\n              if (a.system.world_name < b.system.world_name) { return -1 }\r\n              return 0;\r\n            });\r\n        } else if (BladesActor.IsType(this, BladesActorType.crew)) {\r\n          dialogData.Main = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.crew_ability, this.playbookName));\r\n        }\r\n        return dialogData;\r\n      }\r\n      case SelectionCategory.Upgrade: {\r\n        if (!BladesActor.IsType(this, BladesActorType.crew) || this.playbookName === null) { return false }\r\n        dialogData[this.playbookName] = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.crew_upgrade, this.playbookName));\r\n        dialogData.General = this._processEmbeddedItemMatches(BladesItem.GetTypeWithTags(BladesItemType.crew_upgrade, Tag.Gear.General));\r\n        return dialogData;\r\n      }\r\n      // no default\r\n    }\r\n    return dialogData;\r\n  }\r\n\r\n  getSubItem(itemRef: ItemRef, activeOnly = false): BladesItem | undefined {\r\n    if (typeof itemRef === \"string\" && this.items.get(itemRef)) {\r\n      return this.items.get(itemRef);\r\n    }\r\n    const globalItem = BladesItem.Get(itemRef);\r\n    if (!globalItem) { return undefined }\r\n    return this.items.find((item) => item.name === globalItem.name) ?? this.items.find((item) => item.system.world_name === globalItem.system.world_name);\r\n  }\r\n\r\n  hasSubItemOf(itemRef: ItemRef): boolean {\r\n    const item = BladesItem.Get(itemRef);\r\n    if (!item) { return false }\r\n    return Boolean(this.items.find((i) => i.system.world_name === item.system.world_name));\r\n  }\r\n\r\n  hasActiveSubItemOf(itemRef: ItemRef): boolean {\r\n    const item = BladesItem.Get(itemRef);\r\n    if (!item) { return false }\r\n    return Boolean(this.items.find((i) => !i.hasTag(Tag.System.Archived) && i.system.world_name === item.system.world_name));\r\n  }\r\n\r\n  async addSubItem(itemRef: ItemRef): Promise<void> {\r\n    eLog.checkLog3(\"subitems\", \"[addSubItem] itemRef\", itemRef);\r\n\r\n    enum BladesItemUniqueTypes {\r\n      background = BladesItemType.background,\r\n      vice = BladesItemType.vice,\r\n      crew_playbook = BladesItemType.crew_playbook,\r\n      crew_reputation = BladesItemType.crew_reputation,\r\n      heritage = BladesItemType.heritage,\r\n      playbook = BladesItemType.playbook,\r\n      preferred_op = BladesItemType.preferred_op,\r\n    }\r\n    let focusItem: BladesItem | undefined;\r\n\r\n    // Does an embedded copy of this item already exist on the character?\r\n    const embeddedItem: BladesItem | undefined = this.getSubItem(itemRef);\r\n    // eLog.checkLog3(\"subitems\", \"[addSubItem] embeddedItem\", embeddedItem);\r\n\r\n    if (embeddedItem) {\r\n\r\n      // Is it an archived Item?\r\n      if (embeddedItem.hasTag(Tag.System.Archived)) {\r\n        // Unarchive it & make it the focus item.\r\n        await embeddedItem.remTag(Tag.System.Archived);\r\n        focusItem = embeddedItem;\r\n        eLog.checkLog3(\"subitems\", `[addSubItem] IS ARCHIVED EMBEDDED > Removing 'Archived' Tag, '${focusItem.id!}':`, focusItem);\r\n      } else { // Otherwise...\r\n        // Duplicate the item, and make the newly-created item the focus.\r\n        focusItem = await BladesItem.create([embeddedItem] as unknown as ItemDataConstructorData, {parent: this}) as BladesItem;\r\n        eLog.checkLog3(\"subitems\", `[addSubItem] IS ACTIVE EMBEDDED > Duplicating, focusItem '${focusItem.id!}':`, focusItem);\r\n      }\r\n    } else {\r\n      // Is it not embedded at all? Embed from global instance.\r\n      const globalItem = BladesItem.Get(itemRef);\r\n\r\n      eLog.checkLog3(\"subitems\", `[addSubItem] IS NOT EMBEDDED > Fetching Global, globalItem '${globalItem?.id}':`, globalItem);\r\n\r\n      if (!globalItem) { return }\r\n      focusItem = await BladesItem.create([globalItem] as unknown as ItemDataConstructorData, {parent: this}) as BladesItem;\r\n      focusItem = this.items.getName(globalItem.name!);\r\n      eLog.checkLog3(\"subitems\", `[addSubItem] ... NEWLY EMBEDDED, focusItem '${focusItem!.id}'`, focusItem);\r\n    }\r\n\r\n    if (!focusItem) { return }\r\n    eLog.checkLog3(\"subitems\", `[addSubItem] Checking Uniqueness of '${focusItem.id}'`, {\r\n      BladesItemUniqueTypes: Object.values(BladesItemUniqueTypes),\r\n      focusItemType: focusItem.type,\r\n      isLimited: Object.values(BladesItemUniqueTypes).includes(focusItem.type as any)\r\n    });\r\n\r\n    // Is this item type limited to one per actor?\r\n    if (Object.values(BladesItemUniqueTypes).includes(focusItem.type as any)) {\r\n      // ... then archive all other versions.\r\n      await Promise.all(this.activeSubItems\r\n        .filter((subItem) => subItem.type === focusItem!.type && subItem!.system.world_name !== focusItem!.system.world_name && !subItem.hasTag(Tag.System.Archived))\r\n        .map(this.remSubItem.bind(this)));\r\n    }\r\n  }\r\n\r\n  async remSubItem(itemRef: ItemRef): Promise<void> {\r\n    const subItem = this.getSubItem(itemRef);\r\n    if (!subItem) { return }\r\n    if (subItem.type !== BladesItemType.gear) {\r\n      this.purgeSubItem(itemRef);\r\n      return;\r\n    }\r\n    eLog.checkLog(\"actorTrigger\", \"Removing SubItem \" + subItem.name, subItem);\r\n    if (subItem.hasTag(Tag.System.Archived)) { return }\r\n    subItem.addTag(Tag.System.Archived);\r\n  }\r\n\r\n  async purgeSubItem(itemRef: ItemRef): Promise<void> {\r\n    const subItem = this.getSubItem(itemRef);\r\n    if (!subItem || subItem.hasTag(Tag.System.Archived)) { return }\r\n    subItem.delete();\r\n  }\r\n\r\n  // #endregion\r\n  // #region Advancement Implementation ~\r\n  // get totalAbilityPoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   switch (this.type) {\r\n  //     case BladesActorType.pc: return this.system.advancement.ability ?? 0;\r\n  //     case BladesActorType.crew: return Math.floor(0.5 * (this.system.advancement.general ?? 0)) + (this.system.advancement.ability ?? 0);\r\n  //     default: return 0;\r\n  //   }\r\n  // }\r\n  // get spentAbilityPoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return this.abilities.reduce((total, ability) => total + (ability.system.price ?? 1), 0);\r\n  // }\r\n  // get getAvailableAdvancements(\"Ability\")(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return this.totalAbilityPoints - this.spentAbilityPoints;\r\n  // }\r\n\r\n  /* Need simple getters for total ability & upgrade points that check for PRICES of items\r\n        (upgrade.system.price ?? 1) */\r\n\r\n  async grantAdvancementPoints(allowedTypes: AdvancementPoint|AdvancementPoint[], amount = 1) {\r\n    const aPtKey: string = Array.isArray(allowedTypes)\r\n      ? allowedTypes.sort().join(\"_\")\r\n      : allowedTypes;\r\n    this.update({[`system.advancement_points.${aPtKey}`]: (this.system.advancement_points?.[aPtKey] ?? 0) + amount});\r\n  }\r\n\r\n  async removeAdvancementPoints(allowedTypes: AdvancementPoint|AdvancementPoint[], amount = 1) {\r\n    const aPtKey: string = Array.isArray(allowedTypes)\r\n      ? allowedTypes.sort().join(\"_\")\r\n      : allowedTypes;\r\n    const newCount = this.system.advancement_points?.[aPtKey] ?? 0 - amount;\r\n    if (newCount <= 0 && aPtKey in (this.system.advancement_points ?? [])) {\r\n      return this.update({[`system.advancement_points.-=${aPtKey}`]: null});\r\n    }\r\n    return this.update({[`system.advancement_points.${aPtKey}`]: newCount});\r\n  }\r\n\r\n  getAvailableAdvancements(trait: Action|\"Ability\"|\"Upgrade\"|\"Cohort\"|\"CohortType\"): number {\r\n    if (!BladesActor.IsType(this, BladesActorType.pc, BladesActorType.crew)) { return 0 }\r\n    if (trait in Action) {\r\n      return 1;\r\n    }\r\n    if (trait === \"Cohort\") {\r\n      const pointsCohort = this.system.advancement_points?.[AdvancementPoint.Cohort] ?? 0;\r\n      const spentCohort = this.cohorts.length;\r\n      return Math.max(0, pointsCohort - spentCohort);\r\n    }\r\n\r\n    const pointsAbility = this.system.advancement_points?.[AdvancementPoint.Ability] ?? 0;\r\n    const pointsCohortType = this.system.advancement_points?.[AdvancementPoint.CohortType] ?? 0;\r\n    const pointsUpgrade = this.system.advancement_points?.[AdvancementPoint.Upgrade] ?? 0;\r\n    const pointsUpgradeOrAbility = this.system.advancement_points?.[AdvancementPoint.UpgradeOrAbility] ?? 0;\r\n\r\n    const spentAbility = U.sum(this.items\r\n      .filter((item) => BladesItem.IsType(item, BladesItemType.ability, BladesItemType.crew_ability))\r\n      .map((abil) => abil.system.price ?? 1));\r\n    const spentCohortType = U.sum(this.cohorts.map((cohort) => Math.max(0, U.unique(Object.values(cohort.system.subtypes)).length - 1)));\r\n    const spentUpgrade = U.sum(this.items\r\n      .filter((item) => BladesItem.IsType(item, BladesItemType.crew_upgrade))\r\n      .map((upgrade) => upgrade.system.price ?? 1));\r\n\r\n    const excessUpgrade = Math.max(0, spentUpgrade - pointsUpgrade);\r\n    const excessCohortType = Math.max(0, spentCohortType - pointsCohortType);\r\n    const excessAbility = Math.max(0, spentAbility - pointsAbility);\r\n\r\n    const remainingAbility = Math.max(0, pointsAbility - spentAbility);\r\n    const remainingCohortType = Math.max(0, pointsCohortType - spentCohortType);\r\n    const remainingUpgrade = Math.max(0, pointsUpgrade - spentUpgrade);\r\n    const remainingUpgradeOrAbility = Math.max(0, pointsUpgradeOrAbility - excessUpgrade - (2 * excessAbility) - (2 * excessCohortType));\r\n\r\n    if (trait === \"Ability\") {\r\n      return remainingAbility + Math.floor(0.5 * remainingUpgradeOrAbility);\r\n    }\r\n    if (trait === \"Upgrade\") {\r\n      return remainingUpgrade + remainingUpgradeOrAbility;\r\n    }\r\n    if (trait === \"CohortType\") {\r\n      return remainingCohortType + remainingUpgradeOrAbility;\r\n    }\r\n\r\n    return 0 as never;\r\n  }\r\n\r\n  get availableAbilityPoints() { return this.getAvailableAdvancements(\"Ability\") }\r\n  get availableUpgradePoints() { return this.getAvailableAdvancements(\"Upgrade\") }\r\n  get availableCohortPoints() { return this.getAvailableAdvancements(\"Cohort\") }\r\n  get availableCohortTypePoints() { return this.getAvailableAdvancements(\"CohortType\") }\r\n\r\n  get canPurchaseAbility() { return this.availableAbilityPoints > 0 }\r\n  get canPurchaseUpgrade() { return this.availableUpgradePoints > 0 }\r\n  get canPurchaseCohort() { return this.availableCohortPoints > 0 }\r\n  get canPurchaseCohortType() { return this.availableCohortTypePoints > 0 }\r\n\r\n  async advancePlaybook(): Promise<void> {\r\n    if (!(BladesActor.IsType(this, BladesActorType.pc) || BladesActor.IsType(this, BladesActorType.crew)) || !this.playbook) { return undefined }\r\n    await this.update({\"system.experience.playbook.value\": 0});\r\n    if (BladesActor.IsType(this, BladesActorType.pc)) {\r\n      game.eunoblades.PushController!.pushToAll(\"GM\", `${this.name} Advances their Playbook!`, `${this.name}, select a new Ability on your Character Sheet.`);\r\n      return this.grantAdvancementPoints(AdvancementPoint.Ability);\r\n    }\r\n    if (BladesActor.IsType(this, BladesActorType.crew)) {\r\n      game.eunoblades.PushController!.pushToAll(\"GM\", `${this.name} Advances their Playbook!`, \"Select new Upgrades and/or Abilities on your Crew Sheet.\");\r\n      this.members.forEach((member) => {\r\n        const coinGained = this.system.tier.value + 2;\r\n        game.eunoblades.PushController!.pushToAll(\"GM\", `${member.name} Gains ${coinGained} Stash (Crew Advancement)`, undefined);\r\n        member.addStash(coinGained);\r\n      });\r\n      return this.grantAdvancementPoints(AdvancementPoint.UpgradeOrAbility, 2);\r\n    }\r\n    return undefined as never;\r\n  }\r\n\r\n  async advanceAttribute(attribute: Attribute) {\r\n    await this.update({[`system.experience.${attribute}.value`]: 0});\r\n    const actions = C.Action[attribute].map((action) => `<strong>${U.tCase(action)}</strong>`);\r\n    game.eunoblades.PushController!.pushToAll(\"GM\", `${this.name} Advances their ${U.uCase(attribute)}!`, `${this.name}, add a dot to one of ${U.oxfordize(actions, true, \"or\")}.`);\r\n  }\r\n\r\n  // async addActionPoints(amount: number, attribute: Attribute|\"action\" = \"action\"): Promise<void> {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n  //   this.update({[`system.advancement.${attribute}`]: (this.system.advancement[attribute] ?? 0) + amount});\r\n  // }\r\n  // async removeActionPoints(amount: number, attribute: Attribute|\"action\" = \"action\"): Promise<void> {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n  //   this.update({[`system.advancement.${attribute}`]: Math.max(0, (this.system.advancement[attribute] ?? 0) - amount)});\r\n  // }\r\n  // get totalActionPoints(): Record<Attribute|\"action\",number> {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return {} as never }\r\n  //   if (!this.playbook) { return {} as never }\r\n  //   return {\r\n  //     action: this.system.advancement.action,\r\n  //     insight: this.system.advancement.insight,\r\n  //     prowess: this.system.advancement.prowess,\r\n  //     resolve: this.system.advancement.resolve\r\n  //   };\r\n  // }\r\n\r\n  // get spentActionPoints(): Record<Attribute|\"action\",number> {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return {} as never }\r\n  //   if (!this.playbook) { return {} as never }\r\n\r\n  //   const totPoints = {...this.totalActionPoints};\r\n  //   const spentPoints = {\r\n  //     action: 0,\r\n  //     insight: 0,\r\n  //     prowess: 0,\r\n  //     resolve: 0\r\n  //   };\r\n\r\n  //   for (const [attribute, actionData] of (Object.entries(this.system.attributes) as Array<[Attribute,Record<Action,ValueMax>]>)) {\r\n  //     const spentAttrPoints = Object.values(actionData).reduce((tot, val) => tot + val.value, 0);\r\n  //     if (spentAttrPoints > totPoints[attribute]) {\r\n  //       spentPoints[attribute] = totPoints[attribute];\r\n  //       spentPoints.action += spentPoints[attribute] - totPoints[attribute];\r\n  //     }\r\n  //   }\r\n\r\n  //   return spentPoints;\r\n  // }\r\n  // get availableActionPoints(): Record<Attribute|\"action\",number> {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return {} as never }\r\n  //   if (!this.playbook) { return {} as never }\r\n  //   const {totalActionPoints, spentActionPoints} = this;\r\n  //   return {\r\n  //     action: totalActionPoints.action - spentActionPoints.action,\r\n  //     insight: totalActionPoints.insight - spentActionPoints.insight,\r\n  //     prowess: totalActionPoints.prowess - spentActionPoints.prowess,\r\n  //     resolve: totalActionPoints.resolve - spentActionPoints.resolve]\r\n  //   };\r\n  // }\r\n  // #endregion\r\n  // #region CrewAdvancement Implementation ~\r\n  // get totalUpgradePoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return (this.system.advancement.general ?? 0) + (this.system.advancement.upgrade ?? 0);\r\n  // }\r\n  // get spentUpgradePoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return this.upgrades.reduce((total, upgrade) => total + (upgrade.system.price ?? 1), 0);\r\n  // }\r\n  // get availableUpgradePoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return this.totalUpgradePoints - this.spentUpgradePoints;\r\n  // }\r\n\r\n  // get totalAdvancementPoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return this.system.advancement.general ?? 0;\r\n  // }\r\n  // get spentAdvancementPoints(): number {\r\n  //   if (!BladesActor.IsType(this, BladesActorType.crew)) { return 0 }\r\n  //   if (!this.playbook) { return 0 }\r\n  //   return (2 * this.spentAbilityPoints) + this.spentUpgradePoints;\r\n  // }\r\n  // get availableAdvancementPoints(): number { return this.totalAdvancementPoints - this.spentAdvancementPoints }\r\n\r\n  // get totalCohortPoints(): number {\r\n  //   if (!this.playbook) { return 0 }\r\n  //   if (![BladesActorType.crew].includes(this.type)) { return 0 }\r\n  //   return this.upgrades.filter((item) => item.system.world_name === \"Cohort\").length;\r\n  // }\r\n  // get spentCohortPoints(): number {\r\n  //   if (!this.playbook) { return 0 }\r\n  //   if (![BladesActorType.crew].includes(this.type)) { return 0 }\r\n  //   return this.cohorts.length + this.cohorts.filter((cohort) => cohort.hasTag(Tag.Gear.Upgraded)).length;\r\n  // }\r\n  // get availableCohortPoints(): number {\r\n  //   if (!this.playbook) { return 0 }\r\n  //   if (![BladesActorType.crew].includes(this.type)) { return 0 }\r\n  //   return this.totalCohortPoints - this.spentCohortPoints;\r\n  // }\r\n\r\n  // #endregion\r\n  // #region BladesSubActor Implementation ~\r\n\r\n  parentActor?: BladesActor;\r\n  get isSubActor() { return this.parentActor !== undefined }\r\n\r\n  // #endregion\r\n\r\n  // #region BladesCrew Implementation ~\r\n\r\n  get members(): BladesPC[] {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew)) { return [] }\r\n    const self = this as BladesCrew;\r\n    return BladesActor.GetTypeWithTags(BladesActorType.pc).filter((actor): actor is BladesPC => actor.isMember(self));\r\n  }\r\n  get contacts(): Array<BladesNPC|BladesFaction> {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew) || !this.playbook) { return [] }\r\n    const self: BladesCrew = this as BladesCrew;\r\n    return this.activeSubActors.filter((actor): actor is BladesNPC|BladesFaction => actor.hasTag(self.playbookName));\r\n  }\r\n  get claims(): Record<number, BladesClaimData> {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew) || !this.playbook) { return {} }\r\n    return this.playbook.system.turfs!;\r\n  }\r\n  get turfCount(): number {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew) || !this.playbook) { return 0 }\r\n    return Object.values(this.playbook.system.turfs!)\r\n      .filter((claim) => claim.isTurf && claim.value).length;\r\n  }\r\n\r\n  get upgrades(): Array<BladesItemOfType<BladesItemType.crew_upgrade>> {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew) || !this.playbook) { return [] }\r\n    return this.activeSubItems.filter((item): item is BladesItemOfType<BladesItemType.crew_upgrade> => item.type === BladesItemType.crew_upgrade);\r\n  }\r\n  get cohorts(): Array<BladesItemOfType<BladesItemType.cohort_gang|BladesItemType.cohort_expert>> {\r\n    return this.activeSubItems.filter((item): item is BladesItemOfType<BladesItemType.cohort_gang|BladesItemType.cohort_expert> => [BladesItemType.cohort_gang, BladesItemType.cohort_expert].includes(item.type));\r\n  }\r\n\r\n  getTaggedItemBonuses(tags: BladesTag[]): number {\r\n    // Check ACTIVE EFFECTS supplied by upgrade/ability against submitted tags?\r\n    return 0;\r\n  }\r\n  // #endregion\r\n\r\n  // #region BladesRollCollab Implementation\r\n\r\n  get rollSourceID() { return this.id }\r\n  get rollSourceDoc() { return this }\r\n  get rollSourceImg() { return this.img ?? \"\" }\r\n  get rollSourceName() { return this.name ?? \"\" }\r\n  get rollSourceType() { return this.type }\r\n\r\n  get rollOppID() { return this.id }\r\n  get rollOppDoc() { return this }\r\n  get rollOppImg() { return this.img ?? \"\" }\r\n  get rollOppName() { return this.name ?? \"\" }\r\n  get rollOppSubName() { return \"\" }\r\n  get rollOppType() { return this.type }\r\n\r\n  get rollModsData(): BladesRollCollab.RollModData[] {\r\n    if (!(BladesActor.IsType(this, BladesActorType.pc) || BladesActor.IsType(this, BladesActorType.crew))) { return [] }\r\n    const {roll_mods} = this.system;\r\n    if (roll_mods.length === 0) { return [] }\r\n\r\n    const rollModsData = roll_mods\r\n      .filter((elem): elem is string => elem !== undefined)\r\n      .map((modString) => {\r\n        const pStrings = modString.split(/@/);\r\n        const nameString = U.pullElement(pStrings, (v) => typeof v === \"string\" && /^na/i.test(v));\r\n        const nameVal = (typeof nameString === \"string\" && nameString.replace(/^.*:/, \"\")) as string|false;\r\n        if (!nameVal) { throw new Error(`RollMod Missing Name: '${modString}'`) }\r\n        const catString = U.pullElement(pStrings, (v) => typeof v === \"string\" && /^cat/i.test(v));\r\n        const catVal = (typeof catString === \"string\" && catString.replace(/^.*:/, \"\")) as RollModCategory|false;\r\n        if (!catVal || !(catVal in RollModCategory)) { throw new Error(`RollMod Missing Category: '${modString}'`) }\r\n        const posNegString = (U.pullElement(pStrings, (v) => typeof v === \"string\" && /^p/i.test(v)) || \"posNeg:positive\");\r\n        const posNegVal = posNegString.replace(/^.*:/, \"\") as \"positive\"|\"negative\";\r\n\r\n        const rollModData: BladesRollCollab.RollModData = {\r\n          id: `${nameVal}-${posNegVal}-${catVal}`,\r\n          name: nameVal,\r\n          category: catVal,\r\n          base_status: RollModStatus.ToggledOff,\r\n          modType: \"general\",\r\n          value: 1,\r\n          posNeg: posNegVal,\r\n          tooltip: \"\"\r\n        };\r\n\r\n        pStrings.forEach((pString) => {\r\n          const [keyString, valString] = pString.split(/:/) as [string, string];\r\n          let val: string|string[] = /\\|/.test(valString) ? valString.split(/\\|/) : valString;\r\n          let key: KeyOf<BladesRollCollab.RollModData>;\r\n          if (/^stat/i.test(keyString)) { key = \"base_status\" } else\r\n          if (/^val/i.test(keyString)) { key = \"value\" } else\r\n          if (/^eff|^ekey/i.test(keyString)) { key = \"effectKeys\" } else\r\n          if (/^side|^ss/i.test(keyString)) { key = \"sideString\" } else\r\n          if (/^s.*ame/i.test(keyString)) { key = \"source_name\" } else\r\n          if (/^tool|^tip/i.test(keyString)) { key = \"tooltip\" } else\r\n          if (/^ty/i.test(keyString)) { key = \"modType\" } else\r\n          if (/^c.*r?.*ty/i.test(keyString)) { key = \"conditionalRollTypes\" } else\r\n          if (/^a.*r?.*y/i.test(keyString)) { key = \"autoRollTypes\" } else\r\n          if (/^c.*r?.*tr/i.test(keyString)) { key = \"conditionalRollTraits\" } else\r\n          if (/^a.*r?.*tr/i.test(keyString)) { key = \"autoRollTraits\" } else {\r\n            throw new Error(`Bad Roll Mod Key: ${keyString}`);\r\n          }\r\n\r\n          if (key === \"base_status\" && val === \"Conditional\") {\r\n            val = RollModStatus.Hidden;\r\n          }\r\n\r\n          Object.assign(\r\n            rollModData,\r\n            {[key]: [\"value\"].includes(key)\r\n              ? U.pInt(val)\r\n              : ([\"effectKeys\", \"conditionalRollTypes\", \"autoRollTypes,\", \"conditionalRollTraits\", \"autoRollTraits\"].includes(key)\r\n                  ? [val].flat()\r\n                  : (val as string).replace(/%COLON%/g, \":\"))}\r\n          );\r\n        });\r\n\r\n        return rollModData;\r\n      });\r\n\r\n    return rollModsData;\r\n  }\r\n\r\n  get rollFactors(): Partial<Record<Factor,BladesRollCollab.FactorData>> {\r\n    const factorData: Partial<Record<Factor,BladesRollCollab.FactorData>> = {\r\n      [Factor.tier]: {\r\n        name: Factor.tier,\r\n        value: this.getFactorTotal(Factor.tier),\r\n        max: this.getFactorTotal(Factor.tier),\r\n        baseVal: this.getFactorTotal(Factor.tier),\r\n        isActive: true,\r\n        isPrimary: true,\r\n        isDominant: false,\r\n        highFavorsPC: true\r\n      },\r\n      [Factor.quality]: {\r\n        name: Factor.quality,\r\n        value: this.getFactorTotal(Factor.quality),\r\n        max: this.getFactorTotal(Factor.quality),\r\n        baseVal: this.getFactorTotal(Factor.quality),\r\n        isActive: false,\r\n        isPrimary: false,\r\n        isDominant: false,\r\n        highFavorsPC: true\r\n      }\r\n    };\r\n\r\n    if (BladesActor.IsType(this, BladesActorType.npc)) {\r\n      factorData[Factor.scale] = {\r\n        name: Factor.scale,\r\n        value: this.getFactorTotal(Factor.scale),\r\n        max: this.getFactorTotal(Factor.scale),\r\n        baseVal: this.getFactorTotal(Factor.scale),\r\n        cssClasses: \"factor-grey\",\r\n        isActive: false,\r\n        isPrimary: false,\r\n        isDominant: false,\r\n        highFavorsPC: true\r\n      };\r\n      factorData[Factor.magnitude] = {\r\n        name: Factor.magnitude,\r\n        value: this.getFactorTotal(Factor.magnitude),\r\n        max: this.getFactorTotal(Factor.magnitude),\r\n        baseVal: this.getFactorTotal(Factor.magnitude),\r\n        isActive: false,\r\n        isPrimary: false,\r\n        isDominant: false,\r\n        highFavorsPC: true\r\n      };\r\n    }\r\n\r\n    return factorData;\r\n  }\r\n\r\n  // #endregion\r\n  // #region BladesRollCollab.OppositionDoc Implementation\r\n\r\n  // #endregion\r\n\r\n  // #region PREPARING DERIVED DATA\r\n  override prepareDerivedData() {\r\n    if (BladesActor.IsType(this, BladesActorType.pc)) { this._preparePCData(this.system) }\r\n    if (BladesActor.IsType(this, BladesActorType.crew)) { this._prepareCrewData(this.system) }\r\n    if (BladesActor.IsType(this, BladesActorType.npc)) { this._prepareNPCData(this.system) }\r\n    if (BladesActor.IsType(this, BladesActorType.faction)) { this._prepareFactionData(this.system) }\r\n  }\r\n\r\n  _preparePCData(system: ExtractBladesActorSystem<BladesActorType.pc>) {\r\n    if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n\r\n    // Extract experience clues from playbook item, if any\r\n    if (this.playbook) {\r\n      system.experience.clues = [...system.experience.clues, ...Object.values(this.playbook.system.experience_clues).filter((clue) => Boolean(clue.trim()))];\r\n    }\r\n    // Extract gather information questions from playbook item, if any\r\n    if (this.playbook) {\r\n      system.gather_info = [...system.gather_info, ...Object.values(this.playbook.system.gather_info_questions).filter((question) => Boolean(question.trim()))];\r\n    }\r\n  }\r\n\r\n  _prepareCrewData(system: ExtractBladesActorSystem<BladesActorType.crew>) {\r\n    if (!BladesActor.IsType(this, BladesActorType.crew)) { return }\r\n\r\n    // Extract experience clues and turfs from playbook item, if any\r\n    if (this.playbook) {\r\n      system.experience.clues = [...system.experience.clues, ...Object.values(this.playbook.system.experience_clues).filter((clue) => Boolean(clue.trim()))];\r\n      system.turfs = this.playbook.system.turfs;\r\n    }\r\n  }\r\n\r\n  _prepareNPCData(system: ExtractBladesActorSystem<BladesActorType.npc>) {\r\n    if (!BladesActor.IsType(this, BladesActorType.npc)) { return }\r\n  }\r\n\r\n  _prepareFactionData(system: ExtractBladesActorSystem<BladesActorType.faction>) {\r\n    if (!BladesActor.IsType(this, BladesActorType.faction)) { return }\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region OVERRIDES: _onCreateDescendantDocuments, update ~\r\n  // @ts-expect-error New method not defined in @league VTT types.\r\n  override async _onCreateDescendantDocuments(parent: BladesActor, collection: \"items\"|\"effects\", docs: BladesItem[]|BladesActiveEffect[], data: BladesItem[]|BladesActiveEffect[], options: Record<string,boolean>, userId: string): Promise<void> {\r\n    docs.forEach(async (doc) => {\r\n      if (doc instanceof BladesItem && [BladesItemType.playbook, BladesItemType.crew_playbook].includes(doc.type)) {\r\n        await Promise.all(this.activeSubItems\r\n          .filter((aItem) => aItem.type === doc.type && aItem.system.world_name !== doc.system.world_name)\r\n          .map((aItem) => this.remSubItem(aItem)));\r\n      }\r\n    });\r\n\r\n    // @ts-expect-error New method not defined in @league VTT types.\r\n    await super._onCreateDescendantDocuments(parent, collection, docs, data, options, userId);\r\n\r\n    eLog.checkLog(\"actorTrigger\", \"_onCreateDescendantDocuments\", {parent, collection, docs, data, options, userId});\r\n\r\n    docs.forEach(async (doc) => {\r\n      if (doc instanceof BladesItem) {\r\n        switch (doc.type) {\r\n          case BladesItemType.vice: {\r\n            if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n            this.activeSubActors\r\n              .filter((subActor) => subActor.hasTag(Tag.NPC.VicePurveyor) && !subActor.hasTag(doc.name as Vice))\r\n              .forEach((subActor) => this.remSubActor(subActor));\r\n            break;\r\n          }\r\n          // case BladesItemType.playbook: {\r\n          //   if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n          //   await this.update({\r\n          //     \"system.trauma.active\": Object.assign(\r\n          //       Object.fromEntries(Object.keys(this.system.trauma.active).map((tCond: string) => [tCond, false])),\r\n          //       Object.fromEntries((doc.system.trauma_conditions ?? []).map((tCond: string) => [tCond, true]))\r\n          //     ),\r\n          //     \"system.trauma.checked\": Object.assign(\r\n          //       Object.fromEntries(Object.keys(this.system.trauma.checked).map((tCond: string) => [tCond, false])),\r\n          //       Object.fromEntries((doc.system.trauma_conditions ?? []).map((tCond: string) => [tCond, false]))\r\n          //     )\r\n          //   });\r\n          //   break;\r\n          // }\r\n          // no default\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  override async update(updateData: DeepPartial<(ActorDataConstructorData & SubActorData) | (ActorDataConstructorData & SubActorData & Record<string, unknown>)> | undefined, context?: (DocumentModificationContext & MergeObjectOptions) | undefined, isSkippingSubActorCheck = false): Promise<any> {\r\n    if (!updateData) { return super.update(updateData) }\r\n    if (BladesActor.IsType(this, BladesActorType.crew)) {\r\n      if (!this.playbook) { return undefined }\r\n\r\n      eLog.checkLog(\"actorTrigger\", \"Updating Crew\", {updateData});\r\n      const playbookUpdateData: Partial<ItemDataConstructorData> = Object.fromEntries(Object.entries(flattenObject(updateData))\r\n        .filter(([key, _]: [string, unknown]) => key.startsWith(\"system.turfs.\")));\r\n      updateData = Object.fromEntries(Object.entries(flattenObject(updateData))\r\n        .filter(([key, _]: [string, unknown]) => !key.startsWith(\"system.turfs.\")));\r\n      eLog.checkLog(\"actorTrigger\", \"Updating Crew\", {crewUpdateData: updateData, playbookUpdateData});\r\n\r\n      const diffPlaybookData = diffObject(flattenObject(this.playbook), playbookUpdateData) as Record<string,any> & {_id?: string};\r\n      delete diffPlaybookData._id;\r\n\r\n      if (!U.isEmpty(diffPlaybookData)) {\r\n        await this.playbook!.update(playbookUpdateData, context)\r\n          .then(() => this.sheet?.render(false));\r\n      }\r\n    } else if (BladesActor.IsType(this, BladesActorType.npc) || BladesActor.IsType(this, BladesActorType.faction)) {\r\n      if (this.parentActor && !isSkippingSubActorCheck) {\r\n        // This is an embedded Actor: Update it as a subActor of parentActor.\r\n        return this.parentActor.updateSubActor(this.id!, updateData);\r\n      }\r\n    }\r\n\r\n    return super.update(updateData, context);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region Rolling Dice ~\r\n  rollAttributePopup(attribute_name: Attribute | Action) {\r\n    const test = Action;\r\n    // const roll = new Roll(\"1d20 + @abilities.wis.mod\", actor.getRollData());\r\n    const attribute_label: Capitalize<Attribute | Action> = U.tCase(attribute_name);\r\n\r\n    let content = `\r\n        <h2>${game.i18n.localize(\"BITD.Roll\")} ${attribute_label}</h2>\r\n        <form>\r\n          <div class=\"form-group\">\r\n            <label>${game.i18n.localize(\"BITD.Modifier\")}:</label>\r\n            <select id=\"mod\" name=\"mod\">\r\n              ${this.createListOfDiceMods(-3, +3, 0)}\r\n            </select>\r\n          </div>`;\r\n    if ([...Object.keys(Attribute), ...Object.keys(Action)].includes(attribute_name)) {\r\n      content += `\r\n            <div class=\"form-group\">\r\n              <label>${game.i18n.localize(\"BITD.Position\")}:</label>\r\n              <select id=\"pos\" name=\"pos\">\r\n                <option value=\"controlled\">${game.i18n.localize(\"BITD.PositionControlled\")}</option>\r\n                <option value=\"risky\" selected>${game.i18n.localize(\"BITD.PositionRisky\")}</option>\r\n                <option value=\"desperate\">${game.i18n.localize(\"BITD.PositionDesperate\")}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label>${game.i18n.localize(\"BITD.Effect\")}:</label>\r\n              <select id=\"fx\" name=\"fx\">\r\n                <option value=\"limited\">${game.i18n.localize(\"BITD.EffectLimited\")}</option>\r\n                <option value=\"standard\" selected>${game.i18n.localize(\"BITD.EffectStandard\")}</option>\r\n                <option value=\"great\">${game.i18n.localize(\"BITD.EffectGreat\")}</option>\r\n              </select>\r\n            </div>`;\r\n    } else {\r\n      content += `\r\n            <input id=\"pos\" name=\"pos\" type=\"hidden\" value=\"\">\r\n            <input id=\"fx\" name=\"fx\" type=\"hidden\" value=\"\">`;\r\n    }\r\n    content += `\r\n        <div className=\"form-group\">\r\n          <label>${game.i18n.localize(\"BITD.Notes\")}:</label>\r\n          <input id=\"note\" name=\"note\" type=\"text\" value=\"\">\r\n        </div><br/>\r\n        </form>\r\n      `;\r\n\r\n    new Dialog({\r\n      \"title\": `${game.i18n.localize(\"BITD.Roll\")} ${attribute_label}`,\r\n      \"content\": content,\r\n      \"buttons\": {\r\n        yes: {\r\n          icon: \"<i class='fas fa-check'></i>\",\r\n          label: game.i18n.localize(\"BITD.Roll\"),\r\n          callback: async (html: HTMLElement | JQuery<HTMLElement>) => {\r\n            if (html instanceof HTMLElement) {\r\n              html = $(html);\r\n            }\r\n            const modifier = parseInt(`${html.find('[name=\"mod\"]').attr(\"value\") ?? 0}`);\r\n            const position: Position = `${html.find('[name=\"pos\"]').attr(\"value\") ?? Position.risky}` as Position;\r\n            const effect: Effect = `${html.find('[name=\"fx\"]').attr(\"value\") ?? Effect.standard}` as Effect;\r\n            const note = `${html.find('[name=\"note\"]').attr(\"value\") ?? 0}`;\r\n            await this.rollAttribute(attribute_name, modifier, position, effect, note);\r\n          }\r\n        },\r\n        no: {\r\n          icon: \"<i class='fas fa-times'></i>\",\r\n          label: game.i18n.localize(\"Close\")\r\n        }\r\n      },\r\n      \"default\": \"yes\"\r\n    }).render(true);\r\n\r\n  }\r\n\r\n  async rollAttribute(\r\n    attribute_name: Attribute | Action,\r\n    additional_dice_amount = 0,\r\n    position: Position = Position.risky,\r\n    effect: Effect = Effect.standard,\r\n    note?: string\r\n  ) {\r\n    if (!BladesActor.IsType(this, BladesActorType.pc)) { return }\r\n    bladesRoll(\r\n      this.rollable[attribute_name] + additional_dice_amount,\r\n      attribute_name,\r\n      position,\r\n      effect,\r\n      note\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates <options> modifiers for dice roll.\r\n   *\r\n   * @param {int} rs\r\n   *  Min die modifier\r\n   * @param {int} re\r\n   *  Max die modifier\r\n   * @param {int} s\r\n   *  Selected die\r\n   */\r\n  createListOfDiceMods(rs: number, re: number, s: number | string) {\r\n\r\n    let text = \"\";\r\n\r\n    if (s === \"\") {\r\n      s = 0;\r\n    }\r\n\r\n    for (let i = rs; i <= re; i++) {\r\n      let plus = \"\";\r\n      if (i >= 0) { plus = \"+\" }\r\n      text += `<option value=\"${i}\"`;\r\n      if (i === s) {\r\n        text += \" selected\";\r\n      }\r\n\r\n      text += `>${plus}${i}d</option>`;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  // #endregion Rolling Dice\r\n\r\n  // #region NPC Randomizers ~\r\n  updateRandomizers() {\r\n    if (!BladesActor.IsType(this, BladesActorType.npc)) { return }\r\n    const titleChance = 0.05;\r\n    const suffixChance = 0.01;\r\n\r\n    const {persona, secret, random} = this.system;\r\n\r\n    function sampleArray(arr: string[], ...curVals: string[]): string {\r\n      arr = arr.filter((elem) => !curVals.includes(elem));\r\n      if (!arr.length) { return \"\" }\r\n      return arr[Math.floor(Math.random() * arr.length)];\r\n    }\r\n    const randomGen: Record<string, (gender?: string) => string> = {\r\n      name: (gender?: string) => {\r\n        return [\r\n          Math.random() <= titleChance\r\n            ? sampleArray(Randomizers.NPC.name_title)\r\n            : \"\",\r\n          sampleArray([\r\n            ...((gender ?? \"\").charAt(0).toLowerCase() !== \"m\" ? Randomizers.NPC.name_first.female : []),\r\n            ...((gender ?? \"\").charAt(0).toLowerCase() !== \"f\" ? Randomizers.NPC.name_first.male : [])\r\n          ]),\r\n          `\"${sampleArray(Randomizers.NPC.name_alias)}\"`,\r\n          sampleArray(Randomizers.NPC.name_surname),\r\n          Math.random() <= suffixChance\r\n            ? sampleArray(Randomizers.NPC.name_suffix)\r\n            : \"\"\r\n        ].filter((val) => Boolean(val)).join(\" \");\r\n      },\r\n      background: () => sampleArray(Randomizers.NPC.background, random.background.value),\r\n      heritage: () => sampleArray(Randomizers.NPC.heritage, random.heritage.value),\r\n      profession: () => sampleArray(Randomizers.NPC.profession, random.profession.value),\r\n      gender: () => sampleArray(Randomizers.NPC.gender, persona.gender.value) as \"M\"|\"F\"|\"U\"|\"X\",\r\n      appearance: () => sampleArray(Randomizers.NPC.appearance, persona.appearance.value),\r\n      goal: () => sampleArray(Randomizers.NPC.goal, persona.goal.value, secret.goal.value),\r\n      method: () => sampleArray(Randomizers.NPC.method, persona.method.value, secret.method.value),\r\n      trait: () => sampleArray(Randomizers.NPC.trait, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value),\r\n      interests: () => sampleArray(Randomizers.NPC.interests, persona.interests.value, secret.interests.value),\r\n      quirk: () => sampleArray(Randomizers.NPC.quirk, persona.quirk.value),\r\n      style: (gender = \"\") => sampleArray([\r\n        ...(gender.charAt(0).toLowerCase() !== \"m\" ? Randomizers.NPC.style.female : []),\r\n        ...(gender.charAt(0).toLowerCase() !== \"f\" ? Randomizers.NPC.style.male : [])\r\n      ], persona.style.value)\r\n    };\r\n\r\n    const gender = persona.gender.isLocked ? persona.gender.value : randomGen.gender();\r\n    const updateKeys = [\r\n      ...Object.keys(persona).filter((key) => !persona[key as KeyOf<typeof persona>]?.isLocked),\r\n      ...Object.keys(random).filter((key) => !random[key as KeyOf<typeof random>]?.isLocked),\r\n      ...Object.keys(secret).filter((key) => !secret[key as KeyOf<typeof secret>]?.isLocked)\r\n        .map((secretKey) => `secret-${secretKey}`)\r\n    ];\r\n\r\n    eLog.checkLog(\"Update Keys\", {updateKeys});\r\n    const updateData: Record<string, BladesRandomizer> = {};\r\n\r\n    updateKeys.forEach((key) => {\r\n      switch (key) {\r\n        case \"name\":\r\n        case \"heritage\":\r\n        case \"background\":\r\n        case \"profession\": {\r\n          const randomVal = randomGen[key]();\r\n          updateData[`system.random.${key}`] = {\r\n            isLocked: false,\r\n            value: randomVal || random[key as KeyOf<typeof random>].value\r\n          };\r\n          break;\r\n        }\r\n        case \"secret-goal\":\r\n        case \"secret-interests\":\r\n        case \"secret-method\": {\r\n          key = key.replace(/^secret-/, \"\");\r\n          const randomVal = randomGen[key]();\r\n          updateData[`system.secret.${key}`] = {\r\n            isLocked: false,\r\n            value: randomVal || secret[key as KeyOf<typeof secret>].value\r\n          };\r\n          break;\r\n        }\r\n        case \"gender\": {\r\n          updateData[`system.persona.${key}`] = {\r\n            isLocked: persona.gender.isLocked,\r\n            value: gender\r\n          };\r\n          break;\r\n        }\r\n        case \"trait1\":\r\n        case \"trait2\":\r\n        case \"trait3\":\r\n        case \"secret-trait\": {\r\n          const trait1 = persona.trait1.isLocked\r\n            ? persona.trait1.value\r\n            : sampleArray(Randomizers.NPC.trait, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\r\n          const trait2 = persona.trait2.isLocked\r\n            ? persona.trait2.value\r\n            : sampleArray(Randomizers.NPC.trait, trait1, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\r\n          const trait3 = persona.trait3.isLocked\r\n            ? persona.trait3.value\r\n            : sampleArray(Randomizers.NPC.trait, trait1, trait2, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\r\n          const secretTrait = secret.trait.isLocked\r\n            ? secret.trait.value\r\n            : sampleArray(Randomizers.NPC.trait, trait1, trait2, trait3, persona.trait1.value, persona.trait2.value, persona.trait3.value, secret.trait.value);\r\n          if (!persona.trait1.isLocked) {\r\n            updateData[\"system.persona.trait1\"] = {\r\n              isLocked: false,\r\n              value: trait1\r\n            };\r\n          }\r\n          if (!persona.trait2.isLocked) {\r\n            updateData[\"system.persona.trait2\"] = {\r\n              isLocked: false,\r\n              value: trait2\r\n            };\r\n          }\r\n          if (!persona.trait3.isLocked) {\r\n            updateData[\"system.persona.trait3\"] = {\r\n              isLocked: false,\r\n              value: trait3\r\n            };\r\n          }\r\n          if (!secret.trait.isLocked) {\r\n            updateData[\"system.secret.trait\"] = {\r\n              isLocked: false,\r\n              value: secretTrait\r\n            };\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          const randomVal = randomGen[key]();\r\n          updateData[`system.persona.${key}`] = {\r\n            isLocked: false,\r\n            value: randomVal || persona[key as KeyOf<typeof persona>].value\r\n          };\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.update(updateData);\r\n  }\r\n  // #endregion NPC Randomizers\r\n\r\n}\r\n\r\ndeclare interface BladesActor {\r\n  get id(): string;\r\n  get type(): BladesActorType;\r\n  get items(): EmbeddedCollection<typeof BladesItem, ActorData>;\r\n  system: BladesActorSystem,\r\n  getRollData(): BladesActorRollData;\r\n  parent: TokenDocument | null;\r\n  ownership: Record<string, ValueOf<typeof CONST.DOCUMENT_PERMISSION_LEVELS>>;\r\n  _source: BladesActor;\r\n}\r\n\r\n\r\nexport default BladesActor;"]}