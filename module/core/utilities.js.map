{"version":3,"sources":["../../ts/core/utilities.ts"],"names":[],"mappings":"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","file":"utilities.js","sourcesContent":["// #region ▮▮▮▮▮▮▮ IMPORTS ▮▮▮▮▮▮▮ ~\r\nimport C from \"./constants.js\";\r\nimport {gsap} from \"gsap/all\";\r\n// #endregion ▮▮▮▮ IMPORTS ▮▮▮▮\r\n\r\ndeclare global {\r\n  type int = number;\r\n  type float = number;\r\n  type posInt = number;\r\n  type posFloat = number;\r\n  type key = string | number | symbol;\r\n  type SmallInt = -10 | -9 | -8 | -7 | -6 | -5 | -4 | -3 | -2 | -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;\r\n\r\n  type HTMLCode = string;\r\n  type HEXColor = string;\r\n  type RGBColor = string;\r\n  type jQueryTextTerm = string | number | boolean | ((this: Element, index: number, text: string) => string | number | boolean);\r\n\r\n  type keyFunc = (key: number | string, val?: any) => unknown;\r\n  type valFunc = (val: any, key?: number | string) => any;\r\n  type testFunc<Type extends keyFunc | valFunc> = (...args: Parameters<Type>) => boolean;\r\n  type mapFunc<Type extends keyFunc | valFunc> = (...args: Parameters<Type>) => unknown;\r\n  type checkTest = ((...args: any[]) => any) | testFunc<keyFunc> | testFunc<valFunc> | RegExp | number | string;\r\n\r\n  type List<Type = any> = Record<number | string | symbol, Type>\r\n  type Index<Type = any> = List<Type> | Type[];\r\n\r\n  type FreezeProps<T> = {\r\n    [Prop in keyof T as string extends Prop ? never : number extends Prop ? never : Prop]: T[Prop]\r\n  };\r\n  type KeyOf<T> = keyof T;\r\n\r\n  type gsapAnim = gsap.core.Tween | gsap.core.Timeline;\r\n}\r\n\r\n// #region ▮▮▮▮▮▮▮ [HELPERS] Internal Functions, Data & References Used by Utility Functions ▮▮▮▮▮▮▮ ~\r\n/* eslint-disable array-element-newline */\r\n// _noCapWords -- Patterns matching words that should NOT be capitalized when converting to TITLE case.\r\nconst _noCapWords = \"a|above|after|an|and|at|below|but|by|down|for|for|from|in|nor|of|off|on|onto|or|out|so|the|to|under|up|with|yet\"\r\n  .split(\"|\")\r\n  .map((word) => new RegExp(`\\\\b${word}\\\\b`, \"gui\")) as RegExp[];\r\n\r\n// _capWords -- Patterns matching words that should ALWAYS be capitalized when converting to SENTENCE case.\r\nconst _capWords = [\r\n  \"I\", /[^a-z]{3,}|[\\.0-9]/gu\r\n].map((word) => (/RegExp/.test(Object.prototype.toString.call(word)) ? word : new RegExp(`\\\\b${word}\\\\b`, \"gui\"))) as RegExp[];\r\n\r\n// _loremIpsumText -- Boilerplate lorem ipsum\r\nconst _loremIpsumText = `Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ultricies\r\nnibh sed massa euismod lacinia. Aliquam nec est ac nunc ultricies scelerisque porta vulputate odio.\r\nInteger gravida mattis odio, semper volutpat tellus. Ut elit leo, auctor eget fermentum hendrerit,\r\naliquet ac nunc. Suspendisse porta turpis vitae mi posuere molestie. Cras lectus lacus, vulputate a\r\nvestibulum in, mattis vel mi. Mauris quis semper mauris. Praesent blandit nec diam eget tincidunt. Nunc\r\naliquet consequat massa ac lacinia. Ut posuere velit sagittis, vehicula nisl eget, fringilla nibh. Duis\r\nvolutpat mattis libero, a porttitor sapien viverra ut. Phasellus vulputate imperdiet ligula, eget\r\neleifend metus tempor nec. Nam eget sapien risus. Praesent id suscipit elit. Sed pellentesque ligula\r\ndiam, non aliquet magna feugiat vitae. Pellentesque ut tortor id erat placerat dignissim. Pellentesque\r\nut dui vel leo laoreet sodales nec ac tellus. In hac habitasse platea dictumst. Proin sed ex sed augue\r\nsollicitudin interdum. Sed id lacus porttitor nisi vestibulum tincidunt. Nulla facilisi. Vestibulum\r\nfeugiat finibus magna in pretium. Proin consectetur lectus nisi, non commodo lectus tempor et. Cras\r\nviverra, mi in consequat aliquet, justo mauris fringilla tellus, at accumsan magna metus in eros. Sed\r\nvehicula, diam ut sagittis semper, purus massa mattis dolor, in posuere.` as const;\r\n\r\n// _randomWords -- A collection of random words for various debugging purposes.\r\nconst _randomWords = `\r\naboveboard|account|achiever|acoustics|act|action|activity|actor|addition|adjustment|advertisement|advice|afterglow|afterimage|afterlife|aftermath|afternoon|afterthought|agreement\r\nair|aircraft|airfield|airlift|airline|airmen|airplane|airport|airtime|alarm|allover|allspice|alongside|also|amount|amusement|anger|angle|animal|another|ants|anyhow|anymore\r\nanyone|anyplace|anytime|anywhere|apparatus|apparel|appliance|approval|arch|argument|arithmetic|arm|army|around|art|ashtray|attack|attraction|aunt|authority|babies|baby|babysitter\r\nback|backache|backbone|backbreaker|backdrop|backfire|background|backhand|backlash|backlog|backpack|backside|backslap|backslide|backspace|backspin|backstroke|backtrack|backward\r\nbadge|bag|bait|balance|ball|ballroom|bankbook|bankroll|base|baseball|basin|basket|basketball|bat|bath|battle|beachcomb|bead|bear|because|become|bed|bedrock|bedroll|bedroom\r\nbeds|bee|beef|beginner|behavior|belief|believe|bell|bellboy|bellhop|bells|below|berry|bike|bikes|bird|birds|birth|birthday|bit|bite|blackball|blackberries|blackbird|blackboard\r\nblackjack|blacklist|blackmail|blackout|blacksmith|blacktop|blade|blood|blow|blowgun|bluebell|blueberry|bluebird|bluefish|bluegrass|blueprint|board|boardwalk|boat|bodyguard\r\nbomb|bone|book|bookcase|bookend|bookkeeper|bookmark|bookmobile|books|bookseller|bookshelf|bookworm|boot|border|bottle|boundary|bowlegs|bowtie|box|boy|brainchild|brake|branch\r\nbrass|breath|brick|bridge|brother|bubble|bucket|bugspray|building|bulb|burst|bushes|business|butter|butterball|buttercup|butterfingers|buttermilk|butternut|butterscotch|button\r\nbypass|cabbage|cabdriver|cable|cactus|cake|cakes|calculator|calendar|camera|camp|can|cancan|candlelight|candlestick|cannon|cannot|canvas|cap|caption|car|card|cardsharp|care\r\ncarefree|careworn|carfare|carload|carpenter|carpool|carport|carriage|cars|carsick|cart|cartwheel|cast|cat|cats|cattle|catwalk|cause|cave|caveman|celery|cellar|cemetery|cent\r\ncentercut|chalk|chance|change|channel|cheese|cheeseburger|cherries|cherry|chess|chicken|chickens|children|chin|church|circle|clam|class|clockwise|cloth|clover|club|coach|coal\r\ncoast|coat|cobweb|coffeemaker|coil|collar|color|comeback|committee|commonplace|commonwealth|company|comparison|competition|condition|connection|control|cook|copper|corn|cornmeal\r\ncough|country|courthouse|cover|cow|cows|crack|cracker|crate|crayon|cream|creator|creature|credit|crewcut|crib|crime|crook|crossbow|crossbreed|crosscut|crossover|crosswalk\r\ncrow|crowd|crown|cub|cup|current|curtain|curve|cushion|dad|dairymaid|daisywheel|daughter|day|daybed|daybook|daybreak|daydream|daylight|daytime|deadend|deadline|death|debt\r\ndecision|deer|degree|design|desire|desk|destruction|detail|development|digestion|dime|dinner|dinosaurs|direction|dirt|discovery|discussion|dishcloth|dishpan|dishwasher|dishwater\r\ndiskdrive|distance|distribution|division|dock|doctor|dog|dogs|doll|dolls|donkey|door|doorstop|downtown|downunder|drain|drawbridge|drawer|dress|drink|driveway|driving|drop\r\nduck|duckbill|duckpin|ducks|dust|ear|earache|earring|earth|earthquake|earthward|earthworm|edge|education|effect|egg|egghead|eggnog|eggs|eggshell|elbow|end|engine|error|event\r\neverything|example|exchange|existence|expansion|experience|expert|eye|eyeballs|eyecatching|eyeglasses|eyelash|eyelid|eyes|eyesight|eyewitness|face|fact|fairies|fall|fang|farm\r\nfatherland|fear|feeling|field|finger|fire|fireball|fireboat|firebomb|firebreak|firecracker|firefighter|firehouse|fireman|fireproof|fireworks|fish|fishbowl|fisherman|fisheye\r\nfishhook|fishmonger|fishnet|fishpond|fishtail|flag|flame|flavor|flesh|flight|flock|floor|flower|flowers|fly|fog|fold|food|foot|football|foothill|footlights|footlocker|footprints\r\nforbearer|force|forearm|forebear|forebrain|forecast|foreclose|foreclosure|foredoom|forefather|forefeet|forefinger|forefoot|forego|foregone|forehand|forehead|foreknowledge\r\nforeleg|foreman|forepaws|foresee|foreshadow|forestall|forethought|foretold|forever|forewarn|foreword|forget|fork|forklift|form|fowl|frame|friction|friend|friends|frog|frogs\r\nfront|fruit|fruitcup|fuel|furniture|gate|gearshift|geese|ghost|giants|giraffe|girl|girls|glass|glassmaking|glove|gold|goodbye|goodnight|government|governor|grade|grain|grandaunt\r\ngranddaughter|grandfather|grandmaster|grandmother|grandnephew|grandparent|grandson|grandstand|granduncle|grape|grass|grassland|graveyard|grip|ground|group|growth|guide|guitar\r\ngumball|gun|hair|haircut|hall|hamburger|hammer|hand|handbook|handgun|handmade|handout|hands|harbor|harmony|hat|hate|head|headache|headlight|headline|headquarters|health|heat\r\nhereafter|hereby|herein|hereupon|highchair|highland|highway|hill|himself|history|hobbies|hole|holiday|home|homemade|hometown|honey|honeybee|honeydew|honeysuckle|hook|hookup\r\nhope|horn|horse|horseback|horsefly|horsehair|horseman|horseplay|horsepower|horseradish|horses|hose|hospital|hot|hour|house|houseboat|household|housekeeper|houses|housetop\r\nhowever|humor|hydrant|ice|icicle|idea|impulse|income|increase|industry|ink|insect|inside|instrument|insurance|intake|interest|invention|iron|island|itself|jail|jailbait|jam\r\njar|jeans|jelly|jellybean|jellyfish|jetliner|jetport|jewel|join|judge|juice|jump|jumpshot|kettle|key|keyboard|keyhole|keynote|keypad|keypunch|keystone|keystroke|keyword|kick\r\nkiss|kittens|kitty|knee|knife|knot|knowledge|laborer|lace|ladybug|lake|lamp|land|language|laugh|leather|leg|legs|letter|letters|lettuce|level|library|lifeblood|lifeguard|lifelike\r\nlifeline|lifelong|lifetime|lifework|limelight|limestone|limit|line|linen|lip|liquid|loaf|lock|locket|longhand|look|loss|love|low|lukewarm|lumber|lunch|lunchroom|machine|magic\r\nmaid|mailbox|mainline|man|marble|mark|market|mask|mass|match|matchbox|meal|meantime|meanwhile|measure|meat|meeting|memory|men|metal|mice|middle|milk|mind|mine|minister|mint\r\nminute|mist|mitten|mom|money|monkey|month|moon|moonbeam|moonlight|moonlit|moonscape|moonshine|moonstruck|moonwalk|moreover|morning|mother|motion|motorcycle|mountain|mouth\r\nmove|muscle|name|nation|nearby|neck|need|needle|nerve|nest|nevermore|newsboy|newsbreak|newscaster|newsdealer|newsletter|newsman|newspaper|newsprint|newsreel|newsroom|night\r\nnightfall|nobody|noise|noisemaker|north|northeast|nose|note|notebook|nowhere|number|nursemaid|nut|nutcracker|oatmeal|observation|ocean|offer|office|oil|oneself|onetime|orange\r\noranges|order|oven|overboard|overcoat|overflow|overland|pacemaker|page|pail|pan|pancake|paper|parcel|part|partner|party|passbook|passenger|passkey|Passover|passport|payment\r\npeace|pear|pen|pencil|peppermint|person|pest|pet|pets|pickle|pickup|picture|pie|pies|pig|pigs|pin|pinhole|pinstripe|pinup|pinwheel|pipe|pizzas|place|plane|planes|plant|plantation\r\nplants|plastic|plate|play|playback|playground|playhouse|playthings|pleasure|plot|plough|pocket|point|poison|pollution|ponytail|popcorn|porter|position|postcard|pot|potato\r\npowder|power|price|produce|profit|property|prose|protest|pull|pump|punishment|purpose|push|quarter|quartz|queen|question|quicksand|quiet|quill|quilt|quince|quiver|rabbit|rabbits\r\nracquetball|rail|railroad|railway|rain|raincheck|raincoat|rainstorm|rainwater|rake|range|rat|rate|rattlesnake|rattletrap|ray|reaction|reading|reason|receipt|recess|record\r\nregret|relation|religion|repairman|representative|request|respect|rest|reward|rhythm|rice|riddle|rifle|ring|rings|river|riverbanks|road|robin|rock|rod|roll|roof|room|root\r\nrose|route|rub|rubberband|rule|run|sack|sail|sailboat|salesclerk|salt|sand|sandlot|sandstone|saucepan|scale|scapegoat|scarecrow|scarf|scene|scent|school|schoolbook|schoolboy\r\nschoolbus|schoolhouse|science|scissors|screw|sea|seashore|seat|secretary|seed|selection|self|sense|servant|shade|shadyside|shake|shame|shape|sharecropper|sharpshooter|sheep\r\nsheepskin|sheet|shelf|ship|shirt|shock|shoe|shoelace|shoemaker|shoes|shop|shortbread|show|showoff|showplace|side|sidekick|sidewalk|sign|silk|silver|silversmith|sink|sister\r\nsisterhood|sisters|sixfold|size|skate|skateboard|skin|skintight|skirt|sky|skylark|skylight|slave|sleep|sleet|slip|slope|slowdown|slumlord|smash|smell|smile|smoke|snail|snails\r\nsnake|snakes|snakeskin|sneeze|snow|snowball|snowbank|snowbird|snowdrift|snowshovel|soap|society|sock|soda|sofa|softball|somebody|someday|somehow|someone|someplace|something\r\nsometimes|somewhat|somewhere|son|song|songs|sort|sound|soundproof|soup|southeast|southwest|soybean|space|spacewalk|spade|spark|spearmint|spiders|spillway|spokesperson|sponge\r\nspoon|spot|spring|spy|square|squirrel|stage|stagehand|stamp|standby|standoff|standout|standpoint|star|starfish|start|statement|station|steam|steamship|steel|stem|step|stepson\r\nstew|stick|sticks|stitch|stocking|stockroom|stomach|stone|stop|stoplight|stopwatch|store|story|stove|stranger|straw|stream|street|stretch|string|stronghold|structure|substance\r\nsubway|sugar|suggestion|suit|summer|sun|sunbaked|sunbathe|sundial|sundown|sunfish|sunflower|sunglasses|sunlit|sunray|sunroof|sunup|supercargo|supercharge|supercool|superego\r\nsuperfine|supergiant|superhero|superhighways|superhuman|superimpose|supermarket|supermen|supernatural|superpower|superscript|supersensitive|supersonic|superstar|superstrong\r\nsuperstructure|supertanker|superweapon|superwoman|support|surprise|sweater|sweetheart|sweetmeat|swim|swing|system|table|tablecloth|tablespoon|tabletop|tableware|tail|tailcoat\r\ntailgate|taillight|taillike|tailpiece|tailspin|takeoff|takeout|takeover|talebearer|taleteller|talk|tank|tapeworm|taproom|taproot|target|taskmaster|taste|tax|taxicab|taxpayer\r\nteaching|teacup|team|teammate|teamwork|teapot|teaspoon|teenager|teeth|telltale|temper|tendency|tenderfoot|tenfold|tent|territory|test|textbook|texture|theory|therefore|thing\r\nthings|thought|thread|thrill|throat|throne|throwaway|throwback|thumb|thunder|thunderbird|thunderstorm|ticket|tiger|time|timekeeper|timesaving|timeshare|timetable|tin|title\r\ntoad|toe|toes|together|tomatoes|tongue|toolbox|tooth|toothbrush|toothpaste|toothpick|top|touch|touchdown|town|township|toy|toys|trade|trail|train|trains|tramp|transport|tray\r\ntreatment|tree|trees|trick|trip|trouble|trousers|truck|trucks|tub|turkey|turn|turnabout|turnaround|turnbuckle|turndown|turnkey|turnoff|turntable|twig|twist|typewriter|umbrella\r\nuncle|underachieve|underage|underarm|underbelly|underbid|undercharge|underclothes|undercover|undercut|underdevelop|underestimate|underexpose|underfoot|underground|underwear\r\nunit|upbeat|upbringing|upcoming|update|upend|upgrade|upheaval|uphill|uphold|upkeep|upland|uplift|upload|upmarket|upon|uppercase|upperclassman|uppercut|uproar|uproot|upset\r\nupshot|upside|upstage|upstairs|upstanding|upstart|upstate|upstream|uptake|upthrust|uptight|uptime|uptown|upward|upwind|use|vacation|value|van|vase|vegetable|veil|vein|verse\r\nvessel|vest|view|visitor|voice|volcano|volleyball|voyage|waistline|walk|walkways|wall|walleyed|wallpaper|war|wardroom|warfare|warmblooded|warpath|wash|washbowl|washcloth|washhouse\r\nwashout|washrag|washroom|washstand|washtub|waste|wastebasket|wasteland|wastepaper|wastewater|watch|watchband|watchdog|watchmaker|watchman|watchtower|watchword|water|watercolor\r\nwatercooler|watercraft|waterfall|waterfront|waterline|waterlog|watermelon|waterpower|waterproof|waterscape|watershed|waterside|waterspout|watertight|wave|wavelike|waves|wax\r\nwaxwork|way|waybill|wayfarer|waylaid|wayside|wayward|wealth|weather|weathercock|weatherman|weatherproof|week|weekday|weekend|weeknight|weight|whatever|whatsoever|wheel|wheelchair\r\nwheelhouse|whip|whistle|whitecap|whitefish|whitewall|whitewash|widespread|wilderness|wind|window|wine|wing|winter|wipeout|wire|wish|without|woman|women|wood|woodshop|wool\r\nword|work|worm|wound|wren|wrench|wrist|writer|writing|yak|yam|yard|yarn|year|yoke|zebra|zephyr|zinc|zipper|zoo\r\n`.split(\"|\");\r\nconst _numberWords = {\r\n  ones: [\r\n    \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\r\n    \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\",\r\n    \"twenty\"\r\n  ],\r\n  tens: [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"],\r\n  tiers: [\"\", \"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\", \"sextillion\", \"septillion\", \"octillion\", \"nonillion\"],\r\n  bigPrefixes: [\"\", \"un\", \"duo\", \"tre\", \"quattuor\", \"quin\", \"sex\", \"octo\", \"novem\"],\r\n  bigSuffixes: [\"\", \"decillion\", \"vigintillion\", \"trigintillion\", \"quadragintillion\", \"quinquagintillion\", \"sexagintillion\", \"septuagintillion\", \"octogintillion\", \"nonagintillion\", \"centillion\"]\r\n} as const;\r\nconst _ordinals = {\r\n  zero: \"zeroeth\", one: \"first\", two: \"second\", three: \"third\", four: \"fourth\", five: \"fifth\", eight: \"eighth\", nine: \"ninth\", twelve: \"twelfth\",\r\n  twenty: \"twentieth\", thirty: \"thirtieth\", forty: \"fortieth\", fifty: \"fiftieth\", sixty: \"sixtieth\", seventy: \"seventieth\", eighty: \"eightieth\", ninety: \"ninetieth\"\r\n} as const;\r\nconst _romanNumerals = {\r\n  grouped: [\r\n    [\"\", \"Ⅰ\", \"Ⅱ\", \"Ⅲ\", \"Ⅳ\", \"Ⅴ\", \"Ⅵ\", \"Ⅶ\", \"Ⅷ\", \"Ⅸ\"],\r\n    [\"\", \"Ⅹ\", \"ⅩⅩ\", \"ⅩⅩⅩ\", \"ⅩⅬ\", \"Ⅼ\", \"ⅬⅩ\", \"ⅬⅩⅩ\", \"ⅬⅩⅩⅩ\", \"ⅩⅭ\"],\r\n    [\"\", \"Ⅽ\", \"ⅭⅭ\", \"ⅭⅭⅭ\", \"ⅭⅮ\", \"Ⅾ\", \"ⅮⅭ\", \"ⅮⅭⅭ\", \"ⅮⅭⅭⅭ\", \"ⅭⅯ\"],\r\n    [\"\", \"Ⅿ\", \"ⅯⅯ\", \"ⅯⅯⅯ\", \"Ⅿↁ\", \"ↁ\", \"ↁⅯ\", \"ↁⅯⅯ\", \"ↁⅯⅯⅯ\", \"ↁↂ\"],\r\n    [\"\", \"ↂ\", \"ↂↂ\", \"ↂↂↂ\", \"ↂↇ\", \"ↇ\", \"ↇↂ\", \"ↇↂↂ\", \"ↇↂↂↂ\", \"ↇↈ\"],\r\n    [\"\", \"ↈ\", \"ↈↈ\", \"ↈↈↈ\"]\r\n  ],\r\n  ungrouped: [\r\n    [\"\", \"Ⅰ\", \"ⅠⅠ\", \"ⅠⅠⅠ\", \"ⅠⅤ\", \"Ⅴ\", \"ⅤⅠ\", \"ⅤⅠⅠ\", \"ⅤⅠⅠⅠ\", \"ⅠⅩ\"],\r\n    [\"\", \"Ⅹ\", \"ⅩⅩ\", \"ⅩⅩⅩ\", \"ⅩⅬ\", \"Ⅼ\", \"ⅬⅩ\", \"ⅬⅩⅩ\", \"ⅬⅩⅩⅩ\", \"ⅩⅭ\"],\r\n    [\"\", \"Ⅽ\", \"ⅭⅭ\", \"ⅭⅭⅭ\", \"ⅭⅮ\", \"Ⅾ\", \"ⅮⅭ\", \"ⅮⅭⅭ\", \"ⅮⅭⅭⅭ\", \"ⅭⅯ\"],\r\n    [\"\", \"Ⅿ\", \"ⅯⅯ\", \"ⅯⅯⅯ\", \"Ⅿↁ\", \"ↁ\", \"ↁⅯ\", \"ↁⅯⅯ\", \"ↁⅯⅯⅯ\", \"ↁↂ\"],\r\n    [\"\", \"ↂ\", \"ↂↂ\", \"ↂↂↂ\", \"ↂↇ\", \"ↇ\", \"ↇↂ\", \"ↇↂↂ\", \"ↇↂↂↂ\", \"ↇↈ\"],\r\n    [\"\", \"ↈ\", \"ↈↈ\", \"ↈↈↈ\"]\r\n  ]\r\n} as const;\r\nconst UUIDLOG: Array<[string, string, number]> = [];\r\n/* eslint-enable array-element-newline, object-property-newline */\r\n// #endregion ▮▮▮▮[HELPERS]▮▮▮▮\r\n\r\n// #region ████████ GETTERS: Basic Data Lookup & Retrieval ████████ ~\r\n// @ts-expect-error Leauge of foundry developers is wrong about user not being on game.\r\nconst GMID = (): string | false => game?.user?.find((user) => user.isGM)?.id ?? false;\r\n// #endregion ▄▄▄▄▄ GETTERS ▄▄▄▄▄\r\n\r\n// #region ████████ TYPES: Type Checking, Validation, Conversion, Casting ████████ ~\r\n\r\nconst isNumber = (ref: unknown): ref is number => typeof ref === \"number\" && !isNaN(ref);\r\nconst isArray = (ref: unknown): ref is unknown[] => Array.isArray(ref);\r\nconst isSimpleObj = (ref: unknown): ref is Record<string | number | symbol, unknown> => ref === Object(ref) && !isArray(ref);\r\nconst isList = <T>(ref: T): ref is Record<string | number | symbol, unknown> & T => ref === Object(ref) && !isArray(ref); // Boolean(ref) && Object.getPrototypeOf(ref) === Object.prototype;\r\nconst isFunc = (ref: unknown): ref is typeof Function => typeof ref === \"function\";\r\nconst isInt = (ref: unknown): ref is int => isNumber(ref) && Math.round(ref) === ref;\r\nconst isFloat = (ref: unknown): ref is float => isNumber(ref) && /\\./.test(`${ref}`);\r\nconst isPosInt = (ref: unknown): ref is posInt => isInt(ref) && ref >= 0;\r\nconst isIndex = <T>(ref: T): ref is T & Index<ValueOf<T>> => isList(ref) || isArray(ref);\r\nconst isIterable = (ref: unknown): ref is Iterable<unknown> => typeof ref === \"object\" && ref !== null && Symbol.iterator in ref;\r\nconst isHTMLCode = (ref: unknown): ref is HTMLCode => typeof ref === \"string\" && /^<.*>$/u.test(ref);\r\nconst isHexColor = (ref: unknown): ref is HEXColor => typeof ref === \"string\" && /^#(([0-9a-fA-F]{2}){3,4}|[0-9a-fA-F]{3,4})$/.test(ref);\r\nconst isRGBColor = (ref: unknown): ref is RGBColor => typeof ref === \"string\" && /^rgba?\\((\\d{1,3},\\s*){1,2}?\\d{1,3},\\s*\\d{1,3}(\\.\\d+)?\\)$/.test(ref);\r\nconst isUndefined = (ref: unknown): ref is undefined => ref === undefined;\r\nconst isDefined = (ref: unknown): ref is NonNullable<unknown> | null => !isUndefined(ref);\r\nconst isEmpty = (ref: Index<unknown>): boolean => !(() => { for (const i in ref) { return true } return false })();\r\nconst hasItems = (ref: Index<unknown>): boolean => !isEmpty(ref);\r\nconst isInstance = <T extends new (...args: unknown[]) => unknown>(classRef: T, ref: unknown): ref is InstanceType<T> => ref instanceof classRef;\r\nconst isInstanceFunc = <T extends new (...args: ConstructorParameters<T>) => InstanceType<T>>(clazz: T) => (instance: unknown): instance is InstanceType<T> => instance instanceof clazz;\r\nconst areEqual = (...refs: unknown[]) => {\r\n  do {\r\n    const ref = refs.pop();\r\n    if (refs.length && !checkEquality(ref, refs[0])) {\r\n      return false;\r\n    }\r\n  } while (refs.length);\r\n  return true;\r\n\r\n  function checkEquality(ref1: unknown, ref2: unknown): boolean {\r\n    if (typeof ref1 !== typeof ref2) { return false }\r\n    if ([ref1, ref2].includes(null)) { return ref1 === ref2 }\r\n    switch (typeof ref1) {\r\n      case \"object\": {\r\n        if (isArray(ref1)) {\r\n          if (!isArray(ref2)) { return false }\r\n          if (ref1.length !== ref2.length) { return false }\r\n          for (let i = 0; i < ref1.length; i++) {\r\n            if (!checkEquality(ref1[i], ref2[i])) { return false }\r\n          }\r\n          return true;\r\n        } else if (isList(ref1)) {\r\n          if (!isList(ref2) || Object.keys(ref1).length !== Object.keys(ref2).length) { return false }\r\n          return checkEquality(Object.keys(ref1), Object.keys(ref2)) && checkEquality(Object.values(ref1), Object.values(ref2));\r\n        }\r\n        try {\r\n          return JSON.stringify(ref1) === JSON.stringify(ref2);\r\n        } catch {\r\n          return false;\r\n        }\r\n      }\r\n      default: {\r\n        return ref1 === ref2;\r\n      }\r\n    }\r\n  }\r\n\r\n};\r\nconst pFloat = (ref: unknown, sigDigits?: posInt, isStrict = false): number => {\r\n  if (typeof ref === \"string\") {\r\n    ref = parseFloat(ref);\r\n  }\r\n  if (typeof ref === \"number\") {\r\n    if (isNaN(ref)) { return isStrict ? NaN : 0 }\r\n    if (isUndefined(sigDigits)) { return ref }\r\n    return Math.round(ref * (10 ** sigDigits)) / (10 ** sigDigits);\r\n  }\r\n  return isStrict ? NaN : 0;\r\n};\r\nconst pInt = (ref: unknown, isStrict = false): number => (isNaN(pFloat(ref, 0, isStrict)) ? NaN : Math.round(pFloat(ref, 0, isStrict)));\r\nconst radToDeg = (rad: number, isConstrained = true): number => {\r\n  rad = isConstrained ? rad % (2 * Math.PI) : rad;\r\n  rad *= 180 / Math.PI;\r\n  return rad;\r\n};\r\nconst degToRad = (deg: number, isConstrained = true): number => {\r\n  deg = isConstrained ? deg % 360 : deg;\r\n  deg *= Math.PI / 180;\r\n  return deg;\r\n};\r\nconst getKey = <T>(key: string | number | symbol, obj: Record<string | number | symbol, T>): T | null => {\r\n  if (key in obj) {\r\n    return obj[key];\r\n  }\r\n  return null;\r\n};\r\n\r\nconst FILTERS = {\r\n  IsInstance: ((classRef: unknown) => ((item: unknown) => typeof classRef === \"function\" && item instanceof classRef))\r\n};\r\n// #endregion ▄▄▄▄▄ TYPES ▄▄▄▄▄\r\n\r\n// #region ████████ STRINGS: String Parsing, Manipulation, Conversion, Regular Expressions ████████\r\n// #region ░░░░░░░[Case Conversion]░░░░ Upper, Lower, Sentence & Title Case ░░░░░░░ ~\r\nconst uCase = <T extends unknown>(str: T): Uppercase<string & T> => String(str).toUpperCase() as Uppercase<string & T>;\r\nconst lCase = <T extends unknown>(str: T): Lowercase<string & T> => String(str).toLowerCase() as Lowercase<string & T>;\r\nconst sCase = <T extends unknown>(str: T): Capitalize<string & T> => {\r\n  let [first, ...rest] = `${str ?? \"\"}`.split(/\\s+/);\r\n  first = testRegExp(first, _capWords) ? first : `${uCase(first.charAt(0))}${lCase(first.slice(1))}`;\r\n  if (hasItems(rest)) {\r\n    rest = rest.map((word) => (testRegExp(word, _capWords) ? word : lCase(word)));\r\n  }\r\n  return [first, ...rest].join(\" \").trim() as Capitalize<string & T>;\r\n};\r\nconst tCase = <T extends unknown>(str: T): Titlecase<string & T> => String(str).split(/\\s/)\r\n  .map((word, i) => (i && testRegExp(word, _noCapWords) ? lCase(word) : sCase(word)))\r\n  .join(\" \").trim() as Titlecase<string & T>;\r\n// #endregion ░░░░[Case Conversion]░░░░\r\n// #region ░░░░░░░[RegExp]░░░░ Regular Expressions ░░░░░░░ ~\r\nconst testRegExp = (str: unknown, patterns: Array<RegExp | string> = [], flags = \"gui\", isTestingAll = false) => patterns\r\n  .map((pattern) => (pattern instanceof RegExp\r\n    ? pattern\r\n    : new RegExp(`\\\\b${pattern}\\\\b`, flags)))[isTestingAll ? \"every\" : \"some\"]((pattern) => pattern.test(`${str}`));\r\nconst regExtract = (ref: unknown, pattern: string | RegExp, flags?: string) => {\r\n  /* Wrapper around String.match() that removes the need to worry about match()'s different handling of the 'g' flag.\r\n      - IF your pattern contains unescaped parentheses -> Returns Array of all matching groups.\r\n      - OTHERWISE -> Returns string that matches the provided pattern. */\r\n  const splitFlags: string[] = [];\r\n  [...(flags ?? \"\").replace(/g/g, \"\"), \"u\"].forEach((flag) => {\r\n    if (flag && !splitFlags.includes(flag)) {\r\n      splitFlags.push(flag);\r\n    }\r\n  });\r\n  const isGrouping = /[)(]/.test(pattern.toString().replace(/\\\\\\)|\\\\\\(/g, \"\"));\r\n  if (isGrouping) {\r\n    splitFlags.push(\"g\");\r\n  }\r\n  flags = splitFlags.join(\"\");\r\n  pattern = new RegExp(pattern, flags);\r\n  const matches = `${ref}`.match(pattern) || [];\r\n  return isGrouping ? Array.from(matches) : matches.pop();\r\n};\r\n\r\n// #endregion ░░░░[RegExp]░░░░\r\n// #region ░░░░░░░[Formatting]░░░░ Hyphenation, Pluralization, \"a\"/\"an\" Fixing ░░░░░░░ ~\r\n// const hyphenate = (str: unknown) => (/^<|\\u00AD|\\u200B/.test(`${str}`) ? `${str}` : _hyph(`${str}`));\r\nconst unhyphenate = (str: unknown) => `${str}`.replace(/\\u00AD|\\u200B/gu, \"\");\r\nconst parseArticles = (str: unknown) => `${str}`.replace(/\\b(a|A)\\s([aeiouAEIOU])/gu, \"$1n $2\");\r\nconst pluralize = (singular: string, num = 2, plural?: string) => {\r\n  if (pFloat(num) === 1) { return singular }\r\n  return plural ?? `${singular.replace(/y$/, \"ie\").replace(/s$/, \"se\")}s`;\r\n};\r\nconst oxfordize = (items: Array<number | string>, useOxfordComma = true, andString = \"and\") => {\r\n  if (items.length === 0) { return \"\" }\r\n  if (items.length === 1) { return `${items[0]}` }\r\n  const lastItem = items.pop();\r\n  return [\r\n    items.join(\", \"),\r\n    useOxfordComma ? \",\" : \"\",\r\n    ` ${andString} `,\r\n    lastItem\r\n  ].join(\"\");\r\n};\r\nconst ellipsize = (text: unknown, maxLength: number) => (`${text}`.length > maxLength ? `${`${text}`.slice(0, maxLength - 3)}…` : `${text}`);\r\nconst pad = (text: unknown, minLength: posInt, delim = \" \", decimalPos?: posInt): string => {\r\n  const str = `${text}`;\r\n  if (str.length < minLength) {\r\n    // if (/\\./.test(str) && typeof decimalPos === \"number\") {\r\n    //   ... position decimal\r\n    // } else {\r\n    return `${delim.repeat(minLength - str.length)}${str}`;\r\n  }\r\n  return str;\r\n};\r\nconst toKey = (text: string): string => (text ?? \"\").toLowerCase().replace(/ /g, \"-\").replace(/default/, \"DEFAULT\");\r\n// #region ========== Numbers: Formatting Numbers Into Strings =========== ~\r\nconst signNum = (num: int, delim = \"\", zeroSign = \"+\") => `${pFloat(num) < 0 ? \"-\" : (pFloat(num) > 0 ? \"+\" : zeroSign)}${delim}${Math.abs(pFloat(num))}`;\r\nconst padNum = (num: number, numDecDigits: int, includePlus = false, decimalPos?: posInt) => {\r\n  const prefix = (includePlus && num >= 0) ? \"+\" : \"\";\r\n  const [leftDigits, rightDigits] = `${pFloat(num)}`.split(/\\./);\r\n  if (getType(rightDigits) === \"int\") {\r\n    if (rightDigits.length > numDecDigits) {\r\n      return `${prefix}${pFloat(num, numDecDigits)}`;\r\n    } else if (rightDigits.length < numDecDigits) {\r\n      return `${prefix}${leftDigits}.${rightDigits}${\"0\".repeat(numDecDigits - rightDigits.length)}`;\r\n    } else {\r\n      return `${prefix}${pFloat(num)}`;\r\n    }\r\n  }\r\n  return `${prefix}${leftDigits}.${\"0\".repeat(numDecDigits)}`;\r\n};\r\nconst stringifyNum = (num: number | string) => {\r\n  // Can take string representations of numbers, either in standard or scientific/engineering notation.\r\n  // Returns a string representation of the number in standard notation.\r\n  if (pFloat(num) === 0) { return \"0\" }\r\n  const stringyNum = lCase(num).replace(/[^\\d.e+-]/g, \"\");\r\n  const base = regExtract(stringyNum, /^-?[\\d.]+/) as string | undefined;\r\n  const exp = pInt(regExtract(stringyNum, /e([+-]?\\d+)$/) as string | undefined);\r\n  if (typeof base === \"string\" && typeof exp === \"string\") {\r\n    let baseInts = regExtract(base, /^-?(\\d+)/),\r\n        baseDecs = regExtract(base, /\\.(\\d+)/);\r\n    if (isArray(baseInts) && isArray(baseDecs)) {\r\n      baseInts = baseInts.pop()?.replace(/^0+/, \"\");\r\n      baseDecs = lCase(baseDecs?.pop()).replace(/0+$/, \"\");\r\n      if (!isUndefined(baseInts) && !isUndefined(baseDecs)) {\r\n        const numFinalInts = Math.max(0, baseInts.length + exp);\r\n        const numFinalDecs = Math.max(0, baseDecs.length - exp);\r\n        const finalInts = [\r\n          baseInts.slice(0, numFinalInts),\r\n          baseDecs.slice(0, Math.max(0, exp))\r\n        ].join(\"\") || \"0\";\r\n        const finalDecs = [\r\n          baseInts.length - numFinalInts > 0\r\n            ? baseInts.slice(baseInts.length - numFinalInts - 1)\r\n            : \"\",\r\n          baseDecs.slice(baseDecs.length - numFinalDecs)\r\n        ].join(\"\");\r\n        return [\r\n          stringyNum.charAt(0) === \"-\" ? \"-\" : \"\",\r\n          finalInts,\r\n          \"0\".repeat(Math.max(0, numFinalInts - finalInts.length)),\r\n          finalDecs.length ? \".\" : \"\",\r\n          \"0\".repeat(Math.max(0, numFinalDecs - finalDecs.length)),\r\n          finalDecs\r\n        ].join(\"\");\r\n      }\r\n    }\r\n  }\r\n  return `${num}`;\r\n};\r\nconst verbalizeNum = (num: number | string) => {\r\n  // Converts a float with absolute magnitude <= 9.99e303 into words.\r\n  num = stringifyNum(num);\r\n  const getTier = (trioNum: number) => {\r\n    if (trioNum < _numberWords.tiers.length) {\r\n      return _numberWords.tiers[trioNum];\r\n    }\r\n    return [\r\n      _numberWords.bigPrefixes[(trioNum % 10) - 1],\r\n      _numberWords.bigSuffixes[Math.floor(trioNum / 10)]\r\n    ].join(\"\");\r\n  };\r\n  const parseThreeDigits = (trio: string) => {\r\n    if (pInt(trio) === 0) { return \"\" }\r\n    const digits = `${trio}`.split(\"\").map((digit) => pInt(digit)) as number[];\r\n    let result = \"\";\r\n    if (digits.length === 3) {\r\n      const hundreds = digits.shift();\r\n      if (isUndefined(hundreds)) {\r\n        throw new Error(`[U.verbalizeNum] Undefined digit in trio '${digits.join(\"\")}'.`);\r\n      }\r\n      result += hundreds > 0 ? `${_numberWords.ones[hundreds]} hundred` : \"\";\r\n      if (hundreds && (digits[0] || digits[1])) {\r\n        result += \" and \";\r\n      }\r\n    }\r\n    if (pInt(digits.join(\"\")) <= _numberWords.ones.length) {\r\n      result += _numberWords.ones[pInt(digits.join(\"\"))];\r\n    } else {\r\n      result += `${_numberWords.tens[pInt(digits.shift())]}${pInt(digits[0]) > 0 ? `-${_numberWords.ones[pInt(digits[0])]}` : \"\"}`;\r\n    }\r\n    return result;\r\n  };\r\n  const numWords = [];\r\n  if (num.charAt(0) === \"-\") {\r\n    numWords.push(\"negative\");\r\n  }\r\n  const [integers, decimals] = num.replace(/[,|\\s|-]/g, \"\").split(\".\");\r\n  const intArray = integers.split(\"\").reverse().join(\"\")\r\n    .match(/.{1,3}/g)\r\n    ?.map((v) => v.split(\"\").reverse().join(\"\")) ?? [];\r\n  const intStrings = [];\r\n  while (intArray.length) {\r\n    const thisTrio = intArray.pop();\r\n    if (thisTrio) {\r\n      const theseWords = parseThreeDigits(thisTrio);\r\n      if (theseWords) {\r\n        intStrings.push(`${theseWords} ${getTier(intArray.length)}`);\r\n      }\r\n    }\r\n  }\r\n  numWords.push(intStrings.join(\", \").trim());\r\n  if (getType(decimals) === \"int\") {\r\n    if (integers === \"0\") {\r\n      numWords.push(\"zero\");\r\n    }\r\n    numWords.push(\"point\");\r\n    for (const digit of decimals.split(\"\")) {\r\n      numWords.push(_numberWords.ones[pInt(digit)]);\r\n    }\r\n  }\r\n  return numWords.join(\" \");\r\n};\r\nconst ordinalizeNum = (num: string | number, isReturningWords = false) => {\r\n  if (isReturningWords) {\r\n    const [numText, suffix]: RegExpMatchArray = lCase(verbalizeNum(num)).match(/.*?[-|\\s]?(\\w*?)$/) ?? [\"\", \"\"];\r\n    return numText.replace(\r\n      new RegExp(`${suffix}$`),\r\n      suffix in _ordinals ? _ordinals[<keyof typeof _ordinals>suffix] : `${suffix}th`\r\n    );\r\n  }\r\n  if (/\\.|1[1-3]$/.test(`${num}`)) {\r\n    return `${num}th`;\r\n  }\r\n  return `${num}${[\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\"][\r\n    pInt(`${num}`.charAt(`${num}`.length - 1))\r\n  ]\r\n  }`;\r\n};\r\nconst romanizeNum = (num: number, isUsingGroupedChars = true) => {\r\n  if (isFloat(num)) { throw new Error(`Error: Can't Romanize Floats (${num})`) }\r\n  if (num >= 400000) { throw new Error(`Error: Can't Romanize >= 400,000 (${num})`) }\r\n  if (num < 0) { throw new Error(`Error: Can't Romanize Negative Numbers (${num})`) }\r\n  if (num === 0) { return \"0\" }\r\n  const romanRef = _romanNumerals[isUsingGroupedChars ? \"grouped\" : \"ungrouped\"];\r\n  const romanNum = stringifyNum(num)\r\n    .split(\"\")\r\n    .reverse()\r\n    .map((digit, i) => romanRef[i][pInt(digit)])\r\n    .reverse()\r\n    .join(\"\");\r\n  return isUsingGroupedChars\r\n    ? romanNum.replace(/ⅩⅠ/gu, \"Ⅺ\").replace(/ⅩⅡ/gu, \"Ⅻ\")\r\n    : romanNum;\r\n};\r\n// #endregion _______ Numbers _______\r\n// #endregion ░░░░[Formatting]░░░░\r\n// #region ░░░░░░░[Content]░░░░ Lorem Ipsum, Random Content Generation, Randum UUID ░░░░░░░ ~\r\nconst loremIpsum = (numWords = 200) => {\r\n  const lrWordList = _loremIpsumText.split(/\\n?\\s+/g);\r\n  const words = [...lrWordList[randNum(0, lrWordList.length - 1)]];\r\n  while (words.length < numWords) {\r\n    words.push(...lrWordList);\r\n  }\r\n  words.length = numWords;\r\n  return `${sCase(words.join(\" \")).trim().replace(/[^a-z\\s]*$/ui, \"\")}.`;\r\n};\r\nconst randString = (length = 5) => [...new Array(length)].map(() => String.fromCharCode(randInt(...<[number, number]>[\"a\", \"z\"].map((char) => char.charCodeAt(0))))).join(\"\");\r\nconst randWord = (numWords = 1, wordList = _randomWords) => [...Array(numWords)].map(() => randElem([...wordList])).join(\" \");\r\nconst getUID = (id: string): string => {\r\n  const indexNum = Math.max(0, ...UUIDLOG.filter(([genericID]) => genericID.startsWith(id)).map(([, , num]) => num)) + 1;\r\n  const uuid = indexNum === 1 ? id : `${id}_${indexNum}`;\r\n  UUIDLOG.push([id, uuid, indexNum]);\r\n  eLog.log(`UUIDify(${id}) --> [${uuid}, ${indexNum}]`);\r\n  Object.assign(globalThis, {UUIDLOG});\r\n  return uuid;\r\n};\r\n// #endregion ░░░░[Content]░░░░\r\n// #endregion ▄▄▄▄▄ STRINGS ▄▄▄▄▄\r\n\r\n// #region ████████ SEARCHING: Searching Various Data Types w/ Fuzzy Matching ████████ ~\r\nconst fuzzyMatch = (val1: unknown, val2: unknown): boolean => {\r\n  const [str1, str2] = [val1, val2].map((val) => lCase(String(val).replace(/[^a-zA-Z0-9\\.+-]/g, \"\").trim()));\r\n  return str1.length > 0 && str1 == str2; // eslint-disable-line eqeqeq\r\n};\r\nconst isIn = (needle: unknown, haystack: unknown[] = [], fuzziness = 0) => {\r\n  // Looks for needle in haystack using fuzzy matching, then returns value as it appears in haystack.\r\n\r\n  // STEP ONE: POPULATE SEARCH TESTS ACCORDING TO FUZZINESS SETTING\r\n  const SearchTests = [\r\n    (ndl: unknown, item: unknown) => new RegExp(`^${ndl}$`, \"gu\").test(`${item}`),\r\n    (ndl: unknown, item: unknown) => new RegExp(`^${ndl}$`, \"gui\").test(`${item}`)\r\n  ];\r\n  if (fuzziness >= 1) {\r\n    const fuzzyTests = [\r\n      (ndl: unknown, item: unknown) => new RegExp(`^${ndl}`, \"gui\").test(`${item}`),\r\n      (ndl: unknown, item: unknown) => new RegExp(`${ndl}$`, \"gui\").test(`${item}`),\r\n      (ndl: unknown, item: unknown) => new RegExp(`${ndl}`, \"gui\").test(`${item}`),\r\n      (ndl: unknown, item: unknown) => new RegExp(`${item}`, \"gui\").test(`${ndl}`)\r\n    ];\r\n    SearchTests.push(...fuzzyTests);\r\n    if (fuzziness >= 2) {\r\n      SearchTests.push(...fuzzyTests\r\n        .map((func) => (ndl: unknown, item: unknown) => func(`${ndl}`.replace(/\\W/g, \"\"), `${item}`.replace(/\\W/gu, \"\"))));\r\n      if (fuzziness >= 3) {\r\n        SearchTests.push(() => false); // Have to implement Fuse matching\r\n      }\r\n    }\r\n  }\r\n\r\n  // STEP TWO: PARSE NEEDLE & CONSTRUCT SEARCHABLE HAYSTACK.\r\n  const searchNeedle = `${needle}`;\r\n  const searchStack = (() => {\r\n    if (isArray(haystack)) {\r\n      return [...haystack] as unknown[];\r\n    }\r\n    if (isList(haystack)) {\r\n      return Object.keys(haystack) as unknown[];\r\n    }\r\n    try {\r\n      return Array.from(haystack) as unknown[];\r\n    } catch {\r\n      throw new Error(`Haystack type must be [list, array], not ${typeof haystack}: ${JSON.stringify(haystack)}`);\r\n    }\r\n  })();\r\n  if (!isArray(searchStack)) { return false }\r\n\r\n  // STEP THREE: SEARCH HAY FOR NEEDLE USING PROGRESSIVELY MORE FUZZY SEARCH TESTS\r\n  let matchIndex = -1;\r\n  while (!isPosInt(matchIndex)) {\r\n    const testFunc = SearchTests.shift();\r\n    if (!testFunc) {\r\n      return false;\r\n    }\r\n    matchIndex = searchStack.findIndex((item) => testFunc(searchNeedle, `${item}`));\r\n  }\r\n  if (isPosInt(matchIndex)) {\r\n    return isList(haystack) ? Object.values(haystack)[matchIndex] : haystack[matchIndex];\r\n  }\r\n  return false;\r\n};\r\nconst isInExact = (needle: unknown, haystack: unknown[]) => isIn(needle, haystack, 0);\r\n// #endregion ▄▄▄▄▄ SEARCHING ▄▄▄▄▄\r\n\r\n// #region ████████ NUMBERS: Number Casting, Mathematics, Conversion ████████ ~\r\nconst randNum = (min: number, max: number, snap = 0): number => gsap.utils.random(min, max, snap);\r\nconst randInt = (min: number, max: number) => randNum(min, max, 1);\r\nconst coinFlip = () => randNum(0, 1, 1) === 1;\r\nconst cycleNum = (num: number, [min = 0, max = Infinity] = []): number => gsap.utils.wrap(min, max, num);\r\nconst clampNum = (num: number, [min = 0, max = Infinity] = []): number => gsap.utils.clamp(min, max, num);\r\nconst cycleAngle = (angle: number, range: [number, number] = [0, 360]) => cycleNum(angle, range);\r\nconst roundNum = (num: number, sigDigits: posInt = 0) => (sigDigits === 0 ? pInt(num) : pFloat(num, sigDigits));\r\nconst sum = (...nums: Array<number | number[]/* | Record<key,number > */>) => Object.values(nums.flat()).reduce((num, tot) => tot + num, 0);\r\nconst average = (...nums: Array<number | number[]>) => sum(...nums) / nums.flat().length;\r\n// #region ░░░░░░░[Positioning]░░░░ Relationships On 2D Cartesian Plane ░░░░░░░ ~\r\nconst getDistance = ({x: x1, y: y1}: Point, {x: x2, y: y2}: Point) => (((x1 - x2) ** 2) + ((y1 - y2) ** 2)) ** 0.5;\r\nconst getAngle = (\r\n  {x: x1, y: y1}: Point,\r\n  {x: x2, y: y2}: Point,\r\n  {x: xO, y: yO}: Point = {x: 0, y: 0},\r\n  range: [number, number] = [0, 360]\r\n) => {\r\n  x1 -= xO; y1 -= yO; x2 -= xO; y2 -= yO;\r\n  return cycleAngle(radToDeg(Math.atan2(y2 - y1, x2 - x1)), range);\r\n};\r\nconst getAngleDelta = (angleStart: number, angleEnd: number, range: [number, number] = [0, 360]) => cycleAngle(angleEnd - angleStart, range);\r\n// #endregion ░░░░[Positioning]░░░░\r\n// #endregion ▄▄▄▄▄ NUMBERS ▄▄▄▄▄\r\n\r\n// #region ████████ ARRAYS: Array Manipulation ████████ ~\r\nconst randElem = <Type>(array: Type[]): Type => gsap.utils.random(array);\r\nconst randIndex = (array: unknown[]): posInt => randInt(0, array.length - 1);\r\nconst makeIntRange = (min: int, max: int) => {\r\n  const intRange: int[] = [];\r\n  for (let i = min; i <= max; i++) {\r\n    intRange.push(i);\r\n  }\r\n  return intRange;\r\n};\r\nconst makeCycler = (array: unknown[], index = 0): Generator => {\r\n  // Given an array and a starting index, returns a generator function that can be used\r\n  // to iterate over the array indefinitely, or wrap out-of-bounds index values\r\n  const wrapper = gsap.utils.wrap(array);\r\n  index--;\r\n  return (function* cycler() {\r\n    while (true) {\r\n      index++;\r\n      yield wrapper(index);\r\n    }\r\n  }());\r\n};\r\n\r\n\r\nfunction getLast<Type extends any[]>(array: Type): ValueOf<Type> {\r\n  return array.length === 0 ? undefined : array[array.length - 1];\r\n}\r\n// const getLast = <Type>(array: Type[]): typeof array extends [] ? undefined : Type => ;\r\nconst unique = <Type>(array: Type[]): Type[] => {\r\n  const returnArray: Type[] = [];\r\n  array.forEach((item) => { if (!returnArray.includes(item)) { returnArray.push(item) } });\r\n  return returnArray;\r\n};\r\nconst group = <Type extends Record<string, unknown>>(array: Type[], key: KeyOf<Type>): Record<string & ValueOf<Type>, Type[]> => {\r\n  const returnObj: Partial<Record<string & ValueOf<Type>, Type[]>> = {};\r\n  array.forEach((item) => {\r\n    returnObj[item[key] as string & ValueOf<Type>] ??= [];\r\n    returnObj[item[key] as string & ValueOf<Type>]!.push(item);\r\n  });\r\n  return returnObj as Record<string & ValueOf<Type>, Type[]>;\r\n};\r\nconst sample = <Type extends unknown>(array: Type[], numElems = 1, isUniqueOnly?: boolean, uniqueTestFunc: (elem: Type, array: Type[]) => boolean = (e, a) => !a.includes(e)): Type[] => {\r\n  const elems: Type[] = [];\r\n  let overloadCounter = 0;\r\n  while (elems.length < numElems && overloadCounter < 1_000_000) {\r\n    const randomElem = randElem(array);\r\n    if (uniqueTestFunc(randomElem, elems)) {\r\n      elems.push(randomElem);\r\n    }\r\n    overloadCounter++;\r\n  }\r\n  return elems;\r\n};\r\nconst removeFirst = (array: unknown[], element: unknown) => array.splice(array.findIndex((v) => v === element));\r\n\r\n\r\nfunction pullElement<T extends any>(array: T[], checkFunc: (_v: T, _i?: number, _a?: T[]) => boolean): T|undefined {\r\n  const index = array.findIndex((v, i, a) => checkFunc(v, i, a));\r\n  if (index === -1) { return undefined }\r\n  return array.splice(index, 1).pop();\r\n}\r\n\r\nconst oldpullElement = <T extends any>(array: T[], checkFunc = (_v: T = true as any, _i = 0, _a: T[] = []) => { checkFunc(_v, _i, _a) }): T|false => {\r\n  const index = array.findIndex((v, i, a) => checkFunc(v, i, a));\r\n  return (index !== -1 && array.splice(index, 1).pop()) ?? false;\r\n};\r\nconst pullIndex = (array: unknown[], index: posInt) => pullElement(array, (v, i) => i === index);\r\nconst subGroup = (array: unknown[], groupSize: posInt) => {\r\n  const subArrays = [];\r\n  while (array.length > groupSize) {\r\n    const subArray = [];\r\n    while (subArray.length < groupSize) {\r\n      subArray.push(array.shift());\r\n    }\r\n    subArrays.push(subArray);\r\n  }\r\n  subArrays.push(array);\r\n};\r\nconst shuffle = (array: unknown[]) => {\r\n  let currentIndex = array.length, randomIndex;\r\n\r\n  // While there remain elements to shuffle.\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element.\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n};\r\n// #endregion ▄▄▄▄▄ ARRAYS ▄▄▄▄▄\r\n\r\n// #region ████████ OBJECTS: Manipulation of Simple Key/Val Objects ████████ ~\r\n\r\nconst checkVal = ({k, v}: { k?: unknown, v?: unknown }, checkTest: checkTest) => {\r\n  if (typeof checkTest === \"function\") {\r\n    if (isDefined(v)) { return checkTest(v, k) }\r\n    return checkTest(k);\r\n  }\r\n  if (typeof checkTest === \"number\") {\r\n    checkTest = `${checkTest}`;\r\n  }\r\n  return (new RegExp(checkTest)).test(`${v}`);\r\n};\r\nconst remove = (obj: Index<unknown>, checkTest: testFunc<keyFunc | valFunc>|number|string) => {\r\n  // Given an array or list and a search function, will remove the first matching element and return it.\r\n  if (isArray(obj)) {\r\n    const index = obj.findIndex((v) => checkVal({v}, checkTest));\r\n    if (index >= 0) {\r\n      let remVal;\r\n      for (let i = 0; i <= obj.length; i++) {\r\n        if (i === index) {\r\n          remVal = obj.shift();\r\n        } else {\r\n          obj.push(obj.shift());\r\n        }\r\n      }\r\n      return remVal;\r\n    }\r\n  } else if (isList(obj)) {\r\n    const [remKey] = Object.entries(obj).find(([k, v]) => checkVal({k, v}, checkTest)) ?? [];\r\n    if (remKey) {\r\n      const remVal = obj[remKey];\r\n      // const {[remKey]: remVal} = obj;\r\n      delete obj[remKey];\r\n      return remVal;\r\n    }\r\n  }\r\n  return false;\r\n};\r\nconst replace = (obj: Index<unknown>, checkTest: checkTest, repVal: unknown) => {\r\n  // As remove, except instead replaces the element with the provided value.\r\n  // Returns true/false to indicate whether the replace action succeeded.\r\n  let repKey;\r\n  if (isList(obj)) {\r\n    [repKey] = Object.entries(obj).find((v) => checkVal({v}, checkTest)) || [false];\r\n    if (repKey === false) { return false }\r\n  } else if (isArray(obj)) {\r\n    repKey = obj.findIndex((v) => checkVal({v}, checkTest));\r\n    if (repKey === -1) { return false }\r\n  }\r\n  if (typeof repKey !== \"number\") {\r\n    repKey = `${repKey}`;\r\n  }\r\n  if (typeof repVal === \"function\") {\r\n    // @ts-expect-error Hopefully just temporary to get this to compile: Need to figure out how to properly define testFunc<keyFunc | valFunc> (keyFunc/valFunc types?)\r\n    obj[repKey] = repVal(obj[repKey], repKey);\r\n  } else {\r\n    // @ts-expect-error Hopefully just temporary to get this to compile: Need to figure out how to properly define testFunc<keyFunc | valFunc> (keyFunc/valFunc types?)\r\n    obj[repKey] = repVal;\r\n  }\r\n  return true;\r\n};\r\n/**\r\n * Cleans an object or value by removing specified values recursively.\r\n *\r\n * @template T - The type of the input object or value.\r\n * @param {T} data - The object or value to be cleaned.\r\n * @param {Array<any>} [remVals] - An array of values to be removed during the cleaning process.\r\n * @returns {T | Partial<T> | \"KILL\"} - The cleaned version of the input object or value. If marked for removal, returns \"KILL\".\r\n */\r\nconst objClean = <T>(data: T, remVals: Array<false | null | undefined | \"\" | 0 | Record<string, never> | never[]> = [undefined, null, \"\", {}, []]): T | Partial<T> | \"KILL\" => {\r\n  const remStrings = remVals.map((rVal) => JSON.stringify(rVal));\r\n  if (remStrings.includes(JSON.stringify(data)) || remVals.includes(data as ValueOf<typeof remVals>)) { return \"KILL\" }\r\n  if (Array.isArray(data)) {\r\n    const newData = data.map((elem) => objClean(elem, remVals))\r\n      .filter((elem) => elem !== \"KILL\") as T & any[];\r\n    return newData.length ? newData : \"KILL\";\r\n  }\r\n  if (data && typeof data === \"object\" && JSON.stringify(data).startsWith(\"{\")) {\r\n    const newData = Object.entries(data)\r\n      .map(([key, val]) => [key, objClean(val, remVals)])\r\n      .filter(([, val]) => val !== \"KILL\");\r\n    return newData.length ? Object.fromEntries(newData) : \"KILL\";\r\n  }\r\n  return data;\r\n};\r\n\r\n\r\nexport function toDict<T extends List, K extends string & KeyOf<T>, V extends ValueOf<T>>(items: T[], key: K): V extends key ? Record<V, T> : never {\r\n  const dict = {} as Record<V, T>;\r\n  const mappedItems = items\r\n    .map((data) => {\r\n      let {iData} = data;\r\n      if (!iData) { iData = data }\r\n      return [\r\n        `${(iData.linkName || iData.sourceItem?.name) ? `>${iData.type.charAt(0)}>` : \"\"}${iData[key]}`,\r\n        iData\r\n      ];\r\n    })\r\n    .sort(([a], [b]) => a.localeCompare(b)) as Array<[string, T]>;\r\n  mappedItems.forEach(([newKey, iData]: [string, T]) => {\r\n    if (newKey in dict) {\r\n      newKey = indexString(newKey) as V;\r\n    }\r\n    dict[newKey as KeyOf<typeof dict>] = iData;\r\n  });\r\n  // @ts-expect-error Oh it definitely does.\r\n  return dict;\r\n\r\n  function indexString(str: string) {\r\n    if (/_\\d+$/.test(str)) {\r\n      const [curIndex, ...subStr] = str.split(/_/).reverse();\r\n      return [\r\n        ...subStr.reverse(),\r\n        parseInt(curIndex) + 1\r\n      ].join(\"_\");\r\n    }\r\n    return `${str}_1`;\r\n  }\r\n}\r\n// Given an object and a predicate function, returns array of two objects:\r\n//   one with entries that pass, one with entries that fail.\r\nconst partition = <Type>(obj: Type[], predicate: testFunc<valFunc> = () => true): [Type[], Type[]] => [\r\n  objFilter(obj, predicate),\r\n  objFilter(obj, (v: unknown, k: string | number | undefined) => !predicate(v, k))\r\n];\r\nfunction objMap(obj: Index<unknown>, keyFunc: mapFunc<keyFunc> | mapFunc<valFunc> | false, valFunc?: mapFunc<valFunc>): Index<unknown> {\r\n  // An object-equivalent Array.map() function, which accepts mapping functions to transform both keys and values.\r\n  // If only one function is provided, it's assumed to be mapping the values and will receive (v, k) args.\r\n  if (!valFunc) {\r\n    valFunc = keyFunc as mapFunc<valFunc>;\r\n    keyFunc = false;\r\n  }\r\n  if (!keyFunc) {\r\n    keyFunc = ((k: unknown) => k);\r\n  }\r\n  if (isArray(obj)) { return obj.map(valFunc) }\r\n  return Object.fromEntries(Object.entries(obj).map(([key, val]) => [(<mapFunc<keyFunc>>keyFunc)(key, val), (<mapFunc<valFunc>>valFunc)(val, key)]));\r\n}\r\nconst objSize = (obj: Index<unknown>) => Object.values(obj).filter((val) => val !== undefined && val !== null).length;\r\nconst objFindKey = <Type extends Index<unknown>>(obj: Type, keyFunc: testFunc<keyFunc> | testFunc<valFunc> | false, valFunc?: testFunc<valFunc>): KeyOf<Type> | false => {\r\n  // An object-equivalent Array.findIndex() function, which accepts check functions for both keys and/or values.\r\n  // If only one function is provided, it's assumed to be searching via values and will receive (v, k) args.\r\n  if (!valFunc) {\r\n    valFunc = keyFunc as testFunc<valFunc>;\r\n    keyFunc = false;\r\n  }\r\n  if (!keyFunc) {\r\n    keyFunc = <testFunc<keyFunc>>((k: unknown) => k);\r\n  }\r\n  if (isArray(obj)) { return obj.findIndex(valFunc) }\r\n  const kFunc = keyFunc || (() => true);\r\n  const vFunc = valFunc || (() => true);\r\n  const validEntry = Object.entries(obj).find(([k, v]) => kFunc(k, v) && vFunc(v, k));\r\n  if (validEntry) {\r\n    return validEntry[0] as KeyOf<Type>;\r\n  }\r\n  return false;\r\n};\r\nconst objFilter = <Type extends Index<unknown>>(obj: Type, keyFunc: testFunc<keyFunc> | testFunc<valFunc> | false, valFunc?: testFunc<valFunc>): Type => {\r\n  // An object-equivalent Array.filter() function, which accepts filter functions for both keys and/or values.\r\n  // If only one function is provided, it's assumed to be mapping the values and will receive (v, k) args.\r\n  if (!valFunc) {\r\n    valFunc = keyFunc as testFunc<valFunc>;\r\n    keyFunc = false;\r\n  }\r\n  if (!keyFunc) {\r\n    keyFunc = <testFunc<keyFunc>>((k: unknown) => k);\r\n  }\r\n  if (isArray(obj)) { return obj.filter(valFunc) as Type }\r\n  const kFunc = keyFunc || (() => true);\r\n  const vFunc = valFunc || (() => true);\r\n  return Object.fromEntries(Object.entries(obj).filter(([key, val]: [string, unknown]) => kFunc(key, val) && vFunc(val, key))) as Type;\r\n};\r\nconst objForEach = (obj: Index<unknown>, func: valFunc): void => {\r\n  // An object-equivalent Array.forEach() function, which accepts one function(val, key) to perform for each member.\r\n  if (isArray(obj)) {\r\n    obj.forEach(func);\r\n  } else {\r\n    Object.entries(obj).forEach(([key, val]) => func(val, key));\r\n  }\r\n};\r\n// Prunes an object of given set of values, [undefined, null] default\r\nconst objCompact = <Type extends (Index<unknown>)>(obj: Type, remove: unknown[] = [undefined, null]): Type => objFilter(obj, (val: unknown) => !remove.includes(val));\r\nconst objClone = <Type>(obj: Type, isStrictlySafe = false): Type => {\r\n  try {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  } catch (err) {\r\n    if (isStrictlySafe) { throw err }\r\n    if (isArray(obj)) { return <Type><unknown>[...obj] }\r\n    if (isList(obj)) { return {...obj} }\r\n  }\r\n  return obj;\r\n};\r\nfunction objMerge<Tx, Ty>(target: Tx, source: Ty, {isMutatingOk = false, isStrictlySafe = false, isConcatenatingArrays = true, isReplacingArrays = false} = {}): Tx & Ty {\r\n  /* Returns a deep merge of source into target. Does not mutate target unless isMutatingOk = true. */\r\n  target = isMutatingOk ? target : objClone(target, isStrictlySafe);\r\n  if (source instanceof Application) {\r\n    return source as unknown as Tx & Ty;\r\n  }\r\n  if (isUndefined(target)) {\r\n    return objClone(source) as Tx & Ty;\r\n  }\r\n  if (isUndefined(source)) {\r\n    return target as Tx & Ty;\r\n  }\r\n  if (isIndex(source)) {\r\n    for (const [key, val] of Object.entries(source)) {\r\n      const targetVal = target[key as KeyOf<typeof target>];\r\n      if (isReplacingArrays && isArray(target[key as KeyOf<typeof target>]) && isArray(val)) {\r\n        target[key as KeyOf<typeof target>] = val as Tx[KeyOf<Tx>];\r\n      } else if (isConcatenatingArrays && isArray(target[key as KeyOf<typeof target>]) && isArray(val)) {\r\n        (target[key as KeyOf<typeof target>] as unknown as any[]).push(...val);\r\n      } else if (val !== null && typeof val === \"object\") {\r\n        if (isUndefined(targetVal) && !(val instanceof Application)) {\r\n          // @ts-expect-error TS doesn't recognize __proto__.\r\n          target[key as KeyOf<typeof target>] = new val.__proto__.constructor();\r\n        }\r\n        target[key as KeyOf<typeof target>] = objMerge(target[key as KeyOf<typeof target>], val, {isMutatingOk: true, isStrictlySafe});\r\n      } else {\r\n        target[key as KeyOf<typeof target>] = val as Tx[KeyOf<Tx>];\r\n      }\r\n    }\r\n  }\r\n  return target as Tx & Ty;\r\n}\r\n/* Write typescript function objDiff(obj1, obj2) (using appropriate typescript generics to avoid implicit any). The function\r\n    should deep-compare obj1 and obj2 and return an object containing only the keys and values in obj2 that differ from obj1. Where obj2 is missing a key or value contained in obj1, it should set the value in the returned object to null, and prefix the key with \"-=\" */\r\nfunction objDiff(obj1: any, obj2: any): any {\r\n  const diff: any = {};\r\n  for (const key in obj2) {\r\n    if (Object.prototype.hasOwnProperty.call(obj2, key)) {\r\n      if (Object.prototype.hasOwnProperty.call(obj1, key)) {\r\n        if (typeof obj1[key] === \"object\" && typeof obj2[key] === \"object\" && !Array.isArray(obj1[key]) && !Array.isArray(obj2[key])) {\r\n          const nestedDiff = objDiff(obj1[key], obj2[key]);\r\n          if (Object.keys(nestedDiff).length > 0) {\r\n            diff[key] = nestedDiff;\r\n          }\r\n        } else if (Array.isArray(obj1[key]) && Array.isArray(obj2[key]) && obj1[key].toString() !== obj2[key].toString()) {\r\n          diff[key] = obj2[key];\r\n        } else if (obj1[key] !== obj2[key]) {\r\n          diff[key] = obj2[key];\r\n        }\r\n      } else {\r\n        diff[\"-=\" + key] = obj2[key];\r\n      }\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n\r\nconst objExpand = <T>(obj: List<T>): List<T> => {\r\n  const expObj = {};\r\n  for (let [key, val] of Object.entries(obj)) {\r\n    if (isList(val)) {\r\n      val = objExpand(val) as T;\r\n    }\r\n    setProperty(expObj, key, val);\r\n  }\r\n  // Iterate through expanded Object, converting object literals to arrays where it makes sense\r\n  function arrayify<X>(obj: Index<X> | X): Index<X> | X {\r\n    if (isList(obj)) {\r\n      if (/^\\d+$/.test(Object.keys(obj).join(\"\"))) {\r\n        return Object.values(obj).map(arrayify) as X[];\r\n      }\r\n      return objMap(obj, (v: unknown): unknown => arrayify(v)) as List<X>;\r\n    }\r\n    if (isArray(obj)) {\r\n      return obj.map(arrayify) as X[];\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  return arrayify(expObj) as List<T>;\r\n};\r\nconst objFlatten = <ST extends any = any>(obj: Index<ST>): Record<string, ST> => {\r\n  const flatObj: Record<string, ST> = {};\r\n  for (const [key, val] of Object.entries(obj)) {\r\n    if ((isArray(val) || isList(val)) && hasItems(val)) {\r\n      for (const [subKey, subVal] of Object.entries(objFlatten(val)) as Array<[string, ST]>) {\r\n        flatObj[`${key}.${subKey}`] = subVal;\r\n      }\r\n    } else {\r\n      flatObj[key] = val;\r\n    }\r\n  }\r\n  return flatObj;\r\n};\r\n\r\nfunction objNullify<T extends List<any>>(obj: T & Record<KeyOf<T>, null>): Record<KeyOf<T>, null>\r\nfunction objNullify<T extends any[]>(obj: T & null[]): null[]\r\nfunction objNullify<T>(obj: T): Record<KeyOf<T>, null> | null[] | T {\r\n  if (!isIndex(obj)) { return obj }\r\n  if (Array.isArray(obj)) {\r\n    for (let i = 0; i < obj.length; i++) {\r\n      obj[i] = null as ValueOf<T>;\r\n    }\r\n    return obj as null[];\r\n  }\r\n  const test = obj as Record<KeyOf<T>, null>;\r\n  for (const objKey of Object.keys(obj) as Array<KeyOf<T>>) {\r\n    (<Record<KeyOf<T>, null>>obj)[objKey] = null;\r\n  }\r\n  return obj;\r\n}\r\n// #endregion ▄▄▄▄▄ OBJECTS ▄▄▄▄▄\r\n\r\n// #region ████████ FUNCTIONS: Function Wrapping, Queuing, Manipulation ████████ ~\r\nconst getDynamicFunc = (funcName: string, func: (...args: unknown[]) => unknown, context: object) => {\r\n  if (typeof func === \"function\") {\r\n    const dFunc = {[funcName](...args: unknown[]) { return func(...args) }}[funcName];\r\n    return context ? dFunc.bind(context) : dFunc;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst withLog = (fn: (...args: unknown[]) => unknown) => {\r\n  return (...args: unknown[]) => {\r\n    console.log(`calling ${fn.name}`);\r\n    return fn(...args);\r\n  };\r\n};\r\n// #endregion ▄▄▄▄▄ FUNCTIONS ▄▄▄▄▄\r\n\r\n// #region ████████ HTML: Parsing HTML Code, Manipulating DOM Objects ████████ ~\r\n\r\n// #region ░░░░░░░[GreenSock]░░░░ Wrappers for GreenSock Functions ░░░░░░░ ~\r\nconst set = (targets: gsap.TweenTarget, vars: gsap.TweenVars): gsap.core.Tween => gsap.set(targets, vars);\r\nfunction get(target: gsap.TweenTarget, property: keyof gsap.CSSProperties & string, unit: string): number;\r\nfunction get(target: gsap.TweenTarget, property: keyof gsap.CSSProperties & string): string | number;\r\nfunction get(target: gsap.TweenTarget, property: keyof gsap.CSSProperties & string, unit?: string): string | number {\r\n  if (unit) {\r\n    const propVal = regExtract(gsap.getProperty(target, property, unit), /[\\d.]+/);\r\n    if (typeof propVal === \"string\") {\r\n      return pFloat(propVal);\r\n    }\r\n    throw new Error(`Unable to extract property '${property}' in '${unit}' units from ${target}`);\r\n  }\r\n  return gsap.getProperty(target, property);\r\n}\r\n\r\nconst getGSAngleDelta = (startAngle: number, endAngle: number) => signNum(roundNum(getAngleDelta(startAngle, endAngle), 2)).replace(/^(.)/, \"$1=\");\r\n// #endregion ░░░░[GreenSock]░░░░\r\n\r\n// #region ░░░░░░░[SVG]░░░░ SVG Generation & Manipulation ░░░░░░░ ~\r\nconst getRawCirclePath = (r: number, {x: xO, y: yO}: Point = {x: 0, y: 0}): Array<Array<number | string>> => {\r\n  [r, xO, yO] = [r, xO, yO].map((val) => roundNum(val, 2));\r\n  const [b1, b2] = [0.4475 * r, (1 - 0.4475) * r];\r\n  const [xT, yT] = [xO, yO - r];\r\n  return [[\r\n    ...[xT, yT],\r\n    ...[b2, 0, r, b1, r, r],\r\n    ...[0, b2, -b1, r, -r, r],\r\n    ...[-b2, 0, -r, -b1, -r, -r],\r\n    ...[0, -b2, b1, -r, r, -r]\r\n  ]];\r\n};\r\nconst drawCirclePath = (radius: number, origin: Point) => {\r\n  const [[xT, yT, ...segments]] = getRawCirclePath(radius, origin);\r\n  const path: Array<number | string> = [`m ${xT} ${yT}`];\r\n  segments.forEach((coord, i) => {\r\n    if (i % 6 === 0) { path.push(\"c\") }\r\n    path.push(coord);\r\n  });\r\n  path.push(\"z\");\r\n  return path.join(\" \");\r\n};\r\n// #endregion ░░░░[SVG]░░░░\r\n\r\n// #region ░░░░░░░[Colors]░░░░ Color Manipulation ░░░░░░░ ~\r\nconst getColorVals = (red?: string | number | number[], green?: number, blue?: number, alpha?: number): number[] | null => {\r\n  if (isRGBColor(red)) {\r\n    [red, green, blue, alpha] = red\r\n      .replace(/[^\\d.,]/g, \"\")\r\n      .split(/,/)\r\n      .map((color) => (isUndefined(color) ? undefined : parseFloat(color)));\r\n  }\r\n  if (isHexColor(red)) {\r\n    if ([4, 5].includes(red.length)) {\r\n      red = red.replace(/([^#])/g, \"$1$1\");\r\n    }\r\n    [red, green, blue, alpha] = red\r\n      .match(/[^#]{2}/g)\r\n      ?.map((val) => parseInt(val, 16)) ?? [];\r\n  }\r\n  if ([red, green, blue].every((color) => /^\\d+$/.test(`${color}`))) {\r\n    return [red, green, blue, alpha]\r\n      .filter((color) => /^[\\d.]+$/.test(`${color}`)) as number[];\r\n  }\r\n  return null;\r\n};\r\nconst getRGBString = (red: string | number, green?: number, blue?: number, alpha?: number): RGBColor | null => {\r\n  if (isRGBColor(red) || isHexColor(red)) {\r\n    [red, green, blue, alpha] = getColorVals(red) ?? [];\r\n  }\r\n  if ([red, green, blue].every((color) => /^[.\\d]+$/.test(`${color}`))) {\r\n    let colorString = \"rgb\";\r\n    const colors = [red, green, blue];\r\n    if (/^[.\\d]+$/.test(`${alpha}`)) {\r\n      colors.push(alpha as number >= 1 ? pInt(alpha) : pFloat(alpha, 2));\r\n      colorString += \"a\";\r\n    }\r\n    return `${colorString}(${colors.join(\", \")})`;\r\n  }\r\n  return null;\r\n};\r\nconst getHEXString = (red: string | number, green?: number, blue?: number): HEXColor | null => {\r\n  function componentToHex(c: string | number): string {\r\n    const hex = c.toString(16);\r\n    return hex.length === 1 ? \"0\" + hex : hex;\r\n  }\r\n  if (isHexColor(red)) { return red }\r\n  if (isRGBColor(red)) {\r\n    [red, green, blue] = getColorVals(red) ?? [];\r\n  }\r\n  if (isDefined(red) && isDefined(green) && isDefined(blue) && [red, green, blue].every((color) => /^[.\\d]+$/.test(`${color}`))) {\r\n    return \"#\" + componentToHex(red ?? 0) + componentToHex(green ?? 0) + componentToHex(blue ?? 0);\r\n  }\r\n  return null;\r\n};\r\nconst getContrastingColor = (...colorVals: [string] | number[]): RGBColor | null => {\r\n  const [red, green, blue] = getColorVals(...colorVals) ?? [];\r\n  if ([red, green, blue].every(isNumber)) {\r\n    const YIQ = ((red * 299) + (green * 587) + (blue * 114)) / 1000;\r\n    return (YIQ >= 128) ? \"rgba(0, 0, 0, 1)\" : \"rgba(255, 255, 255, 0.8)\";\r\n  }\r\n  return null;\r\n};\r\nconst getRandomColor = (): RGBColor => getRGBString(gsap.utils.random(0, 255, 1), gsap.utils.random(0, 255, 1), gsap.utils.random(0, 255, 1))!;\r\n// #endregion ░░░░[Colors]░░░░\r\n\r\n// #region ░░░░░░░[DOM]░░░░ DOM Manipulation ░░░░░░░ ~\r\nconst getSiblings = (elem: Node) => {\r\n  const siblings: HTMLElement[] = [];\r\n  // if no parent, return no sibling\r\n  if (!elem.parentNode) { return siblings }\r\n\r\n  Array.from(elem.parentNode.children).forEach((sibling) => {\r\n    if (sibling !== elem) {\r\n      siblings.push(sibling as HTMLElement);\r\n    }\r\n  });\r\n\r\n  return siblings;\r\n};\r\n// #endregion ░░░░[DOM]░░░░\r\n\r\nconst escapeHTML = <T = unknown>(str: T): T => (typeof str === \"string\"\r\n  ? str\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\")\r\n    .replace(/\"/g, \"&quot;\")\r\n    .replace(/`|'/g, \"&#039;\") as T\r\n  : str);\r\n\r\n// #endregion ▄▄▄▄▄ HTML ▄▄▄▄▄\r\n\r\n// #region ████████ ASYNC: Async Functions, Asynchronous Flow Control ████████ ~\r\nconst sleep = (duration: number): Promise<void> => new Promise((resolve) => { setTimeout(resolve, duration >= 100 ? duration : duration * 1000) });\r\n// #endregion ▄▄▄▄▄ ASYNC ▄▄▄▄▄\r\n\r\n// #region ████████ FOUNDRY: Requires Configuration of System ID in constants.ts ████████ ~\r\n\r\nconst isDocID = (docRef: unknown, isUUIDok = true) => {\r\n  return typeof docRef === \"string\" && (isUUIDok\r\n    ? /^(.*\\.)?[A-Za-z0-9]{16}$/.test(docRef)\r\n    : /^[A-Za-z0-9]{16}$/.test(docRef));\r\n};\r\n\r\nconst loc = (locRef: string, formatDict: Record<string, string> = {}) => {\r\n  if (/[a-z]/.test(locRef)) { // reference contains lower-case characters: add system ID namespacing to dot notation\r\n    locRef = locRef.replace(new RegExp(`^(${C.SYSTEM_ID}\\.)*`), `${C.SYSTEM_ID}.`);\r\n  }\r\n  if (typeof game.i18n.localize(locRef) === \"string\") {\r\n    for (const [key, val] of Object.entries(formatDict)) {\r\n      formatDict[key] = loc(val);\r\n    }\r\n    return game.i18n.format(locRef, formatDict) || game.i18n.localize(locRef) || locRef;\r\n  }\r\n  return locRef;\r\n};\r\n\r\nconst getSetting = (setting: string) => game.settings.get(C.SYSTEM_ID, setting);\r\n\r\nfunction getTemplatePath(subFolder: string, fileName: string): string\r\nfunction getTemplatePath(subFolder: string, fileName: string[]): string[]\r\nfunction getTemplatePath(subFolder: string, fileName: string | string[]) {\r\n  if (typeof fileName === \"string\") {\r\n    return `${C.TEMPLATE_ROOT}/${subFolder}/${fileName.replace(/\\..*$/, \"\")}.hbs`;\r\n  }\r\n  return fileName.map((fName) => getTemplatePath(subFolder, fName));\r\n}\r\n\r\n// displayImageSelector: Displays a file selector in tiles mode at the indicated path root.\r\nfunction displayImageSelector(\r\n  callback: (path: string) => Promise<unknown>,\r\n  pathRoot = `systems/${C.SYSTEM_ID}/assets`,\r\n  position: {top: number|null, left: number|null} = {top: 200, left: 200}\r\n) {\r\n  const fp = new FilePicker({\r\n    type: \"image\",\r\n    activeSource: \"public\",\r\n    displayMode: \"tiles\",\r\n    callback,\r\n    top: position.top ?? 200 + 40,\r\n    left: position.left ?? 200 + 10\r\n  });\r\n  return fp.browse(pathRoot);\r\n}\r\n\r\n// #endregion ▄▄▄▄▄ FOUNDRY ▄▄▄▄▄\r\n\r\nexport default {\r\n  // ████████ GETTERS: Basic Data Lookup & Retrieval ████████\r\n  GMID, getUID,\r\n\r\n  // ████████ TYPES: Type Checking, Validation, Conversion, Casting ████████\r\n  isNumber, isSimpleObj, isList, isArray, isFunc, isInt, isFloat, isPosInt, isIterable,\r\n  isHTMLCode, isRGBColor, isHexColor,\r\n  isUndefined, isDefined, isEmpty, hasItems, isInstance,\r\n  areEqual,\r\n  pFloat, pInt, radToDeg, degToRad,\r\n  getKey,\r\n\r\n  FILTERS,\r\n\r\n  // ████████ REGEXP: Regular Expressions, Replacing, Matching ████████\r\n  testRegExp,\r\n  regExtract,\r\n\r\n  // ████████ STRINGS: String Parsing, Manipulation, Conversion ████████\r\n  // ░░░░░░░ Case Conversion ░░░░░░░\r\n  uCase, lCase, sCase, tCase,\r\n  // ░░░░░░░ Formatting ░░░░░░░\r\n  /* hyphenate, */ unhyphenate, pluralize, oxfordize, ellipsize, pad,\r\n  toKey,\r\n  parseArticles,\r\n  signNum, padNum, stringifyNum, verbalizeNum, ordinalizeNum, romanizeNum,\r\n  // ░░░░░░░ Content ░░░░░░░\r\n  loremIpsum, randString, randWord,\r\n\r\n  // ████████ SEARCHING: Searching Various Data Types w/ Fuzzy Matching ████████\r\n  fuzzyMatch, isIn, isInExact,\r\n\r\n  // ████████ NUMBERS: Number Casting, Mathematics, Conversion ████████\r\n  randNum, randInt,\r\n  coinFlip,\r\n  cycleNum, cycleAngle, roundNum, clampNum,\r\n  sum, average,\r\n  // ░░░░░░░ Positioning ░░░░░░░\r\n  getDistance,\r\n  getAngle, getAngleDelta,\r\n\r\n  // ████████ ARRAYS: Array Manipulation ████████\r\n  randElem, randIndex,\r\n  makeIntRange,\r\n  makeCycler,\r\n  unique, group, sample,\r\n  getLast, removeFirst, pullElement, pullIndex,\r\n  subGroup, shuffle,\r\n\r\n  // ████████ OBJECTS: Manipulation of Simple Key/Val Objects ████████\r\n  remove, replace, partition,\r\n  objClean, objSize, objMap, objFindKey, objFilter, objForEach, objCompact,\r\n  objClone, objMerge, objDiff, objExpand, objFlatten, objNullify,\r\n\r\n  // ████████ FUNCTIONS: Function Wrapping, Queuing, Manipulation ████████\r\n  getDynamicFunc, withLog,\r\n\r\n  // ████████ HTML: Parsing HTML Code, Manipulating DOM Objects ████████\r\n  // ░░░░░░░ GreenSock ░░░░░░░\r\n  gsap, get, set, getGSAngleDelta,\r\n\r\n  getRawCirclePath, drawCirclePath,\r\n\r\n  getColorVals, getRGBString, getHEXString, getContrastingColor, getRandomColor,\r\n\r\n  getSiblings,\r\n\r\n  escapeHTML,\r\n\r\n  // ████████ ASYNC: Async Functions, Asynchronous Flow Control ████████\r\n  sleep,\r\n\r\n  // ░░░░░░░ SYSTEM: System-Specific Functions (Requires Configuration of System ID in constants.js) ░░░░░░░\r\n  isDocID, loc, getSetting, getTemplatePath, displayImageSelector\r\n};\r\n// #endregion ▄▄▄▄▄ EXPORTS ▄▄▄▄▄"]}