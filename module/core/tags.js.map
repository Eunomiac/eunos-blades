{"version":3,"sources":["../../ts/core/tags.ts"],"names":[],"mappings":"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","file":"tags.js","sourcesContent":["import Tagify from \"../../lib/tagify/tagify.esm.js\";\r\nimport {Tag, District, MainDistrict, OtherDistrict, Vice, Playbook, BladesActorType} from \"./constants.js\";\r\nimport U from \"./utilities.js\";\r\n\r\nasync function _onTagifyChange(event: Event, doc: BladesDoc, targetKey: keyof BladesDoc) {\r\n  const tagString = (event.target as HTMLInputElement).value;\r\n  if (tagString) {\r\n    const tags: BladesTag[] = JSON.parse(tagString).map(({value}: { value: BladesTag }) => value);\r\n    doc.update({[targetKey]: tags});\r\n  } else {\r\n    doc.update({[targetKey]: []});\r\n  }\r\n}\r\n\r\nconst Tags = {\r\n  InitListeners: (html: JQuery<HTMLElement>, doc: BladesDoc) => {\r\n\r\n    function makeTagInput(elem: HTMLElement, tags: Record<string, BladesTag[]>) {\r\n\r\n      // Create tagify instance; populate dropdown list with tags\r\n      const tagify = new Tagify(elem, {\r\n        enforceWhitelist: true,\r\n        editTags: false,\r\n        whitelist: Object.entries(tags)\r\n          .map(([dataGroup, tagList]) => tagList\r\n            .map((tag: BladesTag) => ({\r\n              \"value\": (new Handlebars.SafeString(tag)).toString(),\r\n              \"data-group\": dataGroup\r\n            })))\r\n          .flat(),\r\n        dropdown: {\r\n          enabled: 0,\r\n          maxItems: 10000,\r\n          placeAbove: false,\r\n          appendTarget: html[0]\r\n        }\r\n      });\r\n\r\n      (tagify as any).dropdown.createListHTML = (optionsArr: Array<{ value: BladesTag; \"data-group\": string }>) => {\r\n        const map: Record<string, unknown> = {};\r\n\r\n        return structuredClone(optionsArr)\r\n          .map((suggestion, idx) => {\r\n\r\n            const value = (tagify as any).dropdown.getMappedValue.call(\r\n              tagify,\r\n              suggestion\r\n            );\r\n            let tagHTMLString = \"\";\r\n\r\n            if (!map[suggestion[\"data-group\"]]) {\r\n              map[suggestion[\"data-group\"]] = true;\r\n\r\n              if (Object.keys(map).length) {\r\n                tagHTMLString += \"</div>\";\r\n              }\r\n\r\n              tagHTMLString += `\r\n                <div class=\"tagify__dropdown__itemsGroup\">\r\n                <h3>${suggestion[\"data-group\"]}</h3>\r\n              `;\r\n            }\r\n\r\n            suggestion.value\r\n              = value && typeof value === \"string\" ? U.escapeHTML(value) : value;\r\n\r\n            tagHTMLString += tagify.settings.templates.dropdownItem.apply(\r\n              tagify,\r\n              [suggestion, idx]\r\n            );\r\n\r\n            return tagHTMLString;\r\n          })\r\n          .join(\"\");\r\n      };\r\n\r\n      // Add existing tags on doc to tag element\r\n      function findDataGroup(tag: BladesTag|string): string|false {\r\n        for (const [group, tagList] of Object.entries(tags)) {\r\n          if (tagList.includes(tag)) { return group }\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Check if element specifies an alternate schema target from doc.tags\r\n      const targetKey = $(elem).data(\"tagTarget\") ?? \"system.tags\";\r\n      const curTags = [getProperty(doc, targetKey) ?? []].flat().filter(Boolean);\r\n      // eLog.checkLog(\"tags\", \"Current Tags\", curTags);\r\n      tagify.addTags(\r\n        curTags\r\n          .filter(findDataGroup)\r\n          .map((tag: BladesTag) => ({\r\n            \"value\": (new Handlebars.SafeString(tag)).toString(),\r\n            \"data-group\": findDataGroup(tag)\r\n          })),\r\n        true,\r\n        true\r\n      );\r\n\r\n      // Add event listener for tag changes, setting defined target\r\n      // Wait briefly, so other tag elements' tags can be set before listener initializes\r\n      setTimeout(() => elem.addEventListener(\"change\", (event) => _onTagifyChange(event, doc, targetKey)), 1000);\r\n    }\r\n\r\n    const systemTags = {\r\n      \"System Tags\": Object.values(Tag.System),\r\n      \"Gear Tags\": [\r\n        ...Object.values(Tag.Gear),\r\n        ...Object.values(Tag.GearCategory)\r\n      ],\r\n      \"Actor Tags\": [\r\n        ...Object.values(Tag.PC),\r\n        ...Object.values(Tag.NPC)\r\n      ],\r\n      \"Vices\": Object.values(Vice),\r\n      \"Playbooks\": Object.values(Playbook),\r\n      \"Inventions\": Object.values(Tag.Invention),\r\n      \"Gang Types\": Object.values(Tag.GangType)\r\n    };\r\n    const districtTags = {\r\n      \"City Districts\": Object.values(MainDistrict),\r\n      \"Other Districts\": Object.values(OtherDistrict)\r\n    };\r\n    const factionTags = {Factions: game.actors\r\n      .filter((actor): actor is BladesActorOfType<BladesActorType.faction> & {name: string} => actor.type === BladesActorType.faction && actor.name !== null)\r\n      .map((faction) => faction.name)};\r\n\r\n    $(html).find(\".tags-gm\").each((_, e) => makeTagInput(e, systemTags));\r\n\r\n    $(html).find(\".tags-district\").each((_, e) => makeTagInput(e, districtTags));\r\n\r\n    $(html).find(\".tags-faction\").each((_, e) => makeTagInput(e, factionTags));\r\n\r\n  }\r\n};\r\n\r\nexport default Tags;"]}