{"version":3,"sources":["../../ts/blades-item.ts"],"names":[],"mappings":"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","file":"blades-item.js","sourcesContent":["import C, {SVGDATA, BladesActorType, BladesItemType, Tag, BladesPhase, RollModCategory, PrereqType, Factor, RollModStatus} from \"./core/constants.js\";\r\nimport U from \"./core/utilities.js\";\r\nimport BladesActor from \"./blades-actor.js\";\r\nimport BladesPC from \"./documents/actors/blades-pc.js\";\r\nimport BladesNPC from \"./documents/actors/blades-npc.js\";\r\nimport BladesFaction from \"./documents/actors/blades-faction.js\";\r\nimport BladesCrew from \"./documents/actors/blades-crew.js\";\r\nimport BladesRollCollab from \"./blades-roll-collab.js\";\r\nimport type {ItemDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/itemData.js\";\r\n\r\nclass BladesItem extends Item implements BladesDocument<Item>,\r\n                                          BladesItemSubClass.Ability,\r\n                                          BladesItemSubClass.Background,\r\n                                          BladesItemSubClass.Cohort_Gang,\r\n                                          BladesItemSubClass.Cohort_Expert,\r\n                                          BladesItemSubClass.Crew_Ability,\r\n                                          BladesItemSubClass.Crew_Reputation,\r\n                                          BladesItemSubClass.Crew_Playbook,\r\n                                          BladesItemSubClass.Crew_Upgrade,\r\n                                          BladesItemSubClass.Feature,\r\n                                          BladesItemSubClass.Heritage,\r\n                                          BladesItemSubClass.Gear,\r\n                                          BladesItemSubClass.Playbook,\r\n                                          BladesItemSubClass.Preferred_Op,\r\n                                          BladesItemSubClass.Stricture,\r\n                                          BladesItemSubClass.Vice,\r\n                                          BladesItemSubClass.Project,\r\n                                          BladesItemSubClass.Ritual,\r\n                                          BladesItemSubClass.Design,\r\n                                          BladesRollCollab.SourceDocData,\r\n                                          BladesRollCollab.OppositionDocData {\r\n\r\n  // #region Static Overrides: Create ~\r\n  static override async create(data: ItemDataConstructorData & { system?: { world_name?: string, description?: string } }, options = {}) {\r\n    if (Array.isArray(data)) { data = data[0] }\r\n    data.system = data.system ?? {};\r\n\r\n    eLog.checkLog2(\"item\", \"BladesItem.create(data,options)\", {data, options});\r\n\r\n    //~ Create world_name\r\n    data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\r\n\r\n    return super.create(data, options);\r\n  }\r\n  // #endregion\r\n\r\n  // #region BladesDocument Implementation\r\n  static get All() { return game.items }\r\n  static Get(itemRef: ItemRef): BladesItem|undefined {\r\n    if (itemRef instanceof BladesItem) { return itemRef }\r\n    if (U.isDocID(itemRef)) { return BladesItem.All.get(itemRef) }\r\n    return BladesItem.All.find((a) => a.system.world_name === itemRef)\r\n      || BladesItem.All.find((a) => a.name === itemRef);\r\n  }\r\n  static GetTypeWithTags<T extends BladesItemType>(docType: T|T[], ...tags: BladesTag[]): Array<BladesItemOfType<T>> {\r\n    if (Array.isArray(docType)) {\r\n      return docType\r\n        .map((dType) => BladesItem.All.filter((item): item is BladesItemOfType<T> => item.type === dType))\r\n        .flat();\r\n    }\r\n    return BladesItem.All.filter((item): item is BladesItemOfType<T> => item.type === docType)\r\n      .filter((item) => item.hasTag(...tags));\r\n  }\r\n\r\n  static IsType<T extends BladesItemType>(doc: unknown, ...types: T[]): doc is BladesItemOfType<T> {\r\n    const typeSet = new Set<BladesItemType>(types);\r\n    return doc instanceof BladesItem && typeSet.has(doc.type);\r\n  }\r\n\r\n  get tags(): BladesTag[] { return this.system.tags ?? [] }\r\n  hasTag(...tags: BladesTag[]): boolean {\r\n    return tags.every((tag) => this.tags.includes(tag));\r\n  }\r\n  async addTag(...tags: BladesTag[]) {\r\n    const curTags = this.tags;\r\n    tags.forEach((tag) => {\r\n      if (curTags.includes(tag)) { return }\r\n      curTags.push(tag);\r\n    });\r\n    this.update({\"system.tags\": curTags});\r\n  }\r\n  async remTag(...tags: BladesTag[]) {\r\n    const curTags = this.tags.filter((tag) => !tags.includes(tag));\r\n    this.update({\"system.tags\": curTags});\r\n  }\r\n\r\n  get tooltip(): string|undefined {\r\n    const tooltipText = [\r\n      this.system.concept,\r\n      this.system.rules,\r\n      this.system.notes\r\n    ].filter(Boolean).join(\"\");\r\n    if (tooltipText) { return (new Handlebars.SafeString(tooltipText)).toString() }\r\n    return undefined;\r\n  }\r\n  dialogCSSClasses = \"\";\r\n\r\n  getFactorTotal(factor: Factor): number {\r\n    switch (factor) {\r\n      case Factor.tier: {\r\n        // if (BladesItem.IsType(this, BladesItemType.ability)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.background)) { return this.system.tier.value }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_gang)) {\r\n          return this.system.tier.value + (this.parent?.getFactorTotal(Factor.tier) ?? 0);\r\n        }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_expert)) {\r\n          return this.system.tier.value + (this.parent?.getFactorTotal(Factor.tier) ?? 0);\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_ability)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_reputation)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_playbook)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_upgrade)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.feature)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.heritage)) { return this.system.tier.value }\r\n        if (BladesItem.IsType(this, BladesItemType.gear)) {\r\n          return this.system.tier.value + (this.parent?.getFactorTotal(Factor.tier) ?? 0);\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.playbook)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.preferred_op)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.stricture)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.vice)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.project)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.ritual)) { return this.system.tier.value }\r\n        // if (BladesItem.IsType(this, BladesItemType.design)) { return this.system.tier.value }\r\n        return this.system.tier.value;\r\n      }\r\n      case Factor.quality: {\r\n        // if (BladesItem.IsType(this, BladesItemType.ability)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.background)) { return this.getFactorTotal(Factor.tier) }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_gang)) {\r\n          return this.getFactorTotal(Factor.tier) + (this.system.quality_bonus ?? 0);\r\n        }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_expert)) {\r\n          return this.getFactorTotal(Factor.tier) + (this.system.quality_bonus ?? 0) + 1;\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_ability)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_reputation)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_playbook)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_upgrade)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.feature)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.heritage)) { return this.getFactorTotal(Factor.tier) }\r\n        if (BladesItem.IsType(this, BladesItemType.gear)) {\r\n          return this.getFactorTotal(Factor.tier)\r\n            + (this.hasTag(\"Fine\") ? 1 : 0)\r\n            + (this.parent?.getTaggedItemBonuses(this.tags) ?? 0)\r\n            + (BladesActor.IsType(this.parent, BladesActorType.pc) && this.parent?.crew ? this.parent.crew.getTaggedItemBonuses(this.tags) : 0);\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.playbook)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.preferred_op)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.stricture)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.vice)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.project)) { return this.getFactorTotal(Factor.tier) }\r\n        // if (BladesItem.IsType(this, BladesItemType.ritual)) { return this.getFactorTotal(Factor.tier) }\r\n        if (BladesItem.IsType(this, BladesItemType.design)) { return this.system.min_quality }\r\n        return this.getFactorTotal(Factor.tier);\r\n      }\r\n      case Factor.scale: {\r\n        // if (BladesItem.IsType(this, BladesItemType.ability)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.background)) { return 0 }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_gang)) {\r\n          return this.getFactorTotal(Factor.tier) + (this.system.scale_bonus ?? 0);\r\n        }\r\n        if (BladesItem.IsType(this, BladesItemType.cohort_expert)) {\r\n          return 0 + (this.system.scale_bonus ?? 0);\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_ability)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_reputation)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_playbook)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_upgrade)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.feature)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.heritage)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.gear)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.playbook)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.preferred_op)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.stricture)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.vice)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.project)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.ritual)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.design)) { return 0 }\r\n        return 0;\r\n      }\r\n      case Factor.magnitude: {\r\n        // if (BladesItem.IsType(this, BladesItemType.ability)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.background)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.cohort_gang)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.cohort_expert)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_ability)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_reputation)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_playbook)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.crew_upgrade)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.feature)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.heritage)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.gear)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.playbook)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.preferred_op)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.stricture)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.vice)) { return 0 }\r\n        // if (BladesItem.IsType(this, BladesItemType.project)) { return 0 }\r\n        if (BladesItem.IsType(this, BladesItemType.ritual)) {\r\n          return this.system.magnitude.value;\r\n        }\r\n        // if (BladesItem.IsType(this, BladesItemType.design)) { return 0 }\r\n        return 0;\r\n      }\r\n      // no default\r\n    }\r\n    return 0;\r\n  }\r\n  // #endregion\r\n  // #region BladesItemDocument Implementation\r\n\r\n  async archive() {\r\n    await this.addTag(Tag.System.Archived);\r\n    return this;\r\n  }\r\n  async unarchive() {\r\n    await this.remTag(Tag.System.Archived);\r\n    return this;\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region BladesRollSource Implementation\r\n\r\n  get rollSourceID() { return this.id }\r\n  get rollSourceDoc() { return this }\r\n  get rollSourceImg() { return this.img ?? \"\" }\r\n  get rollSourceName() { return this.name ?? \"\" }\r\n  get rollSourceType() { return this.type }\r\n\r\n  get rollOppID() { return this.id }\r\n  get rollOppDoc() { return this }\r\n  get rollOppImg() { return this.img ?? \"\" }\r\n  get rollOppName() { return this.name ?? \"\" }\r\n  get rollOppSubName() { return \"\" }\r\n  get rollOppType() { return this.type }\r\n\r\n  get rollModsData(): BladesRollCollab.RollModData[] {\r\n    const {roll_mods} = this.system;\r\n    if (!roll_mods) { return [] }\r\n\r\n    const rollModsData: BladesRollCollab.RollModData[] = roll_mods.map((modString) => {\r\n      const pStrings = modString.split(/@/);\r\n      const nameString = U.pullElement(pStrings, (v) => typeof v === \"string\" && /^na/i.test(v));\r\n      const nameVal = (typeof nameString === \"string\" && nameString.replace(/^.*:/, \"\")) as string|false;\r\n      if (!nameVal) { throw new Error(`RollMod Missing Name: '${modString}'`) }\r\n      const catString = U.pullElement(pStrings, (v) => typeof v === \"string\" && /^cat/i.test(v));\r\n      const catVal = (typeof catString === \"string\" && catString.replace(/^.*:/, \"\")) as RollModCategory|false;\r\n      if (!catVal || !(catVal in RollModCategory)) { throw new Error(`RollMod Missing Category: '${modString}'`) }\r\n      const posNegString = (U.pullElement(pStrings, (v) => typeof v === \"string\" && /^p/i.test(v)) || \"posNeg:positive\");\r\n      const posNegVal = posNegString.replace(/^.*:/, \"\") as \"positive\"|\"negative\";\r\n\r\n      const rollModData: BladesRollCollab.RollModData = {\r\n        id: `${nameVal}-${posNegVal}-${catVal}`,\r\n        name: nameVal,\r\n        category: catVal,\r\n        base_status: RollModStatus.ToggledOff,\r\n        modType: \"general\",\r\n        value: 1,\r\n        posNeg: posNegVal,\r\n        tooltip: \"\"\r\n      };\r\n\r\n      pStrings.forEach((pString) => {\r\n        const [keyString, valString] = pString.split(/:/) as [string, string];\r\n        let val: string|string[] = /\\|/.test(valString) ? valString.split(/\\|/) : valString;\r\n        let key: KeyOf<BladesRollCollab.RollModData>;\r\n        if (/^stat/i.test(keyString)) { key = \"base_status\" } else\r\n        if (/^val/i.test(keyString)) { key = \"value\" } else\r\n        if (/^eff|^ekey/i.test(keyString)) { key = \"effectKeys\" } else\r\n        if (/^side|^ss/i.test(keyString)) { key = \"sideString\" } else\r\n        if (/^s.*ame/i.test(keyString)) { key = \"source_name\" } else\r\n        if (/^tool|^tip/i.test(keyString)) { key = \"tooltip\" } else\r\n        if (/^ty/i.test(keyString)) { key = \"modType\" } else\r\n        if (/^c.*r?.*ty/i.test(keyString)) { key = \"conditionalRollTypes\" } else\r\n        if (/^a.*r?.*y/i.test(keyString)) { key = \"autoRollTypes\" } else\r\n        if (/^c.*r?.*tr/i.test(keyString)) { key = \"conditionalRollTraits\" } else\r\n        if (/^a.*r?.*tr/i.test(keyString)) { key = \"autoRollTraits\" } else {\r\n          throw new Error(`Bad Roll Mod Key: ${keyString}`);\r\n        }\r\n\r\n        if (key === \"base_status\" && val === \"Conditional\") {\r\n          val = RollModStatus.Hidden;\r\n        }\r\n\r\n        Object.assign(\r\n          rollModData,\r\n          {[key]: [\"value\"].includes(key)\r\n            ? U.pInt(val)\r\n            : ([\"effectKeys\", \"conditionalRollTypes\", \"autoRollTypes,\", \"conditionalRollTraits\", \"autoRollTraits\"].includes(key)\r\n                ? [val].flat()\r\n                : (val as string).replace(/%COLON%/g, \":\"))}\r\n        );\r\n      });\r\n\r\n      return rollModData;\r\n    });\r\n\r\n    // Add roll mods from COHORT harm\r\n    // [[/1d/, RollModCategory.roll] as const, [/Less Effect/, RollModCategory.effect] as const].forEach(([effectPat, effectCat]) => {\r\n    //   const {one: harmConditionOne, two: harmConditionTwo} = Object.values(this.system.harm ?? {})\r\n    //     .find((harmData) => effectPat.test(harmData.effect)) ?? {};\r\n    //   const harmString = U.objCompact([harmConditionOne, harmConditionTwo === \"\" ? null : harmConditionTwo]).join(\" & \");\r\n    //   if (harmString.length > 0) {\r\n    //     rollModsData.push({\r\n    //       id: `Harm-negative-${effectCat}`,\r\n    //       name: harmString,\r\n    //       category: effectCat,\r\n    //       posNeg: \"negative\",\r\n    //       base_status: RollModStatus.ToggledOn,\r\n    //       modType: \"harm\",\r\n    //       value: 1,\r\n    //       tooltip: [\r\n    //         `<h1 class='red-bright'><strong>Harm:</strong> ${harmString}</h1>`,\r\n    //         effectCat === RollModCategory.roll\r\n    //           ? \"<p>If your injuries apply to the situation at hand, you suffer <strong class='red-bright'>−1d</strong> to your roll.</p>\"\r\n    //           : \"<p>If your injuries apply to the situation at hand, you suffer <strong class='red-bright'>−1 effect</strong>.\"\r\n    //       ].join(\"\")\r\n    //     });\r\n    //   }\r\n    // });\r\n\r\n    // eLog.checkLog3(\"rollCollab\", `Roll Mods (${this.name})`, {system: this.system.roll_mods, rollMods});\r\n\r\n    return rollModsData;\r\n  }\r\n\r\n  get rollFactors(): Partial<Record<Factor,BladesRollCollab.FactorData>> {\r\n    const factorsMap: Partial<Record<BladesItemType, Factor[]>> = {\r\n      [BladesItemType.ability]: [],\r\n      [BladesItemType.background]: [],\r\n      [BladesItemType.cohort_gang]: [Factor.quality, Factor.scale],\r\n      [BladesItemType.cohort_expert]: [Factor.quality, Factor.scale],\r\n      [BladesItemType.crew_ability]: [],\r\n      [BladesItemType.crew_reputation]: [],\r\n      [BladesItemType.crew_playbook]: [],\r\n      [BladesItemType.crew_upgrade]: [],\r\n      [BladesItemType.feature]: [],\r\n      [BladesItemType.heritage]: [],\r\n      [BladesItemType.gear]: [Factor.quality],\r\n      [BladesItemType.playbook]: [],\r\n      [BladesItemType.preferred_op]: [],\r\n      [BladesItemType.stricture]: [],\r\n      [BladesItemType.vice]: [],\r\n      [BladesItemType.project]: [Factor.quality],\r\n      [BladesItemType.ritual]: [Factor.magnitude],\r\n      [BladesItemType.design]: [Factor.quality]\r\n    };\r\n    if (!factorsMap[this.type]) { return {} }\r\n\r\n    const factors = factorsMap[this.type];\r\n\r\n    const factorData: Partial<Record<Factor,BladesRollCollab.FactorData>> = {};\r\n    factors!.forEach((factor, i) => {\r\n      const factorTotal = this.getFactorTotal(factor);\r\n      factorData[factor] = {\r\n        name: factor,\r\n        value: factorTotal,\r\n        max: factorTotal,\r\n        baseVal: factorTotal,\r\n        display: [Factor.tier, Factor.quality].includes(factor) ? U.romanizeNum(factorTotal) : `${factorTotal}`,\r\n        isActive: i === 0,\r\n        isPrimary: i === 0,\r\n        isDominant: false,\r\n        highFavorsPC: true,\r\n        cssClasses: `factor-gold${i === 0 ? \" factor-main\" : \"\"}`\r\n      };\r\n    });\r\n\r\n    return factorData;\r\n  }\r\n  // #endregion\r\n\r\n  // #region PREPARING DERIVED DATA\r\n  override prepareDerivedData() {\r\n    super.prepareDerivedData();\r\n    // if (BladesItem.IsType(this, BladesItemType.ability)) { this._prepareAbilityData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.background)) { this._prepareBackgroundData(this.system) }\r\n    if (BladesItem.IsType(this, BladesItemType.cohort_gang, BladesItemType.cohort_expert)) { this._prepareCohortData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.crew_ability)) { this._prepareCrewAbilityData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.crew_reputation)) { this._prepareCrewReputationData(this.system) }\r\n    if (BladesItem.IsType(this, BladesItemType.crew_playbook)) { this._preparePlaybookData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.crew_upgrade)) { this._prepareCrewUpgradeData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.feature)) { this._prepareFeatureData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.heritage)) { this._prepareHeritageData(this.system) }\r\n    if (BladesItem.IsType(this, BladesItemType.gear)) { this._prepareGearData(this.system) }\r\n    if (BladesItem.IsType(this, BladesItemType.playbook)) { this._preparePlaybookData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.preferred_op)) { this._preparePreferredOpData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.stricture)) { this._prepareStrictureData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.vice)) { this._prepareViceData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.project)) { this._prepareProjectData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.ritual)) { this._prepareRitualData(this.system) }\r\n    // if (BladesItem.IsType(this, BladesItemType.design)) { this._prepareDesignData(this.system) }\r\n  }\r\n\r\n\r\n  _prepareCohortData(system: ExtractBladesItemSystem<BladesItemType.cohort_gang|BladesItemType.cohort_expert>) {\r\n    if (!BladesItem.IsType(this, BladesItemType.cohort_gang, BladesItemType.cohort_expert)) { return }\r\n\r\n    system.tier.name = \"Quality\";\r\n\r\n    const subtypes = U.unique(Object.values(system.subtypes)\r\n      .map((subtype) => subtype.trim())\r\n      .filter((subtype) => /[A-Za-z]/.test(subtype)));\r\n    const elite_subtypes = U.unique([\r\n      ...Object.values(system.elite_subtypes),\r\n      ...(this.parent?.upgrades ?? [])\r\n        .filter((upgrade) => /^Elite/.test(upgrade.name ?? \"\"))\r\n        .map((upgrade) => (upgrade.name ?? \"\").trim().replace(/^Elite /, \"\"))\r\n    ]\r\n      .map((subtype) => subtype.trim())\r\n      .filter((subtype) => /[A-Za-z]/.test(subtype) && subtypes.includes(subtype)));\r\n\r\n    // Add parent-crew's elite subtype upgrades\r\n    // if (BladesActor.IsType(this.parent, BladesActorType.crew)) {\r\n    //   elite_subtypes.push(...this.parent.upgrades\r\n    //     .map((upgrade) => (upgrade.name ?? \"\").trim().replace(/^Elite /, \"\"))\r\n    //     .filter((upgradeName) => subtypes.includes(upgradeName)));\r\n    // }\r\n\r\n    system.subtypes = Object.fromEntries(subtypes.map((subtype, i) => [`${i + 1}`, subtype]));\r\n    system.elite_subtypes = Object.fromEntries(elite_subtypes.map((subtype, i) => [`${i + 1}`, subtype]));\r\n    system.edges = Object.fromEntries(Object.values(system.edges ?? [])\r\n      .filter((edge) => /[A-Za-z]/.test(edge))\r\n      .map((edge, i) => [`${i + 1}`, edge.trim()]));\r\n    system.flaws = Object.fromEntries(Object.values(system.flaws ?? [])\r\n      .filter((flaw) => /[A-Za-z]/.test(flaw))\r\n      .map((flaw, i) => [`${i + 1}`, flaw.trim()]));\r\n\r\n    system.quality = this.getFactorTotal(Factor.quality);\r\n\r\n    if (BladesItem.IsType(this, BladesItemType.cohort_gang)) {\r\n      if ([...subtypes, ...elite_subtypes].includes(Tag.GangType.Vehicle)) {\r\n        system.scale = this.getFactorTotal(Factor.scale);\r\n        system.scaleExample = \"(1 vehicle)\";\r\n      } else {\r\n        system.scale = this.getFactorTotal(Factor.scale);\r\n        const scaleIndex = Math.min(6, system.scale);\r\n        system.scaleExample = C.ScaleExamples[scaleIndex];\r\n        system.subtitle = C.ScaleSizes[scaleIndex];\r\n      }\r\n      if (subtypes.length + elite_subtypes.length === 0) {\r\n        system.subtitle = system.subtitle.replace(/\\s+of\\s*/g, \"\");\r\n      }\r\n    } else {\r\n      system.scale = 0;\r\n      system.scaleExample = [...subtypes, ...elite_subtypes].includes(\"Pet\") ? \"(1 animal)\" : \"(1 person)\";\r\n      system.subtitle = \"An Expert\";\r\n    }\r\n\r\n    if (subtypes.length + elite_subtypes.length > 0) {\r\n      if ([...subtypes, ...elite_subtypes].includes(Tag.GangType.Vehicle)) {\r\n        system.subtitle = C.VehicleDescriptors[Math.min(6, this.getFactorTotal(Factor.tier))];\r\n      } else {\r\n        system.subtitle += ` ${U.oxfordize([\r\n          ...subtypes.filter((subtype) => !elite_subtypes.includes(subtype)),\r\n          ...elite_subtypes.map((subtype) => `Elite ${subtype}`)\r\n        ], false, \"&\")}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  _prepareGearData(system: ExtractBladesItemSystem<BladesItemType.gear>) {\r\n    if (!BladesItem.IsType(this, BladesItemType.gear)) { return }\r\n    system.tier.name = \"Quality\";\r\n  }\r\n\r\n  _preparePlaybookData(system: ExtractBladesItemSystem<BladesItemType.playbook|BladesItemType.crew_playbook>) {\r\n    if (!BladesItem.IsType(this, BladesItemType.playbook, BladesItemType.crew_playbook)) { return }\r\n    const expClueData: Record<string,string> = {};\r\n    [...Object.values(system.experience_clues).filter((clue) => /[A-Za-z]/.test(clue)), \" \"].forEach((clue, i) => { expClueData[(i + 1).toString()] = clue });\r\n    system.experience_clues = expClueData as any;\r\n    eLog.checkLog3(\"experienceClues\", {expClueData});\r\n\r\n    if (BladesItem.IsType(this, BladesItemType.playbook)) {\r\n      const gatherInfoData: Record<string,string> = {};\r\n      [...Object.values((<ExtractBladesItemSystem<BladesItemType.playbook>>system).gather_info_questions).filter((question) => /[A-Za-z]/.test(question)), \" \"].forEach((question, i) => { gatherInfoData[(i + 1).toString()] = question });\r\n      (<ExtractBladesItemSystem<BladesItemType.playbook>>system).gather_info_questions = gatherInfoData as any;\r\n      eLog.checkLog3(\"gatherInfoQuestions\", {gatherInfoData});\r\n\r\n    }\r\n  }\r\n  // #endregion\r\n}\r\n\r\ndeclare interface BladesItem {\r\n  get id(): string;\r\n  get type(): BladesItemType,\r\n  parent: BladesActor | null,\r\n  system: BladesItemSystem\r\n}\r\n\r\nexport default BladesItem;"]}