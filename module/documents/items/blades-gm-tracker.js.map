{"version":3,"sources":["../../ts/documents/items/blades-gm-tracker.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,sBAAsB,CAAC;AAC9C,OAAU,EAAU,eAAe,EAAE,cAAc,EAAO,WAAW,EAAqD,MAAM,yBAAyB,CAAC;AAE1J,OAAO,WAAW,MAAM,uBAAuB,CAAC;AAGhD,wBAAwB;AACxB,MAAM,eAAgB,SAAQ,UAAU;IACxC,wBAAwB;IACtB,IAAI,KAAK,KAAwB,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAA,CAAC,CAAC;IACjH,IAAI,KAAK,CAAC,KAAwB;QAChC,IAAI,KAAK,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,UAAU,CAAC,EAAE;YAC/D,IAAI,CAAC,MAAM,CAAC,EAAC,cAAc,EAAE,KAAK,EAAC,CAAC,CAAC;SACtC;IACH,CAAC;IACH,wBAAwB;IACb,kBAAkB;QACzB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAClD,CAAC;IACH,wBAAwB;IACtB,mDAAmD;IAC1C,KAAK,CAAC,SAAS,CAAC,OAAY,EAAE,OAAY,EAAE,MAAc;QACjE,MAAM,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAChD,WAAW,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IACrF,CAAC;CAGF;AAMD,wBAAwB;AACxB,eAAe,eAAe,CAAC","file":"blades-gm-tracker.js","sourcesContent":["import BladesItem from \"../../blades-item.js\";\r\nimport C, {SVGDATA, BladesActorType, BladesItemType, Tag, BladesPhase, RollModCategory, PrereqType, Factor, RollModStatus} from \"../../core/constants.js\";\r\nimport U from \"../../core/utilities.js\";\r\nimport BladesActor from \"../../blades-actor.js\";\r\nimport BladesRollCollab from \"../../blades-roll-collab.js\";\r\nimport type {ItemDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/itemData.js\";\r\n\r\nclass BladesGMTracker extends BladesItem implements BladesItemSubClass.Gm_Tracker {\r\n\r\n  get phase(): BladesPhase|false { return BladesItem.IsType(this, BladesItemType.gm_tracker) && this.system.phase }\r\n  set phase(phase: BladesPhase|false) {\r\n    if (phase && BladesItem.IsType(this, BladesItemType.gm_tracker)) {\r\n      this.update({\"system.phase\": phase});\r\n    }\r\n  }\r\n\r\n  override prepareDerivedData() {\r\n    this.system.phases = Object.values(BladesPhase);\r\n  }\r\n\r\n  // #region OVERRIDES: prepareDerivedData, _onUpdate\r\n  override async _onUpdate(changed: any, options: any, userId: string) {\r\n    await super._onUpdate(changed, options, userId);\r\n    BladesActor.GetTypeWithTags(BladesActorType.pc).forEach((actor) => actor.render());\r\n  }\r\n  // #endregion\r\n\r\n}\r\n\r\ndeclare interface BladesGMTracker {\r\n  type: BladesItemType.gm_tracker,\r\n  system: BladesItemSchema.Gm_Tracker\r\n}\r\n\r\n\r\nexport default BladesGMTracker;"]}