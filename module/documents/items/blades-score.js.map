{"version":3,"sources":["../../ts/documents/items/blades-score.ts"],"names":[],"mappings":"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","file":"blades-score.js","sourcesContent":["import BladesItem from \"../../blades-item.js\";\r\nimport C, {SVGDATA, BladesActorType, BladesItemType, Tag, BladesPhase, RollModCategory, PrereqType, Factor, RollModStatus} from \"../../core/constants.js\";\r\nimport U from \"../../core/utilities.js\";\r\nimport BladesActor from \"../../blades-actor.js\";\r\nimport BladesRollCollab from \"../../blades-roll-collab.js\";\r\nimport BladesScoreSheet from \"../../sheets/item/blades-score-sheet.js\";\r\n\r\n\r\nclass BladesScore extends BladesItem implements BladesItemSubClass.Score,\r\n  BladesRollCollab.OppositionDocData {\r\n\r\n  // #region INITIALIZATION ~\r\n  static async Initialize() {\r\n    game.eunoblades ??= {};\r\n    Object.assign(globalThis, {BladesScore, BladesScoreSheet});\r\n    Items.registerSheet(\"blades\", BladesScoreSheet, {types: [\"score\"], makeDefault: true});\r\n    return loadTemplates([\"systems/eunos-blades/templates/items/score-sheet.hbs\"]);\r\n  }\r\n  // #endregion\r\n\r\n  static get Active(): BladesItemOfType<BladesItemType.score>|undefined {\r\n    return BladesItem.GetTypeWithTags(BladesItemType.score).find((score) => score.system.isActive);\r\n  }\r\n  static set Active(val: BladesItemOfType<BladesItemType.score>|undefined) {\r\n    BladesItem.GetTypeWithTags(BladesItemType.score)\r\n      .find((score) => score.system.isActive)?.update({\"system.isActive\": false})\r\n      .then(() => {\r\n        if (val) {\r\n          val.update({\"system.isActive\": true});\r\n        }\r\n      });\r\n  }\r\n\r\n  // #region BladesRollCollab.OppositionDocData Implementation\r\n  override get rollFactors(): Partial<Record<Factor, BladesRollCollab.FactorData>> {\r\n\r\n    const tierTotal = this.getFactorTotal(Factor.tier);\r\n    return {\r\n      [Factor.tier]: {\r\n        name: \"Tier\",\r\n        value: tierTotal,\r\n        max: tierTotal,\r\n        baseVal: tierTotal,\r\n        display: U.romanizeNum(tierTotal),\r\n        isActive: true,\r\n        isPrimary: true,\r\n        isDominant: false,\r\n        highFavorsPC: true,\r\n        cssClasses: \"factor-gold factor-main\"\r\n      }\r\n    };\r\n  }\r\n  override get rollOppImg() { return this.img ?? \"\" }\r\n  override getFactorTotal(factor: Factor): number {\r\n    switch (factor) {\r\n      case Factor.tier: return this.system.tier.value;\r\n      case Factor.quality: return this.getFactorTotal(Factor.tier);\r\n      case Factor.scale: return 0;\r\n      case Factor.magnitude: return 0;\r\n      // no default\r\n    }\r\n    return 0 as never;\r\n  }\r\n  // #endregion\r\n\r\n  // #region OVERRIDES: _onUpdate\r\n  override async _onUpdate(changed: any, options: any, userId: string) {\r\n    await super._onUpdate(changed, options, userId);\r\n    BladesActor.GetTypeWithTags(BladesActorType.pc).forEach((actor) => actor.render());\r\n  }\r\n  // #endregion\r\n\r\n}\r\n\r\ndeclare interface BladesScore {\r\n  type: BladesItemType.score,\r\n  system: BladesItemSchema.Score\r\n}\r\n\r\nexport default BladesScore;"]}