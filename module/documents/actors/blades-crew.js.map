{"version":3,"sources":["../../ts/documents/actors/blades-crew.ts"],"names":[],"mappings":"AACA,OAAU,EAAqC,cAAc,EAAuE,MAAM,yBAAyB,CAAC;AAEpK,OAAO,WAAW,MAAM,uBAAuB,CAAC;AAIhD,wBAAwB;AACxB,MAAM,UAAW,SAAQ,WAAW;IACpC,wBAAwB;IACtB,qCAAqC;IACrC,MAAM,CAAU,KAAK,CAAC,MAAM,CAAC,IAA6E,EAAE,OAAO,GAAG,EAAE;QACtH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QACpC,wBAAwB;QACpB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,kCAAkC,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC;QACjF,wBAAwB;QACpB,yDAAyD;QACzD,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;QAChC,wBAAwB;QACpB,qBAAqB;QACrB,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC1H,wBAAwB;QACpB,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;YACvB,QAAQ,EAAE,EAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC;YAC5B,KAAK,EAAE,EAAE;YACT,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE;SACQ,CAAC;QAC9C,wBAAwB;QACpB,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IACD,aAAa;IACf,wBAAwB;IACtB,IAAI,SAAS;QACX,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAAE,OAAO,EAAE,CAAA;SAAE;QACjC,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACzH,CAAC;IACH,wBAAwB;IACtB,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,QAAQ,EAAE,IAA0C,CAAC;IACnE,CAAC;IACD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAA0D,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,aAAa,CAAC,CAAC;IAChJ,CAAC;CAEF;AAMD,wBAAwB;AACxB,eAAe,UAAU,CAAC","file":"blades-crew.js","sourcesContent":["import BladesItem from \"../../blades-item.js\";\r\nimport C, {SVGDATA, BladesActorType, Playbook, BladesItemType, Tag, BladesPhase, RollModCategory, PrereqType, Factor, RollModStatus} from \"../../core/constants.js\";\r\nimport U from \"../../core/utilities.js\";\r\nimport BladesActor from \"../../blades-actor.js\";\r\nimport BladesRollCollab from \"../../blades-roll-collab.js\";\r\nimport type {ItemDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/itemData.js\";\r\nimport type {ActorData, ActorDataConstructorData} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/actorData.js\";\r\n\r\nclass BladesCrew extends BladesActor implements BladesActorSubClass.Crew {\r\n\r\n  // #region Static Overrides: Create ~\r\n  static override async create(data: ActorDataConstructorData & { system?: Partial<BladesActorSchema.Crew> }, options = {}) {\r\n    data.token = data.token || {};\r\n    data.system = data.system ?? {};\r\n\r\n    eLog.checkLog2(\"actor\", \"BladesActor.create(data,options)\", {data, options});\r\n\r\n    //~ For Crew and PC set the Token to sync with charsheet.\r\n    data.token.actorLink = true;\r\n\r\n    //~ Create world_name\r\n    data.system.world_name = data.system.world_name ?? data.name.replace(/[^A-Za-z_0-9 ]/g, \"\").trim().replace(/ /g, \"_\");\r\n\r\n    //~ Initialize generic experience clues.\r\n    data.system.experience = {\r\n      playbook: {value: 0, max: 8},\r\n      clues: [],\r\n      ...data.system.experience ?? {}\r\n    } as BladesActorSchema.Crew[\"experience\"];\r\n\r\n\r\n    return super.create(data, options);\r\n  }\r\n  // #endregion\r\n\r\n\r\n  get abilities(): BladesItem[] {\r\n    if (!this.playbook) { return [] }\r\n    return this.activeSubItems.filter((item) => [BladesItemType.ability, BladesItemType.crew_ability].includes(item.type));\r\n  }\r\n\r\n  get playbookName() {\r\n    return this.playbook?.name as (BladesTag & Playbook) | undefined;\r\n  }\r\n  get playbook(): BladesItemOfType<BladesItemType.crew_playbook>|undefined {\r\n    return this.activeSubItems.find((item): item is BladesItemOfType<BladesItemType.crew_playbook> => item.type === BladesItemType.crew_playbook);\r\n  }\r\n\r\n}\r\n\r\ndeclare interface BladesCrew {\r\n  type: BladesActorType.crew,\r\n  system: BladesActorSchema.Crew\r\n}\r\n\r\nexport default BladesCrew;"]}